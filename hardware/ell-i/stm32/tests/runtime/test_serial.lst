
tests/runtime/test_serial:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 20 00 20 6d 1f 00 08 bd 1f 00 08 bd 1f 00 08     . . m...........
	...
 800002c:	bd 1f 00 08 00 00 00 00 00 00 00 00 8d 27 00 08     .............'..
 800003c:	15 21 00 08 bd 1f 00 08 bd 1f 00 08 bd 1f 00 08     .!..............
 800004c:	bd 1f 00 08 bd 1f 00 08 bd 1f 00 08 bd 1f 00 08     ................
 800005c:	bd 1f 00 08 bd 1f 00 08 bd 1f 00 08 bd 1f 00 08     ................
 800006c:	bd 1f 00 08 bd 1f 00 08 bd 1f 00 08 bd 1f 00 08     ................
 800007c:	bd 1f 00 08 bd 1f 00 08 bd 1f 00 08 00 00 00 00     ................
 800008c:	bd 1f 00 08 bd 1f 00 08 bd 1f 00 08 bd 1f 00 08     ................
 800009c:	bd 1f 00 08 bd 1f 00 08 bd 1f 00 08 bd 1f 00 08     ................
 80000ac:	05 21 00 08 f5 20 00 08 00 00 00 00 bd 1f 00 08     .!... ..........
 80000bc:	00 00 00 00 5f f8 08 f1                             ...._...

080000c4 <__do_global_dtors_aux>:
 80000c4:	b500      	push	{lr}
 80000c6:	4b03      	ldr	r3, [pc, #12]	; (80000d4 <__do_global_dtors_aux+0x10>)
 80000c8:	781a      	ldrb	r2, [r3, #0]
 80000ca:	2a00      	cmp	r2, #0
 80000cc:	d101      	bne.n	80000d2 <__do_global_dtors_aux+0xe>
 80000ce:	2001      	movs	r0, #1
 80000d0:	7018      	strb	r0, [r3, #0]
 80000d2:	bd00      	pop	{pc}
 80000d4:	20000e8c 	.word	0x20000e8c

080000d8 <frame_dummy>:
 80000d8:	b508      	push	{r3, lr}
 80000da:	4804      	ldr	r0, [pc, #16]	; (80000ec <frame_dummy+0x14>)
 80000dc:	6803      	ldr	r3, [r0, #0]
 80000de:	2b00      	cmp	r3, #0
 80000e0:	d003      	beq.n	80000ea <frame_dummy+0x12>
 80000e2:	4b03      	ldr	r3, [pc, #12]	; (80000f0 <frame_dummy+0x18>)
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d000      	beq.n	80000ea <frame_dummy+0x12>
 80000e8:	4798      	blx	r3
 80000ea:	bd08      	pop	{r3, pc}
 80000ec:	20000e8c 	.word	0x20000e8c
 80000f0:	00000000 	.word	0x00000000

080000f4 <__aeabi_uidiv>:
 80000f4:	2900      	cmp	r1, #0
 80000f6:	d034      	beq.n	8000162 <.udivsi3_nodiv0+0x6a>

080000f8 <.udivsi3_nodiv0>:
 80000f8:	2301      	movs	r3, #1
 80000fa:	2200      	movs	r2, #0
 80000fc:	b410      	push	{r4}
 80000fe:	4288      	cmp	r0, r1
 8000100:	d32c      	bcc.n	800015c <.udivsi3_nodiv0+0x64>
 8000102:	2401      	movs	r4, #1
 8000104:	0724      	lsls	r4, r4, #28
 8000106:	42a1      	cmp	r1, r4
 8000108:	d204      	bcs.n	8000114 <.udivsi3_nodiv0+0x1c>
 800010a:	4281      	cmp	r1, r0
 800010c:	d202      	bcs.n	8000114 <.udivsi3_nodiv0+0x1c>
 800010e:	0109      	lsls	r1, r1, #4
 8000110:	011b      	lsls	r3, r3, #4
 8000112:	e7f8      	b.n	8000106 <.udivsi3_nodiv0+0xe>
 8000114:	00e4      	lsls	r4, r4, #3
 8000116:	42a1      	cmp	r1, r4
 8000118:	d204      	bcs.n	8000124 <.udivsi3_nodiv0+0x2c>
 800011a:	4281      	cmp	r1, r0
 800011c:	d202      	bcs.n	8000124 <.udivsi3_nodiv0+0x2c>
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	005b      	lsls	r3, r3, #1
 8000122:	e7f8      	b.n	8000116 <.udivsi3_nodiv0+0x1e>
 8000124:	4288      	cmp	r0, r1
 8000126:	d301      	bcc.n	800012c <.udivsi3_nodiv0+0x34>
 8000128:	1a40      	subs	r0, r0, r1
 800012a:	431a      	orrs	r2, r3
 800012c:	084c      	lsrs	r4, r1, #1
 800012e:	42a0      	cmp	r0, r4
 8000130:	d302      	bcc.n	8000138 <.udivsi3_nodiv0+0x40>
 8000132:	1b00      	subs	r0, r0, r4
 8000134:	085c      	lsrs	r4, r3, #1
 8000136:	4322      	orrs	r2, r4
 8000138:	088c      	lsrs	r4, r1, #2
 800013a:	42a0      	cmp	r0, r4
 800013c:	d302      	bcc.n	8000144 <.udivsi3_nodiv0+0x4c>
 800013e:	1b00      	subs	r0, r0, r4
 8000140:	089c      	lsrs	r4, r3, #2
 8000142:	4322      	orrs	r2, r4
 8000144:	08cc      	lsrs	r4, r1, #3
 8000146:	42a0      	cmp	r0, r4
 8000148:	d302      	bcc.n	8000150 <.udivsi3_nodiv0+0x58>
 800014a:	1b00      	subs	r0, r0, r4
 800014c:	08dc      	lsrs	r4, r3, #3
 800014e:	4322      	orrs	r2, r4
 8000150:	2800      	cmp	r0, #0
 8000152:	d003      	beq.n	800015c <.udivsi3_nodiv0+0x64>
 8000154:	091b      	lsrs	r3, r3, #4
 8000156:	d001      	beq.n	800015c <.udivsi3_nodiv0+0x64>
 8000158:	0909      	lsrs	r1, r1, #4
 800015a:	e7e3      	b.n	8000124 <.udivsi3_nodiv0+0x2c>
 800015c:	1c10      	adds	r0, r2, #0
 800015e:	bc10      	pop	{r4}
 8000160:	4770      	bx	lr
 8000162:	2800      	cmp	r0, #0
 8000164:	d001      	beq.n	800016a <.udivsi3_nodiv0+0x72>
 8000166:	2000      	movs	r0, #0
 8000168:	43c0      	mvns	r0, r0
 800016a:	b407      	push	{r0, r1, r2}
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <.udivsi3_nodiv0+0x80>)
 800016e:	a102      	add	r1, pc, #8	; (adr r1, 8000178 <.udivsi3_nodiv0+0x80>)
 8000170:	1840      	adds	r0, r0, r1
 8000172:	9002      	str	r0, [sp, #8]
 8000174:	bd03      	pop	{r0, r1, pc}
 8000176:	46c0      	nop			; (mov r8, r8)
 8000178:	000000d9 	.word	0x000000d9

0800017c <__aeabi_uidivmod>:
 800017c:	2900      	cmp	r1, #0
 800017e:	d0f0      	beq.n	8000162 <.udivsi3_nodiv0+0x6a>
 8000180:	b503      	push	{r0, r1, lr}
 8000182:	f7ff ffb9 	bl	80000f8 <.udivsi3_nodiv0>
 8000186:	bc0e      	pop	{r1, r2, r3}
 8000188:	4342      	muls	r2, r0
 800018a:	1a89      	subs	r1, r1, r2
 800018c:	4718      	bx	r3
 800018e:	46c0      	nop			; (mov r8, r8)

08000190 <__aeabi_idiv>:
 8000190:	2900      	cmp	r1, #0
 8000192:	d041      	beq.n	8000218 <.divsi3_nodiv0+0x84>

08000194 <.divsi3_nodiv0>:
 8000194:	b410      	push	{r4}
 8000196:	1c04      	adds	r4, r0, #0
 8000198:	404c      	eors	r4, r1
 800019a:	46a4      	mov	ip, r4
 800019c:	2301      	movs	r3, #1
 800019e:	2200      	movs	r2, #0
 80001a0:	2900      	cmp	r1, #0
 80001a2:	d500      	bpl.n	80001a6 <.divsi3_nodiv0+0x12>
 80001a4:	4249      	negs	r1, r1
 80001a6:	2800      	cmp	r0, #0
 80001a8:	d500      	bpl.n	80001ac <.divsi3_nodiv0+0x18>
 80001aa:	4240      	negs	r0, r0
 80001ac:	4288      	cmp	r0, r1
 80001ae:	d32c      	bcc.n	800020a <.divsi3_nodiv0+0x76>
 80001b0:	2401      	movs	r4, #1
 80001b2:	0724      	lsls	r4, r4, #28
 80001b4:	42a1      	cmp	r1, r4
 80001b6:	d204      	bcs.n	80001c2 <.divsi3_nodiv0+0x2e>
 80001b8:	4281      	cmp	r1, r0
 80001ba:	d202      	bcs.n	80001c2 <.divsi3_nodiv0+0x2e>
 80001bc:	0109      	lsls	r1, r1, #4
 80001be:	011b      	lsls	r3, r3, #4
 80001c0:	e7f8      	b.n	80001b4 <.divsi3_nodiv0+0x20>
 80001c2:	00e4      	lsls	r4, r4, #3
 80001c4:	42a1      	cmp	r1, r4
 80001c6:	d204      	bcs.n	80001d2 <.divsi3_nodiv0+0x3e>
 80001c8:	4281      	cmp	r1, r0
 80001ca:	d202      	bcs.n	80001d2 <.divsi3_nodiv0+0x3e>
 80001cc:	0049      	lsls	r1, r1, #1
 80001ce:	005b      	lsls	r3, r3, #1
 80001d0:	e7f8      	b.n	80001c4 <.divsi3_nodiv0+0x30>
 80001d2:	4288      	cmp	r0, r1
 80001d4:	d301      	bcc.n	80001da <.divsi3_nodiv0+0x46>
 80001d6:	1a40      	subs	r0, r0, r1
 80001d8:	431a      	orrs	r2, r3
 80001da:	084c      	lsrs	r4, r1, #1
 80001dc:	42a0      	cmp	r0, r4
 80001de:	d302      	bcc.n	80001e6 <.divsi3_nodiv0+0x52>
 80001e0:	1b00      	subs	r0, r0, r4
 80001e2:	085c      	lsrs	r4, r3, #1
 80001e4:	4322      	orrs	r2, r4
 80001e6:	088c      	lsrs	r4, r1, #2
 80001e8:	42a0      	cmp	r0, r4
 80001ea:	d302      	bcc.n	80001f2 <.divsi3_nodiv0+0x5e>
 80001ec:	1b00      	subs	r0, r0, r4
 80001ee:	089c      	lsrs	r4, r3, #2
 80001f0:	4322      	orrs	r2, r4
 80001f2:	08cc      	lsrs	r4, r1, #3
 80001f4:	42a0      	cmp	r0, r4
 80001f6:	d302      	bcc.n	80001fe <.divsi3_nodiv0+0x6a>
 80001f8:	1b00      	subs	r0, r0, r4
 80001fa:	08dc      	lsrs	r4, r3, #3
 80001fc:	4322      	orrs	r2, r4
 80001fe:	2800      	cmp	r0, #0
 8000200:	d003      	beq.n	800020a <.divsi3_nodiv0+0x76>
 8000202:	091b      	lsrs	r3, r3, #4
 8000204:	d001      	beq.n	800020a <.divsi3_nodiv0+0x76>
 8000206:	0909      	lsrs	r1, r1, #4
 8000208:	e7e3      	b.n	80001d2 <.divsi3_nodiv0+0x3e>
 800020a:	1c10      	adds	r0, r2, #0
 800020c:	4664      	mov	r4, ip
 800020e:	2c00      	cmp	r4, #0
 8000210:	d500      	bpl.n	8000214 <.divsi3_nodiv0+0x80>
 8000212:	4240      	negs	r0, r0
 8000214:	bc10      	pop	{r4}
 8000216:	4770      	bx	lr
 8000218:	2800      	cmp	r0, #0
 800021a:	d006      	beq.n	800022a <.divsi3_nodiv0+0x96>
 800021c:	db03      	blt.n	8000226 <.divsi3_nodiv0+0x92>
 800021e:	2000      	movs	r0, #0
 8000220:	43c0      	mvns	r0, r0
 8000222:	0840      	lsrs	r0, r0, #1
 8000224:	e001      	b.n	800022a <.divsi3_nodiv0+0x96>
 8000226:	2080      	movs	r0, #128	; 0x80
 8000228:	0600      	lsls	r0, r0, #24
 800022a:	b407      	push	{r0, r1, r2}
 800022c:	4802      	ldr	r0, [pc, #8]	; (8000238 <.divsi3_nodiv0+0xa4>)
 800022e:	a102      	add	r1, pc, #8	; (adr r1, 8000238 <.divsi3_nodiv0+0xa4>)
 8000230:	1840      	adds	r0, r0, r1
 8000232:	9002      	str	r0, [sp, #8]
 8000234:	bd03      	pop	{r0, r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	00000019 	.word	0x00000019

0800023c <__aeabi_idivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0eb      	beq.n	8000218 <.divsi3_nodiv0+0x84>
 8000240:	b503      	push	{r0, r1, lr}
 8000242:	f7ff ffa7 	bl	8000194 <.divsi3_nodiv0>
 8000246:	bc0e      	pop	{r1, r2, r3}
 8000248:	4342      	muls	r2, r0
 800024a:	1a89      	subs	r1, r1, r2
 800024c:	4718      	bx	r3
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_idiv0>:
 8000250:	4770      	bx	lr
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <__aeabi_cdrcmple>:
 8000254:	4684      	mov	ip, r0
 8000256:	1c10      	adds	r0, r2, #0
 8000258:	4662      	mov	r2, ip
 800025a:	468c      	mov	ip, r1
 800025c:	1c19      	adds	r1, r3, #0
 800025e:	4663      	mov	r3, ip
 8000260:	e000      	b.n	8000264 <__aeabi_cdcmpeq>
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_cdcmpeq>:
 8000264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000266:	f000 ff1d 	bl	80010a4 <__ledf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	d401      	bmi.n	8000272 <__aeabi_cdcmpeq+0xe>
 800026e:	2100      	movs	r1, #0
 8000270:	42c8      	cmn	r0, r1
 8000272:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000274 <__aeabi_dcmpeq>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fe6f 	bl	8000f58 <__eqdf2>
 800027a:	4240      	negs	r0, r0
 800027c:	3001      	adds	r0, #1
 800027e:	bd10      	pop	{r4, pc}

08000280 <__aeabi_dcmplt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 ff0f 	bl	80010a4 <__ledf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	db01      	blt.n	800028e <__aeabi_dcmplt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_dcmple>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 ff05 	bl	80010a4 <__ledf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	dd01      	ble.n	80002a2 <__aeabi_dcmple+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_dcmpgt>:
 80002a8:	b510      	push	{r4, lr}
 80002aa:	f000 fe89 	bl	8000fc0 <__gedf2>
 80002ae:	2800      	cmp	r0, #0
 80002b0:	dc01      	bgt.n	80002b6 <__aeabi_dcmpgt+0xe>
 80002b2:	2000      	movs	r0, #0
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	2001      	movs	r0, #1
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__aeabi_dcmpge>:
 80002bc:	b510      	push	{r4, lr}
 80002be:	f000 fe7f 	bl	8000fc0 <__gedf2>
 80002c2:	2800      	cmp	r0, #0
 80002c4:	da01      	bge.n	80002ca <__aeabi_dcmpge+0xe>
 80002c6:	2000      	movs	r0, #0
 80002c8:	bd10      	pop	{r4, pc}
 80002ca:	2001      	movs	r0, #1
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__aeabi_dadd>:
 80002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	4646      	mov	r6, r8
 80002d6:	b4c0      	push	{r6, r7}
 80002d8:	1c04      	adds	r4, r0, #0
 80002da:	0308      	lsls	r0, r1, #12
 80002dc:	0fcd      	lsrs	r5, r1, #31
 80002de:	0fdf      	lsrs	r7, r3, #31
 80002e0:	004e      	lsls	r6, r1, #1
 80002e2:	0a40      	lsrs	r0, r0, #9
 80002e4:	0f61      	lsrs	r1, r4, #29
 80002e6:	4308      	orrs	r0, r1
 80002e8:	46b8      	mov	r8, r7
 80002ea:	1c11      	adds	r1, r2, #0
 80002ec:	031f      	lsls	r7, r3, #12
 80002ee:	46ac      	mov	ip, r5
 80002f0:	0a7a      	lsrs	r2, r7, #9
 80002f2:	005d      	lsls	r5, r3, #1
 80002f4:	0f4b      	lsrs	r3, r1, #29
 80002f6:	431a      	orrs	r2, r3
 80002f8:	0d76      	lsrs	r6, r6, #21
 80002fa:	0d6d      	lsrs	r5, r5, #21
 80002fc:	4692      	mov	sl, r2
 80002fe:	00e4      	lsls	r4, r4, #3
 8000300:	00c9      	lsls	r1, r1, #3
 8000302:	1b72      	subs	r2, r6, r5
 8000304:	45c4      	cmp	ip, r8
 8000306:	d100      	bne.n	800030a <__aeabi_dadd+0x3a>
 8000308:	e096      	b.n	8000438 <__aeabi_dadd+0x168>
 800030a:	2a00      	cmp	r2, #0
 800030c:	dc00      	bgt.n	8000310 <__aeabi_dadd+0x40>
 800030e:	e0ff      	b.n	8000510 <__aeabi_dadd+0x240>
 8000310:	2d00      	cmp	r5, #0
 8000312:	d10d      	bne.n	8000330 <__aeabi_dadd+0x60>
 8000314:	4653      	mov	r3, sl
 8000316:	2b00      	cmp	r3, #0
 8000318:	d102      	bne.n	8000320 <__aeabi_dadd+0x50>
 800031a:	2900      	cmp	r1, #0
 800031c:	d100      	bne.n	8000320 <__aeabi_dadd+0x50>
 800031e:	e0c3      	b.n	80004a8 <__aeabi_dadd+0x1d8>
 8000320:	3a01      	subs	r2, #1
 8000322:	2a00      	cmp	r2, #0
 8000324:	d000      	beq.n	8000328 <__aeabi_dadd+0x58>
 8000326:	e144      	b.n	80005b2 <__aeabi_dadd+0x2e2>
 8000328:	4655      	mov	r5, sl
 800032a:	1a61      	subs	r1, r4, r1
 800032c:	1b43      	subs	r3, r0, r5
 800032e:	e01f      	b.n	8000370 <__aeabi_dadd+0xa0>
 8000330:	4bb3      	ldr	r3, [pc, #716]	; (8000600 <__aeabi_dadd+0x330>)
 8000332:	429e      	cmp	r6, r3
 8000334:	d100      	bne.n	8000338 <__aeabi_dadd+0x68>
 8000336:	e0c3      	b.n	80004c0 <__aeabi_dadd+0x1f0>
 8000338:	2380      	movs	r3, #128	; 0x80
 800033a:	4657      	mov	r7, sl
 800033c:	041d      	lsls	r5, r3, #16
 800033e:	432f      	orrs	r7, r5
 8000340:	46ba      	mov	sl, r7
 8000342:	2a38      	cmp	r2, #56	; 0x38
 8000344:	dd00      	ble.n	8000348 <__aeabi_dadd+0x78>
 8000346:	e10b      	b.n	8000560 <__aeabi_dadd+0x290>
 8000348:	2a1f      	cmp	r2, #31
 800034a:	dd00      	ble.n	800034e <__aeabi_dadd+0x7e>
 800034c:	e148      	b.n	80005e0 <__aeabi_dadd+0x310>
 800034e:	2520      	movs	r5, #32
 8000350:	1aab      	subs	r3, r5, r2
 8000352:	4657      	mov	r7, sl
 8000354:	1c0d      	adds	r5, r1, #0
 8000356:	409f      	lsls	r7, r3
 8000358:	4099      	lsls	r1, r3
 800035a:	40d5      	lsrs	r5, r2
 800035c:	433d      	orrs	r5, r7
 800035e:	1c0f      	adds	r7, r1, #0
 8000360:	1e79      	subs	r1, r7, #1
 8000362:	418f      	sbcs	r7, r1
 8000364:	4653      	mov	r3, sl
 8000366:	1c29      	adds	r1, r5, #0
 8000368:	4339      	orrs	r1, r7
 800036a:	40d3      	lsrs	r3, r2
 800036c:	1a61      	subs	r1, r4, r1
 800036e:	1ac3      	subs	r3, r0, r3
 8000370:	428c      	cmp	r4, r1
 8000372:	41a4      	sbcs	r4, r4
 8000374:	191b      	adds	r3, r3, r4
 8000376:	1c35      	adds	r5, r6, #0
 8000378:	1c0c      	adds	r4, r1, #0
 800037a:	4666      	mov	r6, ip
 800037c:	021f      	lsls	r7, r3, #8
 800037e:	d400      	bmi.n	8000382 <__aeabi_dadd+0xb2>
 8000380:	e0c4      	b.n	800050c <__aeabi_dadd+0x23c>
 8000382:	4fa0      	ldr	r7, [pc, #640]	; (8000604 <__aeabi_dadd+0x334>)
 8000384:	401f      	ands	r7, r3
 8000386:	2f00      	cmp	r7, #0
 8000388:	d100      	bne.n	800038c <__aeabi_dadd+0xbc>
 800038a:	e0e4      	b.n	8000556 <__aeabi_dadd+0x286>
 800038c:	1c38      	adds	r0, r7, #0
 800038e:	f001 fd47 	bl	8001e20 <__clzsi2>
 8000392:	1c02      	adds	r2, r0, #0
 8000394:	3a08      	subs	r2, #8
 8000396:	2a1f      	cmp	r2, #31
 8000398:	dd00      	ble.n	800039c <__aeabi_dadd+0xcc>
 800039a:	e0d7      	b.n	800054c <__aeabi_dadd+0x27c>
 800039c:	2320      	movs	r3, #32
 800039e:	1c21      	adds	r1, r4, #0
 80003a0:	1a98      	subs	r0, r3, r2
 80003a2:	4097      	lsls	r7, r2
 80003a4:	40c1      	lsrs	r1, r0
 80003a6:	430f      	orrs	r7, r1
 80003a8:	4094      	lsls	r4, r2
 80003aa:	4295      	cmp	r5, r2
 80003ac:	dd00      	ble.n	80003b0 <__aeabi_dadd+0xe0>
 80003ae:	e0aa      	b.n	8000506 <__aeabi_dadd+0x236>
 80003b0:	1b52      	subs	r2, r2, r5
 80003b2:	3201      	adds	r2, #1
 80003b4:	2a1f      	cmp	r2, #31
 80003b6:	dd00      	ble.n	80003ba <__aeabi_dadd+0xea>
 80003b8:	e100      	b.n	80005bc <__aeabi_dadd+0x2ec>
 80003ba:	2320      	movs	r3, #32
 80003bc:	1a99      	subs	r1, r3, r2
 80003be:	1c20      	adds	r0, r4, #0
 80003c0:	1c3d      	adds	r5, r7, #0
 80003c2:	40d0      	lsrs	r0, r2
 80003c4:	408d      	lsls	r5, r1
 80003c6:	408c      	lsls	r4, r1
 80003c8:	4305      	orrs	r5, r0
 80003ca:	1e63      	subs	r3, r4, #1
 80003cc:	419c      	sbcs	r4, r3
 80003ce:	1c3b      	adds	r3, r7, #0
 80003d0:	432c      	orrs	r4, r5
 80003d2:	40d3      	lsrs	r3, r2
 80003d4:	2500      	movs	r5, #0
 80003d6:	2201      	movs	r2, #1
 80003d8:	210f      	movs	r1, #15
 80003da:	4021      	ands	r1, r4
 80003dc:	2904      	cmp	r1, #4
 80003de:	d005      	beq.n	80003ec <__aeabi_dadd+0x11c>
 80003e0:	1d21      	adds	r1, r4, #4
 80003e2:	42a1      	cmp	r1, r4
 80003e4:	41a4      	sbcs	r4, r4
 80003e6:	1b1b      	subs	r3, r3, r4
 80003e8:	1c6a      	adds	r2, r5, #1
 80003ea:	1c0c      	adds	r4, r1, #0
 80003ec:	021f      	lsls	r7, r3, #8
 80003ee:	d500      	bpl.n	80003f2 <__aeabi_dadd+0x122>
 80003f0:	e06c      	b.n	80004cc <__aeabi_dadd+0x1fc>
 80003f2:	4983      	ldr	r1, [pc, #524]	; (8000600 <__aeabi_dadd+0x330>)
 80003f4:	1c10      	adds	r0, r2, #0
 80003f6:	075f      	lsls	r7, r3, #29
 80003f8:	08e4      	lsrs	r4, r4, #3
 80003fa:	4008      	ands	r0, r1
 80003fc:	1c2a      	adds	r2, r5, #0
 80003fe:	433c      	orrs	r4, r7
 8000400:	08db      	lsrs	r3, r3, #3
 8000402:	2801      	cmp	r0, #1
 8000404:	dc00      	bgt.n	8000408 <__aeabi_dadd+0x138>
 8000406:	e070      	b.n	80004ea <__aeabi_dadd+0x21a>
 8000408:	4d7f      	ldr	r5, [pc, #508]	; (8000608 <__aeabi_dadd+0x338>)
 800040a:	400a      	ands	r2, r1
 800040c:	402b      	ands	r3, r5
 800040e:	4f7f      	ldr	r7, [pc, #508]	; (800060c <__aeabi_dadd+0x33c>)
 8000410:	2000      	movs	r0, #0
 8000412:	2100      	movs	r1, #0
 8000414:	400f      	ands	r7, r1
 8000416:	497a      	ldr	r1, [pc, #488]	; (8000600 <__aeabi_dadd+0x330>)
 8000418:	4d7d      	ldr	r5, [pc, #500]	; (8000610 <__aeabi_dadd+0x340>)
 800041a:	433b      	orrs	r3, r7
 800041c:	400a      	ands	r2, r1
 800041e:	1c20      	adds	r0, r4, #0
 8000420:	401d      	ands	r5, r3
 8000422:	0514      	lsls	r4, r2, #20
 8000424:	4b7b      	ldr	r3, [pc, #492]	; (8000614 <__aeabi_dadd+0x344>)
 8000426:	4325      	orrs	r5, r4
 8000428:	401d      	ands	r5, r3
 800042a:	07f6      	lsls	r6, r6, #31
 800042c:	1c29      	adds	r1, r5, #0
 800042e:	4331      	orrs	r1, r6
 8000430:	bc0c      	pop	{r2, r3}
 8000432:	4690      	mov	r8, r2
 8000434:	469a      	mov	sl, r3
 8000436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000438:	2a00      	cmp	r2, #0
 800043a:	dc00      	bgt.n	800043e <__aeabi_dadd+0x16e>
 800043c:	e09f      	b.n	800057e <__aeabi_dadd+0x2ae>
 800043e:	2d00      	cmp	r5, #0
 8000440:	d02d      	beq.n	800049e <__aeabi_dadd+0x1ce>
 8000442:	4b6f      	ldr	r3, [pc, #444]	; (8000600 <__aeabi_dadd+0x330>)
 8000444:	429e      	cmp	r6, r3
 8000446:	d03b      	beq.n	80004c0 <__aeabi_dadd+0x1f0>
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	4657      	mov	r7, sl
 800044c:	041d      	lsls	r5, r3, #16
 800044e:	432f      	orrs	r7, r5
 8000450:	46ba      	mov	sl, r7
 8000452:	2a38      	cmp	r2, #56	; 0x38
 8000454:	dc00      	bgt.n	8000458 <__aeabi_dadd+0x188>
 8000456:	e10e      	b.n	8000676 <__aeabi_dadd+0x3a6>
 8000458:	4652      	mov	r2, sl
 800045a:	2a00      	cmp	r2, #0
 800045c:	d102      	bne.n	8000464 <__aeabi_dadd+0x194>
 800045e:	2900      	cmp	r1, #0
 8000460:	d100      	bne.n	8000464 <__aeabi_dadd+0x194>
 8000462:	e15e      	b.n	8000722 <__aeabi_dadd+0x452>
 8000464:	2300      	movs	r3, #0
 8000466:	2101      	movs	r1, #1
 8000468:	1909      	adds	r1, r1, r4
 800046a:	181d      	adds	r5, r3, r0
 800046c:	42a1      	cmp	r1, r4
 800046e:	4180      	sbcs	r0, r0
 8000470:	1a2b      	subs	r3, r5, r0
 8000472:	1c0c      	adds	r4, r1, #0
 8000474:	1c35      	adds	r5, r6, #0
 8000476:	021f      	lsls	r7, r3, #8
 8000478:	d50e      	bpl.n	8000498 <__aeabi_dadd+0x1c8>
 800047a:	4a61      	ldr	r2, [pc, #388]	; (8000600 <__aeabi_dadd+0x330>)
 800047c:	3501      	adds	r5, #1
 800047e:	4295      	cmp	r5, r2
 8000480:	d100      	bne.n	8000484 <__aeabi_dadd+0x1b4>
 8000482:	e148      	b.n	8000716 <__aeabi_dadd+0x446>
 8000484:	4e64      	ldr	r6, [pc, #400]	; (8000618 <__aeabi_dadd+0x348>)
 8000486:	2701      	movs	r7, #1
 8000488:	4027      	ands	r7, r4
 800048a:	4033      	ands	r3, r6
 800048c:	0860      	lsrs	r0, r4, #1
 800048e:	1c3c      	adds	r4, r7, #0
 8000490:	07d9      	lsls	r1, r3, #31
 8000492:	4304      	orrs	r4, r0
 8000494:	430c      	orrs	r4, r1
 8000496:	085b      	lsrs	r3, r3, #1
 8000498:	1c6a      	adds	r2, r5, #1
 800049a:	4666      	mov	r6, ip
 800049c:	e79c      	b.n	80003d8 <__aeabi_dadd+0x108>
 800049e:	4653      	mov	r3, sl
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d106      	bne.n	80004b2 <__aeabi_dadd+0x1e2>
 80004a4:	2900      	cmp	r1, #0
 80004a6:	d104      	bne.n	80004b2 <__aeabi_dadd+0x1e2>
 80004a8:	1c72      	adds	r2, r6, #1
 80004aa:	1c35      	adds	r5, r6, #0
 80004ac:	1c03      	adds	r3, r0, #0
 80004ae:	4666      	mov	r6, ip
 80004b0:	e792      	b.n	80003d8 <__aeabi_dadd+0x108>
 80004b2:	3a01      	subs	r2, #1
 80004b4:	2a00      	cmp	r2, #0
 80004b6:	d100      	bne.n	80004ba <__aeabi_dadd+0x1ea>
 80004b8:	e0f8      	b.n	80006ac <__aeabi_dadd+0x3dc>
 80004ba:	4b51      	ldr	r3, [pc, #324]	; (8000600 <__aeabi_dadd+0x330>)
 80004bc:	429e      	cmp	r6, r3
 80004be:	d1c8      	bne.n	8000452 <__aeabi_dadd+0x182>
 80004c0:	2780      	movs	r7, #128	; 0x80
 80004c2:	1c03      	adds	r3, r0, #0
 80004c4:	4666      	mov	r6, ip
 80004c6:	013a      	lsls	r2, r7, #4
 80004c8:	4d4d      	ldr	r5, [pc, #308]	; (8000600 <__aeabi_dadd+0x330>)
 80004ca:	e785      	b.n	80003d8 <__aeabi_dadd+0x108>
 80004cc:	494c      	ldr	r1, [pc, #304]	; (8000600 <__aeabi_dadd+0x330>)
 80004ce:	428a      	cmp	r2, r1
 80004d0:	d039      	beq.n	8000546 <__aeabi_dadd+0x276>
 80004d2:	4851      	ldr	r0, [pc, #324]	; (8000618 <__aeabi_dadd+0x348>)
 80004d4:	494a      	ldr	r1, [pc, #296]	; (8000600 <__aeabi_dadd+0x330>)
 80004d6:	4003      	ands	r3, r0
 80004d8:	1c50      	adds	r0, r2, #1
 80004da:	075f      	lsls	r7, r3, #29
 80004dc:	08e4      	lsrs	r4, r4, #3
 80004de:	4008      	ands	r0, r1
 80004e0:	433c      	orrs	r4, r7
 80004e2:	08db      	lsrs	r3, r3, #3
 80004e4:	2801      	cmp	r0, #1
 80004e6:	dd00      	ble.n	80004ea <__aeabi_dadd+0x21a>
 80004e8:	e78e      	b.n	8000408 <__aeabi_dadd+0x138>
 80004ea:	2c00      	cmp	r4, #0
 80004ec:	d101      	bne.n	80004f2 <__aeabi_dadd+0x222>
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d007      	beq.n	8000502 <__aeabi_dadd+0x232>
 80004f2:	2a00      	cmp	r2, #0
 80004f4:	d03f      	beq.n	8000576 <__aeabi_dadd+0x2a6>
 80004f6:	2780      	movs	r7, #128	; 0x80
 80004f8:	4943      	ldr	r1, [pc, #268]	; (8000608 <__aeabi_dadd+0x338>)
 80004fa:	0338      	lsls	r0, r7, #12
 80004fc:	4303      	orrs	r3, r0
 80004fe:	400b      	ands	r3, r1
 8000500:	493f      	ldr	r1, [pc, #252]	; (8000600 <__aeabi_dadd+0x330>)
 8000502:	400a      	ands	r2, r1
 8000504:	e783      	b.n	800040e <__aeabi_dadd+0x13e>
 8000506:	4b44      	ldr	r3, [pc, #272]	; (8000618 <__aeabi_dadd+0x348>)
 8000508:	1aad      	subs	r5, r5, r2
 800050a:	403b      	ands	r3, r7
 800050c:	1c6a      	adds	r2, r5, #1
 800050e:	e763      	b.n	80003d8 <__aeabi_dadd+0x108>
 8000510:	2a00      	cmp	r2, #0
 8000512:	d000      	beq.n	8000516 <__aeabi_dadd+0x246>
 8000514:	e082      	b.n	800061c <__aeabi_dadd+0x34c>
 8000516:	4d3a      	ldr	r5, [pc, #232]	; (8000600 <__aeabi_dadd+0x330>)
 8000518:	1c77      	adds	r7, r6, #1
 800051a:	402f      	ands	r7, r5
 800051c:	2f01      	cmp	r7, #1
 800051e:	dc00      	bgt.n	8000522 <__aeabi_dadd+0x252>
 8000520:	e0e0      	b.n	80006e4 <__aeabi_dadd+0x414>
 8000522:	4652      	mov	r2, sl
 8000524:	1a63      	subs	r3, r4, r1
 8000526:	1a85      	subs	r5, r0, r2
 8000528:	429c      	cmp	r4, r3
 800052a:	4192      	sbcs	r2, r2
 800052c:	18af      	adds	r7, r5, r2
 800052e:	023d      	lsls	r5, r7, #8
 8000530:	d400      	bmi.n	8000534 <__aeabi_dadd+0x264>
 8000532:	e098      	b.n	8000666 <__aeabi_dadd+0x396>
 8000534:	1b0c      	subs	r4, r1, r4
 8000536:	4652      	mov	r2, sl
 8000538:	1a13      	subs	r3, r2, r0
 800053a:	42a1      	cmp	r1, r4
 800053c:	4180      	sbcs	r0, r0
 800053e:	1c35      	adds	r5, r6, #0
 8000540:	181f      	adds	r7, r3, r0
 8000542:	4646      	mov	r6, r8
 8000544:	e71f      	b.n	8000386 <__aeabi_dadd+0xb6>
 8000546:	2300      	movs	r3, #0
 8000548:	2400      	movs	r4, #0
 800054a:	e760      	b.n	800040e <__aeabi_dadd+0x13e>
 800054c:	1c27      	adds	r7, r4, #0
 800054e:	3828      	subs	r0, #40	; 0x28
 8000550:	4087      	lsls	r7, r0
 8000552:	2400      	movs	r4, #0
 8000554:	e729      	b.n	80003aa <__aeabi_dadd+0xda>
 8000556:	1c20      	adds	r0, r4, #0
 8000558:	f001 fc62 	bl	8001e20 <__clzsi2>
 800055c:	3020      	adds	r0, #32
 800055e:	e718      	b.n	8000392 <__aeabi_dadd+0xc2>
 8000560:	4652      	mov	r2, sl
 8000562:	2a00      	cmp	r2, #0
 8000564:	d104      	bne.n	8000570 <__aeabi_dadd+0x2a0>
 8000566:	2900      	cmp	r1, #0
 8000568:	d102      	bne.n	8000570 <__aeabi_dadd+0x2a0>
 800056a:	2300      	movs	r3, #0
 800056c:	2100      	movs	r1, #0
 800056e:	e6fd      	b.n	800036c <__aeabi_dadd+0x9c>
 8000570:	2300      	movs	r3, #0
 8000572:	2101      	movs	r1, #1
 8000574:	e6fa      	b.n	800036c <__aeabi_dadd+0x9c>
 8000576:	4a24      	ldr	r2, [pc, #144]	; (8000608 <__aeabi_dadd+0x338>)
 8000578:	4013      	ands	r3, r2
 800057a:	2200      	movs	r2, #0
 800057c:	e747      	b.n	800040e <__aeabi_dadd+0x13e>
 800057e:	2a00      	cmp	r2, #0
 8000580:	d000      	beq.n	8000584 <__aeabi_dadd+0x2b4>
 8000582:	e0e2      	b.n	800074a <__aeabi_dadd+0x47a>
 8000584:	1c75      	adds	r5, r6, #1
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <__aeabi_dadd+0x330>)
 8000588:	1c2f      	adds	r7, r5, #0
 800058a:	401f      	ands	r7, r3
 800058c:	2f01      	cmp	r7, #1
 800058e:	dc00      	bgt.n	8000592 <__aeabi_dadd+0x2c2>
 8000590:	e099      	b.n	80006c6 <__aeabi_dadd+0x3f6>
 8000592:	429d      	cmp	r5, r3
 8000594:	d100      	bne.n	8000598 <__aeabi_dadd+0x2c8>
 8000596:	e0be      	b.n	8000716 <__aeabi_dadd+0x446>
 8000598:	190a      	adds	r2, r1, r4
 800059a:	4656      	mov	r6, sl
 800059c:	42a2      	cmp	r2, r4
 800059e:	41a4      	sbcs	r4, r4
 80005a0:	1833      	adds	r3, r6, r0
 80005a2:	1b1b      	subs	r3, r3, r4
 80005a4:	07df      	lsls	r7, r3, #31
 80005a6:	0854      	lsrs	r4, r2, #1
 80005a8:	433c      	orrs	r4, r7
 80005aa:	085b      	lsrs	r3, r3, #1
 80005ac:	1c6a      	adds	r2, r5, #1
 80005ae:	4666      	mov	r6, ip
 80005b0:	e712      	b.n	80003d8 <__aeabi_dadd+0x108>
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <__aeabi_dadd+0x330>)
 80005b4:	429e      	cmp	r6, r3
 80005b6:	d000      	beq.n	80005ba <__aeabi_dadd+0x2ea>
 80005b8:	e6c3      	b.n	8000342 <__aeabi_dadd+0x72>
 80005ba:	e781      	b.n	80004c0 <__aeabi_dadd+0x1f0>
 80005bc:	2a20      	cmp	r2, #32
 80005be:	d100      	bne.n	80005c2 <__aeabi_dadd+0x2f2>
 80005c0:	e07d      	b.n	80006be <__aeabi_dadd+0x3ee>
 80005c2:	2040      	movs	r0, #64	; 0x40
 80005c4:	1a81      	subs	r1, r0, r2
 80005c6:	1c3d      	adds	r5, r7, #0
 80005c8:	408d      	lsls	r5, r1
 80005ca:	1c2b      	adds	r3, r5, #0
 80005cc:	431c      	orrs	r4, r3
 80005ce:	3a20      	subs	r2, #32
 80005d0:	1e63      	subs	r3, r4, #1
 80005d2:	419c      	sbcs	r4, r3
 80005d4:	40d7      	lsrs	r7, r2
 80005d6:	433c      	orrs	r4, r7
 80005d8:	2201      	movs	r2, #1
 80005da:	2300      	movs	r3, #0
 80005dc:	2500      	movs	r5, #0
 80005de:	e6fb      	b.n	80003d8 <__aeabi_dadd+0x108>
 80005e0:	2a20      	cmp	r2, #32
 80005e2:	d06e      	beq.n	80006c2 <__aeabi_dadd+0x3f2>
 80005e4:	2740      	movs	r7, #64	; 0x40
 80005e6:	1abb      	subs	r3, r7, r2
 80005e8:	4655      	mov	r5, sl
 80005ea:	409d      	lsls	r5, r3
 80005ec:	1c2b      	adds	r3, r5, #0
 80005ee:	4319      	orrs	r1, r3
 80005f0:	3a20      	subs	r2, #32
 80005f2:	4657      	mov	r7, sl
 80005f4:	1e4b      	subs	r3, r1, #1
 80005f6:	4199      	sbcs	r1, r3
 80005f8:	40d7      	lsrs	r7, r2
 80005fa:	4339      	orrs	r1, r7
 80005fc:	2300      	movs	r3, #0
 80005fe:	e6b5      	b.n	800036c <__aeabi_dadd+0x9c>
 8000600:	000007ff 	.word	0x000007ff
 8000604:	007fffff 	.word	0x007fffff
 8000608:	000fffff 	.word	0x000fffff
 800060c:	fff00000 	.word	0xfff00000
 8000610:	800fffff 	.word	0x800fffff
 8000614:	7fffffff 	.word	0x7fffffff
 8000618:	ff7fffff 	.word	0xff7fffff
 800061c:	4252      	negs	r2, r2
 800061e:	2e00      	cmp	r6, #0
 8000620:	d03b      	beq.n	800069a <__aeabi_dadd+0x3ca>
 8000622:	4bbc      	ldr	r3, [pc, #752]	; (8000914 <__aeabi_dadd+0x644>)
 8000624:	429d      	cmp	r5, r3
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x35a>
 8000628:	e0b1      	b.n	800078e <__aeabi_dadd+0x4be>
 800062a:	2680      	movs	r6, #128	; 0x80
 800062c:	0437      	lsls	r7, r6, #16
 800062e:	4338      	orrs	r0, r7
 8000630:	2a38      	cmp	r2, #56	; 0x38
 8000632:	dd00      	ble.n	8000636 <__aeabi_dadd+0x366>
 8000634:	e0bd      	b.n	80007b2 <__aeabi_dadd+0x4e2>
 8000636:	2a1f      	cmp	r2, #31
 8000638:	dd00      	ble.n	800063c <__aeabi_dadd+0x36c>
 800063a:	e14e      	b.n	80008da <__aeabi_dadd+0x60a>
 800063c:	2620      	movs	r6, #32
 800063e:	1ab3      	subs	r3, r6, r2
 8000640:	1c07      	adds	r7, r0, #0
 8000642:	1c26      	adds	r6, r4, #0
 8000644:	409f      	lsls	r7, r3
 8000646:	409c      	lsls	r4, r3
 8000648:	40d6      	lsrs	r6, r2
 800064a:	1e63      	subs	r3, r4, #1
 800064c:	419c      	sbcs	r4, r3
 800064e:	433e      	orrs	r6, r7
 8000650:	1c03      	adds	r3, r0, #0
 8000652:	4334      	orrs	r4, r6
 8000654:	40d3      	lsrs	r3, r2
 8000656:	4652      	mov	r2, sl
 8000658:	1b0c      	subs	r4, r1, r4
 800065a:	1ad0      	subs	r0, r2, r3
 800065c:	42a1      	cmp	r1, r4
 800065e:	4192      	sbcs	r2, r2
 8000660:	1883      	adds	r3, r0, r2
 8000662:	4646      	mov	r6, r8
 8000664:	e68a      	b.n	800037c <__aeabi_dadd+0xac>
 8000666:	2f00      	cmp	r7, #0
 8000668:	d101      	bne.n	800066e <__aeabi_dadd+0x39e>
 800066a:	2b00      	cmp	r3, #0
 800066c:	d04d      	beq.n	800070a <__aeabi_dadd+0x43a>
 800066e:	1c35      	adds	r5, r6, #0
 8000670:	1c1c      	adds	r4, r3, #0
 8000672:	4666      	mov	r6, ip
 8000674:	e687      	b.n	8000386 <__aeabi_dadd+0xb6>
 8000676:	2a1f      	cmp	r2, #31
 8000678:	dc56      	bgt.n	8000728 <__aeabi_dadd+0x458>
 800067a:	2520      	movs	r5, #32
 800067c:	1aab      	subs	r3, r5, r2
 800067e:	4657      	mov	r7, sl
 8000680:	1c0d      	adds	r5, r1, #0
 8000682:	409f      	lsls	r7, r3
 8000684:	4099      	lsls	r1, r3
 8000686:	40d5      	lsrs	r5, r2
 8000688:	433d      	orrs	r5, r7
 800068a:	1c0f      	adds	r7, r1, #0
 800068c:	1e79      	subs	r1, r7, #1
 800068e:	418f      	sbcs	r7, r1
 8000690:	4653      	mov	r3, sl
 8000692:	1c29      	adds	r1, r5, #0
 8000694:	4339      	orrs	r1, r7
 8000696:	40d3      	lsrs	r3, r2
 8000698:	e6e6      	b.n	8000468 <__aeabi_dadd+0x198>
 800069a:	2800      	cmp	r0, #0
 800069c:	d17e      	bne.n	800079c <__aeabi_dadd+0x4cc>
 800069e:	2c00      	cmp	r4, #0
 80006a0:	d17c      	bne.n	800079c <__aeabi_dadd+0x4cc>
 80006a2:	1c6a      	adds	r2, r5, #1
 80006a4:	4653      	mov	r3, sl
 80006a6:	1c0c      	adds	r4, r1, #0
 80006a8:	4646      	mov	r6, r8
 80006aa:	e695      	b.n	80003d8 <__aeabi_dadd+0x108>
 80006ac:	190a      	adds	r2, r1, r4
 80006ae:	4655      	mov	r5, sl
 80006b0:	182f      	adds	r7, r5, r0
 80006b2:	42a2      	cmp	r2, r4
 80006b4:	41a4      	sbcs	r4, r4
 80006b6:	1b3b      	subs	r3, r7, r4
 80006b8:	1c35      	adds	r5, r6, #0
 80006ba:	1c14      	adds	r4, r2, #0
 80006bc:	e6db      	b.n	8000476 <__aeabi_dadd+0x1a6>
 80006be:	2300      	movs	r3, #0
 80006c0:	e784      	b.n	80005cc <__aeabi_dadd+0x2fc>
 80006c2:	2300      	movs	r3, #0
 80006c4:	e793      	b.n	80005ee <__aeabi_dadd+0x31e>
 80006c6:	2e00      	cmp	r6, #0
 80006c8:	d000      	beq.n	80006cc <__aeabi_dadd+0x3fc>
 80006ca:	e0d1      	b.n	8000870 <__aeabi_dadd+0x5a0>
 80006cc:	2800      	cmp	r0, #0
 80006ce:	d000      	beq.n	80006d2 <__aeabi_dadd+0x402>
 80006d0:	e12b      	b.n	800092a <__aeabi_dadd+0x65a>
 80006d2:	2c00      	cmp	r4, #0
 80006d4:	d000      	beq.n	80006d8 <__aeabi_dadd+0x408>
 80006d6:	e128      	b.n	800092a <__aeabi_dadd+0x65a>
 80006d8:	4653      	mov	r3, sl
 80006da:	1c0c      	adds	r4, r1, #0
 80006dc:	4666      	mov	r6, ip
 80006de:	2201      	movs	r2, #1
 80006e0:	2500      	movs	r5, #0
 80006e2:	e679      	b.n	80003d8 <__aeabi_dadd+0x108>
 80006e4:	2e00      	cmp	r6, #0
 80006e6:	d13e      	bne.n	8000766 <__aeabi_dadd+0x496>
 80006e8:	2800      	cmp	r0, #0
 80006ea:	d000      	beq.n	80006ee <__aeabi_dadd+0x41e>
 80006ec:	e088      	b.n	8000800 <__aeabi_dadd+0x530>
 80006ee:	2c00      	cmp	r4, #0
 80006f0:	d000      	beq.n	80006f4 <__aeabi_dadd+0x424>
 80006f2:	e085      	b.n	8000800 <__aeabi_dadd+0x530>
 80006f4:	4653      	mov	r3, sl
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d101      	bne.n	80006fe <__aeabi_dadd+0x42e>
 80006fa:	2900      	cmp	r1, #0
 80006fc:	d005      	beq.n	800070a <__aeabi_dadd+0x43a>
 80006fe:	4653      	mov	r3, sl
 8000700:	1c0c      	adds	r4, r1, #0
 8000702:	4646      	mov	r6, r8
 8000704:	2201      	movs	r2, #1
 8000706:	2500      	movs	r5, #0
 8000708:	e666      	b.n	80003d8 <__aeabi_dadd+0x108>
 800070a:	2600      	movs	r6, #0
 800070c:	2201      	movs	r2, #1
 800070e:	2300      	movs	r3, #0
 8000710:	2104      	movs	r1, #4
 8000712:	2500      	movs	r5, #0
 8000714:	e669      	b.n	80003ea <__aeabi_dadd+0x11a>
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	4666      	mov	r6, ip
 800071a:	0112      	lsls	r2, r2, #4
 800071c:	2300      	movs	r3, #0
 800071e:	2104      	movs	r1, #4
 8000720:	e663      	b.n	80003ea <__aeabi_dadd+0x11a>
 8000722:	2300      	movs	r3, #0
 8000724:	2100      	movs	r1, #0
 8000726:	e69f      	b.n	8000468 <__aeabi_dadd+0x198>
 8000728:	2a20      	cmp	r2, #32
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x45e>
 800072c:	e0d3      	b.n	80008d6 <__aeabi_dadd+0x606>
 800072e:	2740      	movs	r7, #64	; 0x40
 8000730:	1abb      	subs	r3, r7, r2
 8000732:	4655      	mov	r5, sl
 8000734:	409d      	lsls	r5, r3
 8000736:	1c2b      	adds	r3, r5, #0
 8000738:	4319      	orrs	r1, r3
 800073a:	3a20      	subs	r2, #32
 800073c:	4657      	mov	r7, sl
 800073e:	1e4b      	subs	r3, r1, #1
 8000740:	4199      	sbcs	r1, r3
 8000742:	40d7      	lsrs	r7, r2
 8000744:	4339      	orrs	r1, r7
 8000746:	2300      	movs	r3, #0
 8000748:	e68e      	b.n	8000468 <__aeabi_dadd+0x198>
 800074a:	4252      	negs	r2, r2
 800074c:	2e00      	cmp	r6, #0
 800074e:	d138      	bne.n	80007c2 <__aeabi_dadd+0x4f2>
 8000750:	2800      	cmp	r0, #0
 8000752:	d000      	beq.n	8000756 <__aeabi_dadd+0x486>
 8000754:	e0d3      	b.n	80008fe <__aeabi_dadd+0x62e>
 8000756:	2c00      	cmp	r4, #0
 8000758:	d000      	beq.n	800075c <__aeabi_dadd+0x48c>
 800075a:	e0d0      	b.n	80008fe <__aeabi_dadd+0x62e>
 800075c:	1c6a      	adds	r2, r5, #1
 800075e:	4653      	mov	r3, sl
 8000760:	1c0c      	adds	r4, r1, #0
 8000762:	4666      	mov	r6, ip
 8000764:	e638      	b.n	80003d8 <__aeabi_dadd+0x108>
 8000766:	2800      	cmp	r0, #0
 8000768:	d161      	bne.n	800082e <__aeabi_dadd+0x55e>
 800076a:	2c00      	cmp	r4, #0
 800076c:	d15f      	bne.n	800082e <__aeabi_dadd+0x55e>
 800076e:	4652      	mov	r2, sl
 8000770:	2a00      	cmp	r2, #0
 8000772:	d10c      	bne.n	800078e <__aeabi_dadd+0x4be>
 8000774:	2900      	cmp	r1, #0
 8000776:	d10a      	bne.n	800078e <__aeabi_dadd+0x4be>
 8000778:	2080      	movs	r0, #128	; 0x80
 800077a:	2404      	movs	r4, #4
 800077c:	2600      	movs	r6, #0
 800077e:	0102      	lsls	r2, r0, #4
 8000780:	4b65      	ldr	r3, [pc, #404]	; (8000918 <__aeabi_dadd+0x648>)
 8000782:	4261      	negs	r1, r4
 8000784:	e631      	b.n	80003ea <__aeabi_dadd+0x11a>
 8000786:	4b63      	ldr	r3, [pc, #396]	; (8000914 <__aeabi_dadd+0x644>)
 8000788:	429d      	cmp	r5, r3
 800078a:	d000      	beq.n	800078e <__aeabi_dadd+0x4be>
 800078c:	e750      	b.n	8000630 <__aeabi_dadd+0x360>
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	4653      	mov	r3, sl
 8000792:	1c0c      	adds	r4, r1, #0
 8000794:	4646      	mov	r6, r8
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	4d5e      	ldr	r5, [pc, #376]	; (8000914 <__aeabi_dadd+0x644>)
 800079a:	e61d      	b.n	80003d8 <__aeabi_dadd+0x108>
 800079c:	3a01      	subs	r2, #1
 800079e:	2a00      	cmp	r2, #0
 80007a0:	d1f1      	bne.n	8000786 <__aeabi_dadd+0x4b6>
 80007a2:	4656      	mov	r6, sl
 80007a4:	1b0c      	subs	r4, r1, r4
 80007a6:	1a33      	subs	r3, r6, r0
 80007a8:	42a1      	cmp	r1, r4
 80007aa:	4189      	sbcs	r1, r1
 80007ac:	185b      	adds	r3, r3, r1
 80007ae:	4646      	mov	r6, r8
 80007b0:	e5e4      	b.n	800037c <__aeabi_dadd+0xac>
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d102      	bne.n	80007bc <__aeabi_dadd+0x4ec>
 80007b6:	2c00      	cmp	r4, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_dadd+0x4ec>
 80007ba:	e09d      	b.n	80008f8 <__aeabi_dadd+0x628>
 80007bc:	2300      	movs	r3, #0
 80007be:	2401      	movs	r4, #1
 80007c0:	e749      	b.n	8000656 <__aeabi_dadd+0x386>
 80007c2:	4b54      	ldr	r3, [pc, #336]	; (8000914 <__aeabi_dadd+0x644>)
 80007c4:	429d      	cmp	r5, r3
 80007c6:	d07a      	beq.n	80008be <__aeabi_dadd+0x5ee>
 80007c8:	2680      	movs	r6, #128	; 0x80
 80007ca:	0437      	lsls	r7, r6, #16
 80007cc:	4338      	orrs	r0, r7
 80007ce:	2a38      	cmp	r2, #56	; 0x38
 80007d0:	dd00      	ble.n	80007d4 <__aeabi_dadd+0x504>
 80007d2:	e0a3      	b.n	800091c <__aeabi_dadd+0x64c>
 80007d4:	2a1f      	cmp	r2, #31
 80007d6:	dd00      	ble.n	80007da <__aeabi_dadd+0x50a>
 80007d8:	e0ca      	b.n	8000970 <__aeabi_dadd+0x6a0>
 80007da:	2620      	movs	r6, #32
 80007dc:	1ab3      	subs	r3, r6, r2
 80007de:	1c07      	adds	r7, r0, #0
 80007e0:	1c26      	adds	r6, r4, #0
 80007e2:	409f      	lsls	r7, r3
 80007e4:	409c      	lsls	r4, r3
 80007e6:	40d6      	lsrs	r6, r2
 80007e8:	1e63      	subs	r3, r4, #1
 80007ea:	419c      	sbcs	r4, r3
 80007ec:	433e      	orrs	r6, r7
 80007ee:	1c03      	adds	r3, r0, #0
 80007f0:	4334      	orrs	r4, r6
 80007f2:	40d3      	lsrs	r3, r2
 80007f4:	1864      	adds	r4, r4, r1
 80007f6:	4453      	add	r3, sl
 80007f8:	428c      	cmp	r4, r1
 80007fa:	4192      	sbcs	r2, r2
 80007fc:	1a9b      	subs	r3, r3, r2
 80007fe:	e63a      	b.n	8000476 <__aeabi_dadd+0x1a6>
 8000800:	4655      	mov	r5, sl
 8000802:	2d00      	cmp	r5, #0
 8000804:	d101      	bne.n	800080a <__aeabi_dadd+0x53a>
 8000806:	2900      	cmp	r1, #0
 8000808:	d060      	beq.n	80008cc <__aeabi_dadd+0x5fc>
 800080a:	1a62      	subs	r2, r4, r1
 800080c:	4656      	mov	r6, sl
 800080e:	1b87      	subs	r7, r0, r6
 8000810:	4294      	cmp	r4, r2
 8000812:	419b      	sbcs	r3, r3
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	021f      	lsls	r7, r3, #8
 8000818:	d400      	bmi.n	800081c <__aeabi_dadd+0x54c>
 800081a:	e09c      	b.n	8000956 <__aeabi_dadd+0x686>
 800081c:	1b0c      	subs	r4, r1, r4
 800081e:	1a32      	subs	r2, r6, r0
 8000820:	42a1      	cmp	r1, r4
 8000822:	4189      	sbcs	r1, r1
 8000824:	1853      	adds	r3, r2, r1
 8000826:	4646      	mov	r6, r8
 8000828:	2201      	movs	r2, #1
 800082a:	2500      	movs	r5, #0
 800082c:	e5d4      	b.n	80003d8 <__aeabi_dadd+0x108>
 800082e:	4653      	mov	r3, sl
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <__aeabi_dadd+0x56a>
 8000834:	2900      	cmp	r1, #0
 8000836:	d100      	bne.n	800083a <__aeabi_dadd+0x56a>
 8000838:	e642      	b.n	80004c0 <__aeabi_dadd+0x1f0>
 800083a:	2680      	movs	r6, #128	; 0x80
 800083c:	0745      	lsls	r5, r0, #29
 800083e:	08e4      	lsrs	r4, r4, #3
 8000840:	08c0      	lsrs	r0, r0, #3
 8000842:	0333      	lsls	r3, r6, #12
 8000844:	432c      	orrs	r4, r5
 8000846:	4218      	tst	r0, r3
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x57c>
 800084a:	e082      	b.n	8000952 <__aeabi_dadd+0x682>
 800084c:	4655      	mov	r5, sl
 800084e:	08ea      	lsrs	r2, r5, #3
 8000850:	421a      	tst	r2, r3
 8000852:	d000      	beq.n	8000856 <__aeabi_dadd+0x586>
 8000854:	e07d      	b.n	8000952 <__aeabi_dadd+0x682>
 8000856:	08cf      	lsrs	r7, r1, #3
 8000858:	076c      	lsls	r4, r5, #29
 800085a:	1c10      	adds	r0, r2, #0
 800085c:	433c      	orrs	r4, r7
 800085e:	4646      	mov	r6, r8
 8000860:	00c2      	lsls	r2, r0, #3
 8000862:	0f63      	lsrs	r3, r4, #29
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	4313      	orrs	r3, r2
 8000868:	00e4      	lsls	r4, r4, #3
 800086a:	010a      	lsls	r2, r1, #4
 800086c:	4d29      	ldr	r5, [pc, #164]	; (8000914 <__aeabi_dadd+0x644>)
 800086e:	e5b3      	b.n	80003d8 <__aeabi_dadd+0x108>
 8000870:	2800      	cmp	r0, #0
 8000872:	d101      	bne.n	8000878 <__aeabi_dadd+0x5a8>
 8000874:	2c00      	cmp	r4, #0
 8000876:	d022      	beq.n	80008be <__aeabi_dadd+0x5ee>
 8000878:	4657      	mov	r7, sl
 800087a:	2f00      	cmp	r7, #0
 800087c:	d102      	bne.n	8000884 <__aeabi_dadd+0x5b4>
 800087e:	2900      	cmp	r1, #0
 8000880:	d100      	bne.n	8000884 <__aeabi_dadd+0x5b4>
 8000882:	e61d      	b.n	80004c0 <__aeabi_dadd+0x1f0>
 8000884:	2680      	movs	r6, #128	; 0x80
 8000886:	0742      	lsls	r2, r0, #29
 8000888:	08e4      	lsrs	r4, r4, #3
 800088a:	08c0      	lsrs	r0, r0, #3
 800088c:	0333      	lsls	r3, r6, #12
 800088e:	4314      	orrs	r4, r2
 8000890:	4218      	tst	r0, r3
 8000892:	d100      	bne.n	8000896 <__aeabi_dadd+0x5c6>
 8000894:	e07d      	b.n	8000992 <__aeabi_dadd+0x6c2>
 8000896:	4655      	mov	r5, sl
 8000898:	08ea      	lsrs	r2, r5, #3
 800089a:	421a      	tst	r2, r3
 800089c:	d179      	bne.n	8000992 <__aeabi_dadd+0x6c2>
 800089e:	08c9      	lsrs	r1, r1, #3
 80008a0:	076c      	lsls	r4, r5, #29
 80008a2:	1c13      	adds	r3, r2, #0
 80008a4:	430c      	orrs	r4, r1
 80008a6:	4646      	mov	r6, r8
 80008a8:	0f60      	lsrs	r0, r4, #29
 80008aa:	2580      	movs	r5, #128	; 0x80
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	012a      	lsls	r2, r5, #4
 80008b0:	4303      	orrs	r3, r0
 80008b2:	00e4      	lsls	r4, r4, #3
 80008b4:	4d17      	ldr	r5, [pc, #92]	; (8000914 <__aeabi_dadd+0x644>)
 80008b6:	e58f      	b.n	80003d8 <__aeabi_dadd+0x108>
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <__aeabi_dadd+0x644>)
 80008ba:	429d      	cmp	r5, r3
 80008bc:	d187      	bne.n	80007ce <__aeabi_dadd+0x4fe>
 80008be:	2580      	movs	r5, #128	; 0x80
 80008c0:	012a      	lsls	r2, r5, #4
 80008c2:	4653      	mov	r3, sl
 80008c4:	1c0c      	adds	r4, r1, #0
 80008c6:	4666      	mov	r6, ip
 80008c8:	4d12      	ldr	r5, [pc, #72]	; (8000914 <__aeabi_dadd+0x644>)
 80008ca:	e585      	b.n	80003d8 <__aeabi_dadd+0x108>
 80008cc:	1c03      	adds	r3, r0, #0
 80008ce:	4666      	mov	r6, ip
 80008d0:	2201      	movs	r2, #1
 80008d2:	2500      	movs	r5, #0
 80008d4:	e580      	b.n	80003d8 <__aeabi_dadd+0x108>
 80008d6:	2300      	movs	r3, #0
 80008d8:	e72e      	b.n	8000738 <__aeabi_dadd+0x468>
 80008da:	2a20      	cmp	r2, #32
 80008dc:	d057      	beq.n	800098e <__aeabi_dadd+0x6be>
 80008de:	2640      	movs	r6, #64	; 0x40
 80008e0:	1ab3      	subs	r3, r6, r2
 80008e2:	1c07      	adds	r7, r0, #0
 80008e4:	409f      	lsls	r7, r3
 80008e6:	1c3b      	adds	r3, r7, #0
 80008e8:	431c      	orrs	r4, r3
 80008ea:	3a20      	subs	r2, #32
 80008ec:	1e63      	subs	r3, r4, #1
 80008ee:	419c      	sbcs	r4, r3
 80008f0:	40d0      	lsrs	r0, r2
 80008f2:	4304      	orrs	r4, r0
 80008f4:	2300      	movs	r3, #0
 80008f6:	e6ae      	b.n	8000656 <__aeabi_dadd+0x386>
 80008f8:	2300      	movs	r3, #0
 80008fa:	2400      	movs	r4, #0
 80008fc:	e6ab      	b.n	8000656 <__aeabi_dadd+0x386>
 80008fe:	3a01      	subs	r2, #1
 8000900:	2a00      	cmp	r2, #0
 8000902:	d1d9      	bne.n	80008b8 <__aeabi_dadd+0x5e8>
 8000904:	4656      	mov	r6, sl
 8000906:	190c      	adds	r4, r1, r4
 8000908:	1833      	adds	r3, r6, r0
 800090a:	428c      	cmp	r4, r1
 800090c:	41b6      	sbcs	r6, r6
 800090e:	1b9b      	subs	r3, r3, r6
 8000910:	e5b1      	b.n	8000476 <__aeabi_dadd+0x1a6>
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	000007ff 	.word	0x000007ff
 8000918:	007fffff 	.word	0x007fffff
 800091c:	2800      	cmp	r0, #0
 800091e:	d101      	bne.n	8000924 <__aeabi_dadd+0x654>
 8000920:	2c00      	cmp	r4, #0
 8000922:	d022      	beq.n	800096a <__aeabi_dadd+0x69a>
 8000924:	2300      	movs	r3, #0
 8000926:	2401      	movs	r4, #1
 8000928:	e764      	b.n	80007f4 <__aeabi_dadd+0x524>
 800092a:	4652      	mov	r2, sl
 800092c:	2a00      	cmp	r2, #0
 800092e:	d101      	bne.n	8000934 <__aeabi_dadd+0x664>
 8000930:	2900      	cmp	r1, #0
 8000932:	d0cb      	beq.n	80008cc <__aeabi_dadd+0x5fc>
 8000934:	1909      	adds	r1, r1, r4
 8000936:	4655      	mov	r5, sl
 8000938:	182b      	adds	r3, r5, r0
 800093a:	42a1      	cmp	r1, r4
 800093c:	41a4      	sbcs	r4, r4
 800093e:	1b1b      	subs	r3, r3, r4
 8000940:	021e      	lsls	r6, r3, #8
 8000942:	d529      	bpl.n	8000998 <__aeabi_dadd+0x6c8>
 8000944:	4818      	ldr	r0, [pc, #96]	; (80009a8 <__aeabi_dadd+0x6d8>)
 8000946:	1c0c      	adds	r4, r1, #0
 8000948:	4003      	ands	r3, r0
 800094a:	4666      	mov	r6, ip
 800094c:	2202      	movs	r2, #2
 800094e:	2501      	movs	r5, #1
 8000950:	e542      	b.n	80003d8 <__aeabi_dadd+0x108>
 8000952:	4666      	mov	r6, ip
 8000954:	e784      	b.n	8000860 <__aeabi_dadd+0x590>
 8000956:	2b00      	cmp	r3, #0
 8000958:	d102      	bne.n	8000960 <__aeabi_dadd+0x690>
 800095a:	2a00      	cmp	r2, #0
 800095c:	d100      	bne.n	8000960 <__aeabi_dadd+0x690>
 800095e:	e6d4      	b.n	800070a <__aeabi_dadd+0x43a>
 8000960:	1c14      	adds	r4, r2, #0
 8000962:	4666      	mov	r6, ip
 8000964:	2201      	movs	r2, #1
 8000966:	2500      	movs	r5, #0
 8000968:	e536      	b.n	80003d8 <__aeabi_dadd+0x108>
 800096a:	2300      	movs	r3, #0
 800096c:	2400      	movs	r4, #0
 800096e:	e741      	b.n	80007f4 <__aeabi_dadd+0x524>
 8000970:	2a20      	cmp	r2, #32
 8000972:	d016      	beq.n	80009a2 <__aeabi_dadd+0x6d2>
 8000974:	2640      	movs	r6, #64	; 0x40
 8000976:	1ab3      	subs	r3, r6, r2
 8000978:	1c07      	adds	r7, r0, #0
 800097a:	409f      	lsls	r7, r3
 800097c:	1c3b      	adds	r3, r7, #0
 800097e:	431c      	orrs	r4, r3
 8000980:	3a20      	subs	r2, #32
 8000982:	1e63      	subs	r3, r4, #1
 8000984:	419c      	sbcs	r4, r3
 8000986:	40d0      	lsrs	r0, r2
 8000988:	4304      	orrs	r4, r0
 800098a:	2300      	movs	r3, #0
 800098c:	e732      	b.n	80007f4 <__aeabi_dadd+0x524>
 800098e:	2300      	movs	r3, #0
 8000990:	e7aa      	b.n	80008e8 <__aeabi_dadd+0x618>
 8000992:	1c03      	adds	r3, r0, #0
 8000994:	4666      	mov	r6, ip
 8000996:	e787      	b.n	80008a8 <__aeabi_dadd+0x5d8>
 8000998:	1c0c      	adds	r4, r1, #0
 800099a:	4666      	mov	r6, ip
 800099c:	2201      	movs	r2, #1
 800099e:	2500      	movs	r5, #0
 80009a0:	e51a      	b.n	80003d8 <__aeabi_dadd+0x108>
 80009a2:	2300      	movs	r3, #0
 80009a4:	e7eb      	b.n	800097e <__aeabi_dadd+0x6ae>
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	ff7fffff 	.word	0xff7fffff

080009ac <__aeabi_ddiv>:
 80009ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ae:	465f      	mov	r7, fp
 80009b0:	4656      	mov	r6, sl
 80009b2:	464d      	mov	r5, r9
 80009b4:	4644      	mov	r4, r8
 80009b6:	b4f0      	push	{r4, r5, r6, r7}
 80009b8:	1c1f      	adds	r7, r3, #0
 80009ba:	004b      	lsls	r3, r1, #1
 80009bc:	1c16      	adds	r6, r2, #0
 80009be:	030c      	lsls	r4, r1, #12
 80009c0:	0d5b      	lsrs	r3, r3, #21
 80009c2:	0fca      	lsrs	r2, r1, #31
 80009c4:	b087      	sub	sp, #28
 80009c6:	1c05      	adds	r5, r0, #0
 80009c8:	0b24      	lsrs	r4, r4, #12
 80009ca:	4698      	mov	r8, r3
 80009cc:	4691      	mov	r9, r2
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d11c      	bne.n	8000a0c <__aeabi_ddiv+0x60>
 80009d2:	2c00      	cmp	r4, #0
 80009d4:	d000      	beq.n	80009d8 <__aeabi_ddiv+0x2c>
 80009d6:	e0fb      	b.n	8000bd0 <__aeabi_ddiv+0x224>
 80009d8:	2800      	cmp	r0, #0
 80009da:	d100      	bne.n	80009de <__aeabi_ddiv+0x32>
 80009dc:	e174      	b.n	8000cc8 <__aeabi_ddiv+0x31c>
 80009de:	f001 fa1f 	bl	8001e20 <__clzsi2>
 80009e2:	3020      	adds	r0, #32
 80009e4:	1c03      	adds	r3, r0, #0
 80009e6:	3b0b      	subs	r3, #11
 80009e8:	2b1c      	cmp	r3, #28
 80009ea:	dd00      	ble.n	80009ee <__aeabi_ddiv+0x42>
 80009ec:	e244      	b.n	8000e78 <__aeabi_ddiv+0x4cc>
 80009ee:	211d      	movs	r1, #29
 80009f0:	3808      	subs	r0, #8
 80009f2:	1aca      	subs	r2, r1, r3
 80009f4:	1c29      	adds	r1, r5, #0
 80009f6:	4084      	lsls	r4, r0
 80009f8:	40d1      	lsrs	r1, r2
 80009fa:	430c      	orrs	r4, r1
 80009fc:	4085      	lsls	r5, r0
 80009fe:	48b7      	ldr	r0, [pc, #732]	; (8000cdc <__aeabi_ddiv+0x330>)
 8000a00:	1ac2      	subs	r2, r0, r3
 8000a02:	4690      	mov	r8, r2
 8000a04:	2200      	movs	r2, #0
 8000a06:	4693      	mov	fp, r2
 8000a08:	9201      	str	r2, [sp, #4]
 8000a0a:	e00e      	b.n	8000a2a <__aeabi_ddiv+0x7e>
 8000a0c:	48b4      	ldr	r0, [pc, #720]	; (8000ce0 <__aeabi_ddiv+0x334>)
 8000a0e:	4580      	cmp	r8, r0
 8000a10:	d03a      	beq.n	8000a88 <__aeabi_ddiv+0xdc>
 8000a12:	2080      	movs	r0, #128	; 0x80
 8000a14:	0343      	lsls	r3, r0, #13
 8000a16:	431c      	orrs	r4, r3
 8000a18:	49b2      	ldr	r1, [pc, #712]	; (8000ce4 <__aeabi_ddiv+0x338>)
 8000a1a:	0f6a      	lsrs	r2, r5, #29
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	00e4      	lsls	r4, r4, #3
 8000a20:	4314      	orrs	r4, r2
 8000a22:	00ed      	lsls	r5, r5, #3
 8000a24:	4488      	add	r8, r1
 8000a26:	4683      	mov	fp, r0
 8000a28:	9001      	str	r0, [sp, #4]
 8000a2a:	1c39      	adds	r1, r7, #0
 8000a2c:	004b      	lsls	r3, r1, #1
 8000a2e:	033f      	lsls	r7, r7, #12
 8000a30:	0fca      	lsrs	r2, r1, #31
 8000a32:	0d5b      	lsrs	r3, r3, #21
 8000a34:	1c30      	adds	r0, r6, #0
 8000a36:	0b3f      	lsrs	r7, r7, #12
 8000a38:	4692      	mov	sl, r2
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d12e      	bne.n	8000a9c <__aeabi_ddiv+0xf0>
 8000a3e:	2f00      	cmp	r7, #0
 8000a40:	d000      	beq.n	8000a44 <__aeabi_ddiv+0x98>
 8000a42:	e0c9      	b.n	8000bd8 <__aeabi_ddiv+0x22c>
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d100      	bne.n	8000a4a <__aeabi_ddiv+0x9e>
 8000a48:	e144      	b.n	8000cd4 <__aeabi_ddiv+0x328>
 8000a4a:	f001 f9e9 	bl	8001e20 <__clzsi2>
 8000a4e:	3020      	adds	r0, #32
 8000a50:	1c03      	adds	r3, r0, #0
 8000a52:	3b0b      	subs	r3, #11
 8000a54:	2b1c      	cmp	r3, #28
 8000a56:	dd00      	ble.n	8000a5a <__aeabi_ddiv+0xae>
 8000a58:	e208      	b.n	8000e6c <__aeabi_ddiv+0x4c0>
 8000a5a:	211d      	movs	r1, #29
 8000a5c:	3808      	subs	r0, #8
 8000a5e:	1aca      	subs	r2, r1, r3
 8000a60:	1c31      	adds	r1, r6, #0
 8000a62:	4087      	lsls	r7, r0
 8000a64:	40d1      	lsrs	r1, r2
 8000a66:	430f      	orrs	r7, r1
 8000a68:	4086      	lsls	r6, r0
 8000a6a:	489c      	ldr	r0, [pc, #624]	; (8000cdc <__aeabi_ddiv+0x330>)
 8000a6c:	4649      	mov	r1, r9
 8000a6e:	1ac3      	subs	r3, r0, r3
 8000a70:	4650      	mov	r0, sl
 8000a72:	4048      	eors	r0, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	9002      	str	r0, [sp, #8]
 8000a78:	4658      	mov	r0, fp
 8000a7a:	4310      	orrs	r0, r2
 8000a7c:	280f      	cmp	r0, #15
 8000a7e:	d823      	bhi.n	8000ac8 <__aeabi_ddiv+0x11c>
 8000a80:	4999      	ldr	r1, [pc, #612]	; (8000ce8 <__aeabi_ddiv+0x33c>)
 8000a82:	0080      	lsls	r0, r0, #2
 8000a84:	5841      	ldr	r1, [r0, r1]
 8000a86:	468f      	mov	pc, r1
 8000a88:	2c00      	cmp	r4, #0
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_ddiv+0xe6>
 8000a8c:	2d00      	cmp	r5, #0
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_ddiv+0xe6>
 8000a90:	e114      	b.n	8000cbc <__aeabi_ddiv+0x310>
 8000a92:	230c      	movs	r3, #12
 8000a94:	469b      	mov	fp, r3
 8000a96:	2303      	movs	r3, #3
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	e7c6      	b.n	8000a2a <__aeabi_ddiv+0x7e>
 8000a9c:	4a90      	ldr	r2, [pc, #576]	; (8000ce0 <__aeabi_ddiv+0x334>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_ddiv+0xf8>
 8000aa2:	e08c      	b.n	8000bbe <__aeabi_ddiv+0x212>
 8000aa4:	2080      	movs	r0, #128	; 0x80
 8000aa6:	0342      	lsls	r2, r0, #13
 8000aa8:	4317      	orrs	r7, r2
 8000aaa:	488e      	ldr	r0, [pc, #568]	; (8000ce4 <__aeabi_ddiv+0x338>)
 8000aac:	0f71      	lsrs	r1, r6, #29
 8000aae:	00ff      	lsls	r7, r7, #3
 8000ab0:	430f      	orrs	r7, r1
 8000ab2:	00f6      	lsls	r6, r6, #3
 8000ab4:	181b      	adds	r3, r3, r0
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4650      	mov	r0, sl
 8000aba:	4649      	mov	r1, r9
 8000abc:	4048      	eors	r0, r1
 8000abe:	9002      	str	r0, [sp, #8]
 8000ac0:	4658      	mov	r0, fp
 8000ac2:	4310      	orrs	r0, r2
 8000ac4:	280f      	cmp	r0, #15
 8000ac6:	d9db      	bls.n	8000a80 <__aeabi_ddiv+0xd4>
 8000ac8:	4640      	mov	r0, r8
 8000aca:	1ac1      	subs	r1, r0, r3
 8000acc:	9105      	str	r1, [sp, #20]
 8000ace:	42bc      	cmp	r4, r7
 8000ad0:	d800      	bhi.n	8000ad4 <__aeabi_ddiv+0x128>
 8000ad2:	e0e2      	b.n	8000c9a <__aeabi_ddiv+0x2ee>
 8000ad4:	0861      	lsrs	r1, r4, #1
 8000ad6:	086b      	lsrs	r3, r5, #1
 8000ad8:	07e4      	lsls	r4, r4, #31
 8000ada:	4323      	orrs	r3, r4
 8000adc:	07ed      	lsls	r5, r5, #31
 8000ade:	468a      	mov	sl, r1
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	9503      	str	r5, [sp, #12]
 8000ae4:	0e35      	lsrs	r5, r6, #24
 8000ae6:	023f      	lsls	r7, r7, #8
 8000ae8:	432f      	orrs	r7, r5
 8000aea:	b2b8      	uxth	r0, r7
 8000aec:	0235      	lsls	r5, r6, #8
 8000aee:	0c3e      	lsrs	r6, r7, #16
 8000af0:	4681      	mov	r9, r0
 8000af2:	1c31      	adds	r1, r6, #0
 8000af4:	4650      	mov	r0, sl
 8000af6:	f7ff fafd 	bl	80000f4 <__aeabi_uidiv>
 8000afa:	4649      	mov	r1, r9
 8000afc:	4341      	muls	r1, r0
 8000afe:	1c04      	adds	r4, r0, #0
 8000b00:	4688      	mov	r8, r1
 8000b02:	4650      	mov	r0, sl
 8000b04:	1c31      	adds	r1, r6, #0
 8000b06:	f7ff fb39 	bl	800017c <__aeabi_uidivmod>
 8000b0a:	9a01      	ldr	r2, [sp, #4]
 8000b0c:	0409      	lsls	r1, r1, #16
 8000b0e:	0c13      	lsrs	r3, r2, #16
 8000b10:	4319      	orrs	r1, r3
 8000b12:	4588      	cmp	r8, r1
 8000b14:	d907      	bls.n	8000b26 <__aeabi_ddiv+0x17a>
 8000b16:	19c9      	adds	r1, r1, r7
 8000b18:	3c01      	subs	r4, #1
 8000b1a:	428f      	cmp	r7, r1
 8000b1c:	d803      	bhi.n	8000b26 <__aeabi_ddiv+0x17a>
 8000b1e:	4588      	cmp	r8, r1
 8000b20:	d901      	bls.n	8000b26 <__aeabi_ddiv+0x17a>
 8000b22:	3c01      	subs	r4, #1
 8000b24:	19c9      	adds	r1, r1, r7
 8000b26:	4643      	mov	r3, r8
 8000b28:	1acb      	subs	r3, r1, r3
 8000b2a:	1c18      	adds	r0, r3, #0
 8000b2c:	1c31      	adds	r1, r6, #0
 8000b2e:	469b      	mov	fp, r3
 8000b30:	f7ff fae0 	bl	80000f4 <__aeabi_uidiv>
 8000b34:	4649      	mov	r1, r9
 8000b36:	4341      	muls	r1, r0
 8000b38:	4680      	mov	r8, r0
 8000b3a:	468a      	mov	sl, r1
 8000b3c:	4658      	mov	r0, fp
 8000b3e:	1c31      	adds	r1, r6, #0
 8000b40:	f7ff fb1c 	bl	800017c <__aeabi_uidivmod>
 8000b44:	4668      	mov	r0, sp
 8000b46:	040b      	lsls	r3, r1, #16
 8000b48:	1d01      	adds	r1, r0, #4
 8000b4a:	880a      	ldrh	r2, [r1, #0]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	459a      	cmp	sl, r3
 8000b50:	d906      	bls.n	8000b60 <__aeabi_ddiv+0x1b4>
 8000b52:	2201      	movs	r2, #1
 8000b54:	4252      	negs	r2, r2
 8000b56:	19db      	adds	r3, r3, r7
 8000b58:	4490      	add	r8, r2
 8000b5a:	429f      	cmp	r7, r3
 8000b5c:	d800      	bhi.n	8000b60 <__aeabi_ddiv+0x1b4>
 8000b5e:	e1a7      	b.n	8000eb0 <__aeabi_ddiv+0x504>
 8000b60:	4641      	mov	r1, r8
 8000b62:	0424      	lsls	r4, r4, #16
 8000b64:	4650      	mov	r0, sl
 8000b66:	430c      	orrs	r4, r1
 8000b68:	b2a1      	uxth	r1, r4
 8000b6a:	b2aa      	uxth	r2, r5
 8000b6c:	1a1b      	subs	r3, r3, r0
 8000b6e:	0c28      	lsrs	r0, r5, #16
 8000b70:	4690      	mov	r8, r2
 8000b72:	4682      	mov	sl, r0
 8000b74:	434a      	muls	r2, r1
 8000b76:	4348      	muls	r0, r1
 8000b78:	9201      	str	r2, [sp, #4]
 8000b7a:	4683      	mov	fp, r0
 8000b7c:	4652      	mov	r2, sl
 8000b7e:	0c20      	lsrs	r0, r4, #16
 8000b80:	4641      	mov	r1, r8
 8000b82:	4341      	muls	r1, r0
 8000b84:	4350      	muls	r0, r2
 8000b86:	9a01      	ldr	r2, [sp, #4]
 8000b88:	0c12      	lsrs	r2, r2, #16
 8000b8a:	4694      	mov	ip, r2
 8000b8c:	448c      	add	ip, r1
 8000b8e:	44dc      	add	ip, fp
 8000b90:	4561      	cmp	r1, ip
 8000b92:	d902      	bls.n	8000b9a <__aeabi_ddiv+0x1ee>
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	024a      	lsls	r2, r1, #9
 8000b98:	1880      	adds	r0, r0, r2
 8000b9a:	4662      	mov	r2, ip
 8000b9c:	0c11      	lsrs	r1, r2, #16
 8000b9e:	0412      	lsls	r2, r2, #16
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	1840      	adds	r0, r0, r1
 8000ba4:	9a01      	ldr	r2, [sp, #4]
 8000ba6:	4951      	ldr	r1, [pc, #324]	; (8000cec <__aeabi_ddiv+0x340>)
 8000ba8:	400a      	ands	r2, r1
 8000baa:	4462      	add	r2, ip
 8000bac:	9201      	str	r2, [sp, #4]
 8000bae:	4283      	cmp	r3, r0
 8000bb0:	d200      	bcs.n	8000bb4 <__aeabi_ddiv+0x208>
 8000bb2:	e0af      	b.n	8000d14 <__aeabi_ddiv+0x368>
 8000bb4:	4283      	cmp	r3, r0
 8000bb6:	d100      	bne.n	8000bba <__aeabi_ddiv+0x20e>
 8000bb8:	e0a8      	b.n	8000d0c <__aeabi_ddiv+0x360>
 8000bba:	9a03      	ldr	r2, [sp, #12]
 8000bbc:	e0c2      	b.n	8000d44 <__aeabi_ddiv+0x398>
 8000bbe:	2f00      	cmp	r7, #0
 8000bc0:	d001      	beq.n	8000bc6 <__aeabi_ddiv+0x21a>
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	e778      	b.n	8000ab8 <__aeabi_ddiv+0x10c>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d1fb      	bne.n	8000bc2 <__aeabi_ddiv+0x216>
 8000bca:	1c37      	adds	r7, r6, #0
 8000bcc:	2202      	movs	r2, #2
 8000bce:	e773      	b.n	8000ab8 <__aeabi_ddiv+0x10c>
 8000bd0:	1c20      	adds	r0, r4, #0
 8000bd2:	f001 f925 	bl	8001e20 <__clzsi2>
 8000bd6:	e705      	b.n	80009e4 <__aeabi_ddiv+0x38>
 8000bd8:	1c38      	adds	r0, r7, #0
 8000bda:	f001 f921 	bl	8001e20 <__clzsi2>
 8000bde:	e737      	b.n	8000a50 <__aeabi_ddiv+0xa4>
 8000be0:	9b02      	ldr	r3, [sp, #8]
 8000be2:	4a3f      	ldr	r2, [pc, #252]	; (8000ce0 <__aeabi_ddiv+0x334>)
 8000be4:	2400      	movs	r4, #0
 8000be6:	2600      	movs	r6, #0
 8000be8:	4f41      	ldr	r7, [pc, #260]	; (8000cf0 <__aeabi_ddiv+0x344>)
 8000bea:	2000      	movs	r0, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	400f      	ands	r7, r1
 8000bf0:	1c30      	adds	r0, r6, #0
 8000bf2:	4e40      	ldr	r6, [pc, #256]	; (8000cf4 <__aeabi_ddiv+0x348>)
 8000bf4:	4327      	orrs	r7, r4
 8000bf6:	403e      	ands	r6, r7
 8000bf8:	0512      	lsls	r2, r2, #20
 8000bfa:	4c3f      	ldr	r4, [pc, #252]	; (8000cf8 <__aeabi_ddiv+0x34c>)
 8000bfc:	4316      	orrs	r6, r2
 8000bfe:	4026      	ands	r6, r4
 8000c00:	1c31      	adds	r1, r6, #0
 8000c02:	07db      	lsls	r3, r3, #31
 8000c04:	b007      	add	sp, #28
 8000c06:	4319      	orrs	r1, r3
 8000c08:	bc3c      	pop	{r2, r3, r4, r5}
 8000c0a:	4690      	mov	r8, r2
 8000c0c:	4699      	mov	r9, r3
 8000c0e:	46a2      	mov	sl, r4
 8000c10:	46ab      	mov	fp, r5
 8000c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c14:	9b02      	ldr	r3, [sp, #8]
 8000c16:	2200      	movs	r2, #0
 8000c18:	2400      	movs	r4, #0
 8000c1a:	2600      	movs	r6, #0
 8000c1c:	e7e4      	b.n	8000be8 <__aeabi_ddiv+0x23c>
 8000c1e:	4651      	mov	r1, sl
 8000c20:	1c3c      	adds	r4, r7, #0
 8000c22:	9102      	str	r1, [sp, #8]
 8000c24:	2a02      	cmp	r2, #2
 8000c26:	d0db      	beq.n	8000be0 <__aeabi_ddiv+0x234>
 8000c28:	2a03      	cmp	r2, #3
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_ddiv+0x282>
 8000c2c:	e18b      	b.n	8000f46 <__aeabi_ddiv+0x59a>
 8000c2e:	2a01      	cmp	r2, #1
 8000c30:	d0f0      	beq.n	8000c14 <__aeabi_ddiv+0x268>
 8000c32:	9a05      	ldr	r2, [sp, #20]
 8000c34:	4831      	ldr	r0, [pc, #196]	; (8000cfc <__aeabi_ddiv+0x350>)
 8000c36:	1813      	adds	r3, r2, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	dc00      	bgt.n	8000c3e <__aeabi_ddiv+0x292>
 8000c3c:	e13e      	b.n	8000ebc <__aeabi_ddiv+0x510>
 8000c3e:	270f      	movs	r7, #15
 8000c40:	4037      	ands	r7, r6
 8000c42:	2f04      	cmp	r7, #4
 8000c44:	d004      	beq.n	8000c50 <__aeabi_ddiv+0x2a4>
 8000c46:	1d35      	adds	r5, r6, #4
 8000c48:	42b5      	cmp	r5, r6
 8000c4a:	41b6      	sbcs	r6, r6
 8000c4c:	1ba4      	subs	r4, r4, r6
 8000c4e:	1c2e      	adds	r6, r5, #0
 8000c50:	01e2      	lsls	r2, r4, #7
 8000c52:	d502      	bpl.n	8000c5a <__aeabi_ddiv+0x2ae>
 8000c54:	492a      	ldr	r1, [pc, #168]	; (8000d00 <__aeabi_ddiv+0x354>)
 8000c56:	3301      	adds	r3, #1
 8000c58:	400c      	ands	r4, r1
 8000c5a:	4a2a      	ldr	r2, [pc, #168]	; (8000d04 <__aeabi_ddiv+0x358>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	dc00      	bgt.n	8000c62 <__aeabi_ddiv+0x2b6>
 8000c60:	e110      	b.n	8000e84 <__aeabi_ddiv+0x4d8>
 8000c62:	9b02      	ldr	r3, [sp, #8]
 8000c64:	3201      	adds	r2, #1
 8000c66:	2400      	movs	r4, #0
 8000c68:	2600      	movs	r6, #0
 8000c6a:	e7bd      	b.n	8000be8 <__aeabi_ddiv+0x23c>
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	031b      	lsls	r3, r3, #12
 8000c70:	421c      	tst	r4, r3
 8000c72:	d01f      	beq.n	8000cb4 <__aeabi_ddiv+0x308>
 8000c74:	421f      	tst	r7, r3
 8000c76:	d11d      	bne.n	8000cb4 <__aeabi_ddiv+0x308>
 8000c78:	1c3c      	adds	r4, r7, #0
 8000c7a:	431c      	orrs	r4, r3
 8000c7c:	4653      	mov	r3, sl
 8000c7e:	e008      	b.n	8000c92 <__aeabi_ddiv+0x2e6>
 8000c80:	464a      	mov	r2, r9
 8000c82:	9202      	str	r2, [sp, #8]
 8000c84:	1c2e      	adds	r6, r5, #0
 8000c86:	9a01      	ldr	r2, [sp, #4]
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_ddiv+0x278>
 8000c8a:	2501      	movs	r5, #1
 8000c8c:	4c1e      	ldr	r4, [pc, #120]	; (8000d08 <__aeabi_ddiv+0x35c>)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	426e      	negs	r6, r5
 8000c92:	491d      	ldr	r1, [pc, #116]	; (8000d08 <__aeabi_ddiv+0x35c>)
 8000c94:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <__aeabi_ddiv+0x334>)
 8000c96:	400c      	ands	r4, r1
 8000c98:	e7a6      	b.n	8000be8 <__aeabi_ddiv+0x23c>
 8000c9a:	42b5      	cmp	r5, r6
 8000c9c:	d902      	bls.n	8000ca4 <__aeabi_ddiv+0x2f8>
 8000c9e:	42bc      	cmp	r4, r7
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x2f8>
 8000ca2:	e717      	b.n	8000ad4 <__aeabi_ddiv+0x128>
 8000ca4:	9805      	ldr	r0, [sp, #20]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	3801      	subs	r0, #1
 8000caa:	9005      	str	r0, [sp, #20]
 8000cac:	9501      	str	r5, [sp, #4]
 8000cae:	46a2      	mov	sl, r4
 8000cb0:	9203      	str	r2, [sp, #12]
 8000cb2:	e717      	b.n	8000ae4 <__aeabi_ddiv+0x138>
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	1c2e      	adds	r6, r5, #0
 8000cb8:	464b      	mov	r3, r9
 8000cba:	e7ea      	b.n	8000c92 <__aeabi_ddiv+0x2e6>
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	468b      	mov	fp, r1
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	1c2c      	adds	r4, r5, #0
 8000cc4:	9101      	str	r1, [sp, #4]
 8000cc6:	e6b0      	b.n	8000a2a <__aeabi_ddiv+0x7e>
 8000cc8:	2104      	movs	r1, #4
 8000cca:	468b      	mov	fp, r1
 8000ccc:	2101      	movs	r1, #1
 8000cce:	1c04      	adds	r4, r0, #0
 8000cd0:	9101      	str	r1, [sp, #4]
 8000cd2:	e6aa      	b.n	8000a2a <__aeabi_ddiv+0x7e>
 8000cd4:	1c37      	adds	r7, r6, #0
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	e6ee      	b.n	8000ab8 <__aeabi_ddiv+0x10c>
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	fffffc02 	.word	0xfffffc02
 8000ce0:	000007ff 	.word	0x000007ff
 8000ce4:	fffffc01 	.word	0xfffffc01
 8000ce8:	0800a9e8 	.word	0x0800a9e8
 8000cec:	0000ffff 	.word	0x0000ffff
 8000cf0:	fff00000 	.word	0xfff00000
 8000cf4:	800fffff 	.word	0x800fffff
 8000cf8:	7fffffff 	.word	0x7fffffff
 8000cfc:	000003ff 	.word	0x000003ff
 8000d00:	feffffff 	.word	0xfeffffff
 8000d04:	000007fe 	.word	0x000007fe
 8000d08:	000fffff 	.word	0x000fffff
 8000d0c:	9903      	ldr	r1, [sp, #12]
 8000d0e:	4291      	cmp	r1, r2
 8000d10:	d300      	bcc.n	8000d14 <__aeabi_ddiv+0x368>
 8000d12:	e752      	b.n	8000bba <__aeabi_ddiv+0x20e>
 8000d14:	9903      	ldr	r1, [sp, #12]
 8000d16:	3c01      	subs	r4, #1
 8000d18:	194a      	adds	r2, r1, r5
 8000d1a:	42aa      	cmp	r2, r5
 8000d1c:	4189      	sbcs	r1, r1
 8000d1e:	1a79      	subs	r1, r7, r1
 8000d20:	468b      	mov	fp, r1
 8000d22:	445b      	add	r3, fp
 8000d24:	429f      	cmp	r7, r3
 8000d26:	d303      	bcc.n	8000d30 <__aeabi_ddiv+0x384>
 8000d28:	42bb      	cmp	r3, r7
 8000d2a:	d10b      	bne.n	8000d44 <__aeabi_ddiv+0x398>
 8000d2c:	4295      	cmp	r5, r2
 8000d2e:	d809      	bhi.n	8000d44 <__aeabi_ddiv+0x398>
 8000d30:	4298      	cmp	r0, r3
 8000d32:	d800      	bhi.n	8000d36 <__aeabi_ddiv+0x38a>
 8000d34:	e0af      	b.n	8000e96 <__aeabi_ddiv+0x4ea>
 8000d36:	1952      	adds	r2, r2, r5
 8000d38:	42aa      	cmp	r2, r5
 8000d3a:	4189      	sbcs	r1, r1
 8000d3c:	1a79      	subs	r1, r7, r1
 8000d3e:	468c      	mov	ip, r1
 8000d40:	3c01      	subs	r4, #1
 8000d42:	4463      	add	r3, ip
 8000d44:	9901      	ldr	r1, [sp, #4]
 8000d46:	1a18      	subs	r0, r3, r0
 8000d48:	1a51      	subs	r1, r2, r1
 8000d4a:	428a      	cmp	r2, r1
 8000d4c:	419b      	sbcs	r3, r3
 8000d4e:	18c0      	adds	r0, r0, r3
 8000d50:	4683      	mov	fp, r0
 8000d52:	9101      	str	r1, [sp, #4]
 8000d54:	45bb      	cmp	fp, r7
 8000d56:	d100      	bne.n	8000d5a <__aeabi_ddiv+0x3ae>
 8000d58:	e0d5      	b.n	8000f06 <__aeabi_ddiv+0x55a>
 8000d5a:	1c31      	adds	r1, r6, #0
 8000d5c:	f7ff f9ca 	bl	80000f4 <__aeabi_uidiv>
 8000d60:	464a      	mov	r2, r9
 8000d62:	4342      	muls	r2, r0
 8000d64:	9003      	str	r0, [sp, #12]
 8000d66:	1c31      	adds	r1, r6, #0
 8000d68:	4658      	mov	r0, fp
 8000d6a:	9204      	str	r2, [sp, #16]
 8000d6c:	f7ff fa06 	bl	800017c <__aeabi_uidivmod>
 8000d70:	9801      	ldr	r0, [sp, #4]
 8000d72:	040a      	lsls	r2, r1, #16
 8000d74:	0c03      	lsrs	r3, r0, #16
 8000d76:	9904      	ldr	r1, [sp, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	d90a      	bls.n	8000d94 <__aeabi_ddiv+0x3e8>
 8000d7e:	9a03      	ldr	r2, [sp, #12]
 8000d80:	19db      	adds	r3, r3, r7
 8000d82:	3a01      	subs	r2, #1
 8000d84:	9203      	str	r2, [sp, #12]
 8000d86:	429f      	cmp	r7, r3
 8000d88:	d804      	bhi.n	8000d94 <__aeabi_ddiv+0x3e8>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	d902      	bls.n	8000d94 <__aeabi_ddiv+0x3e8>
 8000d8e:	3a01      	subs	r2, #1
 8000d90:	9203      	str	r2, [sp, #12]
 8000d92:	19db      	adds	r3, r3, r7
 8000d94:	9804      	ldr	r0, [sp, #16]
 8000d96:	1c31      	adds	r1, r6, #0
 8000d98:	1a1b      	subs	r3, r3, r0
 8000d9a:	1c18      	adds	r0, r3, #0
 8000d9c:	9304      	str	r3, [sp, #16]
 8000d9e:	f7ff f9a9 	bl	80000f4 <__aeabi_uidiv>
 8000da2:	4649      	mov	r1, r9
 8000da4:	4341      	muls	r1, r0
 8000da6:	4683      	mov	fp, r0
 8000da8:	4689      	mov	r9, r1
 8000daa:	9804      	ldr	r0, [sp, #16]
 8000dac:	1c31      	adds	r1, r6, #0
 8000dae:	f7ff f9e5 	bl	800017c <__aeabi_uidivmod>
 8000db2:	466a      	mov	r2, sp
 8000db4:	1d13      	adds	r3, r2, #4
 8000db6:	881e      	ldrh	r6, [r3, #0]
 8000db8:	0409      	lsls	r1, r1, #16
 8000dba:	4331      	orrs	r1, r6
 8000dbc:	4589      	cmp	r9, r1
 8000dbe:	d909      	bls.n	8000dd4 <__aeabi_ddiv+0x428>
 8000dc0:	2601      	movs	r6, #1
 8000dc2:	4272      	negs	r2, r6
 8000dc4:	19c9      	adds	r1, r1, r7
 8000dc6:	4493      	add	fp, r2
 8000dc8:	428f      	cmp	r7, r1
 8000dca:	d803      	bhi.n	8000dd4 <__aeabi_ddiv+0x428>
 8000dcc:	4589      	cmp	r9, r1
 8000dce:	d901      	bls.n	8000dd4 <__aeabi_ddiv+0x428>
 8000dd0:	4493      	add	fp, r2
 8000dd2:	19c9      	adds	r1, r1, r7
 8000dd4:	9803      	ldr	r0, [sp, #12]
 8000dd6:	465a      	mov	r2, fp
 8000dd8:	0406      	lsls	r6, r0, #16
 8000dda:	464b      	mov	r3, r9
 8000ddc:	4316      	orrs	r6, r2
 8000dde:	b2b2      	uxth	r2, r6
 8000de0:	4650      	mov	r0, sl
 8000de2:	1ac9      	subs	r1, r1, r3
 8000de4:	4643      	mov	r3, r8
 8000de6:	4353      	muls	r3, r2
 8000de8:	4350      	muls	r0, r2
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	4683      	mov	fp, r0
 8000dee:	0c33      	lsrs	r3, r6, #16
 8000df0:	4650      	mov	r0, sl
 8000df2:	4358      	muls	r0, r3
 8000df4:	4642      	mov	r2, r8
 8000df6:	435a      	muls	r2, r3
 8000df8:	4681      	mov	r9, r0
 8000dfa:	9801      	ldr	r0, [sp, #4]
 8000dfc:	4690      	mov	r8, r2
 8000dfe:	0c02      	lsrs	r2, r0, #16
 8000e00:	4692      	mov	sl, r2
 8000e02:	44c2      	add	sl, r8
 8000e04:	465a      	mov	r2, fp
 8000e06:	4452      	add	r2, sl
 8000e08:	4590      	cmp	r8, r2
 8000e0a:	d902      	bls.n	8000e12 <__aeabi_ddiv+0x466>
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	0258      	lsls	r0, r3, #9
 8000e10:	4481      	add	r9, r0
 8000e12:	0c13      	lsrs	r3, r2, #16
 8000e14:	0412      	lsls	r2, r2, #16
 8000e16:	4690      	mov	r8, r2
 8000e18:	9801      	ldr	r0, [sp, #4]
 8000e1a:	4a4d      	ldr	r2, [pc, #308]	; (8000f50 <__aeabi_ddiv+0x5a4>)
 8000e1c:	469c      	mov	ip, r3
 8000e1e:	464b      	mov	r3, r9
 8000e20:	4010      	ands	r0, r2
 8000e22:	4463      	add	r3, ip
 8000e24:	4480      	add	r8, r0
 8000e26:	4299      	cmp	r1, r3
 8000e28:	d30b      	bcc.n	8000e42 <__aeabi_ddiv+0x496>
 8000e2a:	4642      	mov	r2, r8
 8000e2c:	1e50      	subs	r0, r2, #1
 8000e2e:	4182      	sbcs	r2, r0
 8000e30:	4299      	cmp	r1, r3
 8000e32:	d004      	beq.n	8000e3e <__aeabi_ddiv+0x492>
 8000e34:	4299      	cmp	r1, r3
 8000e36:	d069      	beq.n	8000f0c <__aeabi_ddiv+0x560>
 8000e38:	2101      	movs	r1, #1
 8000e3a:	430e      	orrs	r6, r1
 8000e3c:	e6f9      	b.n	8000c32 <__aeabi_ddiv+0x286>
 8000e3e:	2a00      	cmp	r2, #0
 8000e40:	d0f8      	beq.n	8000e34 <__aeabi_ddiv+0x488>
 8000e42:	19c9      	adds	r1, r1, r7
 8000e44:	3e01      	subs	r6, #1
 8000e46:	428f      	cmp	r7, r1
 8000e48:	d82d      	bhi.n	8000ea6 <__aeabi_ddiv+0x4fa>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d803      	bhi.n	8000e56 <__aeabi_ddiv+0x4aa>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d129      	bne.n	8000ea6 <__aeabi_ddiv+0x4fa>
 8000e52:	4545      	cmp	r5, r8
 8000e54:	d227      	bcs.n	8000ea6 <__aeabi_ddiv+0x4fa>
 8000e56:	006a      	lsls	r2, r5, #1
 8000e58:	42aa      	cmp	r2, r5
 8000e5a:	41ad      	sbcs	r5, r5
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	1b7f      	subs	r7, r7, r5
 8000e60:	1a82      	subs	r2, r0, r2
 8000e62:	3e01      	subs	r6, #1
 8000e64:	19c9      	adds	r1, r1, r7
 8000e66:	1e50      	subs	r0, r2, #1
 8000e68:	4182      	sbcs	r2, r0
 8000e6a:	e7e3      	b.n	8000e34 <__aeabi_ddiv+0x488>
 8000e6c:	1c07      	adds	r7, r0, #0
 8000e6e:	3f28      	subs	r7, #40	; 0x28
 8000e70:	40be      	lsls	r6, r7
 8000e72:	1c37      	adds	r7, r6, #0
 8000e74:	2600      	movs	r6, #0
 8000e76:	e5f8      	b.n	8000a6a <__aeabi_ddiv+0xbe>
 8000e78:	1c04      	adds	r4, r0, #0
 8000e7a:	3c28      	subs	r4, #40	; 0x28
 8000e7c:	40a5      	lsls	r5, r4
 8000e7e:	1c2c      	adds	r4, r5, #0
 8000e80:	2500      	movs	r5, #0
 8000e82:	e5bc      	b.n	80009fe <__aeabi_ddiv+0x52>
 8000e84:	0762      	lsls	r2, r4, #29
 8000e86:	08f6      	lsrs	r6, r6, #3
 8000e88:	4316      	orrs	r6, r2
 8000e8a:	4a32      	ldr	r2, [pc, #200]	; (8000f54 <__aeabi_ddiv+0x5a8>)
 8000e8c:	0264      	lsls	r4, r4, #9
 8000e8e:	401a      	ands	r2, r3
 8000e90:	0b24      	lsrs	r4, r4, #12
 8000e92:	9b02      	ldr	r3, [sp, #8]
 8000e94:	e6a8      	b.n	8000be8 <__aeabi_ddiv+0x23c>
 8000e96:	4298      	cmp	r0, r3
 8000e98:	d000      	beq.n	8000e9c <__aeabi_ddiv+0x4f0>
 8000e9a:	e753      	b.n	8000d44 <__aeabi_ddiv+0x398>
 8000e9c:	9901      	ldr	r1, [sp, #4]
 8000e9e:	4291      	cmp	r1, r2
 8000ea0:	d800      	bhi.n	8000ea4 <__aeabi_ddiv+0x4f8>
 8000ea2:	e74f      	b.n	8000d44 <__aeabi_ddiv+0x398>
 8000ea4:	e747      	b.n	8000d36 <__aeabi_ddiv+0x38a>
 8000ea6:	4640      	mov	r0, r8
 8000ea8:	1a2a      	subs	r2, r5, r0
 8000eaa:	1e50      	subs	r0, r2, #1
 8000eac:	4182      	sbcs	r2, r0
 8000eae:	e7c1      	b.n	8000e34 <__aeabi_ddiv+0x488>
 8000eb0:	459a      	cmp	sl, r3
 8000eb2:	d800      	bhi.n	8000eb6 <__aeabi_ddiv+0x50a>
 8000eb4:	e654      	b.n	8000b60 <__aeabi_ddiv+0x1b4>
 8000eb6:	4490      	add	r8, r2
 8000eb8:	19db      	adds	r3, r3, r7
 8000eba:	e651      	b.n	8000b60 <__aeabi_ddiv+0x1b4>
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	1ac3      	subs	r3, r0, r3
 8000ec0:	2b38      	cmp	r3, #56	; 0x38
 8000ec2:	dd00      	ble.n	8000ec6 <__aeabi_ddiv+0x51a>
 8000ec4:	e6a6      	b.n	8000c14 <__aeabi_ddiv+0x268>
 8000ec6:	2b1f      	cmp	r3, #31
 8000ec8:	dc24      	bgt.n	8000f14 <__aeabi_ddiv+0x568>
 8000eca:	2220      	movs	r2, #32
 8000ecc:	1ad1      	subs	r1, r2, r3
 8000ece:	1c20      	adds	r0, r4, #0
 8000ed0:	1c35      	adds	r5, r6, #0
 8000ed2:	4088      	lsls	r0, r1
 8000ed4:	408e      	lsls	r6, r1
 8000ed6:	40dd      	lsrs	r5, r3
 8000ed8:	4305      	orrs	r5, r0
 8000eda:	1c37      	adds	r7, r6, #0
 8000edc:	1e78      	subs	r0, r7, #1
 8000ede:	4187      	sbcs	r7, r0
 8000ee0:	1c2e      	adds	r6, r5, #0
 8000ee2:	433e      	orrs	r6, r7
 8000ee4:	40dc      	lsrs	r4, r3
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	4033      	ands	r3, r6
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d004      	beq.n	8000ef8 <__aeabi_ddiv+0x54c>
 8000eee:	1d30      	adds	r0, r6, #4
 8000ef0:	42b0      	cmp	r0, r6
 8000ef2:	41b6      	sbcs	r6, r6
 8000ef4:	1ba4      	subs	r4, r4, r6
 8000ef6:	1c06      	adds	r6, r0, #0
 8000ef8:	0221      	lsls	r1, r4, #8
 8000efa:	d51a      	bpl.n	8000f32 <__aeabi_ddiv+0x586>
 8000efc:	9b02      	ldr	r3, [sp, #8]
 8000efe:	2201      	movs	r2, #1
 8000f00:	2400      	movs	r4, #0
 8000f02:	2600      	movs	r6, #0
 8000f04:	e670      	b.n	8000be8 <__aeabi_ddiv+0x23c>
 8000f06:	2001      	movs	r0, #1
 8000f08:	4246      	negs	r6, r0
 8000f0a:	e692      	b.n	8000c32 <__aeabi_ddiv+0x286>
 8000f0c:	2a00      	cmp	r2, #0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_ddiv+0x566>
 8000f10:	e68f      	b.n	8000c32 <__aeabi_ddiv+0x286>
 8000f12:	e791      	b.n	8000e38 <__aeabi_ddiv+0x48c>
 8000f14:	2b20      	cmp	r3, #32
 8000f16:	d014      	beq.n	8000f42 <__aeabi_ddiv+0x596>
 8000f18:	2140      	movs	r1, #64	; 0x40
 8000f1a:	1acd      	subs	r5, r1, r3
 8000f1c:	1c27      	adds	r7, r4, #0
 8000f1e:	40af      	lsls	r7, r5
 8000f20:	1c3d      	adds	r5, r7, #0
 8000f22:	432e      	orrs	r6, r5
 8000f24:	3b20      	subs	r3, #32
 8000f26:	40dc      	lsrs	r4, r3
 8000f28:	1e72      	subs	r2, r6, #1
 8000f2a:	4196      	sbcs	r6, r2
 8000f2c:	4326      	orrs	r6, r4
 8000f2e:	2400      	movs	r4, #0
 8000f30:	e7d9      	b.n	8000ee6 <__aeabi_ddiv+0x53a>
 8000f32:	0762      	lsls	r2, r4, #29
 8000f34:	08f6      	lsrs	r6, r6, #3
 8000f36:	0264      	lsls	r4, r4, #9
 8000f38:	4316      	orrs	r6, r2
 8000f3a:	0b24      	lsrs	r4, r4, #12
 8000f3c:	9b02      	ldr	r3, [sp, #8]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	e652      	b.n	8000be8 <__aeabi_ddiv+0x23c>
 8000f42:	2500      	movs	r5, #0
 8000f44:	e7ed      	b.n	8000f22 <__aeabi_ddiv+0x576>
 8000f46:	2580      	movs	r5, #128	; 0x80
 8000f48:	032f      	lsls	r7, r5, #12
 8000f4a:	433c      	orrs	r4, r7
 8000f4c:	9b02      	ldr	r3, [sp, #8]
 8000f4e:	e6a0      	b.n	8000c92 <__aeabi_ddiv+0x2e6>
 8000f50:	0000ffff 	.word	0x0000ffff
 8000f54:	000007ff 	.word	0x000007ff

08000f58 <__eqdf2>:
 8000f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5a:	4694      	mov	ip, r2
 8000f5c:	031a      	lsls	r2, r3, #12
 8000f5e:	030d      	lsls	r5, r1, #12
 8000f60:	004c      	lsls	r4, r1, #1
 8000f62:	1c06      	adds	r6, r0, #0
 8000f64:	0b17      	lsrs	r7, r2, #12
 8000f66:	0fc8      	lsrs	r0, r1, #31
 8000f68:	0fda      	lsrs	r2, r3, #31
 8000f6a:	0059      	lsls	r1, r3, #1
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <__eqdf2+0x64>)
 8000f6e:	0d64      	lsrs	r4, r4, #21
 8000f70:	0b2d      	lsrs	r5, r5, #12
 8000f72:	0d49      	lsrs	r1, r1, #21
 8000f74:	429c      	cmp	r4, r3
 8000f76:	d013      	beq.n	8000fa0 <__eqdf2+0x48>
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <__eqdf2+0x64>)
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d015      	beq.n	8000faa <__eqdf2+0x52>
 8000f7e:	428c      	cmp	r4, r1
 8000f80:	d001      	beq.n	8000f86 <__eqdf2+0x2e>
 8000f82:	2001      	movs	r0, #1
 8000f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f86:	42bd      	cmp	r5, r7
 8000f88:	d1fb      	bne.n	8000f82 <__eqdf2+0x2a>
 8000f8a:	4566      	cmp	r6, ip
 8000f8c:	d1f9      	bne.n	8000f82 <__eqdf2+0x2a>
 8000f8e:	4290      	cmp	r0, r2
 8000f90:	d011      	beq.n	8000fb6 <__eqdf2+0x5e>
 8000f92:	2c00      	cmp	r4, #0
 8000f94:	d1f5      	bne.n	8000f82 <__eqdf2+0x2a>
 8000f96:	4335      	orrs	r5, r6
 8000f98:	1c28      	adds	r0, r5, #0
 8000f9a:	1e43      	subs	r3, r0, #1
 8000f9c:	4198      	sbcs	r0, r3
 8000f9e:	e7f1      	b.n	8000f84 <__eqdf2+0x2c>
 8000fa0:	2d00      	cmp	r5, #0
 8000fa2:	d1ee      	bne.n	8000f82 <__eqdf2+0x2a>
 8000fa4:	2e00      	cmp	r6, #0
 8000fa6:	d1ec      	bne.n	8000f82 <__eqdf2+0x2a>
 8000fa8:	e7e6      	b.n	8000f78 <__eqdf2+0x20>
 8000faa:	2f00      	cmp	r7, #0
 8000fac:	d1e9      	bne.n	8000f82 <__eqdf2+0x2a>
 8000fae:	4663      	mov	r3, ip
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1e6      	bne.n	8000f82 <__eqdf2+0x2a>
 8000fb4:	e7e3      	b.n	8000f7e <__eqdf2+0x26>
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	e7e4      	b.n	8000f84 <__eqdf2+0x2c>
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	000007ff 	.word	0x000007ff

08000fc0 <__gedf2>:
 8000fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc2:	4657      	mov	r7, sl
 8000fc4:	464e      	mov	r6, r9
 8000fc6:	4645      	mov	r5, r8
 8000fc8:	b4e0      	push	{r5, r6, r7}
 8000fca:	4691      	mov	r9, r2
 8000fcc:	031a      	lsls	r2, r3, #12
 8000fce:	030d      	lsls	r5, r1, #12
 8000fd0:	004c      	lsls	r4, r1, #1
 8000fd2:	1c06      	adds	r6, r0, #0
 8000fd4:	0fc8      	lsrs	r0, r1, #31
 8000fd6:	0b11      	lsrs	r1, r2, #12
 8000fd8:	468c      	mov	ip, r1
 8000fda:	0fda      	lsrs	r2, r3, #31
 8000fdc:	0059      	lsls	r1, r3, #1
 8000fde:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <__gedf2+0xe0>)
 8000fe0:	0d64      	lsrs	r4, r4, #21
 8000fe2:	0b2d      	lsrs	r5, r5, #12
 8000fe4:	0d49      	lsrs	r1, r1, #21
 8000fe6:	429c      	cmp	r4, r3
 8000fe8:	d048      	beq.n	800107c <__gedf2+0xbc>
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <__gedf2+0xe0>)
 8000fec:	4299      	cmp	r1, r3
 8000fee:	d04c      	beq.n	800108a <__gedf2+0xca>
 8000ff0:	2c00      	cmp	r4, #0
 8000ff2:	d017      	beq.n	8001024 <__gedf2+0x64>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	469a      	mov	sl, r3
 8000ff8:	2900      	cmp	r1, #0
 8000ffa:	d105      	bne.n	8001008 <__gedf2+0x48>
 8000ffc:	4667      	mov	r7, ip
 8000ffe:	2f00      	cmp	r7, #0
 8001000:	d102      	bne.n	8001008 <__gedf2+0x48>
 8001002:	464b      	mov	r3, r9
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <__gedf2+0x70>
 8001008:	2700      	movs	r7, #0
 800100a:	46b8      	mov	r8, r7
 800100c:	4653      	mov	r3, sl
 800100e:	2b00      	cmp	r3, #0
 8001010:	d013      	beq.n	800103a <__gedf2+0x7a>
 8001012:	2a00      	cmp	r2, #0
 8001014:	d118      	bne.n	8001048 <__gedf2+0x88>
 8001016:	2601      	movs	r6, #1
 8001018:	4270      	negs	r0, r6
 800101a:	bc1c      	pop	{r2, r3, r4}
 800101c:	4690      	mov	r8, r2
 800101e:	4699      	mov	r9, r3
 8001020:	46a2      	mov	sl, r4
 8001022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001024:	1c2f      	adds	r7, r5, #0
 8001026:	4337      	orrs	r7, r6
 8001028:	427b      	negs	r3, r7
 800102a:	417b      	adcs	r3, r7
 800102c:	469a      	mov	sl, r3
 800102e:	e7e3      	b.n	8000ff8 <__gedf2+0x38>
 8001030:	4657      	mov	r7, sl
 8001032:	2f00      	cmp	r7, #0
 8001034:	d030      	beq.n	8001098 <__gedf2+0xd8>
 8001036:	2000      	movs	r0, #0
 8001038:	e7ef      	b.n	800101a <__gedf2+0x5a>
 800103a:	4647      	mov	r7, r8
 800103c:	2f00      	cmp	r7, #0
 800103e:	d101      	bne.n	8001044 <__gedf2+0x84>
 8001040:	4290      	cmp	r0, r2
 8001042:	d003      	beq.n	800104c <__gedf2+0x8c>
 8001044:	2800      	cmp	r0, #0
 8001046:	d1e6      	bne.n	8001016 <__gedf2+0x56>
 8001048:	2001      	movs	r0, #1
 800104a:	e7e6      	b.n	800101a <__gedf2+0x5a>
 800104c:	428c      	cmp	r4, r1
 800104e:	dcf9      	bgt.n	8001044 <__gedf2+0x84>
 8001050:	428c      	cmp	r4, r1
 8001052:	db0f      	blt.n	8001074 <__gedf2+0xb4>
 8001054:	4565      	cmp	r5, ip
 8001056:	d8f5      	bhi.n	8001044 <__gedf2+0x84>
 8001058:	4662      	mov	r2, ip
 800105a:	1aab      	subs	r3, r5, r2
 800105c:	425a      	negs	r2, r3
 800105e:	4153      	adcs	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <__gedf2+0xa8>
 8001064:	454e      	cmp	r6, r9
 8001066:	d8ed      	bhi.n	8001044 <__gedf2+0x84>
 8001068:	4565      	cmp	r5, ip
 800106a:	d303      	bcc.n	8001074 <__gedf2+0xb4>
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0e2      	beq.n	8001036 <__gedf2+0x76>
 8001070:	45b1      	cmp	r9, r6
 8001072:	d9e0      	bls.n	8001036 <__gedf2+0x76>
 8001074:	2800      	cmp	r0, #0
 8001076:	d0ce      	beq.n	8001016 <__gedf2+0x56>
 8001078:	2001      	movs	r0, #1
 800107a:	e7ce      	b.n	800101a <__gedf2+0x5a>
 800107c:	2d00      	cmp	r5, #0
 800107e:	d101      	bne.n	8001084 <__gedf2+0xc4>
 8001080:	2e00      	cmp	r6, #0
 8001082:	d0b2      	beq.n	8000fea <__gedf2+0x2a>
 8001084:	2002      	movs	r0, #2
 8001086:	4240      	negs	r0, r0
 8001088:	e7c7      	b.n	800101a <__gedf2+0x5a>
 800108a:	4663      	mov	r3, ip
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1f9      	bne.n	8001084 <__gedf2+0xc4>
 8001090:	464f      	mov	r7, r9
 8001092:	2f00      	cmp	r7, #0
 8001094:	d1f6      	bne.n	8001084 <__gedf2+0xc4>
 8001096:	e7ab      	b.n	8000ff0 <__gedf2+0x30>
 8001098:	2301      	movs	r3, #1
 800109a:	4698      	mov	r8, r3
 800109c:	e7b6      	b.n	800100c <__gedf2+0x4c>
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	000007ff 	.word	0x000007ff

080010a4 <__ledf2>:
 80010a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a6:	4657      	mov	r7, sl
 80010a8:	464e      	mov	r6, r9
 80010aa:	4645      	mov	r5, r8
 80010ac:	b4e0      	push	{r5, r6, r7}
 80010ae:	4694      	mov	ip, r2
 80010b0:	031a      	lsls	r2, r3, #12
 80010b2:	030d      	lsls	r5, r1, #12
 80010b4:	004c      	lsls	r4, r1, #1
 80010b6:	0fcf      	lsrs	r7, r1, #31
 80010b8:	1c06      	adds	r6, r0, #0
 80010ba:	0059      	lsls	r1, r3, #1
 80010bc:	0b10      	lsrs	r0, r2, #12
 80010be:	0fda      	lsrs	r2, r3, #31
 80010c0:	4b31      	ldr	r3, [pc, #196]	; (8001188 <__ledf2+0xe4>)
 80010c2:	0d64      	lsrs	r4, r4, #21
 80010c4:	0b2d      	lsrs	r5, r5, #12
 80010c6:	46b9      	mov	r9, r7
 80010c8:	0d49      	lsrs	r1, r1, #21
 80010ca:	429c      	cmp	r4, r3
 80010cc:	d02c      	beq.n	8001128 <__ledf2+0x84>
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <__ledf2+0xe4>)
 80010d0:	4299      	cmp	r1, r3
 80010d2:	d011      	beq.n	80010f8 <__ledf2+0x54>
 80010d4:	2c00      	cmp	r4, #0
 80010d6:	d017      	beq.n	8001108 <__ledf2+0x64>
 80010d8:	2700      	movs	r7, #0
 80010da:	46ba      	mov	sl, r7
 80010dc:	2900      	cmp	r1, #0
 80010de:	d101      	bne.n	80010e4 <__ledf2+0x40>
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d02a      	beq.n	800113a <__ledf2+0x96>
 80010e4:	2700      	movs	r7, #0
 80010e6:	46b8      	mov	r8, r7
 80010e8:	4653      	mov	r3, sl
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d012      	beq.n	8001114 <__ledf2+0x70>
 80010ee:	2a00      	cmp	r2, #0
 80010f0:	d118      	bne.n	8001124 <__ledf2+0x80>
 80010f2:	2001      	movs	r0, #1
 80010f4:	4240      	negs	r0, r0
 80010f6:	e002      	b.n	80010fe <__ledf2+0x5a>
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d01a      	beq.n	8001132 <__ledf2+0x8e>
 80010fc:	2002      	movs	r0, #2
 80010fe:	bc1c      	pop	{r2, r3, r4}
 8001100:	4690      	mov	r8, r2
 8001102:	4699      	mov	r9, r3
 8001104:	46a2      	mov	sl, r4
 8001106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001108:	1c2b      	adds	r3, r5, #0
 800110a:	4333      	orrs	r3, r6
 800110c:	425f      	negs	r7, r3
 800110e:	415f      	adcs	r7, r3
 8001110:	46ba      	mov	sl, r7
 8001112:	e7e3      	b.n	80010dc <__ledf2+0x38>
 8001114:	4647      	mov	r7, r8
 8001116:	2f00      	cmp	r7, #0
 8001118:	d117      	bne.n	800114a <__ledf2+0xa6>
 800111a:	4591      	cmp	r9, r2
 800111c:	d01a      	beq.n	8001154 <__ledf2+0xb0>
 800111e:	464f      	mov	r7, r9
 8001120:	2f00      	cmp	r7, #0
 8001122:	d1e6      	bne.n	80010f2 <__ledf2+0x4e>
 8001124:	2001      	movs	r0, #1
 8001126:	e7ea      	b.n	80010fe <__ledf2+0x5a>
 8001128:	2d00      	cmp	r5, #0
 800112a:	d1e7      	bne.n	80010fc <__ledf2+0x58>
 800112c:	2e00      	cmp	r6, #0
 800112e:	d1e5      	bne.n	80010fc <__ledf2+0x58>
 8001130:	e7cd      	b.n	80010ce <__ledf2+0x2a>
 8001132:	4663      	mov	r3, ip
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1e1      	bne.n	80010fc <__ledf2+0x58>
 8001138:	e7cc      	b.n	80010d4 <__ledf2+0x30>
 800113a:	4663      	mov	r3, ip
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1d1      	bne.n	80010e4 <__ledf2+0x40>
 8001140:	4657      	mov	r7, sl
 8001142:	2f00      	cmp	r7, #0
 8001144:	d01d      	beq.n	8001182 <__ledf2+0xde>
 8001146:	2000      	movs	r0, #0
 8001148:	e7d9      	b.n	80010fe <__ledf2+0x5a>
 800114a:	464b      	mov	r3, r9
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1d0      	bne.n	80010f2 <__ledf2+0x4e>
 8001150:	2001      	movs	r0, #1
 8001152:	e7d4      	b.n	80010fe <__ledf2+0x5a>
 8001154:	428c      	cmp	r4, r1
 8001156:	dcf8      	bgt.n	800114a <__ledf2+0xa6>
 8001158:	428c      	cmp	r4, r1
 800115a:	db0e      	blt.n	800117a <__ledf2+0xd6>
 800115c:	4285      	cmp	r5, r0
 800115e:	d8f4      	bhi.n	800114a <__ledf2+0xa6>
 8001160:	1a2b      	subs	r3, r5, r0
 8001162:	425a      	negs	r2, r3
 8001164:	4153      	adcs	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <__ledf2+0xca>
 800116a:	4566      	cmp	r6, ip
 800116c:	d8ed      	bhi.n	800114a <__ledf2+0xa6>
 800116e:	4285      	cmp	r5, r0
 8001170:	d303      	bcc.n	800117a <__ledf2+0xd6>
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0e7      	beq.n	8001146 <__ledf2+0xa2>
 8001176:	45b4      	cmp	ip, r6
 8001178:	d9e5      	bls.n	8001146 <__ledf2+0xa2>
 800117a:	464f      	mov	r7, r9
 800117c:	2f00      	cmp	r7, #0
 800117e:	d0b8      	beq.n	80010f2 <__ledf2+0x4e>
 8001180:	e7d0      	b.n	8001124 <__ledf2+0x80>
 8001182:	2301      	movs	r3, #1
 8001184:	4698      	mov	r8, r3
 8001186:	e7af      	b.n	80010e8 <__ledf2+0x44>
 8001188:	000007ff 	.word	0x000007ff

0800118c <__aeabi_dmul>:
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	465f      	mov	r7, fp
 8001190:	4656      	mov	r6, sl
 8001192:	464d      	mov	r5, r9
 8001194:	4644      	mov	r4, r8
 8001196:	b4f0      	push	{r4, r5, r6, r7}
 8001198:	1c1f      	adds	r7, r3, #0
 800119a:	004b      	lsls	r3, r1, #1
 800119c:	1c16      	adds	r6, r2, #0
 800119e:	030c      	lsls	r4, r1, #12
 80011a0:	0d5b      	lsrs	r3, r3, #21
 80011a2:	0fca      	lsrs	r2, r1, #31
 80011a4:	b08b      	sub	sp, #44	; 0x2c
 80011a6:	1c05      	adds	r5, r0, #0
 80011a8:	0b24      	lsrs	r4, r4, #12
 80011aa:	4698      	mov	r8, r3
 80011ac:	4691      	mov	r9, r2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d11c      	bne.n	80011ec <__aeabi_dmul+0x60>
 80011b2:	2c00      	cmp	r4, #0
 80011b4:	d000      	beq.n	80011b8 <__aeabi_dmul+0x2c>
 80011b6:	e12e      	b.n	8001416 <__aeabi_dmul+0x28a>
 80011b8:	2800      	cmp	r0, #0
 80011ba:	d100      	bne.n	80011be <__aeabi_dmul+0x32>
 80011bc:	e19e      	b.n	80014fc <__aeabi_dmul+0x370>
 80011be:	f000 fe2f 	bl	8001e20 <__clzsi2>
 80011c2:	3020      	adds	r0, #32
 80011c4:	1c03      	adds	r3, r0, #0
 80011c6:	3b0b      	subs	r3, #11
 80011c8:	2b1c      	cmp	r3, #28
 80011ca:	dd00      	ble.n	80011ce <__aeabi_dmul+0x42>
 80011cc:	e1c1      	b.n	8001552 <__aeabi_dmul+0x3c6>
 80011ce:	211d      	movs	r1, #29
 80011d0:	3808      	subs	r0, #8
 80011d2:	1aca      	subs	r2, r1, r3
 80011d4:	1c29      	adds	r1, r5, #0
 80011d6:	4084      	lsls	r4, r0
 80011d8:	40d1      	lsrs	r1, r2
 80011da:	430c      	orrs	r4, r1
 80011dc:	4085      	lsls	r5, r0
 80011de:	48ca      	ldr	r0, [pc, #808]	; (8001508 <__aeabi_dmul+0x37c>)
 80011e0:	1ac2      	subs	r2, r0, r3
 80011e2:	4690      	mov	r8, r2
 80011e4:	2200      	movs	r2, #0
 80011e6:	4693      	mov	fp, r2
 80011e8:	9203      	str	r2, [sp, #12]
 80011ea:	e00e      	b.n	800120a <__aeabi_dmul+0x7e>
 80011ec:	48c7      	ldr	r0, [pc, #796]	; (800150c <__aeabi_dmul+0x380>)
 80011ee:	4580      	cmp	r8, r0
 80011f0:	d03d      	beq.n	800126e <__aeabi_dmul+0xe2>
 80011f2:	2080      	movs	r0, #128	; 0x80
 80011f4:	0343      	lsls	r3, r0, #13
 80011f6:	431c      	orrs	r4, r3
 80011f8:	49c5      	ldr	r1, [pc, #788]	; (8001510 <__aeabi_dmul+0x384>)
 80011fa:	0f6a      	lsrs	r2, r5, #29
 80011fc:	2000      	movs	r0, #0
 80011fe:	00e4      	lsls	r4, r4, #3
 8001200:	4314      	orrs	r4, r2
 8001202:	00ed      	lsls	r5, r5, #3
 8001204:	4488      	add	r8, r1
 8001206:	4683      	mov	fp, r0
 8001208:	9003      	str	r0, [sp, #12]
 800120a:	1c39      	adds	r1, r7, #0
 800120c:	004a      	lsls	r2, r1, #1
 800120e:	033f      	lsls	r7, r7, #12
 8001210:	0fcb      	lsrs	r3, r1, #31
 8001212:	0d52      	lsrs	r2, r2, #21
 8001214:	1c30      	adds	r0, r6, #0
 8001216:	0b3f      	lsrs	r7, r7, #12
 8001218:	469a      	mov	sl, r3
 800121a:	2a00      	cmp	r2, #0
 800121c:	d131      	bne.n	8001282 <__aeabi_dmul+0xf6>
 800121e:	2f00      	cmp	r7, #0
 8001220:	d000      	beq.n	8001224 <__aeabi_dmul+0x98>
 8001222:	e0fc      	b.n	800141e <__aeabi_dmul+0x292>
 8001224:	2e00      	cmp	r6, #0
 8001226:	d100      	bne.n	800122a <__aeabi_dmul+0x9e>
 8001228:	e18a      	b.n	8001540 <__aeabi_dmul+0x3b4>
 800122a:	f000 fdf9 	bl	8001e20 <__clzsi2>
 800122e:	3020      	adds	r0, #32
 8001230:	1c03      	adds	r3, r0, #0
 8001232:	3b0b      	subs	r3, #11
 8001234:	2b1c      	cmp	r3, #28
 8001236:	dd00      	ble.n	800123a <__aeabi_dmul+0xae>
 8001238:	e185      	b.n	8001546 <__aeabi_dmul+0x3ba>
 800123a:	211d      	movs	r1, #29
 800123c:	3808      	subs	r0, #8
 800123e:	1aca      	subs	r2, r1, r3
 8001240:	1c31      	adds	r1, r6, #0
 8001242:	4087      	lsls	r7, r0
 8001244:	40d1      	lsrs	r1, r2
 8001246:	430f      	orrs	r7, r1
 8001248:	4086      	lsls	r6, r0
 800124a:	48af      	ldr	r0, [pc, #700]	; (8001508 <__aeabi_dmul+0x37c>)
 800124c:	2100      	movs	r1, #0
 800124e:	1ac2      	subs	r2, r0, r3
 8001250:	4648      	mov	r0, r9
 8001252:	4653      	mov	r3, sl
 8001254:	4043      	eors	r3, r0
 8001256:	4658      	mov	r0, fp
 8001258:	4308      	orrs	r0, r1
 800125a:	280f      	cmp	r0, #15
 800125c:	d826      	bhi.n	80012ac <__aeabi_dmul+0x120>
 800125e:	0080      	lsls	r0, r0, #2
 8001260:	4683      	mov	fp, r0
 8001262:	48ac      	ldr	r0, [pc, #688]	; (8001514 <__aeabi_dmul+0x388>)
 8001264:	4684      	mov	ip, r0
 8001266:	4658      	mov	r0, fp
 8001268:	4460      	add	r0, ip
 800126a:	6800      	ldr	r0, [r0, #0]
 800126c:	4687      	mov	pc, r0
 800126e:	2c00      	cmp	r4, #0
 8001270:	d102      	bne.n	8001278 <__aeabi_dmul+0xec>
 8001272:	2d00      	cmp	r5, #0
 8001274:	d100      	bne.n	8001278 <__aeabi_dmul+0xec>
 8001276:	e15d      	b.n	8001534 <__aeabi_dmul+0x3a8>
 8001278:	230c      	movs	r3, #12
 800127a:	469b      	mov	fp, r3
 800127c:	2303      	movs	r3, #3
 800127e:	9303      	str	r3, [sp, #12]
 8001280:	e7c3      	b.n	800120a <__aeabi_dmul+0x7e>
 8001282:	4ba2      	ldr	r3, [pc, #648]	; (800150c <__aeabi_dmul+0x380>)
 8001284:	429a      	cmp	r2, r3
 8001286:	d100      	bne.n	800128a <__aeabi_dmul+0xfe>
 8001288:	e0bc      	b.n	8001404 <__aeabi_dmul+0x278>
 800128a:	2080      	movs	r0, #128	; 0x80
 800128c:	0343      	lsls	r3, r0, #13
 800128e:	431f      	orrs	r7, r3
 8001290:	489f      	ldr	r0, [pc, #636]	; (8001510 <__aeabi_dmul+0x384>)
 8001292:	0f71      	lsrs	r1, r6, #29
 8001294:	00ff      	lsls	r7, r7, #3
 8001296:	430f      	orrs	r7, r1
 8001298:	00f6      	lsls	r6, r6, #3
 800129a:	1812      	adds	r2, r2, r0
 800129c:	2100      	movs	r1, #0
 800129e:	4648      	mov	r0, r9
 80012a0:	4653      	mov	r3, sl
 80012a2:	4043      	eors	r3, r0
 80012a4:	4658      	mov	r0, fp
 80012a6:	4308      	orrs	r0, r1
 80012a8:	280f      	cmp	r0, #15
 80012aa:	d9d8      	bls.n	800125e <__aeabi_dmul+0xd2>
 80012ac:	4442      	add	r2, r8
 80012ae:	9204      	str	r2, [sp, #16]
 80012b0:	b2aa      	uxth	r2, r5
 80012b2:	4694      	mov	ip, r2
 80012b4:	b2b0      	uxth	r0, r6
 80012b6:	4661      	mov	r1, ip
 80012b8:	0c36      	lsrs	r6, r6, #16
 80012ba:	4371      	muls	r1, r6
 80012bc:	4342      	muls	r2, r0
 80012be:	4689      	mov	r9, r1
 80012c0:	0c29      	lsrs	r1, r5, #16
 80012c2:	4693      	mov	fp, r2
 80012c4:	1c0a      	adds	r2, r1, #0
 80012c6:	4342      	muls	r2, r0
 80012c8:	1c0d      	adds	r5, r1, #0
 80012ca:	4375      	muls	r5, r6
 80012cc:	4690      	mov	r8, r2
 80012ce:	465a      	mov	r2, fp
 80012d0:	46aa      	mov	sl, r5
 80012d2:	0c15      	lsrs	r5, r2, #16
 80012d4:	444d      	add	r5, r9
 80012d6:	4445      	add	r5, r8
 80012d8:	9501      	str	r5, [sp, #4]
 80012da:	45a8      	cmp	r8, r5
 80012dc:	d900      	bls.n	80012e0 <__aeabi_dmul+0x154>
 80012de:	e0fe      	b.n	80014de <__aeabi_dmul+0x352>
 80012e0:	9d01      	ldr	r5, [sp, #4]
 80012e2:	042a      	lsls	r2, r5, #16
 80012e4:	4690      	mov	r8, r2
 80012e6:	465a      	mov	r2, fp
 80012e8:	b295      	uxth	r5, r2
 80012ea:	4445      	add	r5, r8
 80012ec:	b2ba      	uxth	r2, r7
 80012ee:	9505      	str	r5, [sp, #20]
 80012f0:	4665      	mov	r5, ip
 80012f2:	4355      	muls	r5, r2
 80012f4:	0c3f      	lsrs	r7, r7, #16
 80012f6:	46a9      	mov	r9, r5
 80012f8:	4665      	mov	r5, ip
 80012fa:	437d      	muls	r5, r7
 80012fc:	46ac      	mov	ip, r5
 80012fe:	1c0d      	adds	r5, r1, #0
 8001300:	4355      	muls	r5, r2
 8001302:	4379      	muls	r1, r7
 8001304:	46ab      	mov	fp, r5
 8001306:	464d      	mov	r5, r9
 8001308:	4688      	mov	r8, r1
 800130a:	0c29      	lsrs	r1, r5, #16
 800130c:	4461      	add	r1, ip
 800130e:	4459      	add	r1, fp
 8001310:	458b      	cmp	fp, r1
 8001312:	d902      	bls.n	800131a <__aeabi_dmul+0x18e>
 8001314:	2580      	movs	r5, #128	; 0x80
 8001316:	026d      	lsls	r5, r5, #9
 8001318:	44a8      	add	r8, r5
 800131a:	0c0d      	lsrs	r5, r1, #16
 800131c:	46ac      	mov	ip, r5
 800131e:	464d      	mov	r5, r9
 8001320:	b2ad      	uxth	r5, r5
 8001322:	0409      	lsls	r1, r1, #16
 8001324:	44c4      	add	ip, r8
 8001326:	46a8      	mov	r8, r5
 8001328:	4488      	add	r8, r1
 800132a:	b2a1      	uxth	r1, r4
 800132c:	1c0d      	adds	r5, r1, #0
 800132e:	4345      	muls	r5, r0
 8001330:	46a9      	mov	r9, r5
 8001332:	1c0d      	adds	r5, r1, #0
 8001334:	4375      	muls	r5, r6
 8001336:	0c24      	lsrs	r4, r4, #16
 8001338:	9503      	str	r5, [sp, #12]
 800133a:	464d      	mov	r5, r9
 800133c:	0c2d      	lsrs	r5, r5, #16
 800133e:	4360      	muls	r0, r4
 8001340:	46ab      	mov	fp, r5
 8001342:	9d03      	ldr	r5, [sp, #12]
 8001344:	4366      	muls	r6, r4
 8001346:	44ab      	add	fp, r5
 8001348:	4483      	add	fp, r0
 800134a:	4558      	cmp	r0, fp
 800134c:	d902      	bls.n	8001354 <__aeabi_dmul+0x1c8>
 800134e:	2580      	movs	r5, #128	; 0x80
 8001350:	0268      	lsls	r0, r5, #9
 8001352:	1836      	adds	r6, r6, r0
 8001354:	465d      	mov	r5, fp
 8001356:	0c28      	lsrs	r0, r5, #16
 8001358:	1836      	adds	r6, r6, r0
 800135a:	0428      	lsls	r0, r5, #16
 800135c:	464d      	mov	r5, r9
 800135e:	b2ad      	uxth	r5, r5
 8001360:	46a9      	mov	r9, r5
 8001362:	1c0d      	adds	r5, r1, #0
 8001364:	4355      	muls	r5, r2
 8001366:	4362      	muls	r2, r4
 8001368:	437c      	muls	r4, r7
 800136a:	4379      	muls	r1, r7
 800136c:	46a3      	mov	fp, r4
 800136e:	0c2c      	lsrs	r4, r5, #16
 8001370:	190f      	adds	r7, r1, r4
 8001372:	18b9      	adds	r1, r7, r2
 8001374:	4448      	add	r0, r9
 8001376:	46a9      	mov	r9, r5
 8001378:	428a      	cmp	r2, r1
 800137a:	d902      	bls.n	8001382 <__aeabi_dmul+0x1f6>
 800137c:	2780      	movs	r7, #128	; 0x80
 800137e:	027a      	lsls	r2, r7, #9
 8001380:	4493      	add	fp, r2
 8001382:	9f01      	ldr	r7, [sp, #4]
 8001384:	040d      	lsls	r5, r1, #16
 8001386:	0c3a      	lsrs	r2, r7, #16
 8001388:	4442      	add	r2, r8
 800138a:	4452      	add	r2, sl
 800138c:	4542      	cmp	r2, r8
 800138e:	41a4      	sbcs	r4, r4
 8001390:	46a8      	mov	r8, r5
 8001392:	464d      	mov	r5, r9
 8001394:	b2af      	uxth	r7, r5
 8001396:	44b8      	add	r8, r7
 8001398:	4645      	mov	r5, r8
 800139a:	1812      	adds	r2, r2, r0
 800139c:	4264      	negs	r4, r4
 800139e:	4465      	add	r5, ip
 80013a0:	4565      	cmp	r5, ip
 80013a2:	41bf      	sbcs	r7, r7
 80013a4:	4282      	cmp	r2, r0
 80013a6:	4180      	sbcs	r0, r0
 80013a8:	192d      	adds	r5, r5, r4
 80013aa:	4240      	negs	r0, r0
 80013ac:	42a5      	cmp	r5, r4
 80013ae:	41a4      	sbcs	r4, r4
 80013b0:	4682      	mov	sl, r0
 80013b2:	427f      	negs	r7, r7
 80013b4:	1970      	adds	r0, r6, r5
 80013b6:	4264      	negs	r4, r4
 80013b8:	433c      	orrs	r4, r7
 80013ba:	42b0      	cmp	r0, r6
 80013bc:	41b6      	sbcs	r6, r6
 80013be:	0c0d      	lsrs	r5, r1, #16
 80013c0:	4450      	add	r0, sl
 80013c2:	1961      	adds	r1, r4, r5
 80013c4:	4550      	cmp	r0, sl
 80013c6:	41a4      	sbcs	r4, r4
 80013c8:	4276      	negs	r6, r6
 80013ca:	4267      	negs	r7, r4
 80013cc:	4337      	orrs	r7, r6
 80013ce:	19cc      	adds	r4, r1, r7
 80013d0:	0245      	lsls	r5, r0, #9
 80013d2:	0dd1      	lsrs	r1, r2, #23
 80013d4:	4329      	orrs	r1, r5
 80013d6:	0255      	lsls	r5, r2, #9
 80013d8:	9a05      	ldr	r2, [sp, #20]
 80013da:	445c      	add	r4, fp
 80013dc:	0264      	lsls	r4, r4, #9
 80013de:	0dc6      	lsrs	r6, r0, #23
 80013e0:	4315      	orrs	r5, r2
 80013e2:	1e6a      	subs	r2, r5, #1
 80013e4:	4195      	sbcs	r5, r2
 80013e6:	4334      	orrs	r4, r6
 80013e8:	430d      	orrs	r5, r1
 80013ea:	01e7      	lsls	r7, r4, #7
 80013ec:	d523      	bpl.n	8001436 <__aeabi_dmul+0x2aa>
 80013ee:	9a04      	ldr	r2, [sp, #16]
 80013f0:	2601      	movs	r6, #1
 80013f2:	0868      	lsrs	r0, r5, #1
 80013f4:	4035      	ands	r5, r6
 80013f6:	07e1      	lsls	r1, r4, #31
 80013f8:	3201      	adds	r2, #1
 80013fa:	4305      	orrs	r5, r0
 80013fc:	9204      	str	r2, [sp, #16]
 80013fe:	430d      	orrs	r5, r1
 8001400:	0864      	lsrs	r4, r4, #1
 8001402:	e018      	b.n	8001436 <__aeabi_dmul+0x2aa>
 8001404:	2f00      	cmp	r7, #0
 8001406:	d001      	beq.n	800140c <__aeabi_dmul+0x280>
 8001408:	2103      	movs	r1, #3
 800140a:	e748      	b.n	800129e <__aeabi_dmul+0x112>
 800140c:	2e00      	cmp	r6, #0
 800140e:	d1fb      	bne.n	8001408 <__aeabi_dmul+0x27c>
 8001410:	1c37      	adds	r7, r6, #0
 8001412:	2102      	movs	r1, #2
 8001414:	e743      	b.n	800129e <__aeabi_dmul+0x112>
 8001416:	1c20      	adds	r0, r4, #0
 8001418:	f000 fd02 	bl	8001e20 <__clzsi2>
 800141c:	e6d2      	b.n	80011c4 <__aeabi_dmul+0x38>
 800141e:	1c38      	adds	r0, r7, #0
 8001420:	f000 fcfe 	bl	8001e20 <__clzsi2>
 8001424:	e704      	b.n	8001230 <__aeabi_dmul+0xa4>
 8001426:	9903      	ldr	r1, [sp, #12]
 8001428:	1c1a      	adds	r2, r3, #0
 800142a:	2902      	cmp	r1, #2
 800142c:	d01b      	beq.n	8001466 <__aeabi_dmul+0x2da>
 800142e:	2903      	cmp	r1, #3
 8001430:	d04d      	beq.n	80014ce <__aeabi_dmul+0x342>
 8001432:	2901      	cmp	r1, #1
 8001434:	d05e      	beq.n	80014f4 <__aeabi_dmul+0x368>
 8001436:	9904      	ldr	r1, [sp, #16]
 8001438:	4f37      	ldr	r7, [pc, #220]	; (8001518 <__aeabi_dmul+0x38c>)
 800143a:	19ca      	adds	r2, r1, r7
 800143c:	2a00      	cmp	r2, #0
 800143e:	dd54      	ble.n	80014ea <__aeabi_dmul+0x35e>
 8001440:	200f      	movs	r0, #15
 8001442:	4028      	ands	r0, r5
 8001444:	2804      	cmp	r0, #4
 8001446:	d004      	beq.n	8001452 <__aeabi_dmul+0x2c6>
 8001448:	1d2e      	adds	r6, r5, #4
 800144a:	42ae      	cmp	r6, r5
 800144c:	41ad      	sbcs	r5, r5
 800144e:	1b64      	subs	r4, r4, r5
 8001450:	1c35      	adds	r5, r6, #0
 8001452:	01e0      	lsls	r0, r4, #7
 8001454:	d502      	bpl.n	800145c <__aeabi_dmul+0x2d0>
 8001456:	4931      	ldr	r1, [pc, #196]	; (800151c <__aeabi_dmul+0x390>)
 8001458:	3201      	adds	r2, #1
 800145a:	400c      	ands	r4, r1
 800145c:	4930      	ldr	r1, [pc, #192]	; (8001520 <__aeabi_dmul+0x394>)
 800145e:	428a      	cmp	r2, r1
 8001460:	dc00      	bgt.n	8001464 <__aeabi_dmul+0x2d8>
 8001462:	e07c      	b.n	800155e <__aeabi_dmul+0x3d2>
 8001464:	1c1a      	adds	r2, r3, #0
 8001466:	4e29      	ldr	r6, [pc, #164]	; (800150c <__aeabi_dmul+0x380>)
 8001468:	2400      	movs	r4, #0
 800146a:	2500      	movs	r5, #0
 800146c:	4f2d      	ldr	r7, [pc, #180]	; (8001524 <__aeabi_dmul+0x398>)
 800146e:	2000      	movs	r0, #0
 8001470:	2100      	movs	r1, #0
 8001472:	400f      	ands	r7, r1
 8001474:	1c28      	adds	r0, r5, #0
 8001476:	4d2c      	ldr	r5, [pc, #176]	; (8001528 <__aeabi_dmul+0x39c>)
 8001478:	4327      	orrs	r7, r4
 800147a:	403d      	ands	r5, r7
 800147c:	0534      	lsls	r4, r6, #20
 800147e:	4b2b      	ldr	r3, [pc, #172]	; (800152c <__aeabi_dmul+0x3a0>)
 8001480:	4325      	orrs	r5, r4
 8001482:	401d      	ands	r5, r3
 8001484:	07d6      	lsls	r6, r2, #31
 8001486:	1c29      	adds	r1, r5, #0
 8001488:	b00b      	add	sp, #44	; 0x2c
 800148a:	4331      	orrs	r1, r6
 800148c:	bc3c      	pop	{r2, r3, r4, r5}
 800148e:	4690      	mov	r8, r2
 8001490:	4699      	mov	r9, r3
 8001492:	46a2      	mov	sl, r4
 8001494:	46ab      	mov	fp, r5
 8001496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001498:	4652      	mov	r2, sl
 800149a:	1c3c      	adds	r4, r7, #0
 800149c:	1c35      	adds	r5, r6, #0
 800149e:	4653      	mov	r3, sl
 80014a0:	e7c3      	b.n	800142a <__aeabi_dmul+0x29e>
 80014a2:	1c1a      	adds	r2, r3, #0
 80014a4:	1c3c      	adds	r4, r7, #0
 80014a6:	1c35      	adds	r5, r6, #0
 80014a8:	e7bf      	b.n	800142a <__aeabi_dmul+0x29e>
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	031b      	lsls	r3, r3, #12
 80014ae:	421c      	tst	r4, r3
 80014b0:	d019      	beq.n	80014e6 <__aeabi_dmul+0x35a>
 80014b2:	421f      	tst	r7, r3
 80014b4:	d117      	bne.n	80014e6 <__aeabi_dmul+0x35a>
 80014b6:	1c3c      	adds	r4, r7, #0
 80014b8:	1c35      	adds	r5, r6, #0
 80014ba:	4653      	mov	r3, sl
 80014bc:	e007      	b.n	80014ce <__aeabi_dmul+0x342>
 80014be:	464a      	mov	r2, r9
 80014c0:	464b      	mov	r3, r9
 80014c2:	9903      	ldr	r1, [sp, #12]
 80014c4:	e7b1      	b.n	800142a <__aeabi_dmul+0x29e>
 80014c6:	2501      	movs	r5, #1
 80014c8:	4c19      	ldr	r4, [pc, #100]	; (8001530 <__aeabi_dmul+0x3a4>)
 80014ca:	426d      	negs	r5, r5
 80014cc:	2300      	movs	r3, #0
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	0310      	lsls	r0, r2, #12
 80014d2:	4917      	ldr	r1, [pc, #92]	; (8001530 <__aeabi_dmul+0x3a4>)
 80014d4:	4304      	orrs	r4, r0
 80014d6:	400c      	ands	r4, r1
 80014d8:	1c1a      	adds	r2, r3, #0
 80014da:	4e0c      	ldr	r6, [pc, #48]	; (800150c <__aeabi_dmul+0x380>)
 80014dc:	e7c6      	b.n	800146c <__aeabi_dmul+0x2e0>
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	0255      	lsls	r5, r2, #9
 80014e2:	44aa      	add	sl, r5
 80014e4:	e6fc      	b.n	80012e0 <__aeabi_dmul+0x154>
 80014e6:	464b      	mov	r3, r9
 80014e8:	e7f1      	b.n	80014ce <__aeabi_dmul+0x342>
 80014ea:	2001      	movs	r0, #1
 80014ec:	1a82      	subs	r2, r0, r2
 80014ee:	2a38      	cmp	r2, #56	; 0x38
 80014f0:	dd3e      	ble.n	8001570 <__aeabi_dmul+0x3e4>
 80014f2:	1c1a      	adds	r2, r3, #0
 80014f4:	2600      	movs	r6, #0
 80014f6:	2400      	movs	r4, #0
 80014f8:	2500      	movs	r5, #0
 80014fa:	e7b7      	b.n	800146c <__aeabi_dmul+0x2e0>
 80014fc:	2104      	movs	r1, #4
 80014fe:	468b      	mov	fp, r1
 8001500:	2101      	movs	r1, #1
 8001502:	1c04      	adds	r4, r0, #0
 8001504:	9103      	str	r1, [sp, #12]
 8001506:	e680      	b.n	800120a <__aeabi_dmul+0x7e>
 8001508:	fffffc02 	.word	0xfffffc02
 800150c:	000007ff 	.word	0x000007ff
 8001510:	fffffc01 	.word	0xfffffc01
 8001514:	0800aa28 	.word	0x0800aa28
 8001518:	000003ff 	.word	0x000003ff
 800151c:	feffffff 	.word	0xfeffffff
 8001520:	000007fe 	.word	0x000007fe
 8001524:	fff00000 	.word	0xfff00000
 8001528:	800fffff 	.word	0x800fffff
 800152c:	7fffffff 	.word	0x7fffffff
 8001530:	000fffff 	.word	0x000fffff
 8001534:	2108      	movs	r1, #8
 8001536:	468b      	mov	fp, r1
 8001538:	2102      	movs	r1, #2
 800153a:	1c2c      	adds	r4, r5, #0
 800153c:	9103      	str	r1, [sp, #12]
 800153e:	e664      	b.n	800120a <__aeabi_dmul+0x7e>
 8001540:	1c37      	adds	r7, r6, #0
 8001542:	2101      	movs	r1, #1
 8001544:	e6ab      	b.n	800129e <__aeabi_dmul+0x112>
 8001546:	1c07      	adds	r7, r0, #0
 8001548:	3f28      	subs	r7, #40	; 0x28
 800154a:	40be      	lsls	r6, r7
 800154c:	1c37      	adds	r7, r6, #0
 800154e:	2600      	movs	r6, #0
 8001550:	e67b      	b.n	800124a <__aeabi_dmul+0xbe>
 8001552:	1c04      	adds	r4, r0, #0
 8001554:	3c28      	subs	r4, #40	; 0x28
 8001556:	40a5      	lsls	r5, r4
 8001558:	1c2c      	adds	r4, r5, #0
 800155a:	2500      	movs	r5, #0
 800155c:	e63f      	b.n	80011de <__aeabi_dmul+0x52>
 800155e:	4e21      	ldr	r6, [pc, #132]	; (80015e4 <__aeabi_dmul+0x458>)
 8001560:	0767      	lsls	r7, r4, #29
 8001562:	08ed      	lsrs	r5, r5, #3
 8001564:	0264      	lsls	r4, r4, #9
 8001566:	4016      	ands	r6, r2
 8001568:	433d      	orrs	r5, r7
 800156a:	0b24      	lsrs	r4, r4, #12
 800156c:	1c1a      	adds	r2, r3, #0
 800156e:	e77d      	b.n	800146c <__aeabi_dmul+0x2e0>
 8001570:	2a1f      	cmp	r2, #31
 8001572:	dc1d      	bgt.n	80015b0 <__aeabi_dmul+0x424>
 8001574:	2620      	movs	r6, #32
 8001576:	1ab1      	subs	r1, r6, r2
 8001578:	1c20      	adds	r0, r4, #0
 800157a:	1c2f      	adds	r7, r5, #0
 800157c:	4088      	lsls	r0, r1
 800157e:	408d      	lsls	r5, r1
 8001580:	40d7      	lsrs	r7, r2
 8001582:	1c2e      	adds	r6, r5, #0
 8001584:	4307      	orrs	r7, r0
 8001586:	1e75      	subs	r5, r6, #1
 8001588:	41ae      	sbcs	r6, r5
 800158a:	1c3d      	adds	r5, r7, #0
 800158c:	4335      	orrs	r5, r6
 800158e:	40d4      	lsrs	r4, r2
 8001590:	220f      	movs	r2, #15
 8001592:	402a      	ands	r2, r5
 8001594:	2a04      	cmp	r2, #4
 8001596:	d004      	beq.n	80015a2 <__aeabi_dmul+0x416>
 8001598:	1d2e      	adds	r6, r5, #4
 800159a:	42ae      	cmp	r6, r5
 800159c:	41ad      	sbcs	r5, r5
 800159e:	1b64      	subs	r4, r4, r5
 80015a0:	1c35      	adds	r5, r6, #0
 80015a2:	0222      	lsls	r2, r4, #8
 80015a4:	d513      	bpl.n	80015ce <__aeabi_dmul+0x442>
 80015a6:	1c1a      	adds	r2, r3, #0
 80015a8:	2601      	movs	r6, #1
 80015aa:	2400      	movs	r4, #0
 80015ac:	2500      	movs	r5, #0
 80015ae:	e75d      	b.n	800146c <__aeabi_dmul+0x2e0>
 80015b0:	2a20      	cmp	r2, #32
 80015b2:	d014      	beq.n	80015de <__aeabi_dmul+0x452>
 80015b4:	2040      	movs	r0, #64	; 0x40
 80015b6:	1a81      	subs	r1, r0, r2
 80015b8:	1c27      	adds	r7, r4, #0
 80015ba:	408f      	lsls	r7, r1
 80015bc:	1c3e      	adds	r6, r7, #0
 80015be:	4335      	orrs	r5, r6
 80015c0:	3a20      	subs	r2, #32
 80015c2:	40d4      	lsrs	r4, r2
 80015c4:	1e69      	subs	r1, r5, #1
 80015c6:	418d      	sbcs	r5, r1
 80015c8:	4325      	orrs	r5, r4
 80015ca:	2400      	movs	r4, #0
 80015cc:	e7e0      	b.n	8001590 <__aeabi_dmul+0x404>
 80015ce:	0767      	lsls	r7, r4, #29
 80015d0:	08ed      	lsrs	r5, r5, #3
 80015d2:	0264      	lsls	r4, r4, #9
 80015d4:	433d      	orrs	r5, r7
 80015d6:	0b24      	lsrs	r4, r4, #12
 80015d8:	1c1a      	adds	r2, r3, #0
 80015da:	2600      	movs	r6, #0
 80015dc:	e746      	b.n	800146c <__aeabi_dmul+0x2e0>
 80015de:	2600      	movs	r6, #0
 80015e0:	e7ed      	b.n	80015be <__aeabi_dmul+0x432>
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	000007ff 	.word	0x000007ff

080015e8 <__aeabi_dsub>:
 80015e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	4646      	mov	r6, r8
 80015ee:	b4c0      	push	{r6, r7}
 80015f0:	1c04      	adds	r4, r0, #0
 80015f2:	030f      	lsls	r7, r1, #12
 80015f4:	0fcd      	lsrs	r5, r1, #31
 80015f6:	004e      	lsls	r6, r1, #1
 80015f8:	0a78      	lsrs	r0, r7, #9
 80015fa:	0f61      	lsrs	r1, r4, #29
 80015fc:	4308      	orrs	r0, r1
 80015fe:	1c17      	adds	r7, r2, #0
 8001600:	46ac      	mov	ip, r5
 8001602:	4680      	mov	r8, r0
 8001604:	005d      	lsls	r5, r3, #1
 8001606:	0318      	lsls	r0, r3, #12
 8001608:	0fd9      	lsrs	r1, r3, #31
 800160a:	4bbe      	ldr	r3, [pc, #760]	; (8001904 <__aeabi_dsub+0x31c>)
 800160c:	0a40      	lsrs	r0, r0, #9
 800160e:	0f52      	lsrs	r2, r2, #29
 8001610:	00ff      	lsls	r7, r7, #3
 8001612:	0d6d      	lsrs	r5, r5, #21
 8001614:	0d76      	lsrs	r6, r6, #21
 8001616:	00e4      	lsls	r4, r4, #3
 8001618:	4310      	orrs	r0, r2
 800161a:	46ba      	mov	sl, r7
 800161c:	429d      	cmp	r5, r3
 800161e:	d100      	bne.n	8001622 <__aeabi_dsub+0x3a>
 8001620:	e0f6      	b.n	8001810 <__aeabi_dsub+0x228>
 8001622:	2301      	movs	r3, #1
 8001624:	4059      	eors	r1, r3
 8001626:	1b72      	subs	r2, r6, r5
 8001628:	458c      	cmp	ip, r1
 800162a:	d100      	bne.n	800162e <__aeabi_dsub+0x46>
 800162c:	e09c      	b.n	8001768 <__aeabi_dsub+0x180>
 800162e:	2a00      	cmp	r2, #0
 8001630:	dc00      	bgt.n	8001634 <__aeabi_dsub+0x4c>
 8001632:	e110      	b.n	8001856 <__aeabi_dsub+0x26e>
 8001634:	2d00      	cmp	r5, #0
 8001636:	d114      	bne.n	8001662 <__aeabi_dsub+0x7a>
 8001638:	2800      	cmp	r0, #0
 800163a:	d103      	bne.n	8001644 <__aeabi_dsub+0x5c>
 800163c:	4651      	mov	r1, sl
 800163e:	2900      	cmp	r1, #0
 8001640:	d100      	bne.n	8001644 <__aeabi_dsub+0x5c>
 8001642:	e0f1      	b.n	8001828 <__aeabi_dsub+0x240>
 8001644:	3a01      	subs	r2, #1
 8001646:	2a00      	cmp	r2, #0
 8001648:	d000      	beq.n	800164c <__aeabi_dsub+0x64>
 800164a:	e169      	b.n	8001920 <__aeabi_dsub+0x338>
 800164c:	4653      	mov	r3, sl
 800164e:	1ae2      	subs	r2, r4, r3
 8001650:	4645      	mov	r5, r8
 8001652:	1a2b      	subs	r3, r5, r0
 8001654:	4294      	cmp	r4, r2
 8001656:	41ad      	sbcs	r5, r5
 8001658:	195b      	adds	r3, r3, r5
 800165a:	1c14      	adds	r4, r2, #0
 800165c:	1c35      	adds	r5, r6, #0
 800165e:	4666      	mov	r6, ip
 8001660:	e024      	b.n	80016ac <__aeabi_dsub+0xc4>
 8001662:	4ba8      	ldr	r3, [pc, #672]	; (8001904 <__aeabi_dsub+0x31c>)
 8001664:	429e      	cmp	r6, r3
 8001666:	d100      	bne.n	800166a <__aeabi_dsub+0x82>
 8001668:	e0ea      	b.n	8001840 <__aeabi_dsub+0x258>
 800166a:	2180      	movs	r1, #128	; 0x80
 800166c:	040f      	lsls	r7, r1, #16
 800166e:	4338      	orrs	r0, r7
 8001670:	2a38      	cmp	r2, #56	; 0x38
 8001672:	dd00      	ble.n	8001676 <__aeabi_dsub+0x8e>
 8001674:	e11c      	b.n	80018b0 <__aeabi_dsub+0x2c8>
 8001676:	2a1f      	cmp	r2, #31
 8001678:	dd00      	ble.n	800167c <__aeabi_dsub+0x94>
 800167a:	e167      	b.n	800194c <__aeabi_dsub+0x364>
 800167c:	2120      	movs	r1, #32
 800167e:	1a8f      	subs	r7, r1, r2
 8001680:	4653      	mov	r3, sl
 8001682:	1c01      	adds	r1, r0, #0
 8001684:	40d3      	lsrs	r3, r2
 8001686:	40b9      	lsls	r1, r7
 8001688:	4319      	orrs	r1, r3
 800168a:	4653      	mov	r3, sl
 800168c:	40bb      	lsls	r3, r7
 800168e:	1c1d      	adds	r5, r3, #0
 8001690:	1e6b      	subs	r3, r5, #1
 8001692:	419d      	sbcs	r5, r3
 8001694:	1c03      	adds	r3, r0, #0
 8001696:	4329      	orrs	r1, r5
 8001698:	40d3      	lsrs	r3, r2
 800169a:	1a61      	subs	r1, r4, r1
 800169c:	4642      	mov	r2, r8
 800169e:	428c      	cmp	r4, r1
 80016a0:	41a4      	sbcs	r4, r4
 80016a2:	1ad0      	subs	r0, r2, r3
 80016a4:	1903      	adds	r3, r0, r4
 80016a6:	1c35      	adds	r5, r6, #0
 80016a8:	1c0c      	adds	r4, r1, #0
 80016aa:	4666      	mov	r6, ip
 80016ac:	0219      	lsls	r1, r3, #8
 80016ae:	d400      	bmi.n	80016b2 <__aeabi_dsub+0xca>
 80016b0:	e0cf      	b.n	8001852 <__aeabi_dsub+0x26a>
 80016b2:	4f95      	ldr	r7, [pc, #596]	; (8001908 <__aeabi_dsub+0x320>)
 80016b4:	401f      	ands	r7, r3
 80016b6:	2f00      	cmp	r7, #0
 80016b8:	d100      	bne.n	80016bc <__aeabi_dsub+0xd4>
 80016ba:	e0eb      	b.n	8001894 <__aeabi_dsub+0x2ac>
 80016bc:	1c38      	adds	r0, r7, #0
 80016be:	f000 fbaf 	bl	8001e20 <__clzsi2>
 80016c2:	1c02      	adds	r2, r0, #0
 80016c4:	3a08      	subs	r2, #8
 80016c6:	2a1f      	cmp	r2, #31
 80016c8:	dd00      	ble.n	80016cc <__aeabi_dsub+0xe4>
 80016ca:	e0ec      	b.n	80018a6 <__aeabi_dsub+0x2be>
 80016cc:	2020      	movs	r0, #32
 80016ce:	1c21      	adds	r1, r4, #0
 80016d0:	1a83      	subs	r3, r0, r2
 80016d2:	4097      	lsls	r7, r2
 80016d4:	40d9      	lsrs	r1, r3
 80016d6:	430f      	orrs	r7, r1
 80016d8:	4094      	lsls	r4, r2
 80016da:	4295      	cmp	r5, r2
 80016dc:	dd00      	ble.n	80016e0 <__aeabi_dsub+0xf8>
 80016de:	e0b5      	b.n	800184c <__aeabi_dsub+0x264>
 80016e0:	1b52      	subs	r2, r2, r5
 80016e2:	3201      	adds	r2, #1
 80016e4:	2a1f      	cmp	r2, #31
 80016e6:	dd00      	ble.n	80016ea <__aeabi_dsub+0x102>
 80016e8:	e11f      	b.n	800192a <__aeabi_dsub+0x342>
 80016ea:	2320      	movs	r3, #32
 80016ec:	1a99      	subs	r1, r3, r2
 80016ee:	1c20      	adds	r0, r4, #0
 80016f0:	1c3d      	adds	r5, r7, #0
 80016f2:	40d0      	lsrs	r0, r2
 80016f4:	408d      	lsls	r5, r1
 80016f6:	408c      	lsls	r4, r1
 80016f8:	4305      	orrs	r5, r0
 80016fa:	1e63      	subs	r3, r4, #1
 80016fc:	419c      	sbcs	r4, r3
 80016fe:	1c3b      	adds	r3, r7, #0
 8001700:	432c      	orrs	r4, r5
 8001702:	40d3      	lsrs	r3, r2
 8001704:	2500      	movs	r5, #0
 8001706:	2201      	movs	r2, #1
 8001708:	210f      	movs	r1, #15
 800170a:	4021      	ands	r1, r4
 800170c:	2904      	cmp	r1, #4
 800170e:	d05f      	beq.n	80017d0 <__aeabi_dsub+0x1e8>
 8001710:	1d21      	adds	r1, r4, #4
 8001712:	42a1      	cmp	r1, r4
 8001714:	41bf      	sbcs	r7, r7
 8001716:	2401      	movs	r4, #1
 8001718:	1bdb      	subs	r3, r3, r7
 800171a:	1c6a      	adds	r2, r5, #1
 800171c:	4026      	ands	r6, r4
 800171e:	1c0c      	adds	r4, r1, #0
 8001720:	0219      	lsls	r1, r3, #8
 8001722:	d459      	bmi.n	80017d8 <__aeabi_dsub+0x1f0>
 8001724:	4977      	ldr	r1, [pc, #476]	; (8001904 <__aeabi_dsub+0x31c>)
 8001726:	1c10      	adds	r0, r2, #0
 8001728:	075f      	lsls	r7, r3, #29
 800172a:	08e4      	lsrs	r4, r4, #3
 800172c:	4008      	ands	r0, r1
 800172e:	1c2a      	adds	r2, r5, #0
 8001730:	433c      	orrs	r4, r7
 8001732:	08db      	lsrs	r3, r3, #3
 8001734:	2801      	cmp	r0, #1
 8001736:	dd5d      	ble.n	80017f4 <__aeabi_dsub+0x20c>
 8001738:	4874      	ldr	r0, [pc, #464]	; (800190c <__aeabi_dsub+0x324>)
 800173a:	400a      	ands	r2, r1
 800173c:	4003      	ands	r3, r0
 800173e:	4d74      	ldr	r5, [pc, #464]	; (8001910 <__aeabi_dsub+0x328>)
 8001740:	2000      	movs	r0, #0
 8001742:	2100      	movs	r1, #0
 8001744:	400d      	ands	r5, r1
 8001746:	496f      	ldr	r1, [pc, #444]	; (8001904 <__aeabi_dsub+0x31c>)
 8001748:	1c20      	adds	r0, r4, #0
 800174a:	400a      	ands	r2, r1
 800174c:	0514      	lsls	r4, r2, #20
 800174e:	4a71      	ldr	r2, [pc, #452]	; (8001914 <__aeabi_dsub+0x32c>)
 8001750:	432b      	orrs	r3, r5
 8001752:	401a      	ands	r2, r3
 8001754:	4b70      	ldr	r3, [pc, #448]	; (8001918 <__aeabi_dsub+0x330>)
 8001756:	4322      	orrs	r2, r4
 8001758:	401a      	ands	r2, r3
 800175a:	07f6      	lsls	r6, r6, #31
 800175c:	1c11      	adds	r1, r2, #0
 800175e:	4331      	orrs	r1, r6
 8001760:	bc0c      	pop	{r2, r3}
 8001762:	4690      	mov	r8, r2
 8001764:	469a      	mov	sl, r3
 8001766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001768:	2a00      	cmp	r2, #0
 800176a:	dc00      	bgt.n	800176e <__aeabi_dsub+0x186>
 800176c:	e0af      	b.n	80018ce <__aeabi_dsub+0x2e6>
 800176e:	2d00      	cmp	r5, #0
 8001770:	d055      	beq.n	800181e <__aeabi_dsub+0x236>
 8001772:	4b64      	ldr	r3, [pc, #400]	; (8001904 <__aeabi_dsub+0x31c>)
 8001774:	429e      	cmp	r6, r3
 8001776:	d063      	beq.n	8001840 <__aeabi_dsub+0x258>
 8001778:	2780      	movs	r7, #128	; 0x80
 800177a:	0439      	lsls	r1, r7, #16
 800177c:	4308      	orrs	r0, r1
 800177e:	2a38      	cmp	r2, #56	; 0x38
 8001780:	dc00      	bgt.n	8001784 <__aeabi_dsub+0x19c>
 8001782:	e122      	b.n	80019ca <__aeabi_dsub+0x3e2>
 8001784:	2800      	cmp	r0, #0
 8001786:	d103      	bne.n	8001790 <__aeabi_dsub+0x1a8>
 8001788:	4651      	mov	r1, sl
 800178a:	2900      	cmp	r1, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_dsub+0x1a8>
 800178e:	e177      	b.n	8001a80 <__aeabi_dsub+0x498>
 8001790:	2300      	movs	r3, #0
 8001792:	2101      	movs	r1, #1
 8001794:	1908      	adds	r0, r1, r4
 8001796:	42a0      	cmp	r0, r4
 8001798:	4192      	sbcs	r2, r2
 800179a:	4443      	add	r3, r8
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	1c04      	adds	r4, r0, #0
 80017a0:	1c35      	adds	r5, r6, #0
 80017a2:	021e      	lsls	r6, r3, #8
 80017a4:	d50e      	bpl.n	80017c4 <__aeabi_dsub+0x1dc>
 80017a6:	4a57      	ldr	r2, [pc, #348]	; (8001904 <__aeabi_dsub+0x31c>)
 80017a8:	3501      	adds	r5, #1
 80017aa:	4295      	cmp	r5, r2
 80017ac:	d100      	bne.n	80017b0 <__aeabi_dsub+0x1c8>
 80017ae:	e161      	b.n	8001a74 <__aeabi_dsub+0x48c>
 80017b0:	495a      	ldr	r1, [pc, #360]	; (800191c <__aeabi_dsub+0x334>)
 80017b2:	2601      	movs	r6, #1
 80017b4:	4026      	ands	r6, r4
 80017b6:	400b      	ands	r3, r1
 80017b8:	0867      	lsrs	r7, r4, #1
 80017ba:	1c34      	adds	r4, r6, #0
 80017bc:	07d8      	lsls	r0, r3, #31
 80017be:	433c      	orrs	r4, r7
 80017c0:	4304      	orrs	r4, r0
 80017c2:	085b      	lsrs	r3, r3, #1
 80017c4:	210f      	movs	r1, #15
 80017c6:	4021      	ands	r1, r4
 80017c8:	1c6a      	adds	r2, r5, #1
 80017ca:	4666      	mov	r6, ip
 80017cc:	2904      	cmp	r1, #4
 80017ce:	d19f      	bne.n	8001710 <__aeabi_dsub+0x128>
 80017d0:	2001      	movs	r0, #1
 80017d2:	4006      	ands	r6, r0
 80017d4:	0219      	lsls	r1, r3, #8
 80017d6:	d5a5      	bpl.n	8001724 <__aeabi_dsub+0x13c>
 80017d8:	494a      	ldr	r1, [pc, #296]	; (8001904 <__aeabi_dsub+0x31c>)
 80017da:	428a      	cmp	r2, r1
 80017dc:	d057      	beq.n	800188e <__aeabi_dsub+0x2a6>
 80017de:	4d4f      	ldr	r5, [pc, #316]	; (800191c <__aeabi_dsub+0x334>)
 80017e0:	4948      	ldr	r1, [pc, #288]	; (8001904 <__aeabi_dsub+0x31c>)
 80017e2:	402b      	ands	r3, r5
 80017e4:	1c50      	adds	r0, r2, #1
 80017e6:	075f      	lsls	r7, r3, #29
 80017e8:	08e4      	lsrs	r4, r4, #3
 80017ea:	4008      	ands	r0, r1
 80017ec:	433c      	orrs	r4, r7
 80017ee:	08db      	lsrs	r3, r3, #3
 80017f0:	2801      	cmp	r0, #1
 80017f2:	dca1      	bgt.n	8001738 <__aeabi_dsub+0x150>
 80017f4:	2c00      	cmp	r4, #0
 80017f6:	d101      	bne.n	80017fc <__aeabi_dsub+0x214>
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <__aeabi_dsub+0x224>
 80017fc:	2a00      	cmp	r2, #0
 80017fe:	d062      	beq.n	80018c6 <__aeabi_dsub+0x2de>
 8001800:	2780      	movs	r7, #128	; 0x80
 8001802:	4942      	ldr	r1, [pc, #264]	; (800190c <__aeabi_dsub+0x324>)
 8001804:	033d      	lsls	r5, r7, #12
 8001806:	432b      	orrs	r3, r5
 8001808:	400b      	ands	r3, r1
 800180a:	493e      	ldr	r1, [pc, #248]	; (8001904 <__aeabi_dsub+0x31c>)
 800180c:	400a      	ands	r2, r1
 800180e:	e796      	b.n	800173e <__aeabi_dsub+0x156>
 8001810:	2800      	cmp	r0, #0
 8001812:	d000      	beq.n	8001816 <__aeabi_dsub+0x22e>
 8001814:	e707      	b.n	8001626 <__aeabi_dsub+0x3e>
 8001816:	2f00      	cmp	r7, #0
 8001818:	d000      	beq.n	800181c <__aeabi_dsub+0x234>
 800181a:	e704      	b.n	8001626 <__aeabi_dsub+0x3e>
 800181c:	e701      	b.n	8001622 <__aeabi_dsub+0x3a>
 800181e:	2800      	cmp	r0, #0
 8001820:	d107      	bne.n	8001832 <__aeabi_dsub+0x24a>
 8001822:	4651      	mov	r1, sl
 8001824:	2900      	cmp	r1, #0
 8001826:	d104      	bne.n	8001832 <__aeabi_dsub+0x24a>
 8001828:	1c72      	adds	r2, r6, #1
 800182a:	1c35      	adds	r5, r6, #0
 800182c:	4643      	mov	r3, r8
 800182e:	4666      	mov	r6, ip
 8001830:	e76a      	b.n	8001708 <__aeabi_dsub+0x120>
 8001832:	3a01      	subs	r2, #1
 8001834:	2a00      	cmp	r2, #0
 8001836:	d100      	bne.n	800183a <__aeabi_dsub+0x252>
 8001838:	e0e4      	b.n	8001a04 <__aeabi_dsub+0x41c>
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <__aeabi_dsub+0x31c>)
 800183c:	429e      	cmp	r6, r3
 800183e:	d19e      	bne.n	800177e <__aeabi_dsub+0x196>
 8001840:	2780      	movs	r7, #128	; 0x80
 8001842:	4643      	mov	r3, r8
 8001844:	4666      	mov	r6, ip
 8001846:	013a      	lsls	r2, r7, #4
 8001848:	4d2e      	ldr	r5, [pc, #184]	; (8001904 <__aeabi_dsub+0x31c>)
 800184a:	e75d      	b.n	8001708 <__aeabi_dsub+0x120>
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <__aeabi_dsub+0x334>)
 800184e:	1aad      	subs	r5, r5, r2
 8001850:	403b      	ands	r3, r7
 8001852:	1c6a      	adds	r2, r5, #1
 8001854:	e758      	b.n	8001708 <__aeabi_dsub+0x120>
 8001856:	2a00      	cmp	r2, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dsub+0x274>
 800185a:	e087      	b.n	800196c <__aeabi_dsub+0x384>
 800185c:	4d29      	ldr	r5, [pc, #164]	; (8001904 <__aeabi_dsub+0x31c>)
 800185e:	1c77      	adds	r7, r6, #1
 8001860:	402f      	ands	r7, r5
 8001862:	2f01      	cmp	r7, #1
 8001864:	dc00      	bgt.n	8001868 <__aeabi_dsub+0x280>
 8001866:	e0eb      	b.n	8001a40 <__aeabi_dsub+0x458>
 8001868:	4652      	mov	r2, sl
 800186a:	1aa3      	subs	r3, r4, r2
 800186c:	4645      	mov	r5, r8
 800186e:	1a2f      	subs	r7, r5, r0
 8001870:	429c      	cmp	r4, r3
 8001872:	4192      	sbcs	r2, r2
 8001874:	18bf      	adds	r7, r7, r2
 8001876:	023a      	lsls	r2, r7, #8
 8001878:	d400      	bmi.n	800187c <__aeabi_dsub+0x294>
 800187a:	e09e      	b.n	80019ba <__aeabi_dsub+0x3d2>
 800187c:	4653      	mov	r3, sl
 800187e:	1b1c      	subs	r4, r3, r4
 8001880:	1b40      	subs	r0, r0, r5
 8001882:	45a2      	cmp	sl, r4
 8001884:	419b      	sbcs	r3, r3
 8001886:	1c35      	adds	r5, r6, #0
 8001888:	18c7      	adds	r7, r0, r3
 800188a:	1c0e      	adds	r6, r1, #0
 800188c:	e713      	b.n	80016b6 <__aeabi_dsub+0xce>
 800188e:	2300      	movs	r3, #0
 8001890:	2400      	movs	r4, #0
 8001892:	e754      	b.n	800173e <__aeabi_dsub+0x156>
 8001894:	1c20      	adds	r0, r4, #0
 8001896:	f000 fac3 	bl	8001e20 <__clzsi2>
 800189a:	3020      	adds	r0, #32
 800189c:	1c02      	adds	r2, r0, #0
 800189e:	3a08      	subs	r2, #8
 80018a0:	2a1f      	cmp	r2, #31
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dsub+0x2be>
 80018a4:	e712      	b.n	80016cc <__aeabi_dsub+0xe4>
 80018a6:	1c27      	adds	r7, r4, #0
 80018a8:	3828      	subs	r0, #40	; 0x28
 80018aa:	4087      	lsls	r7, r0
 80018ac:	2400      	movs	r4, #0
 80018ae:	e714      	b.n	80016da <__aeabi_dsub+0xf2>
 80018b0:	2800      	cmp	r0, #0
 80018b2:	d105      	bne.n	80018c0 <__aeabi_dsub+0x2d8>
 80018b4:	4655      	mov	r5, sl
 80018b6:	2d00      	cmp	r5, #0
 80018b8:	d102      	bne.n	80018c0 <__aeabi_dsub+0x2d8>
 80018ba:	2300      	movs	r3, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	e6ec      	b.n	800169a <__aeabi_dsub+0xb2>
 80018c0:	2300      	movs	r3, #0
 80018c2:	2101      	movs	r1, #1
 80018c4:	e6e9      	b.n	800169a <__aeabi_dsub+0xb2>
 80018c6:	4a11      	ldr	r2, [pc, #68]	; (800190c <__aeabi_dsub+0x324>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	2200      	movs	r2, #0
 80018cc:	e737      	b.n	800173e <__aeabi_dsub+0x156>
 80018ce:	2a00      	cmp	r2, #0
 80018d0:	d000      	beq.n	80018d4 <__aeabi_dsub+0x2ec>
 80018d2:	e0e9      	b.n	8001aa8 <__aeabi_dsub+0x4c0>
 80018d4:	1c75      	adds	r5, r6, #1
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <__aeabi_dsub+0x31c>)
 80018d8:	1c2f      	adds	r7, r5, #0
 80018da:	401f      	ands	r7, r3
 80018dc:	2f01      	cmp	r7, #1
 80018de:	dc00      	bgt.n	80018e2 <__aeabi_dsub+0x2fa>
 80018e0:	e09e      	b.n	8001a20 <__aeabi_dsub+0x438>
 80018e2:	429d      	cmp	r5, r3
 80018e4:	d100      	bne.n	80018e8 <__aeabi_dsub+0x300>
 80018e6:	e0c5      	b.n	8001a74 <__aeabi_dsub+0x48c>
 80018e8:	4651      	mov	r1, sl
 80018ea:	190e      	adds	r6, r1, r4
 80018ec:	4642      	mov	r2, r8
 80018ee:	42a6      	cmp	r6, r4
 80018f0:	41a4      	sbcs	r4, r4
 80018f2:	1881      	adds	r1, r0, r2
 80018f4:	1b0b      	subs	r3, r1, r4
 80018f6:	07df      	lsls	r7, r3, #31
 80018f8:	0874      	lsrs	r4, r6, #1
 80018fa:	433c      	orrs	r4, r7
 80018fc:	085b      	lsrs	r3, r3, #1
 80018fe:	1c6a      	adds	r2, r5, #1
 8001900:	4666      	mov	r6, ip
 8001902:	e701      	b.n	8001708 <__aeabi_dsub+0x120>
 8001904:	000007ff 	.word	0x000007ff
 8001908:	007fffff 	.word	0x007fffff
 800190c:	000fffff 	.word	0x000fffff
 8001910:	fff00000 	.word	0xfff00000
 8001914:	800fffff 	.word	0x800fffff
 8001918:	7fffffff 	.word	0x7fffffff
 800191c:	ff7fffff 	.word	0xff7fffff
 8001920:	4bc3      	ldr	r3, [pc, #780]	; (8001c30 <__aeabi_dsub+0x648>)
 8001922:	429e      	cmp	r6, r3
 8001924:	d000      	beq.n	8001928 <__aeabi_dsub+0x340>
 8001926:	e6a3      	b.n	8001670 <__aeabi_dsub+0x88>
 8001928:	e78a      	b.n	8001840 <__aeabi_dsub+0x258>
 800192a:	2a20      	cmp	r2, #32
 800192c:	d074      	beq.n	8001a18 <__aeabi_dsub+0x430>
 800192e:	2040      	movs	r0, #64	; 0x40
 8001930:	1a81      	subs	r1, r0, r2
 8001932:	1c3d      	adds	r5, r7, #0
 8001934:	408d      	lsls	r5, r1
 8001936:	1c2b      	adds	r3, r5, #0
 8001938:	431c      	orrs	r4, r3
 800193a:	3a20      	subs	r2, #32
 800193c:	1e63      	subs	r3, r4, #1
 800193e:	419c      	sbcs	r4, r3
 8001940:	40d7      	lsrs	r7, r2
 8001942:	433c      	orrs	r4, r7
 8001944:	2201      	movs	r2, #1
 8001946:	2300      	movs	r3, #0
 8001948:	2500      	movs	r5, #0
 800194a:	e6dd      	b.n	8001708 <__aeabi_dsub+0x120>
 800194c:	2a20      	cmp	r2, #32
 800194e:	d065      	beq.n	8001a1c <__aeabi_dsub+0x434>
 8001950:	2340      	movs	r3, #64	; 0x40
 8001952:	1a9f      	subs	r7, r3, r2
 8001954:	1c05      	adds	r5, r0, #0
 8001956:	40bd      	lsls	r5, r7
 8001958:	1c29      	adds	r1, r5, #0
 800195a:	4653      	mov	r3, sl
 800195c:	4319      	orrs	r1, r3
 800195e:	3a20      	subs	r2, #32
 8001960:	1e4b      	subs	r3, r1, #1
 8001962:	4199      	sbcs	r1, r3
 8001964:	40d0      	lsrs	r0, r2
 8001966:	4301      	orrs	r1, r0
 8001968:	2300      	movs	r3, #0
 800196a:	e696      	b.n	800169a <__aeabi_dsub+0xb2>
 800196c:	4252      	negs	r2, r2
 800196e:	2e00      	cmp	r6, #0
 8001970:	d03d      	beq.n	80019ee <__aeabi_dsub+0x406>
 8001972:	4baf      	ldr	r3, [pc, #700]	; (8001c30 <__aeabi_dsub+0x648>)
 8001974:	429d      	cmp	r5, r3
 8001976:	d100      	bne.n	800197a <__aeabi_dsub+0x392>
 8001978:	e0b8      	b.n	8001aec <__aeabi_dsub+0x504>
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	4646      	mov	r6, r8
 800197e:	041f      	lsls	r7, r3, #16
 8001980:	433e      	orrs	r6, r7
 8001982:	46b0      	mov	r8, r6
 8001984:	2a38      	cmp	r2, #56	; 0x38
 8001986:	dd00      	ble.n	800198a <__aeabi_dsub+0x3a2>
 8001988:	e0c3      	b.n	8001b12 <__aeabi_dsub+0x52a>
 800198a:	2a1f      	cmp	r2, #31
 800198c:	dd00      	ble.n	8001990 <__aeabi_dsub+0x3a8>
 800198e:	e165      	b.n	8001c5c <__aeabi_dsub+0x674>
 8001990:	2620      	movs	r6, #32
 8001992:	1ab3      	subs	r3, r6, r2
 8001994:	4647      	mov	r7, r8
 8001996:	1c26      	adds	r6, r4, #0
 8001998:	409f      	lsls	r7, r3
 800199a:	409c      	lsls	r4, r3
 800199c:	40d6      	lsrs	r6, r2
 800199e:	1e63      	subs	r3, r4, #1
 80019a0:	419c      	sbcs	r4, r3
 80019a2:	433e      	orrs	r6, r7
 80019a4:	4643      	mov	r3, r8
 80019a6:	4334      	orrs	r4, r6
 80019a8:	40d3      	lsrs	r3, r2
 80019aa:	4652      	mov	r2, sl
 80019ac:	1b14      	subs	r4, r2, r4
 80019ae:	1ac2      	subs	r2, r0, r3
 80019b0:	45a2      	cmp	sl, r4
 80019b2:	4180      	sbcs	r0, r0
 80019b4:	1813      	adds	r3, r2, r0
 80019b6:	1c0e      	adds	r6, r1, #0
 80019b8:	e678      	b.n	80016ac <__aeabi_dsub+0xc4>
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d101      	bne.n	80019c2 <__aeabi_dsub+0x3da>
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d052      	beq.n	8001a68 <__aeabi_dsub+0x480>
 80019c2:	1c35      	adds	r5, r6, #0
 80019c4:	1c1c      	adds	r4, r3, #0
 80019c6:	4666      	mov	r6, ip
 80019c8:	e675      	b.n	80016b6 <__aeabi_dsub+0xce>
 80019ca:	2a1f      	cmp	r2, #31
 80019cc:	dc5b      	bgt.n	8001a86 <__aeabi_dsub+0x49e>
 80019ce:	2120      	movs	r1, #32
 80019d0:	1a8f      	subs	r7, r1, r2
 80019d2:	1c05      	adds	r5, r0, #0
 80019d4:	4651      	mov	r1, sl
 80019d6:	40bd      	lsls	r5, r7
 80019d8:	40d1      	lsrs	r1, r2
 80019da:	4329      	orrs	r1, r5
 80019dc:	4655      	mov	r5, sl
 80019de:	40bd      	lsls	r5, r7
 80019e0:	1c2b      	adds	r3, r5, #0
 80019e2:	1e5d      	subs	r5, r3, #1
 80019e4:	41ab      	sbcs	r3, r5
 80019e6:	4319      	orrs	r1, r3
 80019e8:	1c03      	adds	r3, r0, #0
 80019ea:	40d3      	lsrs	r3, r2
 80019ec:	e6d2      	b.n	8001794 <__aeabi_dsub+0x1ac>
 80019ee:	4643      	mov	r3, r8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d000      	beq.n	80019f6 <__aeabi_dsub+0x40e>
 80019f4:	e081      	b.n	8001afa <__aeabi_dsub+0x512>
 80019f6:	2c00      	cmp	r4, #0
 80019f8:	d17f      	bne.n	8001afa <__aeabi_dsub+0x512>
 80019fa:	1c6a      	adds	r2, r5, #1
 80019fc:	1c03      	adds	r3, r0, #0
 80019fe:	4654      	mov	r4, sl
 8001a00:	1c0e      	adds	r6, r1, #0
 8001a02:	e681      	b.n	8001708 <__aeabi_dsub+0x120>
 8001a04:	4653      	mov	r3, sl
 8001a06:	191a      	adds	r2, r3, r4
 8001a08:	4645      	mov	r5, r8
 8001a0a:	1947      	adds	r7, r0, r5
 8001a0c:	42a2      	cmp	r2, r4
 8001a0e:	41a4      	sbcs	r4, r4
 8001a10:	1b3b      	subs	r3, r7, r4
 8001a12:	1c35      	adds	r5, r6, #0
 8001a14:	1c14      	adds	r4, r2, #0
 8001a16:	e6c4      	b.n	80017a2 <__aeabi_dsub+0x1ba>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	e78d      	b.n	8001938 <__aeabi_dsub+0x350>
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	e79c      	b.n	800195a <__aeabi_dsub+0x372>
 8001a20:	2e00      	cmp	r6, #0
 8001a22:	d000      	beq.n	8001a26 <__aeabi_dsub+0x43e>
 8001a24:	e0dd      	b.n	8001be2 <__aeabi_dsub+0x5fa>
 8001a26:	4643      	mov	r3, r8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d000      	beq.n	8001a2e <__aeabi_dsub+0x446>
 8001a2c:	e13b      	b.n	8001ca6 <__aeabi_dsub+0x6be>
 8001a2e:	2c00      	cmp	r4, #0
 8001a30:	d000      	beq.n	8001a34 <__aeabi_dsub+0x44c>
 8001a32:	e138      	b.n	8001ca6 <__aeabi_dsub+0x6be>
 8001a34:	1c03      	adds	r3, r0, #0
 8001a36:	4654      	mov	r4, sl
 8001a38:	4666      	mov	r6, ip
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2500      	movs	r5, #0
 8001a3e:	e663      	b.n	8001708 <__aeabi_dsub+0x120>
 8001a40:	4643      	mov	r3, r8
 8001a42:	2e00      	cmp	r6, #0
 8001a44:	d13f      	bne.n	8001ac6 <__aeabi_dsub+0x4de>
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d000      	beq.n	8001a4c <__aeabi_dsub+0x464>
 8001a4a:	e08f      	b.n	8001b6c <__aeabi_dsub+0x584>
 8001a4c:	2c00      	cmp	r4, #0
 8001a4e:	d000      	beq.n	8001a52 <__aeabi_dsub+0x46a>
 8001a50:	e08c      	b.n	8001b6c <__aeabi_dsub+0x584>
 8001a52:	2800      	cmp	r0, #0
 8001a54:	d102      	bne.n	8001a5c <__aeabi_dsub+0x474>
 8001a56:	4655      	mov	r5, sl
 8001a58:	2d00      	cmp	r5, #0
 8001a5a:	d005      	beq.n	8001a68 <__aeabi_dsub+0x480>
 8001a5c:	1c03      	adds	r3, r0, #0
 8001a5e:	4654      	mov	r4, sl
 8001a60:	1c0e      	adds	r6, r1, #0
 8001a62:	2201      	movs	r2, #1
 8001a64:	2500      	movs	r5, #0
 8001a66:	e64f      	b.n	8001708 <__aeabi_dsub+0x120>
 8001a68:	2600      	movs	r6, #0
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2104      	movs	r1, #4
 8001a70:	2500      	movs	r5, #0
 8001a72:	e654      	b.n	800171e <__aeabi_dsub+0x136>
 8001a74:	2080      	movs	r0, #128	; 0x80
 8001a76:	4666      	mov	r6, ip
 8001a78:	0102      	lsls	r2, r0, #4
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	e64e      	b.n	800171e <__aeabi_dsub+0x136>
 8001a80:	2300      	movs	r3, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	e686      	b.n	8001794 <__aeabi_dsub+0x1ac>
 8001a86:	2a20      	cmp	r2, #32
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x4a4>
 8001a8a:	e0e5      	b.n	8001c58 <__aeabi_dsub+0x670>
 8001a8c:	2540      	movs	r5, #64	; 0x40
 8001a8e:	1aaf      	subs	r7, r5, r2
 8001a90:	1c03      	adds	r3, r0, #0
 8001a92:	40bb      	lsls	r3, r7
 8001a94:	1c19      	adds	r1, r3, #0
 8001a96:	4655      	mov	r5, sl
 8001a98:	4329      	orrs	r1, r5
 8001a9a:	3a20      	subs	r2, #32
 8001a9c:	1e4b      	subs	r3, r1, #1
 8001a9e:	4199      	sbcs	r1, r3
 8001aa0:	40d0      	lsrs	r0, r2
 8001aa2:	4301      	orrs	r1, r0
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e675      	b.n	8001794 <__aeabi_dsub+0x1ac>
 8001aa8:	4252      	negs	r2, r2
 8001aaa:	2e00      	cmp	r6, #0
 8001aac:	d13a      	bne.n	8001b24 <__aeabi_dsub+0x53c>
 8001aae:	4643      	mov	r3, r8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d000      	beq.n	8001ab6 <__aeabi_dsub+0x4ce>
 8001ab4:	e0e5      	b.n	8001c82 <__aeabi_dsub+0x69a>
 8001ab6:	2c00      	cmp	r4, #0
 8001ab8:	d000      	beq.n	8001abc <__aeabi_dsub+0x4d4>
 8001aba:	e0e2      	b.n	8001c82 <__aeabi_dsub+0x69a>
 8001abc:	1c6a      	adds	r2, r5, #1
 8001abe:	1c03      	adds	r3, r0, #0
 8001ac0:	4654      	mov	r4, sl
 8001ac2:	4666      	mov	r6, ip
 8001ac4:	e620      	b.n	8001708 <__aeabi_dsub+0x120>
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d169      	bne.n	8001b9e <__aeabi_dsub+0x5b6>
 8001aca:	2c00      	cmp	r4, #0
 8001acc:	d167      	bne.n	8001b9e <__aeabi_dsub+0x5b6>
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d10c      	bne.n	8001aec <__aeabi_dsub+0x504>
 8001ad2:	4656      	mov	r6, sl
 8001ad4:	2e00      	cmp	r6, #0
 8001ad6:	d109      	bne.n	8001aec <__aeabi_dsub+0x504>
 8001ad8:	2480      	movs	r4, #128	; 0x80
 8001ada:	2104      	movs	r1, #4
 8001adc:	0122      	lsls	r2, r4, #4
 8001ade:	4b55      	ldr	r3, [pc, #340]	; (8001c34 <__aeabi_dsub+0x64c>)
 8001ae0:	4249      	negs	r1, r1
 8001ae2:	e61c      	b.n	800171e <__aeabi_dsub+0x136>
 8001ae4:	4b52      	ldr	r3, [pc, #328]	; (8001c30 <__aeabi_dsub+0x648>)
 8001ae6:	429d      	cmp	r5, r3
 8001ae8:	d000      	beq.n	8001aec <__aeabi_dsub+0x504>
 8001aea:	e74b      	b.n	8001984 <__aeabi_dsub+0x39c>
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	1c03      	adds	r3, r0, #0
 8001af0:	4654      	mov	r4, sl
 8001af2:	1c0e      	adds	r6, r1, #0
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	4d4e      	ldr	r5, [pc, #312]	; (8001c30 <__aeabi_dsub+0x648>)
 8001af8:	e606      	b.n	8001708 <__aeabi_dsub+0x120>
 8001afa:	3a01      	subs	r2, #1
 8001afc:	2a00      	cmp	r2, #0
 8001afe:	d1f1      	bne.n	8001ae4 <__aeabi_dsub+0x4fc>
 8001b00:	4656      	mov	r6, sl
 8001b02:	1b34      	subs	r4, r6, r4
 8001b04:	4642      	mov	r2, r8
 8001b06:	1a86      	subs	r6, r0, r2
 8001b08:	45a2      	cmp	sl, r4
 8001b0a:	41bf      	sbcs	r7, r7
 8001b0c:	19f3      	adds	r3, r6, r7
 8001b0e:	1c0e      	adds	r6, r1, #0
 8001b10:	e5cc      	b.n	80016ac <__aeabi_dsub+0xc4>
 8001b12:	4646      	mov	r6, r8
 8001b14:	2e00      	cmp	r6, #0
 8001b16:	d102      	bne.n	8001b1e <__aeabi_dsub+0x536>
 8001b18:	2c00      	cmp	r4, #0
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0x536>
 8001b1c:	e0ae      	b.n	8001c7c <__aeabi_dsub+0x694>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2401      	movs	r4, #1
 8001b22:	e742      	b.n	80019aa <__aeabi_dsub+0x3c2>
 8001b24:	4b42      	ldr	r3, [pc, #264]	; (8001c30 <__aeabi_dsub+0x648>)
 8001b26:	429d      	cmp	r5, r3
 8001b28:	d100      	bne.n	8001b2c <__aeabi_dsub+0x544>
 8001b2a:	e089      	b.n	8001c40 <__aeabi_dsub+0x658>
 8001b2c:	2680      	movs	r6, #128	; 0x80
 8001b2e:	4641      	mov	r1, r8
 8001b30:	0437      	lsls	r7, r6, #16
 8001b32:	4339      	orrs	r1, r7
 8001b34:	4688      	mov	r8, r1
 8001b36:	2a38      	cmp	r2, #56	; 0x38
 8001b38:	dd00      	ble.n	8001b3c <__aeabi_dsub+0x554>
 8001b3a:	e0ac      	b.n	8001c96 <__aeabi_dsub+0x6ae>
 8001b3c:	2a1f      	cmp	r2, #31
 8001b3e:	dd00      	ble.n	8001b42 <__aeabi_dsub+0x55a>
 8001b40:	e0d2      	b.n	8001ce8 <__aeabi_dsub+0x700>
 8001b42:	2320      	movs	r3, #32
 8001b44:	1a9f      	subs	r7, r3, r2
 8001b46:	1c21      	adds	r1, r4, #0
 8001b48:	4646      	mov	r6, r8
 8001b4a:	40bc      	lsls	r4, r7
 8001b4c:	40be      	lsls	r6, r7
 8001b4e:	40d1      	lsrs	r1, r2
 8001b50:	1c23      	adds	r3, r4, #0
 8001b52:	4331      	orrs	r1, r6
 8001b54:	1e5c      	subs	r4, r3, #1
 8001b56:	41a3      	sbcs	r3, r4
 8001b58:	1c0c      	adds	r4, r1, #0
 8001b5a:	431c      	orrs	r4, r3
 8001b5c:	4643      	mov	r3, r8
 8001b5e:	40d3      	lsrs	r3, r2
 8001b60:	4454      	add	r4, sl
 8001b62:	181b      	adds	r3, r3, r0
 8001b64:	4554      	cmp	r4, sl
 8001b66:	4180      	sbcs	r0, r0
 8001b68:	1a1b      	subs	r3, r3, r0
 8001b6a:	e61a      	b.n	80017a2 <__aeabi_dsub+0x1ba>
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d102      	bne.n	8001b76 <__aeabi_dsub+0x58e>
 8001b70:	4656      	mov	r6, sl
 8001b72:	2e00      	cmp	r6, #0
 8001b74:	d06b      	beq.n	8001c4e <__aeabi_dsub+0x666>
 8001b76:	4653      	mov	r3, sl
 8001b78:	1ae2      	subs	r2, r4, r3
 8001b7a:	4645      	mov	r5, r8
 8001b7c:	1a2f      	subs	r7, r5, r0
 8001b7e:	4294      	cmp	r4, r2
 8001b80:	419b      	sbcs	r3, r3
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	021e      	lsls	r6, r3, #8
 8001b86:	d400      	bmi.n	8001b8a <__aeabi_dsub+0x5a2>
 8001b88:	e0a4      	b.n	8001cd4 <__aeabi_dsub+0x6ec>
 8001b8a:	4652      	mov	r2, sl
 8001b8c:	1b14      	subs	r4, r2, r4
 8001b8e:	1b42      	subs	r2, r0, r5
 8001b90:	45a2      	cmp	sl, r4
 8001b92:	4180      	sbcs	r0, r0
 8001b94:	1813      	adds	r3, r2, r0
 8001b96:	1c0e      	adds	r6, r1, #0
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2500      	movs	r5, #0
 8001b9c:	e5b4      	b.n	8001708 <__aeabi_dsub+0x120>
 8001b9e:	2800      	cmp	r0, #0
 8001ba0:	d103      	bne.n	8001baa <__aeabi_dsub+0x5c2>
 8001ba2:	4652      	mov	r2, sl
 8001ba4:	2a00      	cmp	r2, #0
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0x5c2>
 8001ba8:	e64a      	b.n	8001840 <__aeabi_dsub+0x258>
 8001baa:	4645      	mov	r5, r8
 8001bac:	076e      	lsls	r6, r5, #29
 8001bae:	08ea      	lsrs	r2, r5, #3
 8001bb0:	2580      	movs	r5, #128	; 0x80
 8001bb2:	08e4      	lsrs	r4, r4, #3
 8001bb4:	032b      	lsls	r3, r5, #12
 8001bb6:	4334      	orrs	r4, r6
 8001bb8:	421a      	tst	r2, r3
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x5d6>
 8001bbc:	e088      	b.n	8001cd0 <__aeabi_dsub+0x6e8>
 8001bbe:	08c5      	lsrs	r5, r0, #3
 8001bc0:	421d      	tst	r5, r3
 8001bc2:	d000      	beq.n	8001bc6 <__aeabi_dsub+0x5de>
 8001bc4:	e084      	b.n	8001cd0 <__aeabi_dsub+0x6e8>
 8001bc6:	4656      	mov	r6, sl
 8001bc8:	08f4      	lsrs	r4, r6, #3
 8001bca:	0747      	lsls	r7, r0, #29
 8001bcc:	1c2a      	adds	r2, r5, #0
 8001bce:	433c      	orrs	r4, r7
 8001bd0:	1c0e      	adds	r6, r1, #0
 8001bd2:	00d1      	lsls	r1, r2, #3
 8001bd4:	0f63      	lsrs	r3, r4, #29
 8001bd6:	2080      	movs	r0, #128	; 0x80
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	00e4      	lsls	r4, r4, #3
 8001bdc:	0102      	lsls	r2, r0, #4
 8001bde:	4d14      	ldr	r5, [pc, #80]	; (8001c30 <__aeabi_dsub+0x648>)
 8001be0:	e592      	b.n	8001708 <__aeabi_dsub+0x120>
 8001be2:	4646      	mov	r6, r8
 8001be4:	2e00      	cmp	r6, #0
 8001be6:	d101      	bne.n	8001bec <__aeabi_dsub+0x604>
 8001be8:	2c00      	cmp	r4, #0
 8001bea:	d029      	beq.n	8001c40 <__aeabi_dsub+0x658>
 8001bec:	2800      	cmp	r0, #0
 8001bee:	d103      	bne.n	8001bf8 <__aeabi_dsub+0x610>
 8001bf0:	4652      	mov	r2, sl
 8001bf2:	2a00      	cmp	r2, #0
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x610>
 8001bf6:	e623      	b.n	8001840 <__aeabi_dsub+0x258>
 8001bf8:	4645      	mov	r5, r8
 8001bfa:	076b      	lsls	r3, r5, #29
 8001bfc:	08e4      	lsrs	r4, r4, #3
 8001bfe:	2780      	movs	r7, #128	; 0x80
 8001c00:	431c      	orrs	r4, r3
 8001c02:	08ea      	lsrs	r2, r5, #3
 8001c04:	033b      	lsls	r3, r7, #12
 8001c06:	421a      	tst	r2, r3
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x624>
 8001c0a:	e082      	b.n	8001d12 <__aeabi_dsub+0x72a>
 8001c0c:	08c5      	lsrs	r5, r0, #3
 8001c0e:	421d      	tst	r5, r3
 8001c10:	d000      	beq.n	8001c14 <__aeabi_dsub+0x62c>
 8001c12:	e07e      	b.n	8001d12 <__aeabi_dsub+0x72a>
 8001c14:	4656      	mov	r6, sl
 8001c16:	08f4      	lsrs	r4, r6, #3
 8001c18:	0740      	lsls	r0, r0, #29
 8001c1a:	1c2b      	adds	r3, r5, #0
 8001c1c:	4304      	orrs	r4, r0
 8001c1e:	1c0e      	adds	r6, r1, #0
 8001c20:	0f62      	lsrs	r2, r4, #29
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	2180      	movs	r1, #128	; 0x80
 8001c26:	4313      	orrs	r3, r2
 8001c28:	00e4      	lsls	r4, r4, #3
 8001c2a:	010a      	lsls	r2, r1, #4
 8001c2c:	4d00      	ldr	r5, [pc, #0]	; (8001c30 <__aeabi_dsub+0x648>)
 8001c2e:	e56b      	b.n	8001708 <__aeabi_dsub+0x120>
 8001c30:	000007ff 	.word	0x000007ff
 8001c34:	007fffff 	.word	0x007fffff
 8001c38:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <__aeabi_dsub+0x734>)
 8001c3a:	429d      	cmp	r5, r3
 8001c3c:	d000      	beq.n	8001c40 <__aeabi_dsub+0x658>
 8001c3e:	e77a      	b.n	8001b36 <__aeabi_dsub+0x54e>
 8001c40:	2580      	movs	r5, #128	; 0x80
 8001c42:	012a      	lsls	r2, r5, #4
 8001c44:	1c03      	adds	r3, r0, #0
 8001c46:	4654      	mov	r4, sl
 8001c48:	4666      	mov	r6, ip
 8001c4a:	4d34      	ldr	r5, [pc, #208]	; (8001d1c <__aeabi_dsub+0x734>)
 8001c4c:	e55c      	b.n	8001708 <__aeabi_dsub+0x120>
 8001c4e:	4643      	mov	r3, r8
 8001c50:	4666      	mov	r6, ip
 8001c52:	2201      	movs	r2, #1
 8001c54:	2500      	movs	r5, #0
 8001c56:	e557      	b.n	8001708 <__aeabi_dsub+0x120>
 8001c58:	2100      	movs	r1, #0
 8001c5a:	e71c      	b.n	8001a96 <__aeabi_dsub+0x4ae>
 8001c5c:	2a20      	cmp	r2, #32
 8001c5e:	d056      	beq.n	8001d0e <__aeabi_dsub+0x726>
 8001c60:	2740      	movs	r7, #64	; 0x40
 8001c62:	1abb      	subs	r3, r7, r2
 8001c64:	4646      	mov	r6, r8
 8001c66:	409e      	lsls	r6, r3
 8001c68:	1c33      	adds	r3, r6, #0
 8001c6a:	431c      	orrs	r4, r3
 8001c6c:	1e63      	subs	r3, r4, #1
 8001c6e:	419c      	sbcs	r4, r3
 8001c70:	3a20      	subs	r2, #32
 8001c72:	4643      	mov	r3, r8
 8001c74:	40d3      	lsrs	r3, r2
 8001c76:	431c      	orrs	r4, r3
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e696      	b.n	80019aa <__aeabi_dsub+0x3c2>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2400      	movs	r4, #0
 8001c80:	e693      	b.n	80019aa <__aeabi_dsub+0x3c2>
 8001c82:	3a01      	subs	r2, #1
 8001c84:	2a00      	cmp	r2, #0
 8001c86:	d1d7      	bne.n	8001c38 <__aeabi_dsub+0x650>
 8001c88:	4646      	mov	r6, r8
 8001c8a:	4454      	add	r4, sl
 8001c8c:	1981      	adds	r1, r0, r6
 8001c8e:	4554      	cmp	r4, sl
 8001c90:	41b6      	sbcs	r6, r6
 8001c92:	1b8b      	subs	r3, r1, r6
 8001c94:	e585      	b.n	80017a2 <__aeabi_dsub+0x1ba>
 8001c96:	4642      	mov	r2, r8
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	d101      	bne.n	8001ca0 <__aeabi_dsub+0x6b8>
 8001c9c:	2c00      	cmp	r4, #0
 8001c9e:	d033      	beq.n	8001d08 <__aeabi_dsub+0x720>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	2401      	movs	r4, #1
 8001ca4:	e75c      	b.n	8001b60 <__aeabi_dsub+0x578>
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	d102      	bne.n	8001cb0 <__aeabi_dsub+0x6c8>
 8001caa:	4655      	mov	r5, sl
 8001cac:	2d00      	cmp	r5, #0
 8001cae:	d0ce      	beq.n	8001c4e <__aeabi_dsub+0x666>
 8001cb0:	4656      	mov	r6, sl
 8001cb2:	1932      	adds	r2, r6, r4
 8001cb4:	4641      	mov	r1, r8
 8001cb6:	1846      	adds	r6, r0, r1
 8001cb8:	42a2      	cmp	r2, r4
 8001cba:	41a4      	sbcs	r4, r4
 8001cbc:	1b33      	subs	r3, r6, r4
 8001cbe:	021d      	lsls	r5, r3, #8
 8001cc0:	d50d      	bpl.n	8001cde <__aeabi_dsub+0x6f6>
 8001cc2:	4817      	ldr	r0, [pc, #92]	; (8001d20 <__aeabi_dsub+0x738>)
 8001cc4:	1c14      	adds	r4, r2, #0
 8001cc6:	4003      	ands	r3, r0
 8001cc8:	4666      	mov	r6, ip
 8001cca:	2202      	movs	r2, #2
 8001ccc:	2501      	movs	r5, #1
 8001cce:	e51b      	b.n	8001708 <__aeabi_dsub+0x120>
 8001cd0:	4666      	mov	r6, ip
 8001cd2:	e77e      	b.n	8001bd2 <__aeabi_dsub+0x5ea>
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <__aeabi_dsub+0x6f6>
 8001cd8:	2a00      	cmp	r2, #0
 8001cda:	d100      	bne.n	8001cde <__aeabi_dsub+0x6f6>
 8001cdc:	e6c4      	b.n	8001a68 <__aeabi_dsub+0x480>
 8001cde:	1c14      	adds	r4, r2, #0
 8001ce0:	4666      	mov	r6, ip
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	e50f      	b.n	8001708 <__aeabi_dsub+0x120>
 8001ce8:	2a20      	cmp	r2, #32
 8001cea:	d015      	beq.n	8001d18 <__aeabi_dsub+0x730>
 8001cec:	2740      	movs	r7, #64	; 0x40
 8001cee:	1ab9      	subs	r1, r7, r2
 8001cf0:	4646      	mov	r6, r8
 8001cf2:	408e      	lsls	r6, r1
 8001cf4:	1c33      	adds	r3, r6, #0
 8001cf6:	431c      	orrs	r4, r3
 8001cf8:	3a20      	subs	r2, #32
 8001cfa:	4641      	mov	r1, r8
 8001cfc:	1e63      	subs	r3, r4, #1
 8001cfe:	419c      	sbcs	r4, r3
 8001d00:	40d1      	lsrs	r1, r2
 8001d02:	430c      	orrs	r4, r1
 8001d04:	2300      	movs	r3, #0
 8001d06:	e72b      	b.n	8001b60 <__aeabi_dsub+0x578>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2400      	movs	r4, #0
 8001d0c:	e728      	b.n	8001b60 <__aeabi_dsub+0x578>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e7ab      	b.n	8001c6a <__aeabi_dsub+0x682>
 8001d12:	1c13      	adds	r3, r2, #0
 8001d14:	4666      	mov	r6, ip
 8001d16:	e783      	b.n	8001c20 <__aeabi_dsub+0x638>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e7ec      	b.n	8001cf6 <__aeabi_dsub+0x70e>
 8001d1c:	000007ff 	.word	0x000007ff
 8001d20:	ff7fffff 	.word	0xff7fffff

08001d24 <__aeabi_d2iz>:
 8001d24:	b570      	push	{r4, r5, r6, lr}
 8001d26:	004b      	lsls	r3, r1, #1
 8001d28:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <__aeabi_d2iz+0x50>)
 8001d2a:	1c05      	adds	r5, r0, #0
 8001d2c:	0d5b      	lsrs	r3, r3, #21
 8001d2e:	0308      	lsls	r0, r1, #12
 8001d30:	0b04      	lsrs	r4, r0, #12
 8001d32:	0fc9      	lsrs	r1, r1, #31
 8001d34:	4293      	cmp	r3, r2
 8001d36:	dd14      	ble.n	8001d62 <__aeabi_d2iz+0x3e>
 8001d38:	4a0f      	ldr	r2, [pc, #60]	; (8001d78 <__aeabi_d2iz+0x54>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	dc0e      	bgt.n	8001d5c <__aeabi_d2iz+0x38>
 8001d3e:	4e0f      	ldr	r6, [pc, #60]	; (8001d7c <__aeabi_d2iz+0x58>)
 8001d40:	2080      	movs	r0, #128	; 0x80
 8001d42:	0342      	lsls	r2, r0, #13
 8001d44:	1af6      	subs	r6, r6, r3
 8001d46:	4322      	orrs	r2, r4
 8001d48:	2e1f      	cmp	r6, #31
 8001d4a:	dd0c      	ble.n	8001d66 <__aeabi_d2iz+0x42>
 8001d4c:	480c      	ldr	r0, [pc, #48]	; (8001d80 <__aeabi_d2iz+0x5c>)
 8001d4e:	1ac6      	subs	r6, r0, r3
 8001d50:	40f2      	lsrs	r2, r6
 8001d52:	1c10      	adds	r0, r2, #0
 8001d54:	2900      	cmp	r1, #0
 8001d56:	d003      	beq.n	8001d60 <__aeabi_d2iz+0x3c>
 8001d58:	4240      	negs	r0, r0
 8001d5a:	e001      	b.n	8001d60 <__aeabi_d2iz+0x3c>
 8001d5c:	4c09      	ldr	r4, [pc, #36]	; (8001d84 <__aeabi_d2iz+0x60>)
 8001d5e:	1908      	adds	r0, r1, r4
 8001d60:	bd70      	pop	{r4, r5, r6, pc}
 8001d62:	2000      	movs	r0, #0
 8001d64:	e7fc      	b.n	8001d60 <__aeabi_d2iz+0x3c>
 8001d66:	4c08      	ldr	r4, [pc, #32]	; (8001d88 <__aeabi_d2iz+0x64>)
 8001d68:	1c28      	adds	r0, r5, #0
 8001d6a:	191d      	adds	r5, r3, r4
 8001d6c:	40f0      	lsrs	r0, r6
 8001d6e:	40aa      	lsls	r2, r5
 8001d70:	4310      	orrs	r0, r2
 8001d72:	e7ef      	b.n	8001d54 <__aeabi_d2iz+0x30>
 8001d74:	000003fe 	.word	0x000003fe
 8001d78:	0000041d 	.word	0x0000041d
 8001d7c:	00000433 	.word	0x00000433
 8001d80:	00000413 	.word	0x00000413
 8001d84:	7fffffff 	.word	0x7fffffff
 8001d88:	fffffbed 	.word	0xfffffbed

08001d8c <__aeabi_i2d>:
 8001d8c:	b570      	push	{r4, r5, r6, lr}
 8001d8e:	1c04      	adds	r4, r0, #0
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d02f      	beq.n	8001df4 <__aeabi_i2d+0x68>
 8001d94:	0fc5      	lsrs	r5, r0, #31
 8001d96:	2d00      	cmp	r5, #0
 8001d98:	d000      	beq.n	8001d9c <__aeabi_i2d+0x10>
 8001d9a:	4244      	negs	r4, r0
 8001d9c:	1c20      	adds	r0, r4, #0
 8001d9e:	f000 f83f 	bl	8001e20 <__clzsi2>
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <__aeabi_i2d+0x70>)
 8001da4:	4e16      	ldr	r6, [pc, #88]	; (8001e00 <__aeabi_i2d+0x74>)
 8001da6:	1a18      	subs	r0, r3, r0
 8001da8:	1a36      	subs	r6, r6, r0
 8001daa:	2e1f      	cmp	r6, #31
 8001dac:	dd17      	ble.n	8001dde <__aeabi_i2d+0x52>
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <__aeabi_i2d+0x78>)
 8001db0:	4e15      	ldr	r6, [pc, #84]	; (8001e08 <__aeabi_i2d+0x7c>)
 8001db2:	1a19      	subs	r1, r3, r0
 8001db4:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <__aeabi_i2d+0x80>)
 8001db6:	408c      	lsls	r4, r1
 8001db8:	4034      	ands	r4, r6
 8001dba:	4002      	ands	r2, r0
 8001dbc:	2600      	movs	r6, #0
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <__aeabi_i2d+0x84>)
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	400b      	ands	r3, r1
 8001dc6:	4323      	orrs	r3, r4
 8001dc8:	4c12      	ldr	r4, [pc, #72]	; (8001e14 <__aeabi_i2d+0x88>)
 8001dca:	1c30      	adds	r0, r6, #0
 8001dcc:	401c      	ands	r4, r3
 8001dce:	0516      	lsls	r6, r2, #20
 8001dd0:	4a11      	ldr	r2, [pc, #68]	; (8001e18 <__aeabi_i2d+0x8c>)
 8001dd2:	4334      	orrs	r4, r6
 8001dd4:	4014      	ands	r4, r2
 8001dd6:	07ed      	lsls	r5, r5, #31
 8001dd8:	1c21      	adds	r1, r4, #0
 8001dda:	4329      	orrs	r1, r5
 8001ddc:	bd70      	pop	{r4, r5, r6, pc}
 8001dde:	1c22      	adds	r2, r4, #0
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <__aeabi_i2d+0x90>)
 8001de2:	40b2      	lsls	r2, r6
 8001de4:	1c16      	adds	r6, r2, #0
 8001de6:	18c1      	adds	r1, r0, r3
 8001de8:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <__aeabi_i2d+0x7c>)
 8001dea:	40cc      	lsrs	r4, r1
 8001dec:	4014      	ands	r4, r2
 8001dee:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <__aeabi_i2d+0x80>)
 8001df0:	4002      	ands	r2, r0
 8001df2:	e7e4      	b.n	8001dbe <__aeabi_i2d+0x32>
 8001df4:	2500      	movs	r5, #0
 8001df6:	2200      	movs	r2, #0
 8001df8:	2600      	movs	r6, #0
 8001dfa:	e7e0      	b.n	8001dbe <__aeabi_i2d+0x32>
 8001dfc:	0000041e 	.word	0x0000041e
 8001e00:	00000433 	.word	0x00000433
 8001e04:	00000413 	.word	0x00000413
 8001e08:	000fffff 	.word	0x000fffff
 8001e0c:	000007ff 	.word	0x000007ff
 8001e10:	fff00000 	.word	0xfff00000
 8001e14:	800fffff 	.word	0x800fffff
 8001e18:	7fffffff 	.word	0x7fffffff
 8001e1c:	fffffbed 	.word	0xfffffbed

08001e20 <__clzsi2>:
 8001e20:	211c      	movs	r1, #28
 8001e22:	2301      	movs	r3, #1
 8001e24:	041b      	lsls	r3, r3, #16
 8001e26:	4298      	cmp	r0, r3
 8001e28:	d301      	bcc.n	8001e2e <__clzsi2+0xe>
 8001e2a:	0c00      	lsrs	r0, r0, #16
 8001e2c:	3910      	subs	r1, #16
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	4298      	cmp	r0, r3
 8001e32:	d301      	bcc.n	8001e38 <__clzsi2+0x18>
 8001e34:	0a00      	lsrs	r0, r0, #8
 8001e36:	3908      	subs	r1, #8
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	4298      	cmp	r0, r3
 8001e3c:	d301      	bcc.n	8001e42 <__clzsi2+0x22>
 8001e3e:	0900      	lsrs	r0, r0, #4
 8001e40:	3904      	subs	r1, #4
 8001e42:	a202      	add	r2, pc, #8	; (adr r2, 8001e4c <__clzsi2+0x2c>)
 8001e44:	5c10      	ldrb	r0, [r2, r0]
 8001e46:	1840      	adds	r0, r0, r1
 8001e48:	4770      	bx	lr
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	02020304 	.word	0x02020304
 8001e50:	01010101 	.word	0x01010101
	...

08001e5c <__aeabi_lmul>:
 8001e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5e:	465f      	mov	r7, fp
 8001e60:	4656      	mov	r6, sl
 8001e62:	464d      	mov	r5, r9
 8001e64:	4644      	mov	r4, r8
 8001e66:	b4f0      	push	{r4, r5, r6, r7}
 8001e68:	1c04      	adds	r4, r0, #0
 8001e6a:	4681      	mov	r9, r0
 8001e6c:	481d      	ldr	r0, [pc, #116]	; (8001ee4 <__aeabi_lmul+0x88>)
 8001e6e:	1c0d      	adds	r5, r1, #0
 8001e70:	1c21      	adds	r1, r4, #0
 8001e72:	1c16      	adds	r6, r2, #0
 8001e74:	4001      	ands	r1, r0
 8001e76:	0c22      	lsrs	r2, r4, #16
 8001e78:	4693      	mov	fp, r2
 8001e7a:	4030      	ands	r0, r6
 8001e7c:	1c0a      	adds	r2, r1, #0
 8001e7e:	4680      	mov	r8, r0
 8001e80:	4342      	muls	r2, r0
 8001e82:	0c34      	lsrs	r4, r6, #16
 8001e84:	1c08      	adds	r0, r1, #0
 8001e86:	4360      	muls	r0, r4
 8001e88:	4694      	mov	ip, r2
 8001e8a:	4682      	mov	sl, r0
 8001e8c:	465a      	mov	r2, fp
 8001e8e:	4640      	mov	r0, r8
 8001e90:	4342      	muls	r2, r0
 8001e92:	4690      	mov	r8, r2
 8001e94:	465a      	mov	r2, fp
 8001e96:	4362      	muls	r2, r4
 8001e98:	4660      	mov	r0, ip
 8001e9a:	44c2      	add	sl, r8
 8001e9c:	0c01      	lsrs	r1, r0, #16
 8001e9e:	4650      	mov	r0, sl
 8001ea0:	4693      	mov	fp, r2
 8001ea2:	180a      	adds	r2, r1, r0
 8001ea4:	1c1f      	adds	r7, r3, #0
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	1c33      	adds	r3, r6, #0
 8001eaa:	4590      	cmp	r8, r2
 8001eac:	d902      	bls.n	8001eb4 <__aeabi_lmul+0x58>
 8001eae:	2680      	movs	r6, #128	; 0x80
 8001eb0:	0270      	lsls	r0, r6, #9
 8001eb2:	4483      	add	fp, r0
 8001eb4:	4649      	mov	r1, r9
 8001eb6:	4379      	muls	r1, r7
 8001eb8:	0c10      	lsrs	r0, r2, #16
 8001eba:	436b      	muls	r3, r5
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	4666      	mov	r6, ip
 8001ec0:	0412      	lsls	r2, r2, #16
 8001ec2:	4692      	mov	sl, r2
 8001ec4:	44c3      	add	fp, r8
 8001ec6:	b2b0      	uxth	r0, r6
 8001ec8:	4450      	add	r0, sl
 8001eca:	465a      	mov	r2, fp
 8001ecc:	18cd      	adds	r5, r1, r3
 8001ece:	9000      	str	r0, [sp, #0]
 8001ed0:	9201      	str	r2, [sp, #4]
 8001ed2:	b003      	add	sp, #12
 8001ed4:	18a9      	adds	r1, r5, r2
 8001ed6:	bc3c      	pop	{r2, r3, r4, r5}
 8001ed8:	4690      	mov	r8, r2
 8001eda:	4699      	mov	r9, r3
 8001edc:	46a2      	mov	sl, r4
 8001ede:	46ab      	mov	fp, r5
 8001ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	0000ffff 	.word	0x0000ffff

08001ee8 <__aeabi_ui2d>:
 8001ee8:	b538      	push	{r3, r4, r5, lr}
 8001eea:	1c04      	adds	r4, r0, #0
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d028      	beq.n	8001f42 <__aeabi_ui2d+0x5a>
 8001ef0:	f7ff ff96 	bl	8001e20 <__clzsi2>
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <__aeabi_ui2d+0x60>)
 8001ef6:	4d15      	ldr	r5, [pc, #84]	; (8001f4c <__aeabi_ui2d+0x64>)
 8001ef8:	1a18      	subs	r0, r3, r0
 8001efa:	1a2d      	subs	r5, r5, r0
 8001efc:	2d1f      	cmp	r5, #31
 8001efe:	dd15      	ble.n	8001f2c <__aeabi_ui2d+0x44>
 8001f00:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <__aeabi_ui2d+0x68>)
 8001f02:	4d14      	ldr	r5, [pc, #80]	; (8001f54 <__aeabi_ui2d+0x6c>)
 8001f04:	1a19      	subs	r1, r3, r0
 8001f06:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <__aeabi_ui2d+0x70>)
 8001f08:	408c      	lsls	r4, r1
 8001f0a:	402c      	ands	r4, r5
 8001f0c:	4002      	ands	r2, r0
 8001f0e:	2500      	movs	r5, #0
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <__aeabi_ui2d+0x74>)
 8001f12:	2000      	movs	r0, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	400b      	ands	r3, r1
 8001f18:	1c28      	adds	r0, r5, #0
 8001f1a:	4d11      	ldr	r5, [pc, #68]	; (8001f60 <__aeabi_ui2d+0x78>)
 8001f1c:	4323      	orrs	r3, r4
 8001f1e:	0512      	lsls	r2, r2, #20
 8001f20:	401d      	ands	r5, r3
 8001f22:	4315      	orrs	r5, r2
 8001f24:	4c0f      	ldr	r4, [pc, #60]	; (8001f64 <__aeabi_ui2d+0x7c>)
 8001f26:	1c29      	adds	r1, r5, #0
 8001f28:	4021      	ands	r1, r4
 8001f2a:	bd38      	pop	{r3, r4, r5, pc}
 8001f2c:	1c22      	adds	r2, r4, #0
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <__aeabi_ui2d+0x80>)
 8001f30:	40aa      	lsls	r2, r5
 8001f32:	1c15      	adds	r5, r2, #0
 8001f34:	18c1      	adds	r1, r0, r3
 8001f36:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <__aeabi_ui2d+0x6c>)
 8001f38:	40cc      	lsrs	r4, r1
 8001f3a:	4014      	ands	r4, r2
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <__aeabi_ui2d+0x70>)
 8001f3e:	4002      	ands	r2, r0
 8001f40:	e7e6      	b.n	8001f10 <__aeabi_ui2d+0x28>
 8001f42:	2200      	movs	r2, #0
 8001f44:	2500      	movs	r5, #0
 8001f46:	e7e3      	b.n	8001f10 <__aeabi_ui2d+0x28>
 8001f48:	0000041e 	.word	0x0000041e
 8001f4c:	00000433 	.word	0x00000433
 8001f50:	00000413 	.word	0x00000413
 8001f54:	000fffff 	.word	0x000fffff
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	fff00000 	.word	0xfff00000
 8001f60:	800fffff 	.word	0x800fffff
 8001f64:	7fffffff 	.word	0x7fffffff
 8001f68:	fffffbed 	.word	0xfffffbed

08001f6c <Reset_Handler>:
 8001f6c:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <LoopForever+0x2>)
 8001f6e:	4685      	mov	sp, r0
 8001f70:	2100      	movs	r1, #0
 8001f72:	e003      	b.n	8001f7c <LoopCopyDataInit>

08001f74 <CopyDataInit>:
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <LoopForever+0x6>)
 8001f76:	585b      	ldr	r3, [r3, r1]
 8001f78:	5043      	str	r3, [r0, r1]
 8001f7a:	3104      	adds	r1, #4

08001f7c <LoopCopyDataInit>:
 8001f7c:	480b      	ldr	r0, [pc, #44]	; (8001fac <LoopForever+0xa>)
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <LoopForever+0xe>)
 8001f80:	1842      	adds	r2, r0, r1
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3f6      	bcc.n	8001f74 <CopyDataInit>
 8001f86:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <LoopForever+0x12>)
 8001f88:	e002      	b.n	8001f90 <LoopFillZerobss>

08001f8a <FillZerobss>:
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	3204      	adds	r2, #4

08001f90 <LoopFillZerobss>:
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <LoopForever+0x16>)
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d3f9      	bcc.n	8001f8a <FillZerobss>
 8001f96:	f000 fb39 	bl	800260c <SystemInit>
 8001f9a:	f004 fcc5 	bl	8006928 <__libc_init_array>
 8001f9e:	f000 fae9 	bl	8002574 <main>

08001fa2 <LoopForever>:
 8001fa2:	e7fe      	b.n	8001fa2 <LoopForever>
 8001fa4:	20002000 	.word	0x20002000
 8001fa8:	0800c3d0 	.word	0x0800c3d0
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000e8c 	.word	0x20000e8c
 8001fb4:	20000e8c 	.word	0x20000e8c
 8001fb8:	200018b8 	.word	0x200018b8

08001fbc <ADC1_COMP_IRQHandler>:
 8001fbc:	e7fe      	b.n	8001fbc <ADC1_COMP_IRQHandler>
	...

08001fc0 <Peripheral_Init>:
        } while (value != tmp);
    }
}

void
Peripheral_Init(void) {
 8001fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc2:	4a2d      	ldr	r2, [pc, #180]	; (8002078 <Peripheral_Init+0xb8>)
 8001fc4:	1c10      	adds	r0, r2, #0
 8001fc6:	1d13      	adds	r3, r2, #4
 8001fc8:	30e8      	adds	r0, #232	; 0xe8
    for (unsigned int i = 0; i < COUNT_OF(dri_tables); i++) {
        const device_register_init_descriptor_t *dri = &dri_tables[i];
        switch (dri->dri_type) {
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	2a01      	cmp	r2, #1
 8001fce:	d014      	beq.n	8001ffa <Peripheral_Init+0x3a>
 8001fd0:	2a00      	cmp	r2, #0
 8001fd2:	d004      	beq.n	8001fde <Peripheral_Init+0x1e>
 8001fd4:	2a02      	cmp	r2, #2
 8001fd6:	d01e      	beq.n	8002016 <Peripheral_Init+0x56>
 8001fd8:	2a03      	cmp	r2, #3
 8001fda:	d145      	bne.n	8002068 <Peripheral_Init+0xa8>
 8001fdc:	e030      	b.n	8002040 <Peripheral_Init+0x80>
        case DRI_STATIC_16BIT:
            Config_Static16(dri->dri_device, dri->u.dri_static_16bit, dri->dri_count);
 8001fde:	1f1a      	subs	r2, r3, #4

static inline void
Config_Static16(void *device, const device_register_init_static_16bit_t *values, const int count) {
    const device_register_init_static_16bit_t *p;

    for (p = values; p < values + count; p++) {
 8001fe0:	8859      	ldrh	r1, [r3, #2]
Peripheral_Init(void) {
    for (unsigned int i = 0; i < COUNT_OF(dri_tables); i++) {
        const device_register_init_descriptor_t *dri = &dri_tables[i];
        switch (dri->dri_type) {
        case DRI_STATIC_16BIT:
            Config_Static16(dri->dri_device, dri->u.dri_static_16bit, dri->dri_count);
 8001fe2:	6814      	ldr	r4, [r2, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]

static inline void
Config_Static16(void *device, const device_register_init_static_16bit_t *values, const int count) {
    const device_register_init_static_16bit_t *p;

    for (p = values; p < values + count; p++) {
 8001fe6:	0089      	lsls	r1, r1, #2
 8001fe8:	1851      	adds	r1, r2, r1
 8001fea:	e003      	b.n	8001ff4 <Peripheral_Init+0x34>
        *((uint32_t *)(((char *)device) + p->offset)) = p->value;
 8001fec:	8815      	ldrh	r5, [r2, #0]
 8001fee:	8856      	ldrh	r6, [r2, #2]

static inline void
Config_Static16(void *device, const device_register_init_static_16bit_t *values, const int count) {
    const device_register_init_static_16bit_t *p;

    for (p = values; p < values + count; p++) {
 8001ff0:	3204      	adds	r2, #4
        *((uint32_t *)(((char *)device) + p->offset)) = p->value;
 8001ff2:	5166      	str	r6, [r4, r5]

static inline void
Config_Static16(void *device, const device_register_init_static_16bit_t *values, const int count) {
    const device_register_init_static_16bit_t *p;

    for (p = values; p < values + count; p++) {
 8001ff4:	428a      	cmp	r2, r1
 8001ff6:	d3f9      	bcc.n	8001fec <Peripheral_Init+0x2c>
 8001ff8:	e038      	b.n	800206c <Peripheral_Init+0xac>
        switch (dri->dri_type) {
        case DRI_STATIC_16BIT:
            Config_Static16(dri->dri_device, dri->u.dri_static_16bit, dri->dri_count);
            break;
        case DRI_STATIC_32BIT:
            Config_Static32(dri->dri_device, dri->u.dri_static_32bit, dri->dri_count);
 8001ffa:	1f1a      	subs	r2, r3, #4

static inline void
Config_Static32(void *device, const device_register_init_static_32bit_t *values, const int count) {
    const device_register_init_static_32bit_t *p;

    for (p = values; p < values + count; p++) {
 8001ffc:	8859      	ldrh	r1, [r3, #2]
        switch (dri->dri_type) {
        case DRI_STATIC_16BIT:
            Config_Static16(dri->dri_device, dri->u.dri_static_16bit, dri->dri_count);
            break;
        case DRI_STATIC_32BIT:
            Config_Static32(dri->dri_device, dri->u.dri_static_32bit, dri->dri_count);
 8001ffe:	6814      	ldr	r4, [r2, #0]
 8002000:	685a      	ldr	r2, [r3, #4]

static inline void
Config_Static32(void *device, const device_register_init_static_32bit_t *values, const int count) {
    const device_register_init_static_32bit_t *p;

    for (p = values; p < values + count; p++) {
 8002002:	00c9      	lsls	r1, r1, #3
 8002004:	1851      	adds	r1, r2, r1
 8002006:	e003      	b.n	8002010 <Peripheral_Init+0x50>
        *((uint32_t *)(((char *)device) + p->offset)) = p->value;
 8002008:	6815      	ldr	r5, [r2, #0]
 800200a:	6856      	ldr	r6, [r2, #4]

static inline void
Config_Static32(void *device, const device_register_init_static_32bit_t *values, const int count) {
    const device_register_init_static_32bit_t *p;

    for (p = values; p < values + count; p++) {
 800200c:	3208      	adds	r2, #8
        *((uint32_t *)(((char *)device) + p->offset)) = p->value;
 800200e:	5166      	str	r6, [r4, r5]

static inline void
Config_Static32(void *device, const device_register_init_static_32bit_t *values, const int count) {
    const device_register_init_static_32bit_t *p;

    for (p = values; p < values + count; p++) {
 8002010:	428a      	cmp	r2, r1
 8002012:	d3f9      	bcc.n	8002008 <Peripheral_Init+0x48>
 8002014:	e02a      	b.n	800206c <Peripheral_Init+0xac>

static inline void
Config_Masked32(void *device, const device_register_init_masked_32bit_t *values, const int count) {
    const device_register_init_masked_32bit_t *p;

    for (p = values; p < values + count; p++) {
 8002016:	8859      	ldrh	r1, [r3, #2]
            break;
        case DRI_STATIC_32BIT:
            Config_Static32(dri->dri_device, dri->u.dri_static_32bit, dri->dri_count);
            break;
        case DRI_MASKED_32BIT:
            Config_Masked32(dri->dri_device, dri->u.dri_masked_32bit, dri->dri_count);
 8002018:	1f1a      	subs	r2, r3, #4

static inline void
Config_Masked32(void *device, const device_register_init_masked_32bit_t *values, const int count) {
    const device_register_init_masked_32bit_t *p;

    for (p = values; p < values + count; p++) {
 800201a:	004c      	lsls	r4, r1, #1
            break;
        case DRI_STATIC_32BIT:
            Config_Static32(dri->dri_device, dri->u.dri_static_32bit, dri->dri_count);
            break;
        case DRI_MASKED_32BIT:
            Config_Masked32(dri->dri_device, dri->u.dri_masked_32bit, dri->dri_count);
 800201c:	6815      	ldr	r5, [r2, #0]

static inline void
Config_Masked32(void *device, const device_register_init_masked_32bit_t *values, const int count) {
    const device_register_init_masked_32bit_t *p;

    for (p = values; p < values + count; p++) {
 800201e:	1861      	adds	r1, r4, r1
            break;
        case DRI_STATIC_32BIT:
            Config_Static32(dri->dri_device, dri->u.dri_static_32bit, dri->dri_count);
            break;
        case DRI_MASKED_32BIT:
            Config_Masked32(dri->dri_device, dri->u.dri_masked_32bit, dri->dri_count);
 8002020:	685a      	ldr	r2, [r3, #4]

static inline void
Config_Masked32(void *device, const device_register_init_masked_32bit_t *values, const int count) {
    const device_register_init_masked_32bit_t *p;

    for (p = values; p < values + count; p++) {
 8002022:	0089      	lsls	r1, r1, #2
 8002024:	1851      	adds	r1, r2, r1
 8002026:	e008      	b.n	800203a <Peripheral_Init+0x7a>
        register uint32_t *const reg               /* Pointer to the device register */
            = (uint32_t *)(((char *)device) + p->offset);
 8002028:	8814      	ldrh	r4, [r2, #0]
        // XXX: assert that no bits in p->value are outside of p->mask

        register uint32_t tmp;

        tmp  = *reg;
        tmp &= ~p->mask;
 800202a:	6857      	ldr	r7, [r2, #4]
Config_Masked32(void *device, const device_register_init_masked_32bit_t *values, const int count) {
    const device_register_init_masked_32bit_t *p;

    for (p = values; p < values + count; p++) {
        register uint32_t *const reg               /* Pointer to the device register */
            = (uint32_t *)(((char *)device) + p->offset);
 800202c:	192c      	adds	r4, r5, r4

        // XXX: assert that no bits in p->value are outside of p->mask

        register uint32_t tmp;

        tmp  = *reg;
 800202e:	6826      	ldr	r6, [r4, #0]
        tmp &= ~p->mask;
 8002030:	43be      	bics	r6, r7
        tmp |=  p->value;
        *reg = tmp;
 8002032:	6897      	ldr	r7, [r2, #8]

static inline void
Config_Masked32(void *device, const device_register_init_masked_32bit_t *values, const int count) {
    const device_register_init_masked_32bit_t *p;

    for (p = values; p < values + count; p++) {
 8002034:	320c      	adds	r2, #12
        register uint32_t tmp;

        tmp  = *reg;
        tmp &= ~p->mask;
        tmp |=  p->value;
        *reg = tmp;
 8002036:	433e      	orrs	r6, r7
 8002038:	6026      	str	r6, [r4, #0]

static inline void
Config_Masked32(void *device, const device_register_init_masked_32bit_t *values, const int count) {
    const device_register_init_masked_32bit_t *p;

    for (p = values; p < values + count; p++) {
 800203a:	428a      	cmp	r2, r1
 800203c:	d3f4      	bcc.n	8002028 <Peripheral_Init+0x68>
 800203e:	e015      	b.n	800206c <Peripheral_Init+0xac>
 */
static inline void
Config_Waited32(void *device, const device_register_init_masked_32bit_t *values, const int count) {
    const device_register_init_masked_32bit_t *p;

    for (p = values; p < values + count; p++) {
 8002040:	8859      	ldrh	r1, [r3, #2]
            break;
        case DRI_MASKED_32BIT:
            Config_Masked32(dri->dri_device, dri->u.dri_masked_32bit, dri->dri_count);
            break;
        case DRI_WAITED_32BIT:
            Config_Waited32(dri->dri_device, dri->u.dri_masked_32bit, dri->dri_count);
 8002042:	1f1a      	subs	r2, r3, #4
 */
static inline void
Config_Waited32(void *device, const device_register_init_masked_32bit_t *values, const int count) {
    const device_register_init_masked_32bit_t *p;

    for (p = values; p < values + count; p++) {
 8002044:	004c      	lsls	r4, r1, #1
            break;
        case DRI_MASKED_32BIT:
            Config_Masked32(dri->dri_device, dri->u.dri_masked_32bit, dri->dri_count);
            break;
        case DRI_WAITED_32BIT:
            Config_Waited32(dri->dri_device, dri->u.dri_masked_32bit, dri->dri_count);
 8002046:	6815      	ldr	r5, [r2, #0]
 */
static inline void
Config_Waited32(void *device, const device_register_init_masked_32bit_t *values, const int count) {
    const device_register_init_masked_32bit_t *p;

    for (p = values; p < values + count; p++) {
 8002048:	1861      	adds	r1, r4, r1
            break;
        case DRI_MASKED_32BIT:
            Config_Masked32(dri->dri_device, dri->u.dri_masked_32bit, dri->dri_count);
            break;
        case DRI_WAITED_32BIT:
            Config_Waited32(dri->dri_device, dri->u.dri_masked_32bit, dri->dri_count);
 800204a:	685a      	ldr	r2, [r3, #4]
 */
static inline void
Config_Waited32(void *device, const device_register_init_masked_32bit_t *values, const int count) {
    const device_register_init_masked_32bit_t *p;

    for (p = values; p < values + count; p++) {
 800204c:	0089      	lsls	r1, r1, #2
 800204e:	1851      	adds	r1, r2, r1
 8002050:	e007      	b.n	8002062 <Peripheral_Init+0xa2>
            = (uint32_t *)(((char *)device) + p->offset);

        register uint32_t tmp;

        do {
            tmp  = *reg;
 8002052:	8814      	ldrh	r4, [r2, #0]
            tmp &= ~p->mask;
        } while (value != tmp);
 8002054:	6856      	ldr	r6, [r2, #4]
            = (uint32_t *)(((char *)device) + p->offset);

        register uint32_t tmp;

        do {
            tmp  = *reg;
 8002056:	592c      	ldr	r4, [r5, r4]
            tmp &= ~p->mask;
        } while (value != tmp);
 8002058:	43b4      	bics	r4, r6
 800205a:	6896      	ldr	r6, [r2, #8]
 800205c:	42a6      	cmp	r6, r4
 800205e:	d109      	bne.n	8002074 <Peripheral_Init+0xb4>
 */
static inline void
Config_Waited32(void *device, const device_register_init_masked_32bit_t *values, const int count) {
    const device_register_init_masked_32bit_t *p;

    for (p = values; p < values + count; p++) {
 8002060:	320c      	adds	r2, #12
 8002062:	428a      	cmp	r2, r1
 8002064:	d3f5      	bcc.n	8002052 <Peripheral_Init+0x92>
 8002066:	e001      	b.n	800206c <Peripheral_Init+0xac>
            break;
        case DRI_WAITED_32BIT:
            Config_Waited32(dri->dri_device, dri->u.dri_masked_32bit, dri->dri_count);
            break;
        default:
            abort();
 8002068:	f004 fc50 	bl	800690c <abort>
 800206c:	330c      	adds	r3, #12
    }
}

void
Peripheral_Init(void) {
    for (unsigned int i = 0; i < COUNT_OF(dri_tables); i++) {
 800206e:	4283      	cmp	r3, r0
 8002070:	d1ab      	bne.n	8001fca <Peripheral_Init+0xa>
 8002072:	e000      	b.n	8002076 <Peripheral_Init+0xb6>
 8002074:	e7fe      	b.n	8002074 <Peripheral_Init+0xb4>
        default:
            abort();
            break;
        }
    }
}
 8002076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002078:	0800ab00 	.word	0x0800ab00

0800207c <RCC_GetHCLKFreq>:
 */

extern __I uint8_t APBAHBPrescTable[16];

uint32_t
RCC_GetHCLKFreq(void) {
 800207c:	b500      	push	{lr}
 800207e:	b083      	sub	sp, #12
    /* Make sure we are running from PLL from HSI */
    assert((RCC->CFGR & RCC_CFGR_SWS)    == RCC_CFGR_SWS_PLL);
 8002080:	e00d      	b.n	800209e <RCC_GetHCLKFreq+0x22>
 8002082:	4a1a      	ldr	r2, [pc, #104]	; (80020ec <RCC_GetHCLKFreq+0x70>)
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	8a91      	ldrh	r1, [r2, #20]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	404b      	eors	r3, r1
 800208c:	8293      	strh	r3, [r2, #20]
 800208e:	2300      	movs	r3, #0
 8002090:	e001      	b.n	8002096 <RCC_GetHCLKFreq+0x1a>
 8002092:	9b01      	ldr	r3, [sp, #4]
 8002094:	3301      	adds	r3, #1
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	9b01      	ldr	r3, [sp, #4]
 800209a:	2b63      	cmp	r3, #99	; 0x63
 800209c:	ddf9      	ble.n	8002092 <RCC_GetHCLKFreq+0x16>
 800209e:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <RCC_GetHCLKFreq+0x74>)
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	230c      	movs	r3, #12
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d1eb      	bne.n	8002082 <RCC_GetHCLKFreq+0x6>
 80020aa:	e00d      	b.n	80020c8 <RCC_GetHCLKFreq+0x4c>
    assert((RCC->CFGR & RCC_CFGR_PLLSRC) == RCC_CFGR_PLLSRC_HSI_Div2);
 80020ac:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <RCC_GetHCLKFreq+0x70>)
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	8a91      	ldrh	r1, [r2, #20]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	404b      	eors	r3, r1
 80020b6:	8293      	strh	r3, [r2, #20]
 80020b8:	2300      	movs	r3, #0
 80020ba:	e001      	b.n	80020c0 <RCC_GetHCLKFreq+0x44>
 80020bc:	9b01      	ldr	r3, [sp, #4]
 80020be:	3301      	adds	r3, #1
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	9b01      	ldr	r3, [sp, #4]
 80020c4:	2b63      	cmp	r3, #99	; 0x63
 80020c6:	ddf9      	ble.n	80020bc <RCC_GetHCLKFreq+0x40>
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <RCC_GetHCLKFreq+0x74>)
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	03d1      	lsls	r1, r2, #15
 80020ce:	d4ed      	bmi.n	80020ac <RCC_GetHCLKFreq+0x30>

    /* Get PLL clock multiplication factor ----------------------*/
    const uint32_t pllmull   = ((RCC->CFGR & RCC_CFGR_PLLMULL) >> 18) + 2;
 80020d0:	685b      	ldr	r3, [r3, #4]
    /* HSI oscillator clock divided by 2 as PLL clock entry */
    const uint32_t sysclk = (HSI_VALUE >> 1) * pllmull;

    /* HCLK clock frequency */
    return sysclk;
}
 80020d2:	b003      	add	sp, #12
    /* Make sure we are running from PLL from HSI */
    assert((RCC->CFGR & RCC_CFGR_SWS)    == RCC_CFGR_SWS_PLL);
    assert((RCC->CFGR & RCC_CFGR_PLLSRC) == RCC_CFGR_PLLSRC_HSI_Div2);

    /* Get PLL clock multiplication factor ----------------------*/
    const uint32_t pllmull   = ((RCC->CFGR & RCC_CFGR_PLLMULL) >> 18) + 2;
 80020d4:	029b      	lsls	r3, r3, #10
 80020d6:	0f1b      	lsrs	r3, r3, #28
 80020d8:	3302      	adds	r3, #2
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	1ad2      	subs	r2, r2, r3
 80020de:	0190      	lsls	r0, r2, #6
 80020e0:	1a82      	subs	r2, r0, r2
 80020e2:	00d2      	lsls	r2, r2, #3
 80020e4:	18d3      	adds	r3, r2, r3
 80020e6:	0218      	lsls	r0, r3, #8
    /* HSI oscillator clock divided by 2 as PLL clock entry */
    const uint32_t sysclk = (HSI_VALUE >> 1) * pllmull;

    /* HCLK clock frequency */
    return sysclk;
}
 80020e8:	bd00      	pop	{pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	48000800 	.word	0x48000800
 80020f0:	40021000 	.word	0x40021000

080020f4 <USART2_IRQHandler>:

void serialEvent1() __attribute__((weak));
void serialEvent1() { }

void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80020f4:	b508      	push	{r3, lr}
    Serial1.irqHandler();
 80020f6:	4802      	ldr	r0, [pc, #8]	; (8002100 <USART2_IRQHandler+0xc>)
 80020f8:	f000 f9aa 	bl	8002450 <_ZNK14HardwareSerial10irqHandlerEv>
}
 80020fc:	bd08      	pop	{r3, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	0800acf4 	.word	0x0800acf4

08002104 <USART1_IRQHandler>:

void serialEvent() __attribute__((weak));
void serialEvent() { }

void USART1_IRQHandler(void);
void USART1_IRQHandler(void) {
 8002104:	b508      	push	{r3, lr}
    Serial.irqHandler();
 8002106:	4802      	ldr	r0, [pc, #8]	; (8002110 <USART1_IRQHandler+0xc>)
 8002108:	f000 f9a2 	bl	8002450 <_ZNK14HardwareSerial10irqHandlerEv>
}
 800210c:	bd08      	pop	{r3, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	0800acc4 	.word	0x0800acc4

08002114 <SysTick_Handler>:
extern "C" { volatile uint32_t millisecondCount; }

extern int sysTickHook(void);
void SysTick_Handler(void);
void SysTick_Handler(void)
{
 8002114:	b508      	push	{r3, lr}
    // Increment the millisecond count first.
    // Incrementing first avoids race conditions
    millisecondCount++;
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <SysTick_Handler+0x30>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	3201      	adds	r2, #1
 800211c:	601a      	str	r2, [r3, #0]

#if DEBUG
    GPIOC->ODR ^= GPIO_ODR_8;
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <SysTick_Handler+0x34>)
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	8a91      	ldrh	r1, [r2, #20]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	404b      	eors	r3, r1
 8002128:	8293      	strh	r3, [r2, #20]
#endif

    if (etimer_pending()) {
 800212a:	f001 fff5 	bl	8004118 <etimer_pending>
 800212e:	2800      	cmp	r0, #0
 8002130:	d001      	beq.n	8002136 <SysTick_Handler+0x22>
        etimer_request_poll();
 8002132:	f002 f815 	bl	8004160 <etimer_request_poll>
    }

    // TimingDelay_Decrement();

    if (sysTickHook())
 8002136:	f000 f993 	bl	8002460 <sysTickHook>
 800213a:	2800      	cmp	r0, #0
 800213c:	d101      	bne.n	8002142 <SysTick_Handler+0x2e>
        return;

    tickReset();
 800213e:	f000 fa0f 	bl	8002560 <tickReset>
}
 8002142:	bd08      	pop	{r3, pc}
 8002144:	20000ed4 	.word	0x20000ed4
 8002148:	48000800 	.word	0x48000800

0800214c <init>:

/*
 * Usually called from main.cpp in cores/arduino
 */

void init(void) {
 800214c:	b530      	push	{r4, r5, lr}
#if DEBUG
    /* Start GPIO C early, and make 6 (DEBUG0) and 7 (DEBUG1) outputs */
    RCC->AHBENR  |= RCC_AHBENR_GPIOCEN;
 800214e:	4a25      	ldr	r2, [pc, #148]	; (80021e4 <init+0x98>)
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	6951      	ldr	r1, [r2, #20]
 8002154:	031b      	lsls	r3, r3, #12
    GPIOC->MODER |= GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0;
 8002156:	4c24      	ldr	r4, [pc, #144]	; (80021e8 <init+0x9c>)
 */

void init(void) {
#if DEBUG
    /* Start GPIO C early, and make 6 (DEBUG0) and 7 (DEBUG1) outputs */
    RCC->AHBENR  |= RCC_AHBENR_GPIOCEN;
 8002158:	430b      	orrs	r3, r1
 800215a:	6153      	str	r3, [r2, #20]
    GPIOC->MODER |= GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0;
 800215c:	6822      	ldr	r2, [r4, #0]
 800215e:	23a0      	movs	r3, #160	; 0xa0
 8002160:	01db      	lsls	r3, r3, #7
 8002162:	4313      	orrs	r3, r2
 8002164:	6023      	str	r3, [r4, #0]
      before main() gets called, and there is no need to call them again from here.
    */

    /* SysTick end of count event each 1ms */
    //SysTick_Config(SystemCoreClock / 1000); /* CMSIS */
    DEBUG_SET_LED0(0);
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	03db      	lsls	r3, r3, #15
void init(void) {
#if DEBUG
    /* Start GPIO C early, and make 6 (DEBUG0) and 7 (DEBUG1) outputs */
    RCC->AHBENR  |= RCC_AHBENR_GPIOCEN;
    GPIOC->MODER |= GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0;
    DEBUG_SET_LED0(1);
 800216a:	2540      	movs	r5, #64	; 0x40

/*
 * Usually called from main.cpp in cores/arduino
 */

void init(void) {
 800216c:	b083      	sub	sp, #12
#if DEBUG
    /* Start GPIO C early, and make 6 (DEBUG0) and 7 (DEBUG1) outputs */
    RCC->AHBENR  |= RCC_AHBENR_GPIOCEN;
    GPIOC->MODER |= GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0;
    DEBUG_SET_LED0(1);
 800216e:	61a5      	str	r5, [r4, #24]
      before main() gets called, and there is no need to call them again from here.
    */

    /* SysTick end of count event each 1ms */
    //SysTick_Config(SystemCoreClock / 1000); /* CMSIS */
    DEBUG_SET_LED0(0);
 8002170:	61a3      	str	r3, [r4, #24]
    SysTick_Config(RCC_GetHCLKFreq() / 1000); /* CMSIS */
 8002172:	f7ff ff83 	bl	800207c <RCC_GetHCLKFreq>
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002176:	21fa      	movs	r1, #250	; 0xfa
 8002178:	0089      	lsls	r1, r1, #2
 800217a:	f7fd ffbb 	bl	80000f4 <__aeabi_uidiv>
 800217e:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <init+0xa0>)
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <init+0xa4>)
 8002182:	4010      	ands	r0, r2
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8002184:	491b      	ldr	r1, [pc, #108]	; (80021f4 <init+0xa8>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002186:	3801      	subs	r0, #1
 8002188:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800218a:	6a08      	ldr	r0, [r1, #32]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 800218c:	4010      	ands	r0, r2
 800218e:	22c0      	movs	r2, #192	; 0xc0
 8002190:	0612      	lsls	r2, r2, #24
 8002192:	4302      	orrs	r2, r0
 8002194:	620a      	str	r2, [r1, #32]
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 800219a:	2207      	movs	r2, #7
 800219c:	601a      	str	r2, [r3, #0]

    DEBUG_SET_LED0(1);
 800219e:	61a5      	str	r5, [r4, #24]
    Peripheral_Init();
 80021a0:	f7ff ff0e 	bl	8001fc0 <Peripheral_Init>

    assert((SysTick->CTRL & SysTick_CTRL_ENABLE_Msk) == SysTick_CTRL_ENABLE_Msk);
 80021a4:	e00d      	b.n	80021c2 <init+0x76>
 80021a6:	4910      	ldr	r1, [pc, #64]	; (80021e8 <init+0x9c>)
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	8a88      	ldrh	r0, [r1, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4043      	eors	r3, r0
 80021b0:	828b      	strh	r3, [r1, #20]
 80021b2:	9201      	str	r2, [sp, #4]
 80021b4:	e002      	b.n	80021bc <init+0x70>
 80021b6:	9b01      	ldr	r3, [sp, #4]
 80021b8:	3301      	adds	r3, #1
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	9b01      	ldr	r3, [sp, #4]
 80021be:	2b63      	cmp	r3, #99	; 0x63
 80021c0:	ddf9      	ble.n	80021b6 <init+0x6a>
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <init+0xa4>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	2301      	movs	r3, #1
 80021c8:	401a      	ands	r2, r3
 80021ca:	d0ec      	beq.n	80021a6 <init+0x5a>

    DEBUG_SET_LED0(0);
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <init+0x9c>)
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	03d2      	lsls	r2, r2, #15
 80021d2:	619a      	str	r2, [r3, #24]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80021d4:	b662      	cpsie	i
    __enable_irq();

    GPIOC->BSRR |= GPIO_BSRR_BS_11; // XXX Abstract into a function/macro
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	6999      	ldr	r1, [r3, #24]
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	430a      	orrs	r2, r1
}
 80021de:	b003      	add	sp, #12
    assert((SysTick->CTRL & SysTick_CTRL_ENABLE_Msk) == SysTick_CTRL_ENABLE_Msk);

    DEBUG_SET_LED0(0);
    __enable_irq();

    GPIOC->BSRR |= GPIO_BSRR_BS_11; // XXX Abstract into a function/macro
 80021e0:	619a      	str	r2, [r3, #24]
}
 80021e2:	bd30      	pop	{r4, r5, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	48000800 	.word	0x48000800
 80021ec:	00ffffff 	.word	0x00ffffff
 80021f0:	e000e010 	.word	0xe000e010
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <_GLOBAL__I_RCC_GetHCLKFreq>:
    int prevIndex(int index) const {
        return (RINGBUFFER_SIZE + index - 1) % RINGBUFFER_SIZE;
    }

public:
    /* XXX constexpr */ RingBuffer() : head(0), tail(0) {}
 80021f8:	4a06      	ldr	r2, [pc, #24]	; (8002214 <_GLOBAL__I_RCC_GetHCLKFreq+0x1c>)
 80021fa:	2300      	movs	r3, #0
 80021fc:	1c11      	adds	r1, r2, #0
 80021fe:	3241      	adds	r2, #65	; 0x41
 8002200:	7013      	strb	r3, [r2, #0]
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
    Serial1.irqHandler();
}

} // extern "C"
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <_GLOBAL__I_RCC_GetHCLKFreq+0x20>)
 8002204:	3140      	adds	r1, #64	; 0x40
 8002206:	700b      	strb	r3, [r1, #0]
 8002208:	1c11      	adds	r1, r2, #0
 800220a:	3140      	adds	r1, #64	; 0x40
 800220c:	3241      	adds	r2, #65	; 0x41
 800220e:	700b      	strb	r3, [r1, #0]
 8002210:	7013      	strb	r3, [r2, #0]
 8002212:	4770      	bx	lr
 8002214:	20000e90 	.word	0x20000e90
 8002218:	20000ed8 	.word	0x20000ed8

0800221c <net_loop>:
    process_start(&rest_server_example, NULL);
#endif
#endif
}

void net_loop() {
 800221c:	b570      	push	{r4, r5, r6, lr}
    static clock_time_t prevTime;

    if (prevTime == 0)
 800221e:	4b40      	ldr	r3, [pc, #256]	; (8002320 <net_loop+0x104>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	2a00      	cmp	r2, #0
 8002224:	d102      	bne.n	800222c <net_loop+0x10>
        prevTime = millisecondCount;
 8002226:	4a3f      	ldr	r2, [pc, #252]	; (8002324 <net_loop+0x108>)
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	601a      	str	r2, [r3, #0]

    /*
     * Process Ethernet packets
     */
#define BUF ((struct uip_eth_hdr *)&uip_buf[0])
    DEBUG_SET_LED3(1);
 800222c:	4c3e      	ldr	r4, [pc, #248]	; (8002328 <net_loop+0x10c>)
    DEBUG_SET_LED1(1);
    uip_len = enc_packet_receive(uip_buf, sizeof(uip_buf));
 800222e:	4d3f      	ldr	r5, [pc, #252]	; (800232c <net_loop+0x110>)

    /*
     * Process Ethernet packets
     */
#define BUF ((struct uip_eth_hdr *)&uip_buf[0])
    DEBUG_SET_LED3(1);
 8002230:	2180      	movs	r1, #128	; 0x80
    DEBUG_SET_LED1(1);
 8002232:	2380      	movs	r3, #128	; 0x80

    /*
     * Process Ethernet packets
     */
#define BUF ((struct uip_eth_hdr *)&uip_buf[0])
    DEBUG_SET_LED3(1);
 8002234:	0089      	lsls	r1, r1, #2
 8002236:	61a1      	str	r1, [r4, #24]
    DEBUG_SET_LED1(1);
    uip_len = enc_packet_receive(uip_buf, sizeof(uip_buf));
 8002238:	1c28      	adds	r0, r5, #0
    /*
     * Process Ethernet packets
     */
#define BUF ((struct uip_eth_hdr *)&uip_buf[0])
    DEBUG_SET_LED3(1);
    DEBUG_SET_LED1(1);
 800223a:	61a3      	str	r3, [r4, #24]
    uip_len = enc_packet_receive(uip_buf, sizeof(uip_buf));
 800223c:	f000 fc90 	bl	8002b60 <enc_packet_receive>
 8002240:	4e3b      	ldr	r6, [pc, #236]	; (8002330 <net_loop+0x114>)
    DEBUG_SET_LED1(0);
 8002242:	2380      	movs	r3, #128	; 0x80
     * Process Ethernet packets
     */
#define BUF ((struct uip_eth_hdr *)&uip_buf[0])
    DEBUG_SET_LED3(1);
    DEBUG_SET_LED1(1);
    uip_len = enc_packet_receive(uip_buf, sizeof(uip_buf));
 8002244:	b280      	uxth	r0, r0
    DEBUG_SET_LED1(0);
 8002246:	041b      	lsls	r3, r3, #16
     * Process Ethernet packets
     */
#define BUF ((struct uip_eth_hdr *)&uip_buf[0])
    DEBUG_SET_LED3(1);
    DEBUG_SET_LED1(1);
    uip_len = enc_packet_receive(uip_buf, sizeof(uip_buf));
 8002248:	8030      	strh	r0, [r6, #0]
    DEBUG_SET_LED1(0);
 800224a:	61a3      	str	r3, [r4, #24]
    if (uip_len > 0) {
 800224c:	2800      	cmp	r0, #0
 800224e:	d02d      	beq.n	80022ac <net_loop+0x90>
        if (BUF->type == UIP_HTONS(UIP_ETHTYPE_IP)) {
 8002250:	89aa      	ldrh	r2, [r5, #12]
 8002252:	2a08      	cmp	r2, #8
 8002254:	d110      	bne.n	8002278 <net_loop+0x5c>
            uip_arp_ipin();
            DEBUG_SET_LED4(1);
 8002256:	2490      	movs	r4, #144	; 0x90
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	05e4      	lsls	r4, r4, #23
 800225e:	61a3      	str	r3, [r4, #24]
            uip_input();
 8002260:	2001      	movs	r0, #1
 8002262:	f000 fee5 	bl	8003030 <uip_process>
            DEBUG_SET_LED4(0);
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	045b      	lsls	r3, r3, #17
 800226a:	61a3      	str	r3, [r4, #24]
            if (uip_len > 0) {
 800226c:	8833      	ldrh	r3, [r6, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <net_loop+0x68>
                uip_arp_out();
 8002272:	f001 fcb1 	bl	8003bd8 <uip_arp_out>
 8002276:	e005      	b.n	8002284 <net_loop+0x68>
            }
        } else if (BUF->type == UIP_HTONS(UIP_ETHTYPE_ARP)) {
 8002278:	23c1      	movs	r3, #193	; 0xc1
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	429a      	cmp	r2, r3
 800227e:	d101      	bne.n	8002284 <net_loop+0x68>
            uip_arp_arpin();
 8002280:	f001 fdd8 	bl	8003e34 <uip_arp_arpin>
        }
        if (uip_len > 0) {
 8002284:	4d2a      	ldr	r5, [pc, #168]	; (8002330 <net_loop+0x114>)
 8002286:	8829      	ldrh	r1, [r5, #0]
 8002288:	2900      	cmp	r1, #0
 800228a:	d00f      	beq.n	80022ac <net_loop+0x90>
            DEBUG_SET_LED5(1);
 800228c:	2490      	movs	r4, #144	; 0x90
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	05e4      	lsls	r4, r4, #23
 8002294:	61a3      	str	r3, [r4, #24]
            printf("ETH1: Sending %d bytes\n", uip_len);
 8002296:	4827      	ldr	r0, [pc, #156]	; (8002334 <net_loop+0x118>)
 8002298:	f004 fb68 	bl	800696c <iprintf>
            enc_packet_send(uip_buf, uip_len);
 800229c:	2300      	movs	r3, #0
 800229e:	5ee9      	ldrsh	r1, [r5, r3]
 80022a0:	4822      	ldr	r0, [pc, #136]	; (800232c <net_loop+0x110>)
 80022a2:	f000 fc15 	bl	8002ad0 <enc_packet_send>
            DEBUG_SET_LED5(0);
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	049b      	lsls	r3, r3, #18
 80022aa:	61a3      	str	r3, [r4, #24]
        }
    }
    DEBUG_SET_LED3(0);
 80022ac:	4a1e      	ldr	r2, [pc, #120]	; (8002328 <net_loop+0x10c>)
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	049b      	lsls	r3, r3, #18
 80022b2:	6193      	str	r3, [r2, #24]
    while (process_run() > 0)
        ;
    DEBUG_SET_LED2(0);

#endif
    if (millisecondCount > prevTime + 50 || millisecondCount < prevTime) {
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <net_loop+0x104>)
 80022b6:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <net_loop+0x108>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6810      	ldr	r0, [r2, #0]
 80022bc:	1c19      	adds	r1, r3, #0
 80022be:	3132      	adds	r1, #50	; 0x32
 80022c0:	4288      	cmp	r0, r1
 80022c2:	d802      	bhi.n	80022ca <net_loop+0xae>
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d228      	bcs.n	800231c <net_loop+0x100>
        /*
         * Process TCP connections every 50ms
         */
        DEBUG_SET_LED3(1);
 80022ca:	4c17      	ldr	r4, [pc, #92]	; (8002328 <net_loop+0x10c>)
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	61a3      	str	r3, [r4, #24]
        for (int i = 0; i < UIP_CONNS; ++i) {
            GPIOC->ODR ^= GPIO_ODR_8;
 80022d2:	8aa3      	ldrh	r3, [r4, #20]
 80022d4:	2580      	movs	r5, #128	; 0x80
 80022d6:	006d      	lsls	r5, r5, #1
 80022d8:	406b      	eors	r3, r5
 80022da:	82a3      	strh	r3, [r4, #20]
            uip_periodic(i);
 80022dc:	4a16      	ldr	r2, [pc, #88]	; (8002338 <net_loop+0x11c>)
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <net_loop+0x120>)
 80022e0:	2002      	movs	r0, #2
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	f000 fea4 	bl	8003030 <uip_process>
            GPIOC->ODR ^= GPIO_ODR_8;
 80022e8:	8aa3      	ldrh	r3, [r4, #20]
 80022ea:	405d      	eors	r5, r3
 80022ec:	82a5      	strh	r5, [r4, #20]
            if (uip_len > 0) {
 80022ee:	4c10      	ldr	r4, [pc, #64]	; (8002330 <net_loop+0x114>)
 80022f0:	8823      	ldrh	r3, [r4, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <net_loop+0xf0>
                uip_arp_out();
 80022f6:	f001 fc6f 	bl	8003bd8 <uip_arp_out>
                printf("ETH2: Sending %d bytes\n", uip_len);
 80022fa:	8821      	ldrh	r1, [r4, #0]
 80022fc:	4810      	ldr	r0, [pc, #64]	; (8002340 <net_loop+0x124>)
 80022fe:	f004 fb35 	bl	800696c <iprintf>
                enc_packet_send(uip_buf, uip_len);
 8002302:	2300      	movs	r3, #0
 8002304:	5ee1      	ldrsh	r1, [r4, r3]
 8002306:	4809      	ldr	r0, [pc, #36]	; (800232c <net_loop+0x110>)
 8002308:	f000 fbe2 	bl	8002ad0 <enc_packet_send>
            }
        }
        DEBUG_SET_LED3(0);  // Green
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <net_loop+0x10c>)
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	049b      	lsls	r3, r3, #18
 8002312:	6193      	str	r3, [r2, #24]
        prevTime = millisecondCount;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <net_loop+0x108>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b01      	ldr	r3, [pc, #4]	; (8002320 <net_loop+0x104>)
 800231a:	601a      	str	r2, [r3, #0]
    }
}
 800231c:	bd70      	pop	{r4, r5, r6, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	20000f9c 	.word	0x20000f9c
 8002324:	20000ed4 	.word	0x20000ed4
 8002328:	48000800 	.word	0x48000800
 800232c:	2000157c 	.word	0x2000157c
 8002330:	20001570 	.word	0x20001570
 8002334:	0800ad2c 	.word	0x0800ad2c
 8002338:	2000178c 	.word	0x2000178c
 800233c:	20001788 	.word	0x20001788
 8002340:	0800ad44 	.word	0x0800ad44

08002344 <net_output>:
        net_loop();
        __thread_switch();
    }
}

static uint8_t net_output(void) {
 8002344:	b510      	push	{r4, lr}
    printf("NET_OUTPUT: Sending %d bytes\n", uip_len);
 8002346:	4c07      	ldr	r4, [pc, #28]	; (8002364 <net_output+0x20>)
 8002348:	4807      	ldr	r0, [pc, #28]	; (8002368 <net_output+0x24>)
 800234a:	8821      	ldrh	r1, [r4, #0]
 800234c:	f004 fb0e 	bl	800696c <iprintf>
    uip_arp_out();
 8002350:	f001 fc42 	bl	8003bd8 <uip_arp_out>
    enc_packet_send(uip_buf, uip_len);
 8002354:	2300      	movs	r3, #0
 8002356:	5ee1      	ldrsh	r1, [r4, r3]
 8002358:	4804      	ldr	r0, [pc, #16]	; (800236c <net_output+0x28>)
 800235a:	f000 fbb9 	bl	8002ad0 <enc_packet_send>
    return 0;
}
 800235e:	2000      	movs	r0, #0
 8002360:	bd10      	pop	{r4, pc}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	20001570 	.word	0x20001570
 8002368:	0800ad5c 	.word	0x0800ad5c
 800236c:	2000157c 	.word	0x2000157c

08002370 <net_init>:

void net_init() {
 8002370:	b510      	push	{r4, lr}
 8002372:	b082      	sub	sp, #8

    /* SysTick end of count event each 1ms */
    SysTick_Config(RCC_GetHCLKFreq() / 1000); /* CMSIS */
 8002374:	f7ff fe82 	bl	800207c <RCC_GetHCLKFreq>
 8002378:	21fa      	movs	r1, #250	; 0xfa
 800237a:	0089      	lsls	r1, r1, #2
 800237c:	f7fd ff08 	bl	8000190 <__aeabi_idiv>
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8002380:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <net_init+0x88>)
 8002382:	4290      	cmp	r0, r2
 8002384:	d80e      	bhi.n	80023a4 <net_init+0x34>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002386:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <net_init+0x8c>)
 8002388:	4010      	ands	r0, r2
 800238a:	3801      	subs	r0, #1
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800238c:	491c      	ldr	r1, [pc, #112]	; (8002400 <net_init+0x90>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800238e:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8002390:	6a08      	ldr	r0, [r1, #32]
 8002392:	4010      	ands	r0, r2
 8002394:	22c0      	movs	r2, #192	; 0xc0
 8002396:	0612      	lsls	r2, r2, #24
 8002398:	4302      	orrs	r2, r0
 800239a:	620a      	str	r2, [r1, #32]
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a0:	2207      	movs	r2, #7
 80023a2:	601a      	str	r2, [r3, #0]

    // clock_init(); // Not implemented / needed

    DEBUG_SET_LED1(1);
 80023a4:	4c17      	ldr	r4, [pc, #92]	; (8002404 <net_init+0x94>)
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	61a3      	str	r3, [r4, #24]
    enc_init(mac_address);
 80023aa:	4817      	ldr	r0, [pc, #92]	; (8002408 <net_init+0x98>)
 80023ac:	f000 fb38 	bl	8002a20 <enc_init>
    DEBUG_SET_LED1(0);
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	041b      	lsls	r3, r3, #16
 80023b4:	61a3      	str	r3, [r4, #24]

    uip_init();
 80023b6:	f000 fd45 	bl	8002e44 <uip_init>
    tcpip_set_outputfunc(net_output);
 80023ba:	4814      	ldr	r0, [pc, #80]	; (800240c <net_init+0x9c>)
 80023bc:	f002 f928 	bl	8004610 <tcpip_set_outputfunc>

#if 1
    uip_ipaddr_t addr;
    uip_ipaddr(&addr, 10,0,0,2);
 80023c0:	a901      	add	r1, sp, #4
 80023c2:	230a      	movs	r3, #10
 80023c4:	700b      	strb	r3, [r1, #0]
 80023c6:	2300      	movs	r3, #0
 80023c8:	704b      	strb	r3, [r1, #1]
 80023ca:	708b      	strb	r3, [r1, #2]
 80023cc:	2302      	movs	r3, #2
 80023ce:	70cb      	strb	r3, [r1, #3]
    uip_sethostaddr(&addr);
 80023d0:	2204      	movs	r2, #4
 80023d2:	480f      	ldr	r0, [pc, #60]	; (8002410 <net_init+0xa0>)
 80023d4:	f004 fd07 	bl	8006de6 <memcpy>
#endif

#if 1 /* COAP */
    // clock_init(); /// XXX Not defined nor used yet
    process_init();
 80023d8:	f001 fda0 	bl	8003f1c <process_init>
    process_start(&etimer_process, NULL); 
 80023dc:	480d      	ldr	r0, [pc, #52]	; (8002414 <net_init+0xa4>)
 80023de:	2100      	movs	r1, #0
 80023e0:	f001 fe58 	bl	8004094 <process_start>
    process_start(&tcpip_process, NULL);
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <net_init+0xa8>)
 80023e6:	2100      	movs	r1, #0
 80023e8:	f001 fe54 	bl	8004094 <process_start>
#if 1
    process_start(&rest_server_example, NULL);
 80023ec:	480b      	ldr	r0, [pc, #44]	; (800241c <net_init+0xac>)
 80023ee:	2100      	movs	r1, #0
 80023f0:	f001 fe50 	bl	8004094 <process_start>
#endif
#endif
}
 80023f4:	b002      	add	sp, #8
 80023f6:	bd10      	pop	{r4, pc}
 80023f8:	00ffffff 	.word	0x00ffffff
 80023fc:	e000e010 	.word	0xe000e010
 8002400:	e000ed00 	.word	0xe000ed00
 8002404:	48000800 	.word	0x48000800
 8002408:	0800ad7c 	.word	0x0800ad7c
 800240c:	08002345 	.word	0x08002345
 8002410:	200017e0 	.word	0x200017e0
 8002414:	2000054c 	.word	0x2000054c
 8002418:	2000056c 	.word	0x2000056c
 800241c:	20000638 	.word	0x20000638

08002420 <net_thread>:
extern struct process etimer_process, tcpip_process, dhcp_process, webserver_nogui_process;
extern struct process rest_server_example;

#define AUTOSTART_ENABLE

void net_thread(/* XXX Add parameters, IP address etc */) {
 8002420:	b508      	push	{r3, lr}
    net_init();
 8002422:	f7ff ffa5 	bl	8002370 <net_init>

    for (;;) {
        net_loop();
 8002426:	f7ff fef9 	bl	800221c <net_loop>
 * once all other pending interrupts have been serviced.  If
 * thread_switch() is called from user level code, the switch is
 * imminent. 
 */
static inline void __thread_switch() {
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	4a01      	ldr	r2, [pc, #4]	; (8002434 <net_thread+0x14>)
 800242e:	055b      	lsls	r3, r3, #21
 8002430:	6053      	str	r3, [r2, #4]
 8002432:	e7f8      	b.n	8002426 <net_thread+0x6>
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <net_spawn>:
const uint8_t mac_address[ETH_ADDRESS_LEN] = { 0xae, 0x68, 0x2e, 0xe2, 0xbf, 0xe0 };
#else
const uint8_t mac_address[ETH_ADDRESS_LEN] = { 0, 0, 0, 0, 0, 0, };
#endif

void net_spawn() {
 8002438:	b508      	push	{r3, lr}
#if 1
    __thread_init(interrupt_stack,
 800243a:	4b03      	ldr	r3, [pc, #12]	; (8002448 <net_spawn+0x10>)
 800243c:	4803      	ldr	r0, [pc, #12]	; (800244c <net_spawn+0x14>)
 800243e:	6819      	ldr	r1, [r3, #0]
 8002440:	3944      	subs	r1, #68	; 0x44
 8002442:	f000 f991 	bl	8002768 <__thread_init>
                  THREAD_INITIAL_EXECUTION_CONTEXT(__thread_net_context.tc_stack_bottom));
#endif
}
 8002446:	bd08      	pop	{r3, pc}
 8002448:	0800ad24 	.word	0x0800ad24
 800244c:	20000f1c 	.word	0x20000f1c

08002450 <_ZNK14HardwareSerial10irqHandlerEv>:
#include <Arduino.h>

static volatile int foo;

void HardwareSerial::irqHandler() const {
    foo = usart->RDR;
 8002450:	6803      	ldr	r3, [r0, #0]
 8002452:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8002454:	4b01      	ldr	r3, [pc, #4]	; (800245c <_ZNK14HardwareSerial10irqHandlerEv+0xc>)
 8002456:	601a      	str	r2, [r3, #0]
#if 0
    buffer->put(usart->RDR);
    buffer->put('c');
#endif
}
 8002458:	4770      	bx	lr
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	20000fa0 	.word	0x20000fa0

08002460 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
 8002460:	2000      	movs	r0, #0
 8002462:	4770      	bx	lr

08002464 <_ZNK14HardwareSerial5writeEPKc>:
    while (len--)
        n += write(*s++);
    return n;
}

size_t HardwareSerial::write(const char *s) const {
 8002464:	b510      	push	{r4, lr}
    int n = 0;
    while (*s != '\0')
 8002466:	e005      	b.n	8002474 <_ZNK14HardwareSerial5writeEPKc+0x10>
    buffer->flush();
};

inline
size_t HardwareSerial::write(uint8_t c) const {
    usart->TDR = c;
 8002468:	6802      	ldr	r2, [r0, #0]
 800246a:	8513      	strh	r3, [r2, #40]	; 0x28

    while ((usart->ISR & USART_ISR_TXE) == 0) {
 800246c:	69d3      	ldr	r3, [r2, #28]
 800246e:	061c      	lsls	r4, r3, #24
 8002470:	d5fc      	bpl.n	800246c <_ZNK14HardwareSerial5writeEPKc+0x8>
        n += write(*s++);
 8002472:	3101      	adds	r1, #1
    return n;
}

size_t HardwareSerial::write(const char *s) const {
    int n = 0;
    while (*s != '\0')
 8002474:	780b      	ldrb	r3, [r1, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f6      	bne.n	8002468 <_ZNK14HardwareSerial5writeEPKc+0x4>
        n += write(*s++);
    return n;
}
 800247a:	2000      	movs	r0, #0
 800247c:	bd10      	pop	{r4, pc}

0800247e <_ZNK14HardwareSerial5printEm4baseb>:
/*
 * NB.  This may not be the most efficient way of printing numbers
 *      but properly optimised it produces quite compact code and
 *      uses a minimum of memory.
 */
size_t HardwareSerial::print(unsigned long value, enum base base, bool isUnsigned) const {
 800247e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002480:	1c07      	adds	r7, r0, #0
 8002482:	1c0c      	adds	r4, r1, #0
 8002484:	1c16      	adds	r6, r2, #0
    int n = 0;

    if (!isUnsigned && ((long)value) < 0) {
 8002486:	2b00      	cmp	r3, #0
 8002488:	d108      	bne.n	800249c <_ZNK14HardwareSerial5printEm4baseb+0x1e>
 800248a:	2900      	cmp	r1, #0
 800248c:	da06      	bge.n	800249c <_ZNK14HardwareSerial5printEm4baseb+0x1e>
    buffer->flush();
};

inline
size_t HardwareSerial::write(uint8_t c) const {
    usart->TDR = c;
 800248e:	6803      	ldr	r3, [r0, #0]
 8002490:	222d      	movs	r2, #45	; 0x2d
 8002492:	851a      	strh	r2, [r3, #40]	; 0x28

    while ((usart->ISR & USART_ISR_TXE) == 0) {
 8002494:	69da      	ldr	r2, [r3, #28]
 8002496:	0611      	lsls	r1, r2, #24
 8002498:	d5fc      	bpl.n	8002494 <_ZNK14HardwareSerial5printEm4baseb+0x16>
        n += write('-');
        value = -((long)value);
 800249a:	4264      	negs	r4, r4
 800249c:	1c20      	adds	r0, r4, #0
 800249e:	2501      	movs	r5, #1
    /*
     * Compute how many digits are needed to print out the value,
     * i.e. what is the highest multiplier.
     */
    unsigned long mul = 1;
    for (unsigned long h = value; h >= base; h /= base) {
 80024a0:	e003      	b.n	80024aa <_ZNK14HardwareSerial5printEm4baseb+0x2c>
 80024a2:	1c31      	adds	r1, r6, #0
        mul *= base;
 80024a4:	4375      	muls	r5, r6
    /*
     * Compute how many digits are needed to print out the value,
     * i.e. what is the highest multiplier.
     */
    unsigned long mul = 1;
    for (unsigned long h = value; h >= base; h /= base) {
 80024a6:	f7fd fe25 	bl	80000f4 <__aeabi_uidiv>
 80024aa:	42b0      	cmp	r0, r6
 80024ac:	d2f9      	bcs.n	80024a2 <_ZNK14HardwareSerial5printEm4baseb+0x24>
 80024ae:	e019      	b.n	80024e4 <_ZNK14HardwareSerial5printEm4baseb+0x66>
        mul *= base;
    }
    /* Write out the digits, starting from most significant one. */
    for (mul; mul >= 1; mul /= base) {
        const int digit = value / mul;
 80024b0:	1c20      	adds	r0, r4, #0
 80024b2:	1c29      	adds	r1, r5, #0
 80024b4:	f7fd fe1e 	bl	80000f4 <__aeabi_uidiv>
        n += write(digit + (digit < 10? '0': 'A' - 10));
 80024b8:	2809      	cmp	r0, #9
 80024ba:	dc01      	bgt.n	80024c0 <_ZNK14HardwareSerial5printEm4baseb+0x42>
 80024bc:	2230      	movs	r2, #48	; 0x30
 80024be:	e000      	b.n	80024c2 <_ZNK14HardwareSerial5printEm4baseb+0x44>
 80024c0:	2237      	movs	r2, #55	; 0x37
    buffer->flush();
};

inline
size_t HardwareSerial::write(uint8_t c) const {
    usart->TDR = c;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	1812      	adds	r2, r2, r0
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	851a      	strh	r2, [r3, #40]	; 0x28

    while ((usart->ISR & USART_ISR_TXE) == 0) {
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	0611      	lsls	r1, r2, #24
 80024ce:	d5fc      	bpl.n	80024ca <_ZNK14HardwareSerial5printEm4baseb+0x4c>
        value = value % mul;
 80024d0:	1c20      	adds	r0, r4, #0
 80024d2:	1c29      	adds	r1, r5, #0
 80024d4:	f7fd fe52 	bl	800017c <__aeabi_uidivmod>
    unsigned long mul = 1;
    for (unsigned long h = value; h >= base; h /= base) {
        mul *= base;
    }
    /* Write out the digits, starting from most significant one. */
    for (mul; mul >= 1; mul /= base) {
 80024d8:	1c28      	adds	r0, r5, #0
        const int digit = value / mul;
        n += write(digit + (digit < 10? '0': 'A' - 10));
        value = value % mul;
 80024da:	1c0c      	adds	r4, r1, #0
    unsigned long mul = 1;
    for (unsigned long h = value; h >= base; h /= base) {
        mul *= base;
    }
    /* Write out the digits, starting from most significant one. */
    for (mul; mul >= 1; mul /= base) {
 80024dc:	1c31      	adds	r1, r6, #0
 80024de:	f7fd fe09 	bl	80000f4 <__aeabi_uidiv>
 80024e2:	1c05      	adds	r5, r0, #0
 80024e4:	2d00      	cmp	r5, #0
 80024e6:	d1e3      	bne.n	80024b0 <_ZNK14HardwareSerial5printEm4baseb+0x32>
        n += write(digit + (digit < 10? '0': 'A' - 10));
        value = value % mul;
    }

    return n;
}
 80024e8:	2000      	movs	r0, #0
 80024ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024ec <_ZNK14HardwareSerial14readBytesUntilEiPcj>:
*/

#include <Arduino.h>

size_t HardwareSerial::readBytesUntil(
    int terminator, char *buffer, size_t length) const {
 80024ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ee:	b085      	sub	sp, #20
 80024f0:	9103      	str	r1, [sp, #12]
 80024f2:	9201      	str	r2, [sp, #4]
 80024f4:	2100      	movs	r1, #0

    for (int count = 0; count < length; count++) {
 80024f6:	e015      	b.n	8002524 <_ZNK14HardwareSerial14readBytesUntilEiPcj+0x38>
    return buffer->peek();
};

inline
int HardwareSerial::read(void) const {
    return buffer->get();
 80024f8:	6846      	ldr	r6, [r0, #4]
    bool full() const {
        return nextIndex(head) == tail;
    }

    int peek() const {
        return empty()? -1: buffer[tail];
 80024fa:	2240      	movs	r2, #64	; 0x40
    void flush(void) {
        head = tail = 0;
    }

    bool empty() const {
        return head == tail;
 80024fc:	1c37      	adds	r7, r6, #0
 80024fe:	3741      	adds	r7, #65	; 0x41
    bool full() const {
        return nextIndex(head) == tail;
    }

    int peek() const {
        return empty()? -1: buffer[tail];
 8002500:	5d92      	ldrb	r2, [r2, r6]
    void flush(void) {
        head = tail = 0;
    }

    bool empty() const {
        return head == tail;
 8002502:	783d      	ldrb	r5, [r7, #0]
    bool full() const {
        return nextIndex(head) == tail;
    }

    int peek() const {
        return empty()? -1: buffer[tail];
 8002504:	4694      	mov	ip, r2
 8002506:	45ac      	cmp	ip, r5
 8002508:	d010      	beq.n	800252c <_ZNK14HardwareSerial14readBytesUntilEiPcj+0x40>
 800250a:	5d76      	ldrb	r6, [r6, r5]
    }

    int get() {
        int c = peek();
        if (!empty()) {
            tail = nextIndex(tail);
 800250c:	3501      	adds	r5, #1
 800250e:	46ac      	mov	ip, r5
 8002510:	4662      	mov	r2, ip
 8002512:	253f      	movs	r5, #63	; 0x3f
 8002514:	4015      	ands	r5, r2
 8002516:	703d      	strb	r5, [r7, #0]
        int c = read();
        if (c < 0)
            return count;
        *buffer++ = c;
 8002518:	9a01      	ldr	r2, [sp, #4]
 800251a:	5456      	strb	r6, [r2, r1]
        if (c == terminator)
 800251c:	9a03      	ldr	r2, [sp, #12]
 800251e:	4296      	cmp	r6, r2
 8002520:	d004      	beq.n	800252c <_ZNK14HardwareSerial14readBytesUntilEiPcj+0x40>
#include <Arduino.h>

size_t HardwareSerial::readBytesUntil(
    int terminator, char *buffer, size_t length) const {

    for (int count = 0; count < length; count++) {
 8002522:	3101      	adds	r1, #1
 8002524:	1c0c      	adds	r4, r1, #0
 8002526:	4299      	cmp	r1, r3
 8002528:	d3e6      	bcc.n	80024f8 <_ZNK14HardwareSerial14readBytesUntilEiPcj+0xc>
 800252a:	1c1c      	adds	r4, r3, #0
        *buffer++ = c;
        if (c == terminator)
            return count;
    }
    return length;
}
 800252c:	b005      	add	sp, #20
 800252e:	1c20      	adds	r0, r4, #0
 8002530:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002532 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8002532:	b510      	push	{r4, lr}
 8002534:	ac02      	add	r4, sp, #8
 8002536:	7824      	ldrb	r4, [r4, #0]
{
    _address[0] = first_octet;
 8002538:	7001      	strb	r1, [r0, #0]
    _address[1] = second_octet;
 800253a:	7042      	strb	r2, [r0, #1]
    _address[2] = third_octet;
 800253c:	7083      	strb	r3, [r0, #2]
    _address[3] = fourth_octet;
 800253e:	70c4      	strb	r4, [r0, #3]
}
 8002540:	bd10      	pop	{r4, pc}
	...

08002544 <_GLOBAL__I__ZN9IPAddressC2Ev>:
}

bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}
 8002544:	b500      	push	{lr}
 8002546:	b083      	sub	sp, #12
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 8002548:	2300      	movs	r3, #0
 800254a:	4804      	ldr	r0, [pc, #16]	; (800255c <_GLOBAL__I__ZN9IPAddressC2Ev+0x18>)
 800254c:	2100      	movs	r1, #0
 800254e:	2200      	movs	r2, #0
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	f7ff ffee 	bl	8002532 <_ZN9IPAddressC1Ehhhh>
 8002556:	b003      	add	sp, #12
 8002558:	bd00      	pop	{pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	20000fa4 	.word	0x20000fa4

08002560 <tickReset>:

void cancelReset() {
	ticks = -1;
}

void tickReset() {
 8002560:	b500      	push	{lr}
	if (ticks == -1)
 8002562:	4b03      	ldr	r3, [pc, #12]	; (8002570 <tickReset+0x10>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	1c51      	adds	r1, r2, #1
 8002568:	d001      	beq.n	800256e <tickReset+0xe>
		return;
	ticks--;
 800256a:	3a01      	subs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]
	if (ticks == 0)
		banzai();
}
 800256e:	bd00      	pop	{pc}
 8002570:	20000500 	.word	0x20000500

08002574 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
 8002574:	b510      	push	{r4, lr}
    init();
 8002576:	f7ff fde9 	bl	800214c <init>

#if DEBUG
    DEBUG_SET_LED0(1);
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <main+0x80>)
 800257c:	2240      	movs	r2, #64	; 0x40
 800257e:	619a      	str	r2, [r3, #24]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8002580:	b672      	cpsid	i

static inline
uint32_t micros(void) {

    noInterrupts();
    const uint32_t pending_systicks = SysTick->VAL;
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <main+0x84>)
 8002584:	689a      	ldr	r2, [r3, #8]
    const uint32_t millseconds = millisecondCount;
 8002586:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <main+0x88>)
 8002588:	681b      	ldr	r3, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 800258a:	b662      	cpsie	i
            : /* no outputs */ : "r" (cycles4) 
            );
        return;
    }

    uint32_t timo = micros() + us;
 800258c:	015c      	lsls	r4, r3, #5
 800258e:	1ae4      	subs	r4, r4, r3
 8002590:	00a4      	lsls	r4, r4, #2
 8002592:	18e4      	adds	r4, r4, r3
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <main+0x8c>)
 8002596:	00e4      	lsls	r4, r4, #3
 8002598:	18e4      	adds	r4, r4, r3
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <main+0x90>)
 800259c:	1a9a      	subs	r2, r3, r2
 800259e:	0492      	lsls	r2, r2, #18
 80025a0:	0d12      	lsrs	r2, r2, #20
 80025a2:	18a4      	adds	r4, r4, r2
 80025a4:	e001      	b.n	80025aa <main+0x36>

    while (micros() < timo) {
        yield();
 80025a6:	f000 f8d1 	bl	800274c <yield>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80025aa:	b672      	cpsid	i

static inline
uint32_t micros(void) {

    noInterrupts();
    const uint32_t pending_systicks = SysTick->VAL;
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <main+0x84>)
 80025ae:	689a      	ldr	r2, [r3, #8]
    const uint32_t millseconds = millisecondCount;
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <main+0x88>)
 80025b2:	681b      	ldr	r3, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80025b4:	b662      	cpsie	i
        return;
    }

    uint32_t timo = micros() + us;

    while (micros() < timo) {
 80025b6:	4913      	ldr	r1, [pc, #76]	; (8002604 <main+0x90>)
 80025b8:	1a8a      	subs	r2, r1, r2
 80025ba:	0159      	lsls	r1, r3, #5
 80025bc:	1ac9      	subs	r1, r1, r3
 80025be:	0089      	lsls	r1, r1, #2
 80025c0:	0492      	lsls	r2, r2, #18
 80025c2:	18cb      	adds	r3, r1, r3
 80025c4:	0d12      	lsrs	r2, r2, #20
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	18d3      	adds	r3, r2, r3
 80025ca:	42a3      	cmp	r3, r4
 80025cc:	d3eb      	bcc.n	80025a6 <main+0x32>
    delay(100);
    DEBUG_SET_LED0(0);
 80025ce:	4c09      	ldr	r4, [pc, #36]	; (80025f4 <main+0x80>)
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	03db      	lsls	r3, r3, #15
 80025d4:	61a3      	str	r3, [r4, #24]
#endif

#if NET
    /* Spawns network activity in another thread */
    net_spawn();
 80025d6:	f7ff ff2f 	bl	8002438 <net_spawn>
#endif

    setup();
 80025da:	f004 f88b 	bl	80066f4 <setup>

    DEBUG_SET_LED0(1);
 80025de:	2340      	movs	r3, #64	; 0x40
 80025e0:	61a3      	str	r3, [r4, #24]

    for (;;) {
        loop();
 80025e2:	f004 f91b 	bl	800681c <loop>
        if (serialEventRun) serialEventRun();
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <main+0x94>)
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0fa      	beq.n	80025e2 <main+0x6e>
 80025ec:	e000      	b.n	80025f0 <main+0x7c>
 80025ee:	bf00      	nop
 80025f0:	e7f7      	b.n	80025e2 <main+0x6e>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	48000800 	.word	0x48000800
 80025f8:	e000e010 	.word	0xe000e010
 80025fc:	20000ed4 	.word	0x20000ed4
 8002600:	00018a88 	.word	0x00018a88
 8002604:	0000bb80 	.word	0x0000bb80
 8002608:	00000000 	.word	0x00000000

0800260c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800260c:	b510      	push	{r4, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800260e:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <SystemInit+0x94>)
 8002610:	2101      	movs	r1, #1
 8002612:	681a      	ldr	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002614:	240f      	movs	r4, #15
  * @retval None
  */
void SystemInit (void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 800261a:	6858      	ldr	r0, [r3, #4]
 800261c:	4a21      	ldr	r2, [pc, #132]	; (80026a4 <SystemInit+0x98>)
 800261e:	4002      	ands	r2, r0
 8002620:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	4a20      	ldr	r2, [pc, #128]	; (80026a8 <SystemInit+0x9c>)
 8002626:	4002      	ands	r2, r0
 8002628:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	4a1f      	ldr	r2, [pc, #124]	; (80026ac <SystemInit+0xa0>)
 800262e:	4002      	ands	r2, r0
 8002630:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8002632:	6858      	ldr	r0, [r3, #4]
 8002634:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <SystemInit+0xa4>)
 8002636:	4010      	ands	r0, r2
 8002638:	6058      	str	r0, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800263a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800263c:	43a0      	bics	r0, r4
 800263e:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8002640:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002642:	481c      	ldr	r0, [pc, #112]	; (80026b4 <SystemInit+0xa8>)
 8002644:	4020      	ands	r0, r4
 8002646:	6318      	str	r0, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8002648:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800264a:	4388      	bics	r0, r1

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800264c:	2100      	movs	r1, #0

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800264e:	6358      	str	r0, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002650:	6099      	str	r1, [r3, #8]
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8002652:	4919      	ldr	r1, [pc, #100]	; (80026b8 <SystemInit+0xac>)
 8002654:	2011      	movs	r0, #17
 8002656:	6008      	str	r0, [r1, #0]

  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	6059      	str	r1, [r3, #4]

  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	6059      	str	r1, [r3, #4]

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	400a      	ands	r2, r1
 8002664:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	22a0      	movs	r2, #160	; 0xa0
 800266a:	0392      	lsls	r2, r2, #14
 800266c:	430a      	orrs	r2, r1
 800266e:	605a      	str	r2, [r3, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8002670:	6819      	ldr	r1, [r3, #0]
 8002672:	2280      	movs	r2, #128	; 0x80
 8002674:	0452      	lsls	r2, r2, #17
 8002676:	430a      	orrs	r2, r1
 8002678:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <SystemInit+0x94>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	0191      	lsls	r1, r2, #6
 8002680:	d5fb      	bpl.n	800267a <SystemInit+0x6e>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	2103      	movs	r1, #3
 8002686:	438a      	bics	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	2202      	movs	r2, #2
 800268e:	430a      	orrs	r2, r1
 8002690:	605a      	str	r2, [r3, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002692:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <SystemInit+0x94>)
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	230c      	movs	r3, #12
 8002698:	4013      	ands	r3, r2
 800269a:	2b08      	cmp	r3, #8
 800269c:	d1f9      	bne.n	8002692 <SystemInit+0x86>
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
}
 800269e:	bd10      	pop	{r4, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	f8ffb80c 	.word	0xf8ffb80c
 80026a8:	fef6ffff 	.word	0xfef6ffff
 80026ac:	fffbffff 	.word	0xfffbffff
 80026b0:	ffc0ffff 	.word	0xffc0ffff
 80026b4:	fffffeac 	.word	0xfffffeac
 80026b8:	40022000 	.word	0x40022000

080026bc <_sbrk>:
extern int _getpid ( void ) ;

extern int  _end ;

caddr_t 
_sbrk ( int incr ) {
 80026bc:	b500      	push	{lr}
    static unsigned char *heap = NULL ;
    unsigned char *prev_heap ;

    if ( heap == NULL )
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <_sbrk+0x1c>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	2a00      	cmp	r2, #0
 80026c4:	d101      	bne.n	80026ca <_sbrk+0xe>
    {
        heap = (unsigned char *)&_end ;
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <_sbrk+0x20>)
 80026c8:	601a      	str	r2, [r3, #0]
    }
    prev_heap = heap;
 80026ca:	4a03      	ldr	r2, [pc, #12]	; (80026d8 <_sbrk+0x1c>)
 80026cc:	6813      	ldr	r3, [r2, #0]

    heap += incr ;
 80026ce:	1818      	adds	r0, r3, r0
 80026d0:	6010      	str	r0, [r2, #0]

    return (caddr_t) prev_heap ;
}
 80026d2:	1c18      	adds	r0, r3, #0
 80026d4:	bd00      	pop	{pc}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	20000fa8 	.word	0x20000fa8
 80026dc:	200018b8 	.word	0x200018b8

080026e0 <_close>:
link(char *oldname, char *linkname) {
    return -1;
}

int 
_close(int fd) {
 80026e0:	2001      	movs	r0, #1
 80026e2:	4240      	negs	r0, r0
    return -1;
}
 80026e4:	4770      	bx	lr

080026e6 <_fstat>:

int 
_fstat(int fd, struct stat *st) {
    st->st_mode = S_IFCHR;
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	019b      	lsls	r3, r3, #6

    return 0;
}
 80026ea:	2000      	movs	r0, #0
    return -1;
}

int 
_fstat(int fd, struct stat *st) {
    st->st_mode = S_IFCHR;
 80026ec:	604b      	str	r3, [r1, #4]

    return 0;
}
 80026ee:	4770      	bx	lr

080026f0 <_isatty>:

int 
_isatty(int fd) {
    return 1;
}
 80026f0:	2001      	movs	r0, #1
 80026f2:	4770      	bx	lr

080026f4 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80026f4:	2001      	movs	r0, #1
 80026f6:	4240      	negs	r0, r0
    return -1;
}
 80026f8:	4770      	bx	lr

080026fa <_read>:

int _read(int fd, char *ptr, int len) {
 80026fa:	2001      	movs	r0, #1
 80026fc:	4240      	negs	r0, r0
    return -1;
}
 80026fe:	4770      	bx	lr

08002700 <_write>:


int 
_write(int fd, char *ptr, int len) {
 8002700:	b510      	push	{r4, lr}
}

static inline
void  digitalWrite(pin_t pin, uint32_t val) {
    if (val)
        *(stm32_pinDescription[pin].pin_port_bsrr) = stm32_pinDescription[pin].pin_mask;
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <_write+0x2c>)
 8002704:	2008      	movs	r0, #8
 8002706:	6018      	str	r0, [r3, #0]
    else
        *(stm32_pinDescription[pin].pin_port_brr)  = stm32_pinDescription[pin].pin_mask;
 8002708:	3310      	adds	r3, #16
 800270a:	2010      	movs	r0, #16
 800270c:	8018      	strh	r0, [r3, #0]
 800270e:	1c13      	adds	r3, r2, #0
 8002710:	e007      	b.n	8002722 <_write+0x22>

    digitalWrite(13, 1);
    digitalWrite(12, 0);

    while (cnt--) {
        USART2->TDR = *ptr++;
 8002712:	780c      	ldrb	r4, [r1, #0]
 8002714:	4806      	ldr	r0, [pc, #24]	; (8002730 <_write+0x30>)
 8002716:	8504      	strh	r4, [r0, #40]	; 0x28

        while ((USART2->ISR & USART_ISR_TXE) == 0) {
 8002718:	4805      	ldr	r0, [pc, #20]	; (8002730 <_write+0x30>)
 800271a:	69c0      	ldr	r0, [r0, #28]
 800271c:	0604      	lsls	r4, r0, #24
 800271e:	d5fb      	bpl.n	8002718 <_write+0x18>

    digitalWrite(13, 1);
    digitalWrite(12, 0);

    while (cnt--) {
        USART2->TDR = *ptr++;
 8002720:	3101      	adds	r1, #1
    register int cnt = len;

    digitalWrite(13, 1);
    digitalWrite(12, 0);

    while (cnt--) {
 8002722:	3b01      	subs	r3, #1
 8002724:	d2f5      	bcs.n	8002712 <_write+0x12>
            //yield();
        }
    }

    return len;
}
 8002726:	1c10      	adds	r0, r2, #0
 8002728:	bd10      	pop	{r4, pc}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	48000418 	.word	0x48000418
 8002730:	40004400 	.word	0x40004400

08002734 <_kill>:
    for (;;) 
        ;
}

void _kill(int pid, int sig) {
}
 8002734:	4770      	bx	lr

08002736 <_getpid>:

int _getpid (void) {
 8002736:	2001      	movs	r0, #1
 8002738:	4240      	negs	r0, r0
    return -1;
}
 800273a:	4770      	bx	lr

0800273c <_exit>:

    return len;
}

void _exit(int status) {
    printf( "Exiting with status %d.\n", status ) ;
 800273c:	b508      	push	{r3, lr}
 800273e:	1c01      	adds	r1, r0, #0
 8002740:	4801      	ldr	r0, [pc, #4]	; (8002748 <_exit+0xc>)
 8002742:	f004 f913 	bl	800696c <iprintf>
 8002746:	e7fe      	b.n	8002746 <_exit+0xa>
 8002748:	0800ad84 	.word	0x0800ad84

0800274c <yield>:
/**
 * XXX
 */

#if 1
void yield(void) {
 800274c:	b500      	push	{lr}
    if (__thread_other_execution_context)
 800274e:	4b04      	ldr	r3, [pc, #16]	; (8002760 <yield+0x14>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <yield+0x12>
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	4a02      	ldr	r2, [pc, #8]	; (8002764 <yield+0x18>)
 800275a:	055b      	lsls	r3, r3, #21
 800275c:	6053      	str	r3, [r2, #4]
        __thread_switch();
}
 800275e:	bd00      	pop	{pc}
 8002760:	2000156c 	.word	0x2000156c
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__thread_init>:
 * spurious call to PendSV_Handler does not break havoc.
 */
void 
__thread_init(void *interrupt_stack, struct thread_execution_context *idle_context) {

    __thread_other_execution_context = idle_context;
 8002768:	4b07      	ldr	r3, [pc, #28]	; (8002788 <__thread_init+0x20>)
 800276a:	6019      	str	r1, [r3, #0]
    __asm__ volatile (
 800276c:	466a      	mov	r2, sp
 800276e:	f382 8809 	msr	PSP, r2
 8002772:	2202      	movs	r2, #2
 8002774:	b672      	cpsid	i
 8002776:	f3ef 8314 	mrs	r3, CONTROL
 800277a:	4313      	orrs	r3, r2
 800277c:	f383 8814 	msr	CONTROL, r3
 8002780:	f380 8808 	msr	MSP, r0
 8002784:	b662      	cpsie	i
        // End critical section
        : 
        : "r" (interrupt_stack)
        : "r2", "r3"
        );
}
 8002786:	4770      	bx	lr
 8002788:	2000156c 	.word	0x2000156c

0800278c <PendSV_Handler>:
    // the area pointed by the psp, not the current (mps) stack, as this
    // routine is ran in the Handler mode.

    // Use r0 as the stack pointer for the old execution context
    register void *old_stack asm("r0");
    __asm__ volatile ("mrs %0, psp" : "=r" (old_stack));
 800278c:	f3ef 8009 	mrs	r0, PSP

    // stm in thumb is auto-incrementing (while push is auto-decrementing),
    // therefore we store the registers in reverse order.
    old_stack -= 9 /*XXX*/ * sizeof(uint32_t);
 8002790:	3824      	subs	r0, #36	; 0x24

    // Push the unsaved registers to the old stack, using r0
    __asm__ volatile (
 8002792:	1c01      	adds	r1, r0, #0
 8002794:	4652      	mov	r2, sl
 8002796:	465b      	mov	r3, fp
 8002798:	c1fc      	stmia	r1!, {r2, r3, r4, r5, r6, r7}
 800279a:	4644      	mov	r4, r8
 800279c:	464d      	mov	r5, r9
 800279e:	4676      	mov	r6, lr
 80027a0:	c170      	stmia	r1!, {r4, r5, r6}

    // Use r1 as the stack pointer for the new execution context
    register void *new_stack asm("r1");

    // Load the pointer to the other execution context's top of the stack 
    register struct thread_switch_context **switch_context_p = &__thread_other_execution_context;
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <PendSV_Handler+0x34>)

    {
        // Start critical section -- disable higher priority interrupts,
        // as they may indirectly change the contents of __thread_other_execution_context.
        __asm__ volatile( "cpsid i");
 80027a4:	b672      	cpsid	i

        // Load the new stack pointer from (*switch_context)
        __asm__ volatile ("ldr %0, [%1]" : "=r" (new_stack): "r" (switch_context_p));
 80027a6:	6819      	ldr	r1, [r3, #0]
        
        // Store the old stack pointer to (*switch_context)
        __asm__ volatile ("str %0, [%1]" :: "r" (old_stack), "r" (switch_context_p) : "memory");
 80027a8:	6018      	str	r0, [r3, #0]
        
        // End of critical section -- enable higher priority interrupts.
        __asm__ volatile ("cpsie i" : : : "memory");
 80027aa:	b662      	cpsie	i
    // context.  But first load it to r3 so that we can save the top
    // of the stack to the psp before actually returning.
    register void *new_exc_return_value asm("r3");

    // Pop the registers not saved by the interrupt hardware.
    __asm__ volatile (
 80027ac:	c9fc      	ldmia	r1!, {r2, r3, r4, r5, r6, r7}
 80027ae:	469b      	mov	fp, r3
 80027b0:	4692      	mov	sl, r2
 80027b2:	c90d      	ldmia	r1!, {r0, r2, r3}
 80027b4:	4680      	mov	r8, r0
 80027b6:	4691      	mov	r9, r2
          "r4", "r5", "r6", "r7",
          "r8", "r9", "r10", "r11"
        );

    // Restore the psp to its pre-interrupt value 
    __asm__ volatile ("msr psp, %0" : : "r" (new_stack));
 80027b8:	f381 8809 	msr	PSP, r1

    // Branch to the exc_return value at r3, causing an exception return.
    __asm__ volatile ("bx  %0" : : "r" (new_exc_return_value));
 80027bc:	4718      	bx	r3
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	2000156c 	.word	0x2000156c

080027c4 <__thread_idle_entry>:
// Make it naked to avoid any compiler-inserted preamble, which
// might exceed the minimal stack we are using.
__attribute__ ((naked)) void 
__thread_idle_entry() {
    // The trampoline, enabling interrupts and allowing a context switch
    __asm__ volatile("cpsie i");
 80027c4:	b662      	cpsie	i

    // The actual idle thread
    for (;;) {
        __asm__ volatile ("wfi");
 80027c6:	bf30      	wfi
 80027c8:	e7fd      	b.n	80027c6 <__thread_idle_entry+0x2>
	...

080027cc <__thread_exit>:
     * as a temporary stack pointer.  However, I am not sure what
     * would happen then to the exiting thread; this design
     * feels safer, and most probably this is not a piece of
     * code that needs to be heavily optimised anyway.
     */
    __asm__ volatile ("cpsid i");
 80027cc:	b672      	cpsid	i
     *
     * Use registers r7...r4 as fillers to fill in the xpsr, pc,
     * lr_thread and r12 positions in the stack, allowing r0..r3 to be
     * read from their "proper" positions.
     */
    __asm__ volatile (
 80027ce:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
     * idle thread execution context.
     *
     * As idle thread entry point does not assume any arguments, it is
     * sufficient to set up the stack and the link registers.
     */
    __asm__ volatile (
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <__thread_exit+0x14>)
 80027d2:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <__thread_exit+0x18>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	469d      	mov	sp, r3
 80027d8:	4696      	mov	lr, r2
     * point enables interrupts, causing an immediate context switch
     * to the other execution context, if so requested before coming
     * here.
     */
    register void * thread_idle_entry = __thread_idle_entry;
    __asm__ volatile (
 80027da:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <__thread_exit+0x1c>)
 80027dc:	469f      	mov	pc, r3
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	0800ada0 	.word	0x0800ada0
 80027e4:	08001fbd 	.word	0x08001fbd
 80027e8:	080027c5 	.word	0x080027c5

080027ec <set_bank>:
/**
 * Switches to the right register bank
 * if not there already
 */
static inline void
set_bank(enc_bank_t bank) {
 80027ec:	b570      	push	{r4, r5, r6, lr}
    static uint8_t curr = ENC_BANK0; /* Current bank */

    bank &= ENC_BANK_MASK;

    if (curr == bank || bank == ENC_BANK_GEN)
 80027ee:	4a0f      	ldr	r2, [pc, #60]	; (800282c <set_bank+0x40>)
 */
static inline void
set_bank(enc_bank_t bank) {
    static uint8_t curr = ENC_BANK0; /* Current bank */

    bank &= ENC_BANK_MASK;
 80027f0:	2360      	movs	r3, #96	; 0x60
 80027f2:	1c04      	adds	r4, r0, #0

    if (curr == bank || bank == ENC_BANK_GEN)
 80027f4:	7815      	ldrb	r5, [r2, #0]
 */
static inline void
set_bank(enc_bank_t bank) {
    static uint8_t curr = ENC_BANK0; /* Current bank */

    bank &= ENC_BANK_MASK;
 80027f6:	401c      	ands	r4, r3

    if (curr == bank || bank == ENC_BANK_GEN)
 80027f8:	42a5      	cmp	r5, r4
 80027fa:	d015      	beq.n	8002828 <set_bank+0x3c>
        return;

    register int bank_index = (bank & ENC_BANK_MASK) >> ENC_BANK_SHIFT;
    register int curr_index = (curr & ENC_BANK_MASK) >> ENC_BANK_SHIFT;
 80027fc:	401d      	ands	r5, r3
 80027fe:	116d      	asrs	r5, r5, #5
    bank &= ENC_BANK_MASK;

    if (curr == bank || bank == ENC_BANK_GEN)
        return;

    register int bank_index = (bank & ENC_BANK_MASK) >> ENC_BANK_SHIFT;
 8002800:	1166      	asrs	r6, r4, #5
    register int curr_index = (curr & ENC_BANK_MASK) >> ENC_BANK_SHIFT;

    register const int bits_to_clr = (curr_index  & ~bank_index);
    if (bits_to_clr != 0)
 8002802:	1c2b      	adds	r3, r5, #0
 8002804:	43b3      	bics	r3, r6
 8002806:	1c19      	adds	r1, r3, #0
 8002808:	d004      	beq.n	8002814 <set_bank+0x28>
        SPI_XFER_TX(ENC_SPI_CLR_BF, E_CON1, bits_to_clr);
 800280a:	b2c9      	uxtb	r1, r1
 800280c:	20bf      	movs	r0, #191	; 0xbf
 800280e:	2200      	movs	r2, #0
 8002810:	f000 f9f0 	bl	8002bf4 <enc_spi_xfer>

    register const int bits_to_set = (~curr_index &  bank_index);
    if (bits_to_set != 0)
 8002814:	43ae      	bics	r6, r5
 8002816:	1c35      	adds	r5, r6, #0
 8002818:	d004      	beq.n	8002824 <set_bank+0x38>
        SPI_XFER_TX(ENC_SPI_SET_BF, E_CON1, bits_to_set);
 800281a:	b2e9      	uxtb	r1, r5
 800281c:	209f      	movs	r0, #159	; 0x9f
 800281e:	2200      	movs	r2, #0
 8002820:	f000 f9e8 	bl	8002bf4 <enc_spi_xfer>

    curr = bank;
 8002824:	4b01      	ldr	r3, [pc, #4]	; (800282c <set_bank+0x40>)
 8002826:	701c      	strb	r4, [r3, #0]
}
 8002828:	bd70      	pop	{r4, r5, r6, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	20000fac 	.word	0x20000fac

08002830 <enc_reg_bitop>:
        abort();
    }
}

void
enc_reg_bitop(enc_spi_op_t bitop, enc_reg_t reg, int mask) {
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	1c05      	adds	r5, r0, #0
 8002834:	1c0c      	adds	r4, r1, #0
 8002836:	1c16      	adds	r6, r2, #0
 */

void abort(void) __attribute__((noreturn));

static inline void assert(int a) {
    if (!a) abort();
 8002838:	28a0      	cmp	r0, #160	; 0xa0
 800283a:	d001      	beq.n	8002840 <enc_reg_bitop+0x10>
 800283c:	2880      	cmp	r0, #128	; 0x80
 800283e:	d125      	bne.n	800288c <enc_reg_bitop+0x5c>
    assert(bitop == ENC_SPI_SET_BF || bitop == ENC_SPI_CLR_BF);

    switch (reg & ENC_TYPE_MASK) {
 8002840:	23f0      	movs	r3, #240	; 0xf0
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4023      	ands	r3, r4
 8002846:	2b40      	cmp	r3, #64	; 0x40
 8002848:	d00b      	beq.n	8002862 <enc_reg_bitop+0x32>
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	dc04      	bgt.n	8002858 <enc_reg_bitop+0x28>
 800284e:	2b00      	cmp	r3, #0
 8002850:	d007      	beq.n	8002862 <enc_reg_bitop+0x32>
 8002852:	2b20      	cmp	r3, #32
 8002854:	d11a      	bne.n	800288c <enc_reg_bitop+0x5c>
 8002856:	e004      	b.n	8002862 <enc_reg_bitop+0x32>
 8002858:	2b60      	cmp	r3, #96	; 0x60
 800285a:	d002      	beq.n	8002862 <enc_reg_bitop+0x32>
 800285c:	2b80      	cmp	r3, #128	; 0x80
 800285e:	d115      	bne.n	800288c <enc_reg_bitop+0x5c>
 8002860:	e003      	b.n	800286a <enc_reg_bitop+0x3a>
    case ENC_BANK0:
    case ENC_BANK1:
    case ENC_BANK2:
    case ENC_BANK3:
        set_bank(reg & ENC_BANK_MASK);
 8002862:	2060      	movs	r0, #96	; 0x60
 8002864:	4020      	ands	r0, r4
 8002866:	f7ff ffc1 	bl	80027ec <set_bank>
        /* FALLTHROUGH */
    case ENC_BANK_GEN:
        SPI_XFER_TX(bitop, reg, mask);
 800286a:	231f      	movs	r3, #31
 800286c:	4023      	ands	r3, r4
 800286e:	431d      	orrs	r5, r3
 8002870:	b2f1      	uxtb	r1, r6
 8002872:	1c28      	adds	r0, r5, #0
 8002874:	2200      	movs	r2, #0
 8002876:	f000 f9bd 	bl	8002bf4 <enc_spi_xfer>
        if (reg & ENC_TYPE_LONG)
 800287a:	05a3      	lsls	r3, r4, #22
 800287c:	d508      	bpl.n	8002890 <enc_reg_bitop+0x60>
            SPI_XFER_TX(bitop, reg, mask >> 8);
 800287e:	1236      	asrs	r6, r6, #8
 8002880:	b2f1      	uxtb	r1, r6
 8002882:	1c28      	adds	r0, r5, #0
 8002884:	2200      	movs	r2, #0
 8002886:	f000 f9b5 	bl	8002bf4 <enc_spi_xfer>
 800288a:	e001      	b.n	8002890 <enc_reg_bitop+0x60>
        return;
    case ENC_BANK2_MREG:
    case ENC_BANK3_MREG:
    case ENC_BANK_PHY:
    default:
        abort();
 800288c:	f004 f83e 	bl	800690c <abort>
    }
}
 8002890:	bd70      	pop	{r4, r5, r6, pc}

08002892 <enc_reg_set>:
        abort();
    }
}

void
enc_reg_set(enc_reg_t reg, int value) {
 8002892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (reg & ENC_TYPE_MASK) {
 8002894:	23f0      	movs	r3, #240	; 0xf0
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4003      	ands	r3, r0
        abort();
    }
}

void
enc_reg_set(enc_reg_t reg, int value) {
 800289a:	1c04      	adds	r4, r0, #0
 800289c:	1c0d      	adds	r5, r1, #0
    switch (reg & ENC_TYPE_MASK) {
 800289e:	2b60      	cmp	r3, #96	; 0x60
 80028a0:	d016      	beq.n	80028d0 <enc_reg_set+0x3e>
 80028a2:	2b60      	cmp	r3, #96	; 0x60
 80028a4:	dc06      	bgt.n	80028b4 <enc_reg_set+0x22>
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	d012      	beq.n	80028d0 <enc_reg_set+0x3e>
 80028aa:	2b40      	cmp	r3, #64	; 0x40
 80028ac:	d010      	beq.n	80028d0 <enc_reg_set+0x3e>
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00e      	beq.n	80028d0 <enc_reg_set+0x3e>
 80028b2:	e047      	b.n	8002944 <enc_reg_set+0xb2>
 80028b4:	2bc0      	cmp	r3, #192	; 0xc0
 80028b6:	d00b      	beq.n	80028d0 <enc_reg_set+0x3e>
 80028b8:	2bc0      	cmp	r3, #192	; 0xc0
 80028ba:	dc02      	bgt.n	80028c2 <enc_reg_set+0x30>
 80028bc:	2b80      	cmp	r3, #128	; 0x80
 80028be:	d141      	bne.n	8002944 <enc_reg_set+0xb2>
 80028c0:	e00a      	b.n	80028d8 <enc_reg_set+0x46>
 80028c2:	2be0      	cmp	r3, #224	; 0xe0
 80028c4:	d004      	beq.n	80028d0 <enc_reg_set+0x3e>
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	0052      	lsls	r2, r2, #1
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d13a      	bne.n	8002944 <enc_reg_set+0xb2>
 80028ce:	e01a      	b.n	8002906 <enc_reg_set+0x74>
    case ENC_BANK3_MREG:
    case ENC_BANK0:
    case ENC_BANK1:
    case ENC_BANK2:
    case ENC_BANK3:
        set_bank(reg & ENC_BANK_MASK);
 80028d0:	2060      	movs	r0, #96	; 0x60
 80028d2:	4020      	ands	r0, r4
 80028d4:	f7ff ff8a 	bl	80027ec <set_bank>
        /* FALLTHROUGH */
    case ENC_BANK_GEN:
        SPI_XFER_TX(ENC_SPI_WRITE_REG, reg, value);
 80028d8:	261f      	movs	r6, #31
 80028da:	1c20      	adds	r0, r4, #0
 80028dc:	2740      	movs	r7, #64	; 0x40
 80028de:	1c3b      	adds	r3, r7, #0
 80028e0:	4030      	ands	r0, r6
 80028e2:	4318      	orrs	r0, r3
 80028e4:	b2c0      	uxtb	r0, r0
 80028e6:	b2e9      	uxtb	r1, r5
 80028e8:	2200      	movs	r2, #0
 80028ea:	f000 f983 	bl	8002bf4 <enc_spi_xfer>
        if (reg & ENC_TYPE_LONG)
 80028ee:	05a3      	lsls	r3, r4, #22
 80028f0:	d52a      	bpl.n	8002948 <enc_reg_set+0xb6>
            SPI_XFER_TX(ENC_SPI_WRITE_REG, reg+1, value >> 8);
 80028f2:	3401      	adds	r4, #1
 80028f4:	4026      	ands	r6, r4
 80028f6:	4337      	orrs	r7, r6
 80028f8:	122d      	asrs	r5, r5, #8
 80028fa:	b2f8      	uxtb	r0, r7
 80028fc:	b2e9      	uxtb	r1, r5
 80028fe:	2200      	movs	r2, #0
 8002900:	f000 f978 	bl	8002bf4 <enc_spi_xfer>
 8002904:	e020      	b.n	8002948 <enc_reg_set+0xb6>
            SPI_XFER_RX(ENC_SPI_READ_REG, MII_RD_L, 1);
}

static inline void
phy_set(enc_reg_t reg, int value, int nowait) {
    set_bank(MII_REG_ADR);
 8002906:	20d4      	movs	r0, #212	; 0xd4
 8002908:	f7ff ff70 	bl	80027ec <set_bank>
    SPI_XFER_TX(ENC_SPI_WRITE_REG, MII_REG_ADR, reg & ENC_REG_MASK);
 800290c:	211f      	movs	r1, #31
 800290e:	4021      	ands	r1, r4
 8002910:	2200      	movs	r2, #0
 8002912:	2054      	movs	r0, #84	; 0x54
 8002914:	f000 f96e 	bl	8002bf4 <enc_spi_xfer>
    SPI_XFER_TX(ENC_SPI_WRITE_REG, MII_WR_L, value);
 8002918:	b2e9      	uxtb	r1, r5
 800291a:	2200      	movs	r2, #0
 800291c:	2056      	movs	r0, #86	; 0x56
    SPI_XFER_TX(ENC_SPI_WRITE_REG, MII_WR_H, value >> 8);
 800291e:	122d      	asrs	r5, r5, #8

static inline void
phy_set(enc_reg_t reg, int value, int nowait) {
    set_bank(MII_REG_ADR);
    SPI_XFER_TX(ENC_SPI_WRITE_REG, MII_REG_ADR, reg & ENC_REG_MASK);
    SPI_XFER_TX(ENC_SPI_WRITE_REG, MII_WR_L, value);
 8002920:	f000 f968 	bl	8002bf4 <enc_spi_xfer>
    SPI_XFER_TX(ENC_SPI_WRITE_REG, MII_WR_H, value >> 8);
 8002924:	b2e9      	uxtb	r1, r5
 8002926:	2057      	movs	r0, #87	; 0x57
 8002928:	2200      	movs	r2, #0
 800292a:	f000 f963 	bl	8002bf4 <enc_spi_xfer>
    if (nowait)
        return;
    set_bank(MII_STAT);
 800292e:	20ea      	movs	r0, #234	; 0xea
 8002930:	f7ff ff5c 	bl	80027ec <set_bank>
    while (SPI_XFER_RX(ENC_SPI_READ_REG, MII_STAT, 1) & MII_STAT_BUSY)
 8002934:	200a      	movs	r0, #10
 8002936:	2100      	movs	r1, #0
 8002938:	2201      	movs	r2, #1
 800293a:	f000 f95b 	bl	8002bf4 <enc_spi_xfer>
 800293e:	07c3      	lsls	r3, r0, #31
 8002940:	d4f8      	bmi.n	8002934 <enc_reg_set+0xa2>
 8002942:	e001      	b.n	8002948 <enc_reg_set+0xb6>
        return;
    case ENC_BANK_PHY:
        phy_set(reg & ENC_REG_MASK, value, 0);
        return;
    default:
        abort();
 8002944:	f003 ffe2 	bl	800690c <abort>
    }
}
 8002948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800294a <enc_reg_get>:
    while (SPI_XFER_RX(ENC_SPI_READ_REG, MII_STAT, 1) & MII_STAT_BUSY)
        ;
}

int
enc_reg_get(enc_reg_t reg) {
 800294a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int xfer_3rd_byte = 0;
    int value;

    switch (reg & ENC_TYPE_MASK) {
 800294c:	23f0      	movs	r3, #240	; 0xf0
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4003      	ands	r3, r0
    while (SPI_XFER_RX(ENC_SPI_READ_REG, MII_STAT, 1) & MII_STAT_BUSY)
        ;
}

int
enc_reg_get(enc_reg_t reg) {
 8002952:	1c04      	adds	r4, r0, #0
    int xfer_3rd_byte = 0;
    int value;

    switch (reg & ENC_TYPE_MASK) {
 8002954:	2b60      	cmp	r3, #96	; 0x60
 8002956:	d01a      	beq.n	800298e <enc_reg_get+0x44>
 8002958:	2b60      	cmp	r3, #96	; 0x60
 800295a:	dc06      	bgt.n	800296a <enc_reg_get+0x20>
 800295c:	2b20      	cmp	r3, #32
 800295e:	d016      	beq.n	800298e <enc_reg_get+0x44>
 8002960:	2b40      	cmp	r3, #64	; 0x40
 8002962:	d014      	beq.n	800298e <enc_reg_get+0x44>
 8002964:	2b00      	cmp	r3, #0
 8002966:	d012      	beq.n	800298e <enc_reg_get+0x44>
 8002968:	e056      	b.n	8002a18 <enc_reg_get+0xce>
 800296a:	2bc0      	cmp	r3, #192	; 0xc0
 800296c:	d00d      	beq.n	800298a <enc_reg_get+0x40>
 800296e:	2bc0      	cmp	r3, #192	; 0xc0
 8002970:	dc02      	bgt.n	8002978 <enc_reg_get+0x2e>
 8002972:	2b80      	cmp	r3, #128	; 0x80
 8002974:	d150      	bne.n	8002a18 <enc_reg_get+0xce>
 8002976:	e006      	b.n	8002986 <enc_reg_get+0x3c>
 8002978:	2be0      	cmp	r3, #224	; 0xe0
 800297a:	d006      	beq.n	800298a <enc_reg_get+0x40>
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	0052      	lsls	r2, r2, #1
 8002980:	4293      	cmp	r3, r2
 8002982:	d149      	bne.n	8002a18 <enc_reg_get+0xce>
 8002984:	e01a      	b.n	80029bc <enc_reg_get+0x72>
 8002986:	2500      	movs	r5, #0
 8002988:	e006      	b.n	8002998 <enc_reg_get+0x4e>
 800298a:	2501      	movs	r5, #1
 800298c:	e000      	b.n	8002990 <enc_reg_get+0x46>
 800298e:	2500      	movs	r5, #0
        /* FALLTHROUGH */
    case ENC_BANK0:
    case ENC_BANK1:
    case ENC_BANK2:
    case ENC_BANK3:
        set_bank(reg & ENC_BANK_MASK);
 8002990:	2060      	movs	r0, #96	; 0x60
 8002992:	4020      	ands	r0, r4
 8002994:	f7ff ff2a 	bl	80027ec <set_bank>
        /* FALLTHROUGH */
    case ENC_BANK_GEN:
        value = SPI_XFER_RX(ENC_SPI_READ_REG, reg, xfer_3rd_byte);
 8002998:	271f      	movs	r7, #31
 800299a:	1c20      	adds	r0, r4, #0
 800299c:	4038      	ands	r0, r7
 800299e:	2100      	movs	r1, #0
 80029a0:	1c2a      	adds	r2, r5, #0
 80029a2:	f000 f927 	bl	8002bf4 <enc_spi_xfer>
 80029a6:	1c06      	adds	r6, r0, #0
        if (reg & ENC_TYPE_LONG)
 80029a8:	05a3      	lsls	r3, r4, #22
 80029aa:	d537      	bpl.n	8002a1c <enc_reg_get+0xd2>
            value |= SPI_XFER_RX(ENC_SPI_READ_REG, reg+1, xfer_3rd_byte) << 8;
 80029ac:	1c60      	adds	r0, r4, #1
 80029ae:	4038      	ands	r0, r7
 80029b0:	2100      	movs	r1, #0
 80029b2:	1c2a      	adds	r2, r5, #0
 80029b4:	f000 f91e 	bl	8002bf4 <enc_spi_xfer>
 80029b8:	0200      	lsls	r0, r0, #8
 80029ba:	e02b      	b.n	8002a14 <enc_reg_get+0xca>
    curr = bank;
}

static inline int
phy_get(enc_reg_t reg) {
    set_bank(MII_REG_ADR);
 80029bc:	20d4      	movs	r0, #212	; 0xd4
 80029be:	f7ff ff15 	bl	80027ec <set_bank>
    /* Write address and start read */
    SPI_XFER_TX(ENC_SPI_WRITE_REG, MII_REG_ADR, reg & ENC_REG_MASK);
 80029c2:	211f      	movs	r1, #31
 80029c4:	4021      	ands	r1, r4
 80029c6:	2200      	movs	r2, #0
 80029c8:	2054      	movs	r0, #84	; 0x54
 80029ca:	f000 f913 	bl	8002bf4 <enc_spi_xfer>
    SPI_XFER_TX(ENC_SPI_WRITE_REG, MII_CMD, MII_CMD_READ);
 80029ce:	2052      	movs	r0, #82	; 0x52
 80029d0:	2101      	movs	r1, #1
 80029d2:	2200      	movs	r2, #0
 80029d4:	f000 f90e 	bl	8002bf4 <enc_spi_xfer>
    set_bank(MII_STAT);
 80029d8:	20ea      	movs	r0, #234	; 0xea
 80029da:	f7ff ff07 	bl	80027ec <set_bank>
    /* Wait until ready */
    while (SPI_XFER_RX(ENC_SPI_READ_REG, MII_STAT, 1) & MII_STAT_BUSY)
 80029de:	200a      	movs	r0, #10
 80029e0:	2100      	movs	r1, #0
 80029e2:	2201      	movs	r2, #1
 80029e4:	f000 f906 	bl	8002bf4 <enc_spi_xfer>
 80029e8:	07c3      	lsls	r3, r0, #31
 80029ea:	d4f8      	bmi.n	80029de <enc_reg_get+0x94>
        ;
    set_bank(MII_CMD);
 80029ec:	20d2      	movs	r0, #210	; 0xd2
 80029ee:	f7ff fefd 	bl	80027ec <set_bank>
    /* Clear the read command; XXX is this needed? */
    SPI_XFER_TX(ENC_SPI_WRITE_REG, MII_CMD, 0);
 80029f2:	2100      	movs	r1, #0
 80029f4:	2200      	movs	r2, #0
 80029f6:	2052      	movs	r0, #82	; 0x52
 80029f8:	f000 f8fc 	bl	8002bf4 <enc_spi_xfer>
    /* Read the value */
    return (SPI_XFER_RX(ENC_SPI_READ_REG, MII_RD_H, 1) << 8) |
 80029fc:	2100      	movs	r1, #0
 80029fe:	2201      	movs	r2, #1
 8002a00:	2019      	movs	r0, #25
 8002a02:	f000 f8f7 	bl	8002bf4 <enc_spi_xfer>
 8002a06:	2100      	movs	r1, #0
 8002a08:	1c04      	adds	r4, r0, #0
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2018      	movs	r0, #24
 8002a0e:	f000 f8f1 	bl	8002bf4 <enc_spi_xfer>
 8002a12:	0226      	lsls	r6, r4, #8
 8002a14:	4306      	orrs	r6, r0
        value = SPI_XFER_RX(ENC_SPI_READ_REG, reg, xfer_3rd_byte);
        if (reg & ENC_TYPE_LONG)
            value |= SPI_XFER_RX(ENC_SPI_READ_REG, reg+1, xfer_3rd_byte) << 8;
        return value;
    case ENC_BANK_PHY:
        return phy_get(reg & ENC_REG_MASK);
 8002a16:	e001      	b.n	8002a1c <enc_reg_get+0xd2>
        break;
    default:
        abort();
 8002a18:	f003 ff78 	bl	800690c <abort>
    }
}
 8002a1c:	1c30      	adds	r0, r6, #0
 8002a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a20 <enc_init>:
       |   E_CON1_B_SEL1       /* 11: Stay in bank 3 */
       |   E_CON1_B_SEL0
      ),
};

void enc_init(const uint8_t mac_address[ETH_ADDRESS_LEN]) {
 8002a20:	b530      	push	{r4, r5, lr}
    const device_register_init_static_8bit_t *p;

    DEBUG_SET_LED0(1);
 8002a22:	4b29      	ldr	r3, [pc, #164]	; (8002ac8 <enc_init+0xa8>)
 8002a24:	2240      	movs	r2, #64	; 0x40
       |   E_CON1_B_SEL1       /* 11: Stay in bank 3 */
       |   E_CON1_B_SEL0
      ),
};

void enc_init(const uint8_t mac_address[ETH_ADDRESS_LEN]) {
 8002a26:	b083      	sub	sp, #12
 8002a28:	1c04      	adds	r4, r0, #0
    const device_register_init_static_8bit_t *p;

    DEBUG_SET_LED0(1);
 8002a2a:	619a      	str	r2, [r3, #24]
 8002a2c:	2501      	movs	r5, #1
    int s = 1;
    /* Wait for the chip oscillator having started */
    while ((enc_reg_get(E_STAT) & E_STAT_CLOCK_READY) == 0) {
 8002a2e:	e008      	b.n	8002a42 <enc_init+0x22>
        DEBUG_SET_LED0(s = !s);
 8002a30:	405d      	eors	r5, r3
 8002a32:	2d00      	cmp	r5, #0
 8002a34:	d102      	bne.n	8002a3c <enc_init+0x1c>
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	03db      	lsls	r3, r3, #15
 8002a3a:	e000      	b.n	8002a3e <enc_init+0x1e>
 8002a3c:	2340      	movs	r3, #64	; 0x40
 8002a3e:	4a22      	ldr	r2, [pc, #136]	; (8002ac8 <enc_init+0xa8>)
 8002a40:	6193      	str	r3, [r2, #24]
    const device_register_init_static_8bit_t *p;

    DEBUG_SET_LED0(1);
    int s = 1;
    /* Wait for the chip oscillator having started */
    while ((enc_reg_get(E_STAT) & E_STAT_CLOCK_READY) == 0) {
 8002a42:	209d      	movs	r0, #157	; 0x9d
 8002a44:	f7ff ff81 	bl	800294a <enc_reg_get>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	4218      	tst	r0, r3
 8002a4c:	d0f0      	beq.n	8002a30 <enc_init+0x10>
        ; /* XXX: Enable other functionality */
    }

    /* NB: MAC address in ENC28J60 is backwards
           and in very peculiar order. */
    enc_reg_set(MAC_ADR0, mac_address[5]);
 8002a4e:	7961      	ldrb	r1, [r4, #5]
 8002a50:	20e1      	movs	r0, #225	; 0xe1
 8002a52:	f7ff ff1e 	bl	8002892 <enc_reg_set>
    enc_reg_set(MAC_ADR1, mac_address[4]);
 8002a56:	7921      	ldrb	r1, [r4, #4]
 8002a58:	20e0      	movs	r0, #224	; 0xe0
 8002a5a:	f7ff ff1a 	bl	8002892 <enc_reg_set>
    enc_reg_set(MAC_ADR2, mac_address[3]);
 8002a5e:	78e1      	ldrb	r1, [r4, #3]
 8002a60:	20e3      	movs	r0, #227	; 0xe3
 8002a62:	f7ff ff16 	bl	8002892 <enc_reg_set>
    enc_reg_set(MAC_ADR3, mac_address[2]);
 8002a66:	78a1      	ldrb	r1, [r4, #2]
 8002a68:	20e2      	movs	r0, #226	; 0xe2
 8002a6a:	f7ff ff12 	bl	8002892 <enc_reg_set>
    enc_reg_set(MAC_ADR4, mac_address[1]);
 8002a6e:	7861      	ldrb	r1, [r4, #1]
 8002a70:	20e5      	movs	r0, #229	; 0xe5
 8002a72:	f7ff ff0e 	bl	8002892 <enc_reg_set>
    enc_reg_set(MAC_ADR5, mac_address[0]);
 8002a76:	7821      	ldrb	r1, [r4, #0]
 8002a78:	20e4      	movs	r0, #228	; 0xe4
 8002a7a:	f7ff ff0a 	bl	8002892 <enc_reg_set>
       |   E_CON1_B_SEL1       /* 11: Stay in bank 3 */
       |   E_CON1_B_SEL0
      ),
};

void enc_init(const uint8_t mac_address[ETH_ADDRESS_LEN]) {
 8002a7e:	4c13      	ldr	r4, [pc, #76]	; (8002acc <enc_init+0xac>)
 8002a80:	1c25      	adds	r5, r4, #0
 8002a82:	3580      	adds	r5, #128	; 0x80
    enc_reg_set(MAC_ADR3, mac_address[2]);
    enc_reg_set(MAC_ADR4, mac_address[1]);
    enc_reg_set(MAC_ADR5, mac_address[0]);

    /* Initialise the chip otherwise */
    for (p = enc28j60_init;
 8002a84:	e004      	b.n	8002a90 <enc_init+0x70>
         p < enc28j60_init + COUNT_OF(enc28j60_init);
         p++) {
        enc_reg_set(p->reg, p->value);
 8002a86:	8820      	ldrh	r0, [r4, #0]
 8002a88:	78a1      	ldrb	r1, [r4, #2]
 8002a8a:	f7ff ff02 	bl	8002892 <enc_reg_set>
    enc_reg_set(MAC_ADR5, mac_address[0]);

    /* Initialise the chip otherwise */
    for (p = enc28j60_init;
         p < enc28j60_init + COUNT_OF(enc28j60_init);
         p++) {
 8002a8e:	3404      	adds	r4, #4
    enc_reg_set(MAC_ADR3, mac_address[2]);
    enc_reg_set(MAC_ADR4, mac_address[1]);
    enc_reg_set(MAC_ADR5, mac_address[0]);

    /* Initialise the chip otherwise */
    for (p = enc28j60_init;
 8002a90:	42ac      	cmp	r4, r5
 8002a92:	d1f8      	bne.n	8002a86 <enc_init+0x66>
         p++) {
        enc_reg_set(p->reg, p->value);
    }

    /* Wait for the PHY to become active */
    while (enc_reg_get(PHY_CON1) & PHY_CON1_PRST)
 8002a94:	2080      	movs	r0, #128	; 0x80
 8002a96:	0040      	lsls	r0, r0, #1
 8002a98:	f7ff ff57 	bl	800294a <enc_reg_get>
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	1c04      	adds	r4, r0, #0
 8002aa2:	401c      	ands	r4, r3
 8002aa4:	d1f6      	bne.n	8002a94 <enc_init+0x74>
        ; /* XXX: Enable other functionality */

    /* See Errata #9 */
    enc_reg_set(PHY_CON2, PHY_CON2_HDLDIS);
 8002aa6:	2088      	movs	r0, #136	; 0x88
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	0040      	lsls	r0, r0, #1
 8002aac:	0049      	lsls	r1, r1, #1
 8002aae:	f7ff fef0 	bl	8002892 <enc_reg_set>
     * As the enc_spi_xfer_buffer requires even number of bytes, we
     * write two zeros.  The second will get later overwritten.
     *
     * NB.  E_WR_PTR is initialized above to TX_BUFFER_START.
     */
    enc_buf_value_t b[2] = { 0, 0 };
 8002ab2:	a901      	add	r1, sp, #4
 8002ab4:	700c      	strb	r4, [r1, #0]
 8002ab6:	704c      	strb	r4, [r1, #1]

    enc_spi_xfer_buffer(ENC_SPI_WRITE_MEM, b, sizeof(b), 0);
 8002ab8:	207a      	movs	r0, #122	; 0x7a
 8002aba:	2202      	movs	r2, #2
 8002abc:	2300      	movs	r3, #0
 8002abe:	f000 f8f1 	bl	8002ca4 <enc_spi_xfer_buffer>
}
 8002ac2:	b003      	add	sp, #12
 8002ac4:	bd30      	pop	{r4, r5, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	48000800 	.word	0x48000800
 8002acc:	0800ada8 	.word	0x0800ada8

08002ad0 <enc_packet_send>:

    return plen;
}

void
enc_packet_send(enc_buf_value_t *buffer, enc_buf_len_t len) {
 8002ad0:	b570      	push	{r4, r5, r6, lr}
    /*
     * Wait until the previous packet has been sent.
     */
    DEBUG_SET_LED0(1);
 8002ad2:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <enc_packet_send+0x80>)
 8002ad4:	2240      	movs	r2, #64	; 0x40

    return plen;
}

void
enc_packet_send(enc_buf_value_t *buffer, enc_buf_len_t len) {
 8002ad6:	1c06      	adds	r6, r0, #0
 8002ad8:	1c0d      	adds	r5, r1, #0
    /*
     * Wait until the previous packet has been sent.
     */
    DEBUG_SET_LED0(1);
 8002ada:	619a      	str	r2, [r3, #24]
    while ((enc_reg_get(E_CON1) & E_CON1_TX_REQUEST)) {
 8002adc:	e014      	b.n	8002b08 <enc_packet_send+0x38>
        DEBUG_SET_LED1(1);
 8002ade:	4c1c      	ldr	r4, [pc, #112]	; (8002b50 <enc_packet_send+0x80>)
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	61a3      	str	r3, [r4, #24]
         * XXX XXX XXX
         */
#if 0
        if ((enc_reg_get(E_INT_REQ) & E_INT_REQ_TX_ERR)) {
#endif
            DEBUG_SET_LED2(1);
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	61a3      	str	r3, [r4, #24]
            /* Reset the transmit logic */
            enc_reg_bitop(ENC_SPI_SET_BF, E_CON1, E_CON1_TX_RESET);
 8002ae8:	2080      	movs	r0, #128	; 0x80
 8002aea:	219f      	movs	r1, #159	; 0x9f
 8002aec:	2280      	movs	r2, #128	; 0x80
 8002aee:	f7ff fe9f 	bl	8002830 <enc_reg_bitop>
            enc_reg_bitop(ENC_SPI_CLR_BF, E_CON1, E_CON1_TX_RESET);
 8002af2:	20a0      	movs	r0, #160	; 0xa0
 8002af4:	219f      	movs	r1, #159	; 0x9f
 8002af6:	2280      	movs	r2, #128	; 0x80
 8002af8:	f7ff fe9a 	bl	8002830 <enc_reg_bitop>
#if 0
            /* XXX: The example code doesn't do the following
               while the data sheet tells to do so. */
            enc_reg_bitop(ENC_SPI_CLR_BF, E_INT_REQ, E_INT_REQ_TX_ERR);
#endif
            DEBUG_SET_LED2(0);
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	045b      	lsls	r3, r3, #17
 8002b00:	61a3      	str	r3, [r4, #24]
#if 0
        } else {
            ; // XXX: Allow other threads to run
        }
#endif
        DEBUG_SET_LED1(0);
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	041b      	lsls	r3, r3, #16
 8002b06:	61a3      	str	r3, [r4, #24]
enc_packet_send(enc_buf_value_t *buffer, enc_buf_len_t len) {
    /*
     * Wait until the previous packet has been sent.
     */
    DEBUG_SET_LED0(1);
    while ((enc_reg_get(E_CON1) & E_CON1_TX_REQUEST)) {
 8002b08:	209f      	movs	r0, #159	; 0x9f
 8002b0a:	f7ff ff1e 	bl	800294a <enc_reg_get>
 8002b0e:	0703      	lsls	r3, r0, #28
 8002b10:	d4e5      	bmi.n	8002ade <enc_packet_send+0xe>
     *
     * NB.  The per-packet control byte is there already
     *      at TX_BUFFER_START. It was written there at
     *      enc_init().
     */
    enc_reg_set(E_WR_PTR, TX_BUFFER_START + 1);
 8002b12:	4810      	ldr	r0, [pc, #64]	; (8002b54 <enc_packet_send+0x84>)
 8002b14:	4910      	ldr	r1, [pc, #64]	; (8002b58 <enc_packet_send+0x88>)
 8002b16:	f7ff febc 	bl	8002892 <enc_reg_set>
    enc_spi_xfer_buffer(ENC_SPI_WRITE_MEM, buffer, len, 0);
 8002b1a:	1c2a      	adds	r2, r5, #0
 8002b1c:	1c31      	adds	r1, r6, #0
 8002b1e:	2300      	movs	r3, #0
 8002b20:	207a      	movs	r0, #122	; 0x7a
 8002b22:	f000 f8bf 	bl	8002ca4 <enc_spi_xfer_buffer>

    /*
     * Set the packet start and end.
     */
    enc_reg_set(E_TX_STA, TX_BUFFER_START);
 8002b26:	2081      	movs	r0, #129	; 0x81
 8002b28:	21d0      	movs	r1, #208	; 0xd0
 8002b2a:	0080      	lsls	r0, r0, #2
 8002b2c:	0149      	lsls	r1, r1, #5
 8002b2e:	f7ff feb0 	bl	8002892 <enc_reg_set>
    enc_reg_set(E_TX_END, TX_BUFFER_START + 1 + len);
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <enc_packet_send+0x88>)
 8002b34:	4809      	ldr	r0, [pc, #36]	; (8002b5c <enc_packet_send+0x8c>)
 8002b36:	18e9      	adds	r1, r5, r3
 8002b38:	f7ff feab 	bl	8002892 <enc_reg_set>

    /*
     * Request transmission.
     */
    enc_reg_bitop(ENC_SPI_SET_BF, E_CON1, E_CON1_TX_REQUEST);
 8002b3c:	2080      	movs	r0, #128	; 0x80
 8002b3e:	219f      	movs	r1, #159	; 0x9f
 8002b40:	2208      	movs	r2, #8
 8002b42:	f7ff fe75 	bl	8002830 <enc_reg_bitop>
    DEBUG_SET_LED0(0);
 8002b46:	4a02      	ldr	r2, [pc, #8]	; (8002b50 <enc_packet_send+0x80>)
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	03db      	lsls	r3, r3, #15
 8002b4c:	6193      	str	r3, [r2, #24]
}
 8002b4e:	bd70      	pop	{r4, r5, r6, pc}
 8002b50:	48000800 	.word	0x48000800
 8002b54:	00000202 	.word	0x00000202
 8002b58:	00001a01 	.word	0x00001a01
 8002b5c:	00000206 	.word	0x00000206

08002b60 <enc_packet_receive>:
#include "debug.h"

static enc_rx_packet_header_t rx_header;

int
enc_packet_receive(enc_buf_value_t *buffer, enc_buf_len_t maxlen) {
 8002b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b62:	b083      	sub	sp, #12
 8002b64:	9001      	str	r0, [sp, #4]
    /* Check if there are received packets; see also Errata #6 */
    if (enc_reg_get(E_PKT_CNT) == 0)
 8002b66:	2039      	movs	r0, #57	; 0x39
#include "debug.h"

static enc_rx_packet_header_t rx_header;

int
enc_packet_receive(enc_buf_value_t *buffer, enc_buf_len_t maxlen) {
 8002b68:	1c0f      	adds	r7, r1, #0
    /* Check if there are received packets; see also Errata #6 */
    if (enc_reg_get(E_PKT_CNT) == 0)
 8002b6a:	f7ff feee 	bl	800294a <enc_reg_get>
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	d101      	bne.n	8002b76 <enc_packet_receive+0x16>
 8002b72:	2400      	movs	r4, #0
 8002b74:	e034      	b.n	8002be0 <enc_packet_receive+0x80>
     * buffer.
     */

    DEBUG_SET_LED2(1);
    /* Read the 6-byte packet header */
    enc_spi_xfer_buffer(ENC_SPI_READ_MEM,
 8002b76:	4e1c      	ldr	r6, [pc, #112]	; (8002be8 <enc_packet_receive+0x88>)
     * We assume that the buffer transfer read pointer E_RD_PTR
     * is already pointing to the next packet in the circular
     * buffer.
     */

    DEBUG_SET_LED2(1);
 8002b78:	4c1c      	ldr	r4, [pc, #112]	; (8002bec <enc_packet_receive+0x8c>)
 8002b7a:	2580      	movs	r5, #128	; 0x80
 8002b7c:	006d      	lsls	r5, r5, #1
 8002b7e:	61a5      	str	r5, [r4, #24]
    /* Read the 6-byte packet header */
    enc_spi_xfer_buffer(ENC_SPI_READ_MEM,
 8002b80:	1c31      	adds	r1, r6, #0
 8002b82:	2206      	movs	r2, #6
 8002b84:	2301      	movs	r3, #1
 8002b86:	203a      	movs	r0, #58	; 0x3a
 8002b88:	f000 f88c 	bl	8002ca4 <enc_spi_xfer_buffer>
                        (unsigned char *)&rx_header, sizeof(rx_header), 1);

    register int plen = rx_header.rx_length;
    register int next = rx_header.rx_next;
    DEBUG_SET_LED2(0);
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	045b      	lsls	r3, r3, #17
    DEBUG_SET_LED2(1);
    /* Read the 6-byte packet header */
    enc_spi_xfer_buffer(ENC_SPI_READ_MEM,
                        (unsigned char *)&rx_header, sizeof(rx_header), 1);

    register int plen = rx_header.rx_length;
 8002b90:	8872      	ldrh	r2, [r6, #2]
    register int next = rx_header.rx_next;
 8002b92:	8836      	ldrh	r6, [r6, #0]
    DEBUG_SET_LED2(0);
 8002b94:	61a3      	str	r3, [r4, #24]

    /* Read (the beginning of) the packet */
    DEBUG_SET_LED4(1);
 8002b96:	2390      	movs	r3, #144	; 0x90
 8002b98:	05db      	lsls	r3, r3, #23
 8002b9a:	619d      	str	r5, [r3, #24]
 8002b9c:	1c3c      	adds	r4, r7, #0
 8002b9e:	4297      	cmp	r7, r2
 8002ba0:	dd00      	ble.n	8002ba4 <enc_packet_receive+0x44>
 8002ba2:	1c14      	adds	r4, r2, #0
    if (plen > maxlen)
        plen = maxlen;
    enc_spi_xfer_buffer(ENC_SPI_READ_MEM, buffer, plen, 1);
 8002ba4:	b222      	sxth	r2, r4
 8002ba6:	203a      	movs	r0, #58	; 0x3a
 8002ba8:	9901      	ldr	r1, [sp, #4]
 8002baa:	2301      	movs	r3, #1
 8002bac:	f000 f87a 	bl	8002ca4 <enc_spi_xfer_buffer>
    DEBUG_SET_LED4(0);
 8002bb0:	2390      	movs	r3, #144	; 0x90
 8002bb2:	2280      	movs	r2, #128	; 0x80
 8002bb4:	05db      	lsls	r3, r3, #23
 8002bb6:	0452      	lsls	r2, r2, #17
     *
     * NB.  It might be possible to avoid this call if len ==
     *      rx_header.rx_length, but that would need to be tested, as
     *      it is not clear from the data sheet.
     */
    enc_reg_set(E_RD_PTR, next);
 8002bb8:	2080      	movs	r0, #128	; 0x80
    /* Read (the beginning of) the packet */
    DEBUG_SET_LED4(1);
    if (plen > maxlen)
        plen = maxlen;
    enc_spi_xfer_buffer(ENC_SPI_READ_MEM, buffer, plen, 1);
    DEBUG_SET_LED4(0);
 8002bba:	619a      	str	r2, [r3, #24]
     *
     * NB.  It might be possible to avoid this call if len ==
     *      rx_header.rx_length, but that would need to be tested, as
     *      it is not clear from the data sheet.
     */
    enc_reg_set(E_RD_PTR, next);
 8002bbc:	0080      	lsls	r0, r0, #2
 8002bbe:	1c31      	adds	r1, r6, #0
 8002bc0:	f7ff fe67 	bl	8002892 <enc_reg_set>

    /*
     * Free the ENC28J60 buffer memory for the next packets.
     * See Errata #14.
     */
    enc_reg_set(E_RX_RD_PTR, next == RX_BUFFER_START? RX_BUFFER_END: next-1);
 8002bc4:	2e00      	cmp	r6, #0
 8002bc6:	d101      	bne.n	8002bcc <enc_packet_receive+0x6c>
 8002bc8:	4909      	ldr	r1, [pc, #36]	; (8002bf0 <enc_packet_receive+0x90>)
 8002bca:	e000      	b.n	8002bce <enc_packet_receive+0x6e>
 8002bcc:	1e71      	subs	r1, r6, #1
 8002bce:	2083      	movs	r0, #131	; 0x83
 8002bd0:	0080      	lsls	r0, r0, #2
 8002bd2:	f7ff fe5e 	bl	8002892 <enc_reg_set>

    /* Decrement the packet count */
    enc_reg_bitop(ENC_SPI_SET_BF, E_CON2, E_CON2_PKT_DEC);
 8002bd6:	2080      	movs	r0, #128	; 0x80
 8002bd8:	219e      	movs	r1, #158	; 0x9e
 8002bda:	2240      	movs	r2, #64	; 0x40
 8002bdc:	f7ff fe28 	bl	8002830 <enc_reg_bitop>

    return plen;
}
 8002be0:	b003      	add	sp, #12
 8002be2:	1c20      	adds	r0, r4, #0
 8002be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	20000fb0 	.word	0x20000fb0
 8002bec:	48000800 	.word	0x48000800
 8002bf0:	000019ff 	.word	0x000019ff

08002bf4 <enc_spi_xfer>:
 * and returns the byte received during that byte.
 * @returns the second or third byte read, depending on third_byte
 */

int
enc_spi_xfer(enc_spi_op_t cmd, enc_reg_value_t value, int third_byte) {
 8002bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int word;
    int dummy __attribute__((unused));

    DEBUG_SET_LED0(0);
 8002bf6:	4c27      	ldr	r4, [pc, #156]	; (8002c94 <enc_spi_xfer+0xa0>)
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	03db      	lsls	r3, r3, #15
 8002bfc:	61a3      	str	r3, [r4, #24]
    DEBUG_SET_LED2(1);
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	e003      	b.n	8002c0c <enc_spi_xfer+0x18>
    /* Read any pertaining data from the FIFO and throw it away */
    while ((ENC_SPI->SR & SPI_SR_FRLVL) != 0) {
        dummy = ENC_SPI->DR;
 8002c04:	899b      	ldrh	r3, [r3, #12]
        DEBUG_SET_LED1(0);
 8002c06:	4c23      	ldr	r4, [pc, #140]	; (8002c94 <enc_spi_xfer+0xa0>)
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	041b      	lsls	r3, r3, #16
 8002c0c:	61a3      	str	r3, [r4, #24]
    int dummy __attribute__((unused));

    DEBUG_SET_LED0(0);
    DEBUG_SET_LED2(1);
    /* Read any pertaining data from the FIFO and throw it away */
    while ((ENC_SPI->SR & SPI_SR_FRLVL) != 0) {
 8002c0e:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <enc_spi_xfer+0xa4>)
 8002c10:	24c0      	movs	r4, #192	; 0xc0
 8002c12:	891d      	ldrh	r5, [r3, #8]
 8002c14:	00e4      	lsls	r4, r4, #3
 8002c16:	402c      	ands	r4, r5
 8002c18:	d1f4      	bne.n	8002c04 <enc_spi_xfer+0x10>
        dummy = ENC_SPI->DR;
        DEBUG_SET_LED1(0);
    }
    DEBUG_SET_LED2(0);
 8002c1a:	4e1e      	ldr	r6, [pc, #120]	; (8002c94 <enc_spi_xfer+0xa0>)
 8002c1c:	2580      	movs	r5, #128	; 0x80
 8002c1e:	046d      	lsls	r5, r5, #17
 8002c20:	61b5      	str	r5, [r6, #24]

    /* Enable SPI, lowering the NSS */
    ENC_SPI->CR1 |= SPI_CR1_SPE;
 8002c22:	881f      	ldrh	r7, [r3, #0]
 8002c24:	2540      	movs	r5, #64	; 0x40
 8002c26:	433d      	orrs	r5, r7
 8002c28:	801d      	strh	r5, [r3, #0]

    DEBUG_SET_LED1(0);
    /* The FIFO can hold three bytes, so write right away */
    ENC_SPI->DR = value << 8 | cmd;
 8002c2a:	0209      	lsls	r1, r1, #8
    DEBUG_SET_LED2(0);

    /* Enable SPI, lowering the NSS */
    ENC_SPI->CR1 |= SPI_CR1_SPE;

    DEBUG_SET_LED1(0);
 8002c2c:	2580      	movs	r5, #128	; 0x80
 8002c2e:	042d      	lsls	r5, r5, #16
    /* The FIFO can hold three bytes, so write right away */
    ENC_SPI->DR = value << 8 | cmd;
 8002c30:	4308      	orrs	r0, r1
    DEBUG_SET_LED2(0);

    /* Enable SPI, lowering the NSS */
    ENC_SPI->CR1 |= SPI_CR1_SPE;

    DEBUG_SET_LED1(0);
 8002c32:	61b5      	str	r5, [r6, #24]
    /* The FIFO can hold three bytes, so write right away */
    ENC_SPI->DR = value << 8 | cmd;
 8002c34:	8198      	strh	r0, [r3, #12]
    if (third_byte) {
 8002c36:	2a00      	cmp	r2, #0
 8002c38:	d001      	beq.n	8002c3e <enc_spi_xfer+0x4a>
        *DR8 = 0x00;   /* Dummy write for reading in the third byte */
 8002c3a:	330c      	adds	r3, #12
 8002c3c:	701c      	strb	r4, [r3, #0]
    }
    DEBUG_SET_LED1(1);
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <enc_spi_xfer+0xa0>)
 8002c40:	2180      	movs	r1, #128	; 0x80
 8002c42:	6199      	str	r1, [r3, #24]

    /* See RM0091 page 648 */
    /* Wait until the transmission is done */
    while ((ENC_SPI->SR & SPI_SR_BSY))
 8002c44:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <enc_spi_xfer+0xa4>)
 8002c46:	891b      	ldrh	r3, [r3, #8]
 8002c48:	0618      	lsls	r0, r3, #24
 8002c4a:	d4fb      	bmi.n	8002c44 <enc_spi_xfer+0x50>
        ; // XXX: Add event wait and waking through interrupt

    /* Ensure we have at least 2 bytes in the input FIFO */
    while ((ENC_SPI->SR & SPI_SR_RXNE) == 0)
 8002c4c:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <enc_spi_xfer+0xa4>)
 8002c4e:	8919      	ldrh	r1, [r3, #8]
 8002c50:	07c8      	lsls	r0, r1, #31
 8002c52:	d5fb      	bpl.n	8002c4c <enc_spi_xfer+0x58>
        ; // XXX: Add event wait and waking through interrupt

    /*
     * Read the second received byte.  See RM0091 page 649.
     */
    word = (ENC_SPI->DR >> 8) & 0xff;
 8002c54:	8998      	ldrh	r0, [r3, #12]

    if (third_byte) {
 8002c56:	2a00      	cmp	r2, #0
 8002c58:	d101      	bne.n	8002c5e <enc_spi_xfer+0x6a>
        ; // XXX: Add event wait and waking through interrupt

    /*
     * Read the second received byte.  See RM0091 page 649.
     */
    word = (ENC_SPI->DR >> 8) & 0xff;
 8002c5a:	0a00      	lsrs	r0, r0, #8
 8002c5c:	e009      	b.n	8002c72 <enc_spi_xfer+0x7e>

    if (third_byte) {
        /* Ensure the third byte has been received. */
        while ((ENC_SPI->SR & SPI_SR_FRLVL) == 0)
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <enc_spi_xfer+0xa4>)
 8002c60:	891a      	ldrh	r2, [r3, #8]
 8002c62:	23c0      	movs	r3, #192	; 0xc0
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	421a      	tst	r2, r3
 8002c68:	d0f9      	beq.n	8002c5e <enc_spi_xfer+0x6a>
            ; // XXX: Add event wait and waking through interrupt

        /* Read the third received byte. */
        word = *DR8;
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <enc_spi_xfer+0xa8>)
 8002c6c:	7818      	ldrb	r0, [r3, #0]
 8002c6e:	e000      	b.n	8002c72 <enc_spi_xfer+0x7e>
    }

    /* Read any pertaining data from the FIFO and throw it away. */
    while ((ENC_SPI->SR & SPI_SR_FRLVL) != 0)
        dummy = ENC_SPI->DR;
 8002c70:	899b      	ldrh	r3, [r3, #12]
        /* Read the third received byte. */
        word = *DR8;
    }

    /* Read any pertaining data from the FIFO and throw it away. */
    while ((ENC_SPI->SR & SPI_SR_FRLVL) != 0)
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <enc_spi_xfer+0xa4>)
 8002c74:	22c0      	movs	r2, #192	; 0xc0
 8002c76:	8919      	ldrh	r1, [r3, #8]
 8002c78:	00d2      	lsls	r2, r2, #3
 8002c7a:	4211      	tst	r1, r2
 8002c7c:	d1f8      	bne.n	8002c70 <enc_spi_xfer+0x7c>
        dummy = ENC_SPI->DR;

    /* Disable SPI, raising the NSS. */
    ENC_SPI->CR1 &= ~SPI_CR1_SPE;
 8002c7e:	8819      	ldrh	r1, [r3, #0]
 8002c80:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <enc_spi_xfer+0xac>)
 8002c82:	400a      	ands	r2, r1
 8002c84:	801a      	strh	r2, [r3, #0]

    DEBUG_SET_LED0(1);
 8002c86:	4a03      	ldr	r2, [pc, #12]	; (8002c94 <enc_spi_xfer+0xa0>)
 8002c88:	2340      	movs	r3, #64	; 0x40
 8002c8a:	6193      	str	r3, [r2, #24]
    DEBUG_SET_LED1(0);
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	041b      	lsls	r3, r3, #16
 8002c90:	6193      	str	r3, [r2, #24]

    return word;
}
 8002c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c94:	48000800 	.word	0x48000800
 8002c98:	40003800 	.word	0x40003800
 8002c9c:	4000380c 	.word	0x4000380c
 8002ca0:	0000ffbf 	.word	0x0000ffbf

08002ca4 <enc_spi_xfer_buffer>:
 *
 * @param len buffer length, must be even
 */
void
enc_spi_xfer_buffer(enc_spi_op_t cmd, enc_buf_value_t *buffer,
                    enc_buf_len_t len, int read) {
 8002ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    register uint16_t word;
    int dummy __attribute__((unused));
    register uint16_t *wp, *rp;
    wp = rp = (uint16_t *)buffer;

    DEBUG_SET_LED0(0);
 8002ca6:	4e3d      	ldr	r6, [pc, #244]	; (8002d9c <enc_spi_xfer_buffer+0xf8>)
 8002ca8:	2480      	movs	r4, #128	; 0x80
 8002caa:	03e4      	lsls	r4, r4, #15
 8002cac:	61b4      	str	r4, [r6, #24]
    DEBUG_SET_LED2(1);
 8002cae:	2480      	movs	r4, #128	; 0x80
 *
 * @param len buffer length, must be even
 */
void
enc_spi_xfer_buffer(enc_spi_op_t cmd, enc_buf_value_t *buffer,
                    enc_buf_len_t len, int read) {
 8002cb0:	b083      	sub	sp, #12
    int dummy __attribute__((unused));
    register uint16_t *wp, *rp;
    wp = rp = (uint16_t *)buffer;

    DEBUG_SET_LED0(0);
    DEBUG_SET_LED2(1);
 8002cb2:	0064      	lsls	r4, r4, #1
 *
 * @param len buffer length, must be even
 */
void
enc_spi_xfer_buffer(enc_spi_op_t cmd, enc_buf_value_t *buffer,
                    enc_buf_len_t len, int read) {
 8002cb4:	9201      	str	r2, [sp, #4]
    register uint16_t word;
    int dummy __attribute__((unused));
    register uint16_t *wp, *rp;
    wp = rp = (uint16_t *)buffer;
 8002cb6:	1c0d      	adds	r5, r1, #0

    DEBUG_SET_LED0(0);
    DEBUG_SET_LED2(1);
 8002cb8:	61b4      	str	r4, [r6, #24]
    /* Read any pertaining data from the FIFO and throw it away. */
    while ((ENC_SPI->SR & SPI_SR_FRLVL) != 0)
 8002cba:	e000      	b.n	8002cbe <enc_spi_xfer_buffer+0x1a>
        dummy = ENC_SPI->DR;
 8002cbc:	89a4      	ldrh	r4, [r4, #12]
    wp = rp = (uint16_t *)buffer;

    DEBUG_SET_LED0(0);
    DEBUG_SET_LED2(1);
    /* Read any pertaining data from the FIFO and throw it away. */
    while ((ENC_SPI->SR & SPI_SR_FRLVL) != 0)
 8002cbe:	4c38      	ldr	r4, [pc, #224]	; (8002da0 <enc_spi_xfer_buffer+0xfc>)
 8002cc0:	26c0      	movs	r6, #192	; 0xc0
 8002cc2:	8927      	ldrh	r7, [r4, #8]
 8002cc4:	00f6      	lsls	r6, r6, #3
 8002cc6:	4237      	tst	r7, r6
 8002cc8:	d1f8      	bne.n	8002cbc <enc_spi_xfer_buffer+0x18>
        dummy = ENC_SPI->DR;
    DEBUG_SET_LED2(0);
 8002cca:	4f34      	ldr	r7, [pc, #208]	; (8002d9c <enc_spi_xfer_buffer+0xf8>)
 8002ccc:	2680      	movs	r6, #128	; 0x80
 8002cce:	0476      	lsls	r6, r6, #17
 8002cd0:	61be      	str	r6, [r7, #24]

    /* Enable SPI, lowering the NSS. */
    ENC_SPI->CR1 |= SPI_CR1_SPE;
 8002cd2:	8822      	ldrh	r2, [r4, #0]
 8002cd4:	2640      	movs	r6, #64	; 0x40
 8002cd6:	4316      	orrs	r6, r2
 8002cd8:	8026      	strh	r6, [r4, #0]

    /* Send the command byte. */
    *DR8 = cmd;
 8002cda:	4e32      	ldr	r6, [pc, #200]	; (8002da4 <enc_spi_xfer_buffer+0x100>)
 8002cdc:	7030      	strb	r0, [r6, #0]

    /* Write the first word to the FIFO. */
    ENC_SPI->DR = *wp++;
 8002cde:	8808      	ldrh	r0, [r1, #0]
 8002ce0:	81a0      	strh	r0, [r4, #12]

    DEBUG_SET_LED1(0);
 8002ce2:	2080      	movs	r0, #128	; 0x80
 8002ce4:	0400      	lsls	r0, r0, #16
 8002ce6:	61b8      	str	r0, [r7, #24]
    /* Wait for the received byte corresponding to the command. */
    while ((ENC_SPI->SR & SPI_SR_FRLVL) == 0)
 8002ce8:	482d      	ldr	r0, [pc, #180]	; (8002da0 <enc_spi_xfer_buffer+0xfc>)
 8002cea:	8904      	ldrh	r4, [r0, #8]
 8002cec:	20c0      	movs	r0, #192	; 0xc0
 8002cee:	00c0      	lsls	r0, r0, #3
 8002cf0:	4204      	tst	r4, r0
 8002cf2:	d0f9      	beq.n	8002ce8 <enc_spi_xfer_buffer+0x44>
        ; /* XXX.  Let other threads run. */
    dummy = *DR8; /* Throw the first received byte away. */
 8002cf4:	482b      	ldr	r0, [pc, #172]	; (8002da4 <enc_spi_xfer_buffer+0x100>)
    DEBUG_SET_LED1(1);
 8002cf6:	2480      	movs	r4, #128	; 0x80

    DEBUG_SET_LED1(0);
    /* Wait for the received byte corresponding to the command. */
    while ((ENC_SPI->SR & SPI_SR_FRLVL) == 0)
        ; /* XXX.  Let other threads run. */
    dummy = *DR8; /* Throw the first received byte away. */
 8002cf8:	7800      	ldrb	r0, [r0, #0]
    DEBUG_SET_LED1(1);
 8002cfa:	4828      	ldr	r0, [pc, #160]	; (8002d9c <enc_spi_xfer_buffer+0xf8>)

    /* Send the command byte. */
    *DR8 = cmd;

    /* Write the first word to the FIFO. */
    ENC_SPI->DR = *wp++;
 8002cfc:	3102      	adds	r1, #2
    DEBUG_SET_LED1(0);
    /* Wait for the received byte corresponding to the command. */
    while ((ENC_SPI->SR & SPI_SR_FRLVL) == 0)
        ; /* XXX.  Let other threads run. */
    dummy = *DR8; /* Throw the first received byte away. */
    DEBUG_SET_LED1(1);
 8002cfe:	6184      	str	r4, [r0, #24]
    DEBUG_SET_LED0(1);
 8002d00:	2440      	movs	r4, #64	; 0x40
 8002d02:	6184      	str	r4, [r0, #24]
     *
     * The strategy is that we keep the write FIFO
     * all the time at least two bytes long while
     * trying to keep the read FIFO empty.
     */
    for (len -=2; len > 0; len -= 2) {
 8002d04:	9a01      	ldr	r2, [sp, #4]
 8002d06:	e01c      	b.n	8002d42 <enc_spi_xfer_buffer+0x9e>
        /* Ensure we can write to the output FIFO;
           though this is always true on the first round. */
        DEBUG_SET_LED1(0);
 8002d08:	2080      	movs	r0, #128	; 0x80
 8002d0a:	4c24      	ldr	r4, [pc, #144]	; (8002d9c <enc_spi_xfer_buffer+0xf8>)
 8002d0c:	0400      	lsls	r0, r0, #16
 8002d0e:	61a0      	str	r0, [r4, #24]
        while (!(ENC_SPI->SR & SPI_SR_TXE))
 8002d10:	4823      	ldr	r0, [pc, #140]	; (8002da0 <enc_spi_xfer_buffer+0xfc>)
 8002d12:	8904      	ldrh	r4, [r0, #8]
 8002d14:	07a6      	lsls	r6, r4, #30
 8002d16:	d5fb      	bpl.n	8002d10 <enc_spi_xfer_buffer+0x6c>
            ; /* XXX.  Let other threads run. */
        DEBUG_SET_LED1(1);
 8002d18:	4c20      	ldr	r4, [pc, #128]	; (8002d9c <enc_spi_xfer_buffer+0xf8>)
 8002d1a:	2680      	movs	r6, #128	; 0x80
 8002d1c:	61a6      	str	r6, [r4, #24]

        ENC_SPI->DR = *wp++;
 8002d1e:	880e      	ldrh	r6, [r1, #0]
 8002d20:	8186      	strh	r6, [r0, #12]

        /* Ensure we have at least 2 bytes in the input FIFO */
        DEBUG_SET_LED1(0);
 8002d22:	2080      	movs	r0, #128	; 0x80
 8002d24:	0400      	lsls	r0, r0, #16
 8002d26:	61a0      	str	r0, [r4, #24]
        while ((ENC_SPI->SR & SPI_SR_RXNE) == 0)
 8002d28:	481d      	ldr	r0, [pc, #116]	; (8002da0 <enc_spi_xfer_buffer+0xfc>)
 8002d2a:	8904      	ldrh	r4, [r0, #8]
 8002d2c:	07e6      	lsls	r6, r4, #31
 8002d2e:	d5fb      	bpl.n	8002d28 <enc_spi_xfer_buffer+0x84>
            ; /* XXX.  Let other threads run. */
        DEBUG_SET_LED1(1);
 8002d30:	4c1a      	ldr	r4, [pc, #104]	; (8002d9c <enc_spi_xfer_buffer+0xf8>)
 8002d32:	2680      	movs	r6, #128	; 0x80
 8002d34:	61a6      	str	r6, [r4, #24]

        word = ENC_SPI->DR;
 8002d36:	8980      	ldrh	r0, [r0, #12]
        if (read)
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <enc_spi_xfer_buffer+0x9c>
            *rp++ = word;
 8002d3c:	8028      	strh	r0, [r5, #0]
 8002d3e:	3502      	adds	r5, #2
        DEBUG_SET_LED1(0);
        while (!(ENC_SPI->SR & SPI_SR_TXE))
            ; /* XXX.  Let other threads run. */
        DEBUG_SET_LED1(1);

        ENC_SPI->DR = *wp++;
 8002d40:	3102      	adds	r1, #2
 * when calling this function.
 *
 * @param len buffer length, must be even
 */
void
enc_spi_xfer_buffer(enc_spi_op_t cmd, enc_buf_value_t *buffer,
 8002d42:	3a02      	subs	r2, #2
 8002d44:	b292      	uxth	r2, r2
     *
     * The strategy is that we keep the write FIFO
     * all the time at least two bytes long while
     * trying to keep the read FIFO empty.
     */
    for (len -=2; len > 0; len -= 2) {
 8002d46:	b210      	sxth	r0, r2
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	dcdd      	bgt.n	8002d08 <enc_spi_xfer_buffer+0x64>
            *rp++ = word;
    }

    /* See RM0091 page 648 */
    /* Wait until the transmission is done */
    DEBUG_SET_LED2(1);
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	4913      	ldr	r1, [pc, #76]	; (8002d9c <enc_spi_xfer_buffer+0xf8>)
 8002d50:	0052      	lsls	r2, r2, #1
 8002d52:	618a      	str	r2, [r1, #24]
    while ((ENC_SPI->SR & SPI_SR_FTLVL) != 0)
 8002d54:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <enc_spi_xfer_buffer+0xfc>)
 8002d56:	8911      	ldrh	r1, [r2, #8]
 8002d58:	22c0      	movs	r2, #192	; 0xc0
 8002d5a:	0152      	lsls	r2, r2, #5
 8002d5c:	4211      	tst	r1, r2
 8002d5e:	d1f9      	bne.n	8002d54 <enc_spi_xfer_buffer+0xb0>
        ; // XXX

    while ((ENC_SPI->SR & SPI_SR_BSY))
 8002d60:	4a0f      	ldr	r2, [pc, #60]	; (8002da0 <enc_spi_xfer_buffer+0xfc>)
 8002d62:	8912      	ldrh	r2, [r2, #8]
 8002d64:	0610      	lsls	r0, r2, #24
 8002d66:	d4fb      	bmi.n	8002d60 <enc_spi_xfer_buffer+0xbc>
        ; // XXX

    /* Read the last word */
    /* Ensure we have at least 2 bytes in the input FIFO */
    while ((ENC_SPI->SR & SPI_SR_RXNE) == 0)
 8002d68:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <enc_spi_xfer_buffer+0xfc>)
 8002d6a:	8911      	ldrh	r1, [r2, #8]
 8002d6c:	07ce      	lsls	r6, r1, #31
 8002d6e:	d5fb      	bpl.n	8002d68 <enc_spi_xfer_buffer+0xc4>
        ; // XXX

    word = ENC_SPI->DR;
 8002d70:	8992      	ldrh	r2, [r2, #12]
    if (read)
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <enc_spi_xfer_buffer+0xd8>
        *rp++ = word;
 8002d76:	802a      	strh	r2, [r5, #0]
 8002d78:	e000      	b.n	8002d7c <enc_spi_xfer_buffer+0xd8>

    /* Read any pertaining data from the FIFO and throw it away. */
    while ((ENC_SPI->SR & SPI_SR_FRLVL) != 0)
        dummy = ENC_SPI->DR;
 8002d7a:	899b      	ldrh	r3, [r3, #12]
    word = ENC_SPI->DR;
    if (read)
        *rp++ = word;

    /* Read any pertaining data from the FIFO and throw it away. */
    while ((ENC_SPI->SR & SPI_SR_FRLVL) != 0)
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <enc_spi_xfer_buffer+0xfc>)
 8002d7e:	22c0      	movs	r2, #192	; 0xc0
 8002d80:	8919      	ldrh	r1, [r3, #8]
 8002d82:	00d2      	lsls	r2, r2, #3
 8002d84:	4211      	tst	r1, r2
 8002d86:	d1f8      	bne.n	8002d7a <enc_spi_xfer_buffer+0xd6>
        dummy = ENC_SPI->DR;
    DEBUG_SET_LED2(0);
 8002d88:	4904      	ldr	r1, [pc, #16]	; (8002d9c <enc_spi_xfer_buffer+0xf8>)
 8002d8a:	2280      	movs	r2, #128	; 0x80
 8002d8c:	0452      	lsls	r2, r2, #17
 8002d8e:	618a      	str	r2, [r1, #24]

    /* Disable SPI, lowering NSS */
    ENC_SPI->CR1 &= ~SPI_CR1_SPE;
 8002d90:	8819      	ldrh	r1, [r3, #0]
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <enc_spi_xfer_buffer+0x104>)
}
 8002d94:	b003      	add	sp, #12
    while ((ENC_SPI->SR & SPI_SR_FRLVL) != 0)
        dummy = ENC_SPI->DR;
    DEBUG_SET_LED2(0);

    /* Disable SPI, lowering NSS */
    ENC_SPI->CR1 &= ~SPI_CR1_SPE;
 8002d96:	400a      	ands	r2, r1
 8002d98:	801a      	strh	r2, [r3, #0]
}
 8002d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d9c:	48000800 	.word	0x48000800
 8002da0:	40003800 	.word	0x40003800
 8002da4:	4000380c 	.word	0x4000380c
 8002da8:	0000ffbf 	.word	0x0000ffbf

08002dac <uip_add32>:
#endif /* UIP_LOGGING == 1 */

#if ! UIP_ARCH_ADD32
void
uip_add32(uint8_t *op32, uint16_t op16)
{
 8002dac:	b570      	push	{r4, r5, r6, lr}
  uip_acc32[3] = op32[3] + (op16 & 0xff);
 8002dae:	78c2      	ldrb	r2, [r0, #3]
 8002db0:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <uip_add32+0x58>)
 8002db2:	188a      	adds	r2, r1, r2
 8002db4:	70da      	strb	r2, [r3, #3]
  uip_acc32[2] = op32[2] + (op16 >> 8);
 8002db6:	7886      	ldrb	r6, [r0, #2]
 8002db8:	0a0d      	lsrs	r5, r1, #8
 8002dba:	19ae      	adds	r6, r5, r6
 8002dbc:	b2f6      	uxtb	r6, r6
 8002dbe:	709e      	strb	r6, [r3, #2]
  uip_acc32[1] = op32[1];
 8002dc0:	7844      	ldrb	r4, [r0, #1]
 8002dc2:	705c      	strb	r4, [r3, #1]
  uip_acc32[0] = op32[0];
 8002dc4:	7802      	ldrb	r2, [r0, #0]
 8002dc6:	701a      	strb	r2, [r3, #0]
  
  if(uip_acc32[2] < (op16 >> 8)) {
 8002dc8:	42ae      	cmp	r6, r5
 8002dca:	d206      	bcs.n	8002dda <uip_add32+0x2e>
    ++uip_acc32[1];
 8002dcc:	1c60      	adds	r0, r4, #1
 8002dce:	b2c0      	uxtb	r0, r0
 8002dd0:	7058      	strb	r0, [r3, #1]
    if(uip_acc32[1] == 0) {
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d101      	bne.n	8002dda <uip_add32+0x2e>
      ++uip_acc32[0];
 8002dd6:	3201      	adds	r2, #1
 8002dd8:	701a      	strb	r2, [r3, #0]
    }
  }
  
  
  if(uip_acc32[3] < (op16 & 0xff)) {
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <uip_add32+0x58>)
 8002ddc:	b2c9      	uxtb	r1, r1
 8002dde:	78da      	ldrb	r2, [r3, #3]
 8002de0:	428a      	cmp	r2, r1
 8002de2:	da0e      	bge.n	8002e02 <uip_add32+0x56>
    ++uip_acc32[2];
 8002de4:	789a      	ldrb	r2, [r3, #2]
 8002de6:	3201      	adds	r2, #1
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	709a      	strb	r2, [r3, #2]
    if(uip_acc32[2] == 0) {
 8002dec:	2a00      	cmp	r2, #0
 8002dee:	d108      	bne.n	8002e02 <uip_add32+0x56>
      ++uip_acc32[1];
 8002df0:	785a      	ldrb	r2, [r3, #1]
 8002df2:	3201      	adds	r2, #1
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	705a      	strb	r2, [r3, #1]
      if(uip_acc32[1] == 0) {
 8002df8:	2a00      	cmp	r2, #0
 8002dfa:	d102      	bne.n	8002e02 <uip_add32+0x56>
	++uip_acc32[0];
 8002dfc:	781a      	ldrb	r2, [r3, #0]
 8002dfe:	3201      	adds	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
      }
    }
  }
}
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
 8002e04:	20001578 	.word	0x20001578

08002e08 <chksum>:

#if ! UIP_ARCH_CHKSUM
/*---------------------------------------------------------------------------*/
static uint16_t
chksum(uint16_t sum, const uint8_t *data, uint16_t len)
{
 8002e08:	b510      	push	{r4, lr}
  uint16_t t;
  const uint8_t *dataptr;
  const uint8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
 8002e0a:	3a01      	subs	r2, #1
 8002e0c:	188a      	adds	r2, r1, r2
  
  while(dataptr < last_byte) {	/* At least two more bytes */
 8002e0e:	e00b      	b.n	8002e28 <chksum+0x20>
    t = (dataptr[0] << 8) + dataptr[1];
 8002e10:	780b      	ldrb	r3, [r1, #0]
 8002e12:	784c      	ldrb	r4, [r1, #1]
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	191b      	adds	r3, r3, r4
 8002e18:	b29b      	uxth	r3, r3
    sum += t;
 8002e1a:	18c0      	adds	r0, r0, r3
 8002e1c:	b280      	uxth	r0, r0
    if(sum < t) {
 8002e1e:	4298      	cmp	r0, r3
 8002e20:	d201      	bcs.n	8002e26 <chksum+0x1e>
      sum++;		/* carry */
 8002e22:	3001      	adds	r0, #1
 8002e24:	b280      	uxth	r0, r0
    }
    dataptr += 2;
 8002e26:	3102      	adds	r1, #2
  const uint8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
  
  while(dataptr < last_byte) {	/* At least two more bytes */
 8002e28:	4291      	cmp	r1, r2
 8002e2a:	d3f1      	bcc.n	8002e10 <chksum+0x8>
      sum++;		/* carry */
    }
    dataptr += 2;
  }
  
  if(dataptr == last_byte) {
 8002e2c:	4291      	cmp	r1, r2
 8002e2e:	d107      	bne.n	8002e40 <chksum+0x38>
    t = (dataptr[0] << 8) + 0;
 8002e30:	780b      	ldrb	r3, [r1, #0]
 8002e32:	021b      	lsls	r3, r3, #8
    sum += t;
 8002e34:	1818      	adds	r0, r3, r0
 8002e36:	b280      	uxth	r0, r0
    if(sum < t) {
 8002e38:	4298      	cmp	r0, r3
 8002e3a:	d201      	bcs.n	8002e40 <chksum+0x38>
      sum++;		/* carry */
 8002e3c:	3001      	adds	r0, #1
 8002e3e:	b280      	uxth	r0, r0
    }
  }

  /* Return sum in host byte order. */
  return sum;
}
 8002e40:	bd10      	pop	{r4, pc}
	...

08002e44 <uip_init>:
#endif /* UIP_UDP_CHECKSUMS */
#endif /* UIP_ARCH_CHKSUM */
/*---------------------------------------------------------------------------*/
void
uip_init(void)
{
 8002e44:	b500      	push	{lr}
 8002e46:	2300      	movs	r3, #0
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 8002e48:	e005      	b.n	8002e56 <uip_init+0x12>
    uip_listenports[c] = 0;
 8002e4a:	4a0f      	ldr	r2, [pc, #60]	; (8002e88 <uip_init+0x44>)
 8002e4c:	0059      	lsls	r1, r3, #1
 8002e4e:	2000      	movs	r0, #0
 8002e50:	3301      	adds	r3, #1
 8002e52:	5288      	strh	r0, [r1, r2]
 8002e54:	b2db      	uxtb	r3, r3
#endif /* UIP_ARCH_CHKSUM */
/*---------------------------------------------------------------------------*/
void
uip_init(void)
{
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 8002e56:	2b13      	cmp	r3, #19
 8002e58:	d9f7      	bls.n	8002e4a <uip_init+0x6>
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <uip_init+0x48>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	765a      	strb	r2, [r3, #25]
  }
  for(c = 0; c < UIP_CONNS; ++c) {
    uip_conns[c].tcpstateflags = UIP_CLOSED;
  }
#if UIP_ACTIVE_OPEN || UIP_UDP
  lastport = 1024;
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	4a0b      	ldr	r2, [pc, #44]	; (8002e90 <uip_init+0x4c>)
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	8013      	strh	r3, [r2, #0]
 8002e68:	2300      	movs	r3, #0
#endif /* UIP_ACTIVE_OPEN || UIP_UDP */

#if UIP_UDP
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8002e6a:	e008      	b.n	8002e7e <uip_init+0x3a>
    uip_udp_conns[c].lport = 0;
 8002e6c:	009a      	lsls	r2, r3, #2
 8002e6e:	18d2      	adds	r2, r2, r3
 8002e70:	4908      	ldr	r1, [pc, #32]	; (8002e94 <uip_init+0x50>)
 8002e72:	0092      	lsls	r2, r2, #2
 8002e74:	1852      	adds	r2, r2, r1
 8002e76:	3301      	adds	r3, #1
 8002e78:	2100      	movs	r1, #0
 8002e7a:	8091      	strh	r1, [r2, #4]
 8002e7c:	b2db      	uxtb	r3, r3
#if UIP_ACTIVE_OPEN || UIP_UDP
  lastport = 1024;
#endif /* UIP_ACTIVE_OPEN || UIP_UDP */

#if UIP_UDP
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8002e7e:	2b09      	cmp	r3, #9
 8002e80:	d9f4      	bls.n	8002e6c <uip_init+0x28>
 8002e82:	4a05      	ldr	r2, [pc, #20]	; (8002e98 <uip_init+0x54>)
 8002e84:	7013      	strb	r3, [r2, #0]
  /* IPv4 initialization. */
#if UIP_FIXEDADDR == 0
  /*  uip_hostaddr[0] = uip_hostaddr[1] = 0;*/
#endif /* UIP_FIXEDADDR */

}
 8002e86:	bd00      	pop	{pc}
 8002e88:	200017b0 	.word	0x200017b0
 8002e8c:	2000178c 	.word	0x2000178c
 8002e90:	20000fca 	.word	0x20000fca
 8002e94:	200017e8 	.word	0x200017e8
 8002e98:	20000fcc 	.word	0x20000fcc

08002e9c <uip_unlisten>:
}
#endif /* UIP_UDP */
/*---------------------------------------------------------------------------*/
void
uip_unlisten(uint16_t port)
{
 8002e9c:	b530      	push	{r4, r5, lr}
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	e00c      	b.n	8002ebc <uip_unlisten+0x20>
    if(uip_listenports[c] == port) {
 8002ea2:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <uip_unlisten+0x2c>)
 8002ea4:	0059      	lsls	r1, r3, #1
 8002ea6:	5a8d      	ldrh	r5, [r1, r2]
 8002ea8:	1c5c      	adds	r4, r3, #1
 8002eaa:	b2e4      	uxtb	r4, r4
 8002eac:	4285      	cmp	r5, r0
 8002eae:	d104      	bne.n	8002eba <uip_unlisten+0x1e>
 8002eb0:	4806      	ldr	r0, [pc, #24]	; (8002ecc <uip_unlisten+0x30>)
 8002eb2:	7003      	strb	r3, [r0, #0]
      uip_listenports[c] = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	528b      	strh	r3, [r1, r2]
      return;
 8002eb8:	e004      	b.n	8002ec4 <uip_unlisten+0x28>
 8002eba:	1c23      	adds	r3, r4, #0
#endif /* UIP_UDP */
/*---------------------------------------------------------------------------*/
void
uip_unlisten(uint16_t port)
{
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 8002ebc:	2b13      	cmp	r3, #19
 8002ebe:	d9f0      	bls.n	8002ea2 <uip_unlisten+0x6>
 8002ec0:	4a02      	ldr	r2, [pc, #8]	; (8002ecc <uip_unlisten+0x30>)
 8002ec2:	7013      	strb	r3, [r2, #0]
    if(uip_listenports[c] == port) {
      uip_listenports[c] = 0;
      return;
    }
  }
}
 8002ec4:	bd30      	pop	{r4, r5, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	200017b0 	.word	0x200017b0
 8002ecc:	20000fcc 	.word	0x20000fcc

08002ed0 <uip_add_rcv_nxt>:
}
#endif /* UIP_REASSEMBLY */
/*---------------------------------------------------------------------------*/
static void
uip_add_rcv_nxt(uint16_t n)
{
 8002ed0:	b510      	push	{r4, lr}
  uip_add32(uip_conn->rcv_nxt, n);
 8002ed2:	4c08      	ldr	r4, [pc, #32]	; (8002ef4 <uip_add_rcv_nxt+0x24>)
}
#endif /* UIP_REASSEMBLY */
/*---------------------------------------------------------------------------*/
static void
uip_add_rcv_nxt(uint16_t n)
{
 8002ed4:	1c01      	adds	r1, r0, #0
  uip_add32(uip_conn->rcv_nxt, n);
 8002ed6:	6820      	ldr	r0, [r4, #0]
 8002ed8:	3008      	adds	r0, #8
 8002eda:	f7ff ff67 	bl	8002dac <uip_add32>
  uip_conn->rcv_nxt[0] = uip_acc32[0];
 8002ede:	4a06      	ldr	r2, [pc, #24]	; (8002ef8 <uip_add_rcv_nxt+0x28>)
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	7811      	ldrb	r1, [r2, #0]
 8002ee4:	7219      	strb	r1, [r3, #8]
  uip_conn->rcv_nxt[1] = uip_acc32[1];
 8002ee6:	7851      	ldrb	r1, [r2, #1]
 8002ee8:	7259      	strb	r1, [r3, #9]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
 8002eea:	7891      	ldrb	r1, [r2, #2]
 8002eec:	7299      	strb	r1, [r3, #10]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
 8002eee:	78d2      	ldrb	r2, [r2, #3]
 8002ef0:	72da      	strb	r2, [r3, #11]
}
 8002ef2:	bd10      	pop	{r4, pc}
 8002ef4:	20001788 	.word	0x20001788
 8002ef8:	20001578 	.word	0x20001578

08002efc <uip_htons>:
  return;
}
/*---------------------------------------------------------------------------*/
uint16_t
uip_htons(uint16_t val)
{
 8002efc:	0203      	lsls	r3, r0, #8
 8002efe:	0a00      	lsrs	r0, r0, #8
 8002f00:	4318      	orrs	r0, r3
 8002f02:	b280      	uxth	r0, r0
  return UIP_HTONS(val);
}
 8002f04:	4770      	bx	lr
	...

08002f08 <uip_ipchksum>:
}
/*---------------------------------------------------------------------------*/
#ifndef UIP_ARCH_IPCHKSUM
uint16_t
uip_ipchksum(void)
{
 8002f08:	b510      	push	{r4, lr}
  uint16_t sum;

  sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
 8002f0a:	4909      	ldr	r1, [pc, #36]	; (8002f30 <uip_ipchksum+0x28>)
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	2214      	movs	r2, #20
 8002f10:	f7ff ff7a 	bl	8002e08 <chksum>
 8002f14:	1c04      	adds	r4, r0, #0
  DEBUG_PRINTF("uip_ipchksum: sum 0x%04x\n", sum);
 8002f16:	1c21      	adds	r1, r4, #0
 8002f18:	4806      	ldr	r0, [pc, #24]	; (8002f34 <uip_ipchksum+0x2c>)
 8002f1a:	f003 fd27 	bl	800696c <iprintf>
  return (sum == 0) ? 0xffff : uip_htons(sum);
 8002f1e:	2c00      	cmp	r4, #0
 8002f20:	d101      	bne.n	8002f26 <uip_ipchksum+0x1e>
 8002f22:	4805      	ldr	r0, [pc, #20]	; (8002f38 <uip_ipchksum+0x30>)
 8002f24:	e002      	b.n	8002f2c <uip_ipchksum+0x24>
 8002f26:	1c20      	adds	r0, r4, #0
 8002f28:	f7ff ffe8 	bl	8002efc <uip_htons>
}
 8002f2c:	bd10      	pop	{r4, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	2000158a 	.word	0x2000158a
 8002f34:	0800ae70 	.word	0x0800ae70
 8002f38:	0000ffff 	.word	0x0000ffff

08002f3c <uip_udp_new>:
#endif /* UIP_ACTIVE_OPEN */
/*---------------------------------------------------------------------------*/
#if UIP_UDP
struct uip_udp_conn *
uip_udp_new(const uip_ipaddr_t *ripaddr, uint16_t rport)
{
 8002f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3e:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <uip_udp_new+0xa4>)
 8002f40:	b083      	sub	sp, #12
 8002f42:	881c      	ldrh	r4, [r3, #0]
 8002f44:	1c06      	adds	r6, r0, #0
 8002f46:	9101      	str	r1, [sp, #4]
  register struct uip_udp_conn *conn;
  
  /* Find an unused local port. */
 again:
  ++lastport;
 8002f48:	3401      	adds	r4, #1

  if(lastport >= 32000) {
 8002f4a:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <uip_udp_new+0xa8>)
{
  register struct uip_udp_conn *conn;
  
  /* Find an unused local port. */
 again:
  ++lastport;
 8002f4c:	b2a4      	uxth	r4, r4

  if(lastport >= 32000) {
 8002f4e:	429c      	cmp	r4, r3
 8002f50:	d901      	bls.n	8002f56 <uip_udp_new+0x1a>
 8002f52:	2480      	movs	r4, #128	; 0x80
 8002f54:	0164      	lsls	r4, r4, #5
 8002f56:	2500      	movs	r5, #0
    lastport = 4096;
  }
  
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8002f58:	e00b      	b.n	8002f72 <uip_udp_new+0x36>
    if(uip_udp_conns[c].lport == uip_htons(lastport)) {
 8002f5a:	1c20      	adds	r0, r4, #0
 8002f5c:	f7ff ffce 	bl	8002efc <uip_htons>
 8002f60:	00bb      	lsls	r3, r7, #2
 8002f62:	19df      	adds	r7, r3, r7
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <uip_udp_new+0xac>)
 8002f66:	00bf      	lsls	r7, r7, #2
 8002f68:	18ff      	adds	r7, r7, r3
 8002f6a:	88bb      	ldrh	r3, [r7, #4]
 8002f6c:	3501      	adds	r5, #1
 8002f6e:	4283      	cmp	r3, r0
 8002f70:	d0ea      	beq.n	8002f48 <uip_udp_new+0xc>
 8002f72:	b2ef      	uxtb	r7, r5

  if(lastport >= 32000) {
    lastport = 4096;
  }
  
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8002f74:	2d0a      	cmp	r5, #10
 8002f76:	d1f0      	bne.n	8002f5a <uip_udp_new+0x1e>
 8002f78:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <uip_udp_new+0xa4>)
    }
  }


  conn = 0;
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8002f7a:	2200      	movs	r2, #0

  if(lastport >= 32000) {
    lastport = 4096;
  }
  
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8002f7c:	801c      	strh	r4, [r3, #0]
    }
  }


  conn = 0;
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <uip_udp_new+0xb0>)
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	2300      	movs	r3, #0
 8002f84:	e010      	b.n	8002fa8 <uip_udp_new+0x6c>
    if(uip_udp_conns[c].lport == 0) {
 8002f86:	009d      	lsls	r5, r3, #2
 8002f88:	4917      	ldr	r1, [pc, #92]	; (8002fe8 <uip_udp_new+0xac>)
 8002f8a:	18ed      	adds	r5, r5, r3
 8002f8c:	00ad      	lsls	r5, r5, #2
 8002f8e:	186d      	adds	r5, r5, r1
 8002f90:	88a9      	ldrh	r1, [r5, #4]
    }
  }


  conn = 0;
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	b2d2      	uxtb	r2, r2
    if(uip_udp_conns[c].lport == 0) {
 8002f96:	2900      	cmp	r1, #0
 8002f98:	d105      	bne.n	8002fa6 <uip_udp_new+0x6a>
 8002f9a:	4a14      	ldr	r2, [pc, #80]	; (8002fec <uip_udp_new+0xb0>)
      conn = &uip_udp_conns[c];
 8002f9c:	1c2f      	adds	r7, r5, #0
  }


  conn = 0;
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    if(uip_udp_conns[c].lport == 0) {
 8002f9e:	7013      	strb	r3, [r2, #0]
      conn = &uip_udp_conns[c];
      break;
    }
  }

  if(conn == 0) {
 8002fa0:	2d00      	cmp	r5, #0
 8002fa2:	d107      	bne.n	8002fb4 <uip_udp_new+0x78>
 8002fa4:	e019      	b.n	8002fda <uip_udp_new+0x9e>
 8002fa6:	1c13      	adds	r3, r2, #0
    }
  }


  conn = 0;
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8002fa8:	2b09      	cmp	r3, #9
 8002faa:	d9ec      	bls.n	8002f86 <uip_udp_new+0x4a>
 8002fac:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <uip_udp_new+0xb0>)
 8002fae:	2700      	movs	r7, #0
 8002fb0:	7013      	strb	r3, [r2, #0]
 8002fb2:	e012      	b.n	8002fda <uip_udp_new+0x9e>

  if(conn == 0) {
    return 0;
  }
  
  conn->lport = UIP_HTONS(lastport);
 8002fb4:	0223      	lsls	r3, r4, #8
  conn->rport = rport;
 8002fb6:	466a      	mov	r2, sp

  if(conn == 0) {
    return 0;
  }
  
  conn->lport = UIP_HTONS(lastport);
 8002fb8:	0a24      	lsrs	r4, r4, #8
 8002fba:	431c      	orrs	r4, r3
  conn->rport = rport;
 8002fbc:	1d13      	adds	r3, r2, #4
 8002fbe:	881a      	ldrh	r2, [r3, #0]

  if(conn == 0) {
    return 0;
  }
  
  conn->lport = UIP_HTONS(lastport);
 8002fc0:	80ac      	strh	r4, [r5, #4]
  conn->rport = rport;
 8002fc2:	80ea      	strh	r2, [r5, #6]
  if(ripaddr == NULL) {
 8002fc4:	2e00      	cmp	r6, #0
 8002fc6:	d101      	bne.n	8002fcc <uip_udp_new+0x90>
    memset(&conn->ripaddr, 0, sizeof(uip_ipaddr_t));
 8002fc8:	602e      	str	r6, [r5, #0]
 8002fca:	e004      	b.n	8002fd6 <uip_udp_new+0x9a>
  } else {
    uip_ipaddr_copy(&conn->ripaddr, ripaddr);
 8002fcc:	1c28      	adds	r0, r5, #0
 8002fce:	1c31      	adds	r1, r6, #0
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	f003 ff08 	bl	8006de6 <memcpy>
  }
  conn->ttl = UIP_TTL;
 8002fd6:	2340      	movs	r3, #64	; 0x40
 8002fd8:	722b      	strb	r3, [r5, #8]
  
  return conn;
}
 8002fda:	b003      	add	sp, #12
 8002fdc:	1c38      	adds	r0, r7, #0
 8002fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe0:	20000fca 	.word	0x20000fca
 8002fe4:	00007cff 	.word	0x00007cff
 8002fe8:	200017e8 	.word	0x200017e8
 8002fec:	20000fcc 	.word	0x20000fcc

08002ff0 <uip_tcpchksum>:
}
#endif /* UIP_CONF_IPV6 */
/*---------------------------------------------------------------------------*/
uint16_t
uip_tcpchksum(void)
{
 8002ff0:	b538      	push	{r3, r4, r5, lr}
  uint16_t sum;
  
#if UIP_CONF_IPV6
  upper_layer_len = (((uint16_t)(BUF->len[0]) << 8) + BUF->len[1]);
#else /* UIP_CONF_IPV6 */
  upper_layer_len = (((uint16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
 8002ff2:	4c0d      	ldr	r4, [pc, #52]	; (8003028 <uip_tcpchksum+0x38>)
  /* First sum pseudoheader. */
  
  /* IP protocol and length fields. This addition cannot carry. */
  sum = upper_layer_len + proto;
  /* Sum IP source and destination addresses. */
  sum = chksum(sum, (uint8_t *)&BUF->srcipaddr, 2 * sizeof(uip_ipaddr_t));
 8002ff4:	2208      	movs	r2, #8
  uint16_t sum;
  
#if UIP_CONF_IPV6
  upper_layer_len = (((uint16_t)(BUF->len[0]) << 8) + BUF->len[1]);
#else /* UIP_CONF_IPV6 */
  upper_layer_len = (((uint16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
 8002ff6:	78e5      	ldrb	r5, [r4, #3]
 8002ff8:	78a3      	ldrb	r3, [r4, #2]
 8002ffa:	3d14      	subs	r5, #20
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	18ed      	adds	r5, r5, r3
 8003000:	b2ad      	uxth	r5, r5
#endif /* UIP_CONF_IPV6 */
  
  /* First sum pseudoheader. */
  
  /* IP protocol and length fields. This addition cannot carry. */
  sum = upper_layer_len + proto;
 8003002:	1da8      	adds	r0, r5, #6
  /* Sum IP source and destination addresses. */
  sum = chksum(sum, (uint8_t *)&BUF->srcipaddr, 2 * sizeof(uip_ipaddr_t));
 8003004:	1c21      	adds	r1, r4, #0
 8003006:	310c      	adds	r1, #12
#endif /* UIP_CONF_IPV6 */
  
  /* First sum pseudoheader. */
  
  /* IP protocol and length fields. This addition cannot carry. */
  sum = upper_layer_len + proto;
 8003008:	b280      	uxth	r0, r0
  /* Sum IP source and destination addresses. */
  sum = chksum(sum, (uint8_t *)&BUF->srcipaddr, 2 * sizeof(uip_ipaddr_t));
 800300a:	f7ff fefd 	bl	8002e08 <chksum>

  /* Sum TCP header and data. */
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN],
 800300e:	1c21      	adds	r1, r4, #0
 8003010:	3114      	adds	r1, #20
 8003012:	1c2a      	adds	r2, r5, #0
 8003014:	f7ff fef8 	bl	8002e08 <chksum>
	       upper_layer_len);
    
  return (sum == 0) ? 0xffff : uip_htons(sum);
 8003018:	2800      	cmp	r0, #0
 800301a:	d101      	bne.n	8003020 <uip_tcpchksum+0x30>
 800301c:	4803      	ldr	r0, [pc, #12]	; (800302c <uip_tcpchksum+0x3c>)
 800301e:	e001      	b.n	8003024 <uip_tcpchksum+0x34>
 8003020:	f7ff ff6c 	bl	8002efc <uip_htons>
/*---------------------------------------------------------------------------*/
uint16_t
uip_tcpchksum(void)
{
  return upper_layer_chksum(UIP_PROTO_TCP);
}
 8003024:	bd38      	pop	{r3, r4, r5, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	2000158a 	.word	0x2000158a
 800302c:	0000ffff 	.word	0x0000ffff

08003030 <uip_process>:
  uip_conn->rcv_nxt[3] = uip_acc32[3];
}
/*---------------------------------------------------------------------------*/
void
uip_process(uint8_t flag)
{
 8003030:	b5f0      	push	{r4, r5, r6, r7, lr}
  register struct uip_conn *uip_connr = uip_conn;
 8003032:	4eaa      	ldr	r6, [pc, #680]	; (80032dc <uip_process+0x2ac>)
  uip_conn->rcv_nxt[3] = uip_acc32[3];
}
/*---------------------------------------------------------------------------*/
void
uip_process(uint8_t flag)
{
 8003034:	b083      	sub	sp, #12
  register struct uip_conn *uip_connr = uip_conn;
 8003036:	6834      	ldr	r4, [r6, #0]

#if UIP_UDP
  if(flag == UIP_UDP_SEND_CONN) {
 8003038:	2804      	cmp	r0, #4
 800303a:	d100      	bne.n	800303e <uip_process+0xe>
 800303c:	e187      	b.n	800334e <uip_process+0x31e>
    goto udp_send;
  }
#endif /* UIP_UDP */
  
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
 800303e:	4da8      	ldr	r5, [pc, #672]	; (80032e0 <uip_process+0x2b0>)
 8003040:	49a8      	ldr	r1, [pc, #672]	; (80032e4 <uip_process+0x2b4>)
 8003042:	4aa9      	ldr	r2, [pc, #676]	; (80032e8 <uip_process+0x2b8>)
 8003044:	600d      	str	r5, [r1, #0]
 8003046:	6015      	str	r5, [r2, #0]

  /* Check if we were invoked because of a poll request for a
     particular connection. */
  if(flag == UIP_POLL_REQUEST) {
 8003048:	2803      	cmp	r0, #3
 800304a:	d112      	bne.n	8003072 <uip_process+0x42>
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
 800304c:	7e62      	ldrb	r2, [r4, #25]
 800304e:	230f      	movs	r3, #15
 8003050:	4013      	ands	r3, r2
 8003052:	2b03      	cmp	r3, #3
 8003054:	d105      	bne.n	8003062 <uip_process+0x32>
       !uip_outstanding(uip_connr)) {
 8003056:	8a23      	ldrh	r3, [r4, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <uip_process+0x30>
 800305c:	f000 fd9e 	bl	8003b9c <uip_process+0xb6c>
 8003060:	e07c      	b.n	800315c <uip_process+0x12c>
	uip_flags = UIP_POLL;
	UIP_APPCALL();
	goto appsend;
#if UIP_ACTIVE_OPEN && UIP_TCP
    } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) {
 8003062:	2b02      	cmp	r3, #2
 8003064:	d001      	beq.n	800306a <uip_process+0x3a>
 8003066:	f000 fd99 	bl	8003b9c <uip_process+0xb6c>
      /* In the SYN_SENT state, we retransmit out SYN. */
      BUF->flags = 0;
 800306a:	3d26      	subs	r5, #38	; 0x26
 800306c:	2300      	movs	r3, #0
 800306e:	77eb      	strb	r3, [r5, #31]
      goto tcp_send_syn;
 8003070:	e29f      	b.n	80035b2 <uip_process+0x582>
#endif /* UIP_ACTIVE_OPEN */
    }
    goto drop;
    
    /* Check if we were invoked because of the perodic timer fireing. */
  } else if(flag == UIP_TIMER) {
 8003072:	2802      	cmp	r0, #2
 8003074:	d177      	bne.n	8003166 <uip_process+0x136>
    if(uip_reasstmr != 0) {
      --uip_reasstmr;
    }
#endif /* UIP_REASSEMBLY */
    /* Increase the initial sequence number. */
    if(++iss[3] == 0) {
 8003076:	4b9d      	ldr	r3, [pc, #628]	; (80032ec <uip_process+0x2bc>)
 8003078:	78da      	ldrb	r2, [r3, #3]
 800307a:	3201      	adds	r2, #1
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	70da      	strb	r2, [r3, #3]
 8003080:	2a00      	cmp	r2, #0
 8003082:	d10e      	bne.n	80030a2 <uip_process+0x72>
      if(++iss[2] == 0) {
 8003084:	789a      	ldrb	r2, [r3, #2]
 8003086:	3201      	adds	r2, #1
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	709a      	strb	r2, [r3, #2]
 800308c:	2a00      	cmp	r2, #0
 800308e:	d108      	bne.n	80030a2 <uip_process+0x72>
	if(++iss[1] == 0) {
 8003090:	785a      	ldrb	r2, [r3, #1]
 8003092:	3201      	adds	r2, #1
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	705a      	strb	r2, [r3, #1]
 8003098:	2a00      	cmp	r2, #0
 800309a:	d102      	bne.n	80030a2 <uip_process+0x72>
	  ++iss[0];
 800309c:	781a      	ldrb	r2, [r3, #0]
 800309e:	3201      	adds	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
	}
      }
    }

    /* Reset the length variables. */
    uip_len = 0;
 80030a2:	4a93      	ldr	r2, [pc, #588]	; (80032f0 <uip_process+0x2c0>)
 80030a4:	2300      	movs	r3, #0
 80030a6:	8013      	strh	r3, [r2, #0]
    uip_slen = 0;
 80030a8:	4a92      	ldr	r2, [pc, #584]	; (80032f4 <uip_process+0x2c4>)
 80030aa:	8013      	strh	r3, [r2, #0]
#if UIP_TCP
    /* Check if the connection is in a state in which we simply wait
       for the connection to time out. If so, we increase the
       connection's timer and remove the connection if it times
       out. */
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
 80030ac:	7e63      	ldrb	r3, [r4, #25]
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d001      	beq.n	80030b6 <uip_process+0x86>
 80030b2:	2b07      	cmp	r3, #7
 80030b4:	d10b      	bne.n	80030ce <uip_process+0x9e>
       uip_connr->tcpstateflags == UIP_FIN_WAIT_2) {
      ++(uip_connr->timer);
 80030b6:	7ea3      	ldrb	r3, [r4, #26]
 80030b8:	3301      	adds	r3, #1
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	76a3      	strb	r3, [r4, #26]
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
 80030be:	2b78      	cmp	r3, #120	; 0x78
 80030c0:	d001      	beq.n	80030c6 <uip_process+0x96>
 80030c2:	f000 fd6b 	bl	8003b9c <uip_process+0xb6c>
	uip_connr->tcpstateflags = UIP_CLOSED;
 80030c6:	2300      	movs	r3, #0
 80030c8:	7663      	strb	r3, [r4, #25]
 80030ca:	f000 fd67 	bl	8003b9c <uip_process+0xb6c>
      }
    } else if(uip_connr->tcpstateflags != UIP_CLOSED) {
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <uip_process+0xa6>
 80030d2:	f000 fd63 	bl	8003b9c <uip_process+0xb6c>
      /* If the connection has outstanding data, we increase the
	 connection's timer and see if it has reached the RTO value
	 in which case we retransmit. */

      if(uip_outstanding(uip_connr)) {
 80030d6:	8a22      	ldrh	r2, [r4, #16]
 80030d8:	2a00      	cmp	r2, #0
 80030da:	d039      	beq.n	8003150 <uip_process+0x120>
	if(uip_connr->timer-- == 0) {
 80030dc:	7ea2      	ldrb	r2, [r4, #26]
 80030de:	1e51      	subs	r1, r2, #1
 80030e0:	76a1      	strb	r1, [r4, #26]
 80030e2:	2a00      	cmp	r2, #0
 80030e4:	d001      	beq.n	80030ea <uip_process+0xba>
 80030e6:	f000 fd59 	bl	8003b9c <uip_process+0xb6c>
	  if(uip_connr->nrtx == UIP_MAXRTX ||
 80030ea:	7ee2      	ldrb	r2, [r4, #27]
 80030ec:	2a08      	cmp	r2, #8
 80030ee:	d005      	beq.n	80030fc <uip_process+0xcc>
	     ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d80b      	bhi.n	8003110 <uip_process+0xe0>
	 connection's timer and see if it has reached the RTO value
	 in which case we retransmit. */

      if(uip_outstanding(uip_connr)) {
	if(uip_connr->timer-- == 0) {
	  if(uip_connr->nrtx == UIP_MAXRTX ||
 80030f8:	2a05      	cmp	r2, #5
 80030fa:	d109      	bne.n	8003110 <uip_process+0xe0>
	     ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
	       uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
	      uip_connr->nrtx == UIP_MAXSYNRTX)) {
	    uip_connr->tcpstateflags = UIP_CLOSED;
 80030fc:	2300      	movs	r3, #0
 80030fe:	7663      	strb	r3, [r4, #25]

	    /* We call UIP_APPCALL() with uip_flags set to
	       UIP_TIMEDOUT to inform the application that the
	       connection has timed out. */
	    uip_flags = UIP_TIMEDOUT;
 8003100:	4a7d      	ldr	r2, [pc, #500]	; (80032f8 <uip_process+0x2c8>)
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	425b      	negs	r3, r3
 8003106:	7013      	strb	r3, [r2, #0]
	    UIP_APPCALL();
 8003108:	f001 fb72 	bl	80047f0 <tcpip_uipcall>
 800310c:	f000 fc24 	bl	8003958 <uip_process+0x928>
	    BUF->flags = TCP_RST | TCP_ACK;
	    goto tcp_send_nodata;
	  }

	  /* Exponential backoff. */
	  uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
 8003110:	2a04      	cmp	r2, #4
 8003112:	d901      	bls.n	8003118 <uip_process+0xe8>
 8003114:	2230      	movs	r2, #48	; 0x30
 8003116:	e002      	b.n	800311e <uip_process+0xee>
 8003118:	2303      	movs	r3, #3
 800311a:	4093      	lsls	r3, r2
 800311c:	b2da      	uxtb	r2, r3
					 4:
					 uip_connr->nrtx);
	  ++(uip_connr->nrtx);
 800311e:	7ee3      	ldrb	r3, [r4, #27]
	    BUF->flags = TCP_RST | TCP_ACK;
	    goto tcp_send_nodata;
	  }

	  /* Exponential backoff. */
	  uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
 8003120:	76a2      	strb	r2, [r4, #26]
					 4:
					 uip_connr->nrtx);
	  ++(uip_connr->nrtx);
 8003122:	3301      	adds	r3, #1
	     call upon the application so that it may prepare the
	     data for the retransmit. In SYN_RCVD, we resend the
	     SYNACK that we sent earlier and in LAST_ACK we have to
	     retransmit our FINACK. */
	  UIP_STAT(++uip_stat.tcp.rexmit);
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
 8003124:	7e62      	ldrb	r2, [r4, #25]

	  /* Exponential backoff. */
	  uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
					 4:
					 uip_connr->nrtx);
	  ++(uip_connr->nrtx);
 8003126:	76e3      	strb	r3, [r4, #27]
	     call upon the application so that it may prepare the
	     data for the retransmit. In SYN_RCVD, we resend the
	     SYNACK that we sent earlier and in LAST_ACK we have to
	     retransmit our FINACK. */
	  UIP_STAT(++uip_stat.tcp.rexmit);
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
 8003128:	230f      	movs	r3, #15
 800312a:	4013      	ands	r3, r2
 800312c:	3b01      	subs	r3, #1
 800312e:	2b07      	cmp	r3, #7
 8003130:	d901      	bls.n	8003136 <uip_process+0x106>
 8003132:	f000 fd33 	bl	8003b9c <uip_process+0xb6c>
 8003136:	4a71      	ldr	r2, [pc, #452]	; (80032fc <uip_process+0x2cc>)
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	589b      	ldr	r3, [r3, r2]
 800313c:	469f      	mov	pc, r3
	    goto tcp_send_synack;
	    
#if UIP_ACTIVE_OPEN
	  case UIP_SYN_SENT:
	    /* In the SYN_SENT state, we retransmit out SYN. */
	    BUF->flags = 0;
 800313e:	2200      	movs	r2, #0
 8003140:	e234      	b.n	80035ac <uip_process+0x57c>
	  case UIP_ESTABLISHED:
	    /* In the ESTABLISHED state, we call upon the application
               to do the actual retransmit after which we jump into
               the code for sending out the packet (the apprexmit
               label). */
	    uip_flags = UIP_REXMIT;
 8003142:	4b6d      	ldr	r3, [pc, #436]	; (80032f8 <uip_process+0x2c8>)
 8003144:	2204      	movs	r2, #4
 8003146:	701a      	strb	r2, [r3, #0]
	    UIP_APPCALL();
 8003148:	f001 fb52 	bl	80047f0 <tcpip_uipcall>
	    goto apprexmit;
 800314c:	f000 fc41 	bl	80039d2 <uip_process+0x9a2>
	    /* In all these states we should retransmit a FINACK. */
	    goto tcp_send_finack;
	    
	  }
	}
      } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
 8003150:	220f      	movs	r2, #15
 8003152:	4013      	ands	r3, r2
 8003154:	2b03      	cmp	r3, #3
 8003156:	d001      	beq.n	800315c <uip_process+0x12c>
 8003158:	f000 fd20 	bl	8003b9c <uip_process+0xb6c>
	/* If there was no need for a retransmission, we poll the
           application for new data. */
	uip_flags = UIP_POLL;
 800315c:	4b66      	ldr	r3, [pc, #408]	; (80032f8 <uip_process+0x2c8>)
 800315e:	2208      	movs	r2, #8
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	f000 fbec 	bl	800393e <uip_process+0x90e>
    }
#endif
    goto drop;
  }
#if UIP_UDP
  if(flag == UIP_UDP_TIMER) {
 8003166:	2805      	cmp	r0, #5
 8003168:	d113      	bne.n	8003192 <uip_process+0x162>
    if(uip_udp_conn->lport != 0) {
 800316a:	4b65      	ldr	r3, [pc, #404]	; (8003300 <uip_process+0x2d0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	889b      	ldrh	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <uip_process+0x148>
 8003174:	f000 fd12 	bl	8003b9c <uip_process+0xb6c>
      uip_conn = NULL;
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 8003178:	3d0c      	subs	r5, #12
 800317a:	6015      	str	r5, [r2, #0]
      uip_len = uip_slen = 0;
 800317c:	4a5d      	ldr	r2, [pc, #372]	; (80032f4 <uip_process+0x2c4>)
    goto drop;
  }
#if UIP_UDP
  if(flag == UIP_UDP_TIMER) {
    if(uip_udp_conn->lport != 0) {
      uip_conn = NULL;
 800317e:	2300      	movs	r3, #0
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
      uip_len = uip_slen = 0;
 8003180:	8013      	strh	r3, [r2, #0]
 8003182:	4a5b      	ldr	r2, [pc, #364]	; (80032f0 <uip_process+0x2c0>)
    goto drop;
  }
#if UIP_UDP
  if(flag == UIP_UDP_TIMER) {
    if(uip_udp_conn->lport != 0) {
      uip_conn = NULL;
 8003184:	6033      	str	r3, [r6, #0]
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
      uip_len = uip_slen = 0;
 8003186:	8013      	strh	r3, [r2, #0]
      uip_flags = UIP_POLL;
 8003188:	4b5b      	ldr	r3, [pc, #364]	; (80032f8 <uip_process+0x2c8>)
 800318a:	2208      	movs	r2, #8
  }
#if UIP_UDP
  if(flag == UIP_UDP_TIMER) {
    if(uip_udp_conn->lport != 0) {
      uip_conn = NULL;
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 800318c:	600d      	str	r5, [r1, #0]
      uip_len = uip_slen = 0;
      uip_flags = UIP_POLL;
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	e0db      	b.n	800334a <uip_process+0x31a>
    UIP_LOG("ipv6: invalid version.");
    goto drop;
  }
#else /* UIP_CONF_IPV6 */
  /* Check validity of the IP header. */
  if(BUF->vhl != 0x45)  { /* IP version and header length. */
 8003192:	3d28      	subs	r5, #40	; 0x28
 8003194:	782b      	ldrb	r3, [r5, #0]
 8003196:	2b45      	cmp	r3, #69	; 0x45
 8003198:	d001      	beq.n	800319e <uip_process+0x16e>
 800319a:	f000 fcff 	bl	8003b9c <uip_process+0xb6c>
     that the packet has been corrupted in transit. If the size of
     uip_len is larger than the size reported in the IP packet header,
     the packet has been padded and we set uip_len to the correct
     value.. */

  if((BUF->len[0] << 8) + BUF->len[1] <= uip_len) {
 800319e:	78aa      	ldrb	r2, [r5, #2]
 80031a0:	78eb      	ldrb	r3, [r5, #3]
 80031a2:	0212      	lsls	r2, r2, #8
 80031a4:	18d2      	adds	r2, r2, r3
 80031a6:	4b52      	ldr	r3, [pc, #328]	; (80032f0 <uip_process+0x2c0>)
 80031a8:	8819      	ldrh	r1, [r3, #0]
 80031aa:	428a      	cmp	r2, r1
 80031ac:	dd01      	ble.n	80031b2 <uip_process+0x182>
 80031ae:	f000 fcf5 	bl	8003b9c <uip_process+0xb6c>
    uip_len = (BUF->len[0] << 8) + BUF->len[1];
 80031b2:	801a      	strh	r2, [r3, #0]
    goto drop;
  }

#if !UIP_CONF_IPV6
  /* Check the fragment flag. */
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
 80031b4:	79ab      	ldrb	r3, [r5, #6]
 80031b6:	0698      	lsls	r0, r3, #26
 80031b8:	d001      	beq.n	80031be <uip_process+0x18e>
 80031ba:	f000 fcef 	bl	8003b9c <uip_process+0xb6c>
     BUF->ipoffset[1] != 0) {
 80031be:	79eb      	ldrb	r3, [r5, #7]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <uip_process+0x198>
 80031c4:	f000 fcea 	bl	8003b9c <uip_process+0xb6c>
    goto drop;
#endif /* UIP_REASSEMBLY */
  }
#endif /* UIP_CONF_IPV6 */

  if(uip_ipaddr_cmp(&uip_hostaddr, &uip_all_zeroes_addr)) {
 80031c8:	494e      	ldr	r1, [pc, #312]	; (8003304 <uip_process+0x2d4>)
 80031ca:	4b4f      	ldr	r3, [pc, #316]	; (8003308 <uip_process+0x2d8>)
 80031cc:	880a      	ldrh	r2, [r1, #0]
 80031ce:	881c      	ldrh	r4, [r3, #0]
 80031d0:	42a2      	cmp	r2, r4
 80031d2:	d103      	bne.n	80031dc <uip_process+0x1ac>
 80031d4:	8849      	ldrh	r1, [r1, #2]
 80031d6:	885b      	ldrh	r3, [r3, #2]
 80031d8:	4299      	cmp	r1, r3
 80031da:	d00c      	beq.n	80031f6 <uip_process+0x1c6>
    }
#endif /* UIP_BROADCAST */
    
    /* Check if the packet is destined for our IP address. */
#if !UIP_CONF_IPV6
    if(!uip_ipaddr_cmp(&BUF->destipaddr, &uip_hostaddr)) {
 80031dc:	4b4b      	ldr	r3, [pc, #300]	; (800330c <uip_process+0x2dc>)
 80031de:	8819      	ldrh	r1, [r3, #0]
 80031e0:	4291      	cmp	r1, r2
 80031e2:	d001      	beq.n	80031e8 <uip_process+0x1b8>
 80031e4:	f000 fcda 	bl	8003b9c <uip_process+0xb6c>
 80031e8:	885a      	ldrh	r2, [r3, #2]
 80031ea:	4b46      	ldr	r3, [pc, #280]	; (8003304 <uip_process+0x2d4>)
 80031ec:	885b      	ldrh	r3, [r3, #2]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d001      	beq.n	80031f6 <uip_process+0x1c6>
 80031f2:	f000 fcd3 	bl	8003b9c <uip_process+0xb6c>
    }
#endif /* UIP_CONF_IPV6 */
  }

#if !UIP_CONF_IPV6
  if(uip_ipchksum() != 0xffff) { /* Compute and check the IP header
 80031f6:	f7ff fe87 	bl	8002f08 <uip_ipchksum>
 80031fa:	4b45      	ldr	r3, [pc, #276]	; (8003310 <uip_process+0x2e0>)
 80031fc:	1c06      	adds	r6, r0, #0
 80031fe:	4298      	cmp	r0, r3
 8003200:	d001      	beq.n	8003206 <uip_process+0x1d6>
 8003202:	f000 fccb 	bl	8003b9c <uip_process+0xb6c>
    goto drop;
  }
#endif /* UIP_CONF_IPV6 */

#if UIP_TCP
  if(BUF->proto == UIP_PROTO_TCP) { /* Check for TCP packet. If so,
 8003206:	7a6b      	ldrb	r3, [r5, #9]
 8003208:	2b06      	cmp	r3, #6
 800320a:	d100      	bne.n	800320e <uip_process+0x1de>
 800320c:	e0d0      	b.n	80033b0 <uip_process+0x380>
    goto tcp_input;
  }
#endif

#if UIP_UDP
  if(BUF->proto == UIP_PROTO_UDP) {
 800320e:	2b11      	cmp	r3, #17
 8003210:	d024      	beq.n	800325c <uip_process+0x22c>
  }
#endif /* UIP_UDP */

#if !UIP_CONF_IPV6
  /* ICMPv4 processing code follows. */
  if(BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from
 8003212:	2b01      	cmp	r3, #1
 8003214:	d001      	beq.n	800321a <uip_process+0x1ea>
 8003216:	f000 fcc1 	bl	8003b9c <uip_process+0xb6c>
  UIP_STAT(++uip_stat.icmp.recv);

  /* ICMP echo (i.e., ping) processing. This is simple, we only change
     the ICMP type from ECHO to ECHO_REPLY and adjust the ICMP
     checksum before we return the packet. */
  if(ICMPBUF->type != ICMP_ECHO) {
 800321a:	4b3e      	ldr	r3, [pc, #248]	; (8003314 <uip_process+0x2e4>)
 800321c:	7d1a      	ldrb	r2, [r3, #20]
 800321e:	2a08      	cmp	r2, #8
 8003220:	d001      	beq.n	8003226 <uip_process+0x1f6>
 8003222:	f000 fcbb 	bl	8003b9c <uip_process+0xb6c>
  if(uip_ipaddr_cmp(&uip_hostaddr, &uip_all_zeroes_addr)) {
    uip_hostaddr = BUF->destipaddr;
  }
#endif /* UIP_PINGADDRCONF */

  ICMPBUF->type = ICMP_ECHO_REPLY;
 8003226:	2200      	movs	r2, #0
 8003228:	751a      	strb	r2, [r3, #20]

  if(ICMPBUF->icmpchksum >= UIP_HTONS(0xffff - (ICMP_ECHO << 8))) {
 800322a:	493b      	ldr	r1, [pc, #236]	; (8003318 <uip_process+0x2e8>)
 800322c:	8ada      	ldrh	r2, [r3, #22]
 800322e:	428a      	cmp	r2, r1
 8003230:	d901      	bls.n	8003236 <uip_process+0x206>
    ICMPBUF->icmpchksum += UIP_HTONS(ICMP_ECHO << 8) + 1;
 8003232:	3209      	adds	r2, #9
 8003234:	e000      	b.n	8003238 <uip_process+0x208>
  } else {
    ICMPBUF->icmpchksum += UIP_HTONS(ICMP_ECHO << 8);
 8003236:	3208      	adds	r2, #8
  }

  /* Swap IP addresses. */
  uip_ipaddr_copy(&BUF->destipaddr, &BUF->srcipaddr);
 8003238:	4838      	ldr	r0, [pc, #224]	; (800331c <uip_process+0x2ec>)
  ICMPBUF->type = ICMP_ECHO_REPLY;

  if(ICMPBUF->icmpchksum >= UIP_HTONS(0xffff - (ICMP_ECHO << 8))) {
    ICMPBUF->icmpchksum += UIP_HTONS(ICMP_ECHO << 8) + 1;
  } else {
    ICMPBUF->icmpchksum += UIP_HTONS(ICMP_ECHO << 8);
 800323a:	82da      	strh	r2, [r3, #22]
  }

  /* Swap IP addresses. */
  uip_ipaddr_copy(&BUF->destipaddr, &BUF->srcipaddr);
 800323c:	1c04      	adds	r4, r0, #0
 800323e:	341a      	adds	r4, #26
 8003240:	1c21      	adds	r1, r4, #0
 8003242:	2204      	movs	r2, #4
 8003244:	301e      	adds	r0, #30
 8003246:	f003 fdce 	bl	8006de6 <memcpy>
  uip_ipaddr_copy(&BUF->srcipaddr, &uip_hostaddr);
 800324a:	1c20      	adds	r0, r4, #0
 800324c:	492d      	ldr	r1, [pc, #180]	; (8003304 <uip_process+0x2d4>)
 800324e:	2204      	movs	r2, #4
 8003250:	f003 fdc9 	bl	8006de6 <memcpy>

  UIP_STAT(++uip_stat.icmp.sent);
  BUF->ttl = UIP_TTL;
 8003254:	2340      	movs	r3, #64	; 0x40
 8003256:	722b      	strb	r3, [r5, #8]
  goto ip_send_nolen;
 8003258:	f000 fc7a 	bl	8003b50 <uip_process+0xb20>
    UIP_STAT(++uip_stat.udp.chkerr);
    UIP_LOG("udp: bad checksum.");
    goto drop;
  }
#else /* UIP_UDP_CHECKSUMS */
  uip_len = uip_len - UIP_IPUDPH_LEN;
 800325c:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <uip_process+0x2c0>)
 800325e:	881a      	ldrh	r2, [r3, #0]
 8003260:	3a1c      	subs	r2, #28
 8003262:	801a      	strh	r2, [r3, #0]
#endif /* UIP_UDP_CHECKSUMS */

  /* Make sure that the UDP destination port number is not zero. */
  if(UDPBUF->destport == 0) {
 8003264:	4a2b      	ldr	r2, [pc, #172]	; (8003314 <uip_process+0x2e4>)
 8003266:	8ad3      	ldrh	r3, [r2, #22]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <uip_process+0x240>
 800326c:	f000 fc96 	bl	8003b9c <uip_process+0xb6c>
    UIP_LOG("udp: zero port.");
    goto drop;
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
 8003270:	492b      	ldr	r1, [pc, #172]	; (8003320 <uip_process+0x2f0>)
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <uip_process+0x2d0>)
 8003274:	6019      	str	r1, [r3, #0]
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
       UDPBUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
        UDPBUF->srcport == uip_udp_conn->rport) &&
       (uip_ipaddr_cmp(&uip_udp_conn->ripaddr, &uip_all_zeroes_addr) ||
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <uip_process+0x2d8>)
 8003278:	885e      	ldrh	r6, [r3, #2]
	uip_ipaddr_cmp(&uip_udp_conn->ripaddr, &uip_broadcast_addr) ||
 800327a:	4b2a      	ldr	r3, [pc, #168]	; (8003324 <uip_process+0x2f4>)
 800327c:	8819      	ldrh	r1, [r3, #0]
 800327e:	885f      	ldrh	r7, [r3, #2]
 8003280:	9101      	str	r1, [sp, #4]
    UIP_LOG("udp: zero port.");
    goto drop;
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
 8003282:	e023      	b.n	80032cc <uip_process+0x29c>
       destination port number in the received packet. If the two port
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
 8003284:	8899      	ldrh	r1, [r3, #4]
 8003286:	2900      	cmp	r1, #0
 8003288:	d01d      	beq.n	80032c6 <uip_process+0x296>
       UDPBUF->destport == uip_udp_conn->lport &&
 800328a:	8ad0      	ldrh	r0, [r2, #22]
 800328c:	4288      	cmp	r0, r1
 800328e:	d11a      	bne.n	80032c6 <uip_process+0x296>
       (uip_udp_conn->rport == 0 ||
 8003290:	88d9      	ldrh	r1, [r3, #6]
       destination port number in the received packet. If the two port
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
 8003292:	2900      	cmp	r1, #0
 8003294:	d002      	beq.n	800329c <uip_process+0x26c>
       UDPBUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
        UDPBUF->srcport == uip_udp_conn->rport) &&
 8003296:	8a90      	ldrh	r0, [r2, #20]
 8003298:	4288      	cmp	r0, r1
 800329a:	d114      	bne.n	80032c6 <uip_process+0x296>
       (uip_ipaddr_cmp(&uip_udp_conn->ripaddr, &uip_all_zeroes_addr) ||
 800329c:	8819      	ldrh	r1, [r3, #0]
       destination port number in the received packet. If the two port
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
 800329e:	42a1      	cmp	r1, r4
 80032a0:	d102      	bne.n	80032a8 <uip_process+0x278>
       UDPBUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
        UDPBUF->srcport == uip_udp_conn->rport) &&
       (uip_ipaddr_cmp(&uip_udp_conn->ripaddr, &uip_all_zeroes_addr) ||
 80032a2:	8858      	ldrh	r0, [r3, #2]
 80032a4:	42b0      	cmp	r0, r6
 80032a6:	d043      	beq.n	8003330 <uip_process+0x300>
       destination port number in the received packet. If the two port
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
 80032a8:	9d01      	ldr	r5, [sp, #4]
 80032aa:	42a9      	cmp	r1, r5
 80032ac:	d102      	bne.n	80032b4 <uip_process+0x284>
       UDPBUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
        UDPBUF->srcport == uip_udp_conn->rport) &&
       (uip_ipaddr_cmp(&uip_udp_conn->ripaddr, &uip_all_zeroes_addr) ||
	uip_ipaddr_cmp(&uip_udp_conn->ripaddr, &uip_broadcast_addr) ||
 80032ae:	8858      	ldrh	r0, [r3, #2]
 80032b0:	42b8      	cmp	r0, r7
 80032b2:	d03d      	beq.n	8003330 <uip_process+0x300>
	uip_ipaddr_cmp(&BUF->srcipaddr, &uip_udp_conn->ripaddr))) {
 80032b4:	481c      	ldr	r0, [pc, #112]	; (8003328 <uip_process+0x2f8>)
       destination port number in the received packet. If the two port
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
 80032b6:	8805      	ldrh	r5, [r0, #0]
 80032b8:	46ac      	mov	ip, r5
 80032ba:	458c      	cmp	ip, r1
 80032bc:	d103      	bne.n	80032c6 <uip_process+0x296>
       UDPBUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
        UDPBUF->srcport == uip_udp_conn->rport) &&
       (uip_ipaddr_cmp(&uip_udp_conn->ripaddr, &uip_all_zeroes_addr) ||
	uip_ipaddr_cmp(&uip_udp_conn->ripaddr, &uip_broadcast_addr) ||
	uip_ipaddr_cmp(&BUF->srcipaddr, &uip_udp_conn->ripaddr))) {
 80032be:	8840      	ldrh	r0, [r0, #2]
 80032c0:	8859      	ldrh	r1, [r3, #2]
 80032c2:	4288      	cmp	r0, r1
 80032c4:	d034      	beq.n	8003330 <uip_process+0x300>
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
      ++uip_udp_conn) {
 80032c6:	490e      	ldr	r1, [pc, #56]	; (8003300 <uip_process+0x2d0>)
 80032c8:	3314      	adds	r3, #20
 80032ca:	600b      	str	r3, [r1, #0]
    goto drop;
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <uip_process+0x2d0>)
    UIP_LOG("udp: zero port.");
    goto drop;
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
 80032ce:	4917      	ldr	r1, [pc, #92]	; (800332c <uip_process+0x2fc>)
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
 80032d0:	681b      	ldr	r3, [r3, #0]
    UIP_LOG("udp: zero port.");
    goto drop;
  }

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
 80032d2:	428b      	cmp	r3, r1
 80032d4:	d3d6      	bcc.n	8003284 <uip_process+0x254>
 80032d6:	f000 fc61 	bl	8003b9c <uip_process+0xb6c>
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	20001788 	.word	0x20001788
 80032e0:	200015b2 	.word	0x200015b2
 80032e4:	20001784 	.word	0x20001784
 80032e8:	20001574 	.word	0x20001574
 80032ec:	20000fc4 	.word	0x20000fc4
 80032f0:	20001570 	.word	0x20001570
 80032f4:	200017e4 	.word	0x200017e4
 80032f8:	2000177c 	.word	0x2000177c
 80032fc:	0800ae28 	.word	0x0800ae28
 8003300:	20001780 	.word	0x20001780
 8003304:	200017e0 	.word	0x200017e0
 8003308:	0800ae6c 	.word	0x0800ae6c
 800330c:	2000159a 	.word	0x2000159a
 8003310:	0000ffff 	.word	0x0000ffff
 8003314:	2000158a 	.word	0x2000158a
 8003318:	0000fff6 	.word	0x0000fff6
 800331c:	2000157c 	.word	0x2000157c
 8003320:	200017e8 	.word	0x200017e8
 8003324:	0800ae68 	.word	0x0800ae68
 8003328:	20001596 	.word	0x20001596
 800332c:	200018b0 	.word	0x200018b0
#else /* UIP_CONF_ICMP_DEST_UNREACH */
  goto drop;
#endif /* UIP_CONF_ICMP_DEST_UNREACH */
  
 udp_found:
  uip_conn = NULL;
 8003330:	4abf      	ldr	r2, [pc, #764]	; (8003630 <uip_process+0x600>)
 8003332:	2300      	movs	r3, #0
 8003334:	6013      	str	r3, [r2, #0]
  uip_flags = UIP_NEWDATA;
 8003336:	4abf      	ldr	r2, [pc, #764]	; (8003634 <uip_process+0x604>)
 8003338:	2102      	movs	r1, #2
 800333a:	7011      	strb	r1, [r2, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 800333c:	4abe      	ldr	r2, [pc, #760]	; (8003638 <uip_process+0x608>)
 800333e:	49bf      	ldr	r1, [pc, #764]	; (800363c <uip_process+0x60c>)
 8003340:	600a      	str	r2, [r1, #0]
 8003342:	49bf      	ldr	r1, [pc, #764]	; (8003640 <uip_process+0x610>)
 8003344:	600a      	str	r2, [r1, #0]
  uip_slen = 0;
 8003346:	4abf      	ldr	r2, [pc, #764]	; (8003644 <uip_process+0x614>)
 8003348:	8013      	strh	r3, [r2, #0]
  UIP_UDP_APPCALL();
 800334a:	f001 fa51 	bl	80047f0 <tcpip_uipcall>

 udp_send:
  if(uip_slen == 0) {
 800334e:	4bbd      	ldr	r3, [pc, #756]	; (8003644 <uip_process+0x614>)
 8003350:	881a      	ldrh	r2, [r3, #0]
 8003352:	2a00      	cmp	r2, #0
 8003354:	d101      	bne.n	800335a <uip_process+0x32a>
 8003356:	f000 fc21 	bl	8003b9c <uip_process+0xb6c>
    goto drop;
  }
  uip_len = uip_slen + UIP_IPUDPH_LEN;
 800335a:	1c13      	adds	r3, r2, #0
 800335c:	49ba      	ldr	r1, [pc, #744]	; (8003648 <uip_process+0x618>)
 800335e:	331c      	adds	r3, #28
  /* For IPv6, the IP length field does not include the IPv6 IP header
     length. */
  BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
  BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
#else /* UIP_CONF_IPV6 */
  BUF->len[0] = (uip_len >> 8);
 8003360:	4cba      	ldr	r4, [pc, #744]	; (800364c <uip_process+0x61c>)

 udp_send:
  if(uip_slen == 0) {
    goto drop;
  }
  uip_len = uip_slen + UIP_IPUDPH_LEN;
 8003362:	b29b      	uxth	r3, r3
 8003364:	800b      	strh	r3, [r1, #0]
#else /* UIP_CONF_IPV6 */
  BUF->len[0] = (uip_len >> 8);
  BUF->len[1] = (uip_len & 0xff);
#endif /* UIP_CONF_IPV6 */

  BUF->ttl = uip_udp_conn->ttl;
 8003366:	4dba      	ldr	r5, [pc, #744]	; (8003650 <uip_process+0x620>)
  /* For IPv6, the IP length field does not include the IPv6 IP header
     length. */
  BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
  BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
#else /* UIP_CONF_IPV6 */
  BUF->len[0] = (uip_len >> 8);
 8003368:	0a19      	lsrs	r1, r3, #8
 800336a:	70a1      	strb	r1, [r4, #2]
  BUF->len[1] = (uip_len & 0xff);
 800336c:	70e3      	strb	r3, [r4, #3]
#endif /* UIP_CONF_IPV6 */

  BUF->ttl = uip_udp_conn->ttl;
 800336e:	682b      	ldr	r3, [r5, #0]
  BUF->proto = UIP_PROTO_UDP;

  UDPBUF->udplen = UIP_HTONS(uip_slen + UIP_UDPH_LEN);
 8003370:	3208      	adds	r2, #8
#else /* UIP_CONF_IPV6 */
  BUF->len[0] = (uip_len >> 8);
  BUF->len[1] = (uip_len & 0xff);
#endif /* UIP_CONF_IPV6 */

  BUF->ttl = uip_udp_conn->ttl;
 8003372:	7a19      	ldrb	r1, [r3, #8]
  BUF->proto = UIP_PROTO_UDP;

  UDPBUF->udplen = UIP_HTONS(uip_slen + UIP_UDPH_LEN);
 8003374:	b292      	uxth	r2, r2
#else /* UIP_CONF_IPV6 */
  BUF->len[0] = (uip_len >> 8);
  BUF->len[1] = (uip_len & 0xff);
#endif /* UIP_CONF_IPV6 */

  BUF->ttl = uip_udp_conn->ttl;
 8003376:	7221      	strb	r1, [r4, #8]
  BUF->proto = UIP_PROTO_UDP;
 8003378:	2111      	movs	r1, #17
 800337a:	7261      	strb	r1, [r4, #9]

  UDPBUF->udplen = UIP_HTONS(uip_slen + UIP_UDPH_LEN);
 800337c:	0211      	lsls	r1, r2, #8
 800337e:	0a12      	lsrs	r2, r2, #8
 8003380:	430a      	orrs	r2, r1
 8003382:	8322      	strh	r2, [r4, #24]
  UDPBUF->udpchksum = 0;
 8003384:	2200      	movs	r2, #0
 8003386:	8362      	strh	r2, [r4, #26]

  BUF->srcport  = uip_udp_conn->lport;
 8003388:	889a      	ldrh	r2, [r3, #4]
  BUF->destport = uip_udp_conn->rport;

  uip_ipaddr_copy(&BUF->srcipaddr, &uip_hostaddr);
 800338a:	1c20      	adds	r0, r4, #0
  BUF->proto = UIP_PROTO_UDP;

  UDPBUF->udplen = UIP_HTONS(uip_slen + UIP_UDPH_LEN);
  UDPBUF->udpchksum = 0;

  BUF->srcport  = uip_udp_conn->lport;
 800338c:	82a2      	strh	r2, [r4, #20]
  BUF->destport = uip_udp_conn->rport;
 800338e:	88db      	ldrh	r3, [r3, #6]

  uip_ipaddr_copy(&BUF->srcipaddr, &uip_hostaddr);
 8003390:	49b0      	ldr	r1, [pc, #704]	; (8003654 <uip_process+0x624>)

  UDPBUF->udplen = UIP_HTONS(uip_slen + UIP_UDPH_LEN);
  UDPBUF->udpchksum = 0;

  BUF->srcport  = uip_udp_conn->lport;
  BUF->destport = uip_udp_conn->rport;
 8003392:	82e3      	strh	r3, [r4, #22]

  uip_ipaddr_copy(&BUF->srcipaddr, &uip_hostaddr);
 8003394:	2204      	movs	r2, #4
 8003396:	300c      	adds	r0, #12
 8003398:	f003 fd25 	bl	8006de6 <memcpy>
  uip_ipaddr_copy(&BUF->destipaddr, &uip_udp_conn->ripaddr);
 800339c:	1c20      	adds	r0, r4, #0
 800339e:	3010      	adds	r0, #16
 80033a0:	6829      	ldr	r1, [r5, #0]
 80033a2:	2204      	movs	r2, #4
 80033a4:	f003 fd1f 	bl	8006de6 <memcpy>
   
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPTCPH_LEN];
 80033a8:	4ba4      	ldr	r3, [pc, #656]	; (800363c <uip_process+0x60c>)
 80033aa:	3428      	adds	r4, #40	; 0x28
 80033ac:	601c      	str	r4, [r3, #0]
  if(UDPBUF->udpchksum == 0) {
    UDPBUF->udpchksum = 0xffff;
  }
#endif /* UIP_UDP_CHECKSUMS */
  
  goto ip_send_nolen;
 80033ae:	e3cf      	b.n	8003b50 <uip_process+0xb20>
 tcp_input:
  UIP_STAT(++uip_stat.tcp.recv);

  /* Start of TCP input header processing code. */
  
  if(uip_tcpchksum() != 0xffff) {   /* Compute and check the TCP
 80033b0:	f7ff fe1e 	bl	8002ff0 <uip_tcpchksum>
 80033b4:	42b0      	cmp	r0, r6
 80033b6:	d001      	beq.n	80033bc <uip_process+0x38c>
 80033b8:	f000 fbf0 	bl	8003b9c <uip_process+0xb6c>
    UIP_LOG("tcp: bad checksum.");
    goto drop;
  }

  /* Make sure that the TCP port number is not zero. */
  if(BUF->destport == 0 || BUF->srcport == 0) {
 80033bc:	8aea      	ldrh	r2, [r5, #22]
 80033be:	2a00      	cmp	r2, #0
 80033c0:	d101      	bne.n	80033c6 <uip_process+0x396>
 80033c2:	f000 fbeb 	bl	8003b9c <uip_process+0xb6c>
 80033c6:	8aa9      	ldrh	r1, [r5, #20]
 80033c8:	2900      	cmp	r1, #0
 80033ca:	d101      	bne.n	80033d0 <uip_process+0x3a0>
 80033cc:	f000 fbe6 	bl	8003b9c <uip_process+0xb6c>
  
  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
 80033d0:	4ba1      	ldr	r3, [pc, #644]	; (8003658 <uip_process+0x628>)
 80033d2:	7e58      	ldrb	r0, [r3, #25]
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d00f      	beq.n	80033f8 <uip_process+0x3c8>
 80033d8:	8898      	ldrh	r0, [r3, #4]
 80033da:	4290      	cmp	r0, r2
 80033dc:	d10c      	bne.n	80033f8 <uip_process+0x3c8>
 80033de:	88d8      	ldrh	r0, [r3, #6]
 80033e0:	4288      	cmp	r0, r1
 80033e2:	d109      	bne.n	80033f8 <uip_process+0x3c8>
       BUF->destport == uip_connr->lport &&
       BUF->srcport == uip_connr->rport &&
       uip_ipaddr_cmp(&BUF->srcipaddr, &uip_connr->ripaddr)) {
 80033e4:	499d      	ldr	r1, [pc, #628]	; (800365c <uip_process+0x62c>)
  
  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
 80033e6:	8818      	ldrh	r0, [r3, #0]
 80033e8:	880c      	ldrh	r4, [r1, #0]
 80033ea:	4284      	cmp	r4, r0
 80033ec:	d104      	bne.n	80033f8 <uip_process+0x3c8>
       BUF->destport == uip_connr->lport &&
       BUF->srcport == uip_connr->rport &&
       uip_ipaddr_cmp(&BUF->srcipaddr, &uip_connr->ripaddr)) {
 80033ee:	8849      	ldrh	r1, [r1, #2]
 80033f0:	885b      	ldrh	r3, [r3, #2]
 80033f2:	4299      	cmp	r1, r3
 80033f4:	d100      	bne.n	80033f8 <uip_process+0x3c8>
 80033f6:	e0f6      	b.n	80035e6 <uip_process+0x5b6>

  /* If we didn't find and active connection that expected the packet,
     either this packet is an old duplicate, or this is a SYN packet
     destined for a connection in LISTEN. If the SYN flag isn't set,
     it is an old packet and we send a RST. */
  if((BUF->flags & TCP_CTL) != TCP_SYN) {
 80033f8:	1cab      	adds	r3, r5, #2
 80033fa:	7fd9      	ldrb	r1, [r3, #31]
 80033fc:	233f      	movs	r3, #63	; 0x3f
 80033fe:	400b      	ands	r3, r1
 8003400:	2b02      	cmp	r3, #2
 8003402:	d10e      	bne.n	8003422 <uip_process+0x3f2>
    goto reset;
  }
  
  tmp16 = BUF->destport;
 8003404:	4b96      	ldr	r3, [pc, #600]	; (8003660 <uip_process+0x630>)
 8003406:	801a      	strh	r2, [r3, #0]
  /* Next, check listening connections. */
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 8003408:	2300      	movs	r3, #0
 800340a:	e006      	b.n	800341a <uip_process+0x3ea>
    if(tmp16 == uip_listenports[c]) {
 800340c:	4995      	ldr	r1, [pc, #596]	; (8003664 <uip_process+0x634>)
 800340e:	0058      	lsls	r0, r3, #1
 8003410:	5a41      	ldrh	r1, [r0, r1]
 8003412:	3301      	adds	r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	428a      	cmp	r2, r1
 8003418:	d046      	beq.n	80034a8 <uip_process+0x478>
    goto reset;
  }
  
  tmp16 = BUF->destport;
  /* Next, check listening connections. */
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 800341a:	2b13      	cmp	r3, #19
 800341c:	d9f6      	bls.n	800340c <uip_process+0x3dc>
 800341e:	4a92      	ldr	r2, [pc, #584]	; (8003668 <uip_process+0x638>)
 8003420:	7013      	strb	r3, [r2, #0]
  /* No matching connection found, so we send a RST packet. */
  UIP_STAT(++uip_stat.tcp.synrst);

 reset:
  /* We do not send resets in response to resets. */
  if(BUF->flags & TCP_RST) {
 8003422:	1cab      	adds	r3, r5, #2
 8003424:	7fda      	ldrb	r2, [r3, #31]
 8003426:	0750      	lsls	r0, r2, #29
 8003428:	d500      	bpl.n	800342c <uip_process+0x3fc>
 800342a:	e3b7      	b.n	8003b9c <uip_process+0xb6c>
    goto drop;
  }

  UIP_STAT(++uip_stat.tcp.rst);
  
  BUF->flags = TCP_RST | TCP_ACK;
 800342c:	2214      	movs	r2, #20
 800342e:	77da      	strb	r2, [r3, #31]
  uip_len = UIP_IPTCPH_LEN;
 8003430:	4b85      	ldr	r3, [pc, #532]	; (8003648 <uip_process+0x618>)
 8003432:	2228      	movs	r2, #40	; 0x28
 8003434:	801a      	strh	r2, [r3, #0]
  BUF->tcpoffset = 5 << 4;
 8003436:	1c6b      	adds	r3, r5, #1
 8003438:	2250      	movs	r2, #80	; 0x50
 800343a:	77da      	strb	r2, [r3, #31]

  /* Flip the seqno and ackno fields in the TCP header. */
  c = BUF->seqno[3];
  BUF->seqno[3] = BUF->ackno[3];
 800343c:	7feb      	ldrb	r3, [r5, #31]
  BUF->flags = TCP_RST | TCP_ACK;
  uip_len = UIP_IPTCPH_LEN;
  BUF->tcpoffset = 5 << 4;

  /* Flip the seqno and ackno fields in the TCP header. */
  c = BUF->seqno[3];
 800343e:	7ee8      	ldrb	r0, [r5, #27]
  BUF->seqno[3] = BUF->ackno[3];
 8003440:	76eb      	strb	r3, [r5, #27]
  BUF->ackno[3] = c;
  
  c = BUF->seqno[2];
  BUF->seqno[2] = BUF->ackno[2];
 8003442:	7fab      	ldrb	r3, [r5, #30]
  /* Flip the seqno and ackno fields in the TCP header. */
  c = BUF->seqno[3];
  BUF->seqno[3] = BUF->ackno[3];
  BUF->ackno[3] = c;
  
  c = BUF->seqno[2];
 8003444:	7ea9      	ldrb	r1, [r5, #26]
  BUF->seqno[2] = BUF->ackno[2];
 8003446:	76ab      	strb	r3, [r5, #26]
  BUF->ackno[2] = c;
  
  c = BUF->seqno[1];
  BUF->seqno[1] = BUF->ackno[1];
 8003448:	7f6b      	ldrb	r3, [r5, #29]
  
  c = BUF->seqno[2];
  BUF->seqno[2] = BUF->ackno[2];
  BUF->ackno[2] = c;
  
  c = BUF->seqno[1];
 800344a:	7e6a      	ldrb	r2, [r5, #25]
  BUF->seqno[1] = BUF->ackno[1];
  BUF->ackno[1] = c;
  
  c = BUF->seqno[0];
 800344c:	4c86      	ldr	r4, [pc, #536]	; (8003668 <uip_process+0x638>)
  c = BUF->seqno[2];
  BUF->seqno[2] = BUF->ackno[2];
  BUF->ackno[2] = c;
  
  c = BUF->seqno[1];
  BUF->seqno[1] = BUF->ackno[1];
 800344e:	766b      	strb	r3, [r5, #25]
  BUF->ackno[1] = c;
  
  c = BUF->seqno[0];
 8003450:	7e2b      	ldrb	r3, [r5, #24]
  BUF->seqno[3] = BUF->ackno[3];
  BUF->ackno[3] = c;
  
  c = BUF->seqno[2];
  BUF->seqno[2] = BUF->ackno[2];
  BUF->ackno[2] = c;
 8003452:	77a9      	strb	r1, [r5, #30]
  
  c = BUF->seqno[1];
  BUF->seqno[1] = BUF->ackno[1];
  BUF->ackno[1] = c;
 8003454:	776a      	strb	r2, [r5, #29]
  
  c = BUF->seqno[0];
 8003456:	7023      	strb	r3, [r4, #0]
  BUF->seqno[0] = BUF->ackno[0];
 8003458:	7f2c      	ldrb	r4, [r5, #28]
  BUF->ackno[0] = c;

  /* We also have to increase the sequence number we are
     acknowledging. If the least significant byte overflowed, we need
     to propagate the carry to the other bytes as well. */
  if(++BUF->ackno[3] == 0) {
 800345a:	3001      	adds	r0, #1
 800345c:	b2c0      	uxtb	r0, r0
  c = BUF->seqno[1];
  BUF->seqno[1] = BUF->ackno[1];
  BUF->ackno[1] = c;
  
  c = BUF->seqno[0];
  BUF->seqno[0] = BUF->ackno[0];
 800345e:	762c      	strb	r4, [r5, #24]
  BUF->ackno[0] = c;
 8003460:	772b      	strb	r3, [r5, #28]

  /* We also have to increase the sequence number we are
     acknowledging. If the least significant byte overflowed, we need
     to propagate the carry to the other bytes as well. */
  if(++BUF->ackno[3] == 0) {
 8003462:	77e8      	strb	r0, [r5, #31]
 8003464:	2800      	cmp	r0, #0
 8003466:	d10b      	bne.n	8003480 <uip_process+0x450>
    if(++BUF->ackno[2] == 0) {
 8003468:	3101      	adds	r1, #1
 800346a:	b2c9      	uxtb	r1, r1
 800346c:	77a9      	strb	r1, [r5, #30]
 800346e:	2900      	cmp	r1, #0
 8003470:	d106      	bne.n	8003480 <uip_process+0x450>
      if(++BUF->ackno[1] == 0) {
 8003472:	3201      	adds	r2, #1
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	776a      	strb	r2, [r5, #29]
 8003478:	2a00      	cmp	r2, #0
 800347a:	d101      	bne.n	8003480 <uip_process+0x450>
	++BUF->ackno[0];
 800347c:	3301      	adds	r3, #1
 800347e:	772b      	strb	r3, [r5, #28]
      }
    }
  }
 
  /* Swap port numbers. */
  tmp16 = BUF->srcport;
 8003480:	8aab      	ldrh	r3, [r5, #20]
 8003482:	4a77      	ldr	r2, [pc, #476]	; (8003660 <uip_process+0x630>)
  BUF->srcport = BUF->destport;
  BUF->destport = tmp16;
  
  /* Swap IP addresses. */
  uip_ipaddr_copy(&BUF->destipaddr, &BUF->srcipaddr);
 8003484:	4879      	ldr	r0, [pc, #484]	; (800366c <uip_process+0x63c>)
      }
    }
  }
 
  /* Swap port numbers. */
  tmp16 = BUF->srcport;
 8003486:	8013      	strh	r3, [r2, #0]
  BUF->srcport = BUF->destport;
 8003488:	8aea      	ldrh	r2, [r5, #22]
  BUF->destport = tmp16;
  
  /* Swap IP addresses. */
  uip_ipaddr_copy(&BUF->destipaddr, &BUF->srcipaddr);
 800348a:	1c04      	adds	r4, r0, #0
 800348c:	341a      	adds	r4, #26
    }
  }
 
  /* Swap port numbers. */
  tmp16 = BUF->srcport;
  BUF->srcport = BUF->destport;
 800348e:	82aa      	strh	r2, [r5, #20]
  BUF->destport = tmp16;
  
  /* Swap IP addresses. */
  uip_ipaddr_copy(&BUF->destipaddr, &BUF->srcipaddr);
 8003490:	1c21      	adds	r1, r4, #0
  }
 
  /* Swap port numbers. */
  tmp16 = BUF->srcport;
  BUF->srcport = BUF->destport;
  BUF->destport = tmp16;
 8003492:	82eb      	strh	r3, [r5, #22]
  
  /* Swap IP addresses. */
  uip_ipaddr_copy(&BUF->destipaddr, &BUF->srcipaddr);
 8003494:	2204      	movs	r2, #4
 8003496:	301e      	adds	r0, #30
 8003498:	f003 fca5 	bl	8006de6 <memcpy>
  uip_ipaddr_copy(&BUF->srcipaddr, &uip_hostaddr);
 800349c:	1c20      	adds	r0, r4, #0
 800349e:	496d      	ldr	r1, [pc, #436]	; (8003654 <uip_process+0x624>)
 80034a0:	2204      	movs	r2, #4
 80034a2:	f003 fca0 	bl	8006de6 <memcpy>
  
  /* And send out the RST packet! */
  goto tcp_send_noconn;
 80034a6:	e340      	b.n	8003b2a <uip_process+0xafa>
     TIME_WAIT are kept track of and we'll use the oldest one if no
     CLOSED connections are found. Thanks to Eddie C. Dost for a very
     nice algorithm for the TIME_WAIT search. */
  uip_connr = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
 80034a8:	4c6b      	ldr	r4, [pc, #428]	; (8003658 <uip_process+0x628>)
 80034aa:	7e63      	ldrb	r3, [r4, #25]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d103      	bne.n	80034b8 <uip_process+0x488>
 80034b0:	4b6d      	ldr	r3, [pc, #436]	; (8003668 <uip_process+0x638>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	701a      	strb	r2, [r3, #0]
 80034b6:	e008      	b.n	80034ca <uip_process+0x49a>
      uip_connr = &uip_conns[c];
      break;
    }
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
 80034b8:	2b07      	cmp	r3, #7
 80034ba:	d000      	beq.n	80034be <uip_process+0x48e>
 80034bc:	2400      	movs	r4, #0
 80034be:	4b6a      	ldr	r3, [pc, #424]	; (8003668 <uip_process+0x638>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
	uip_connr = &uip_conns[c];
      }
    }
  }

  if(uip_connr == 0) {
 80034c4:	2c00      	cmp	r4, #0
 80034c6:	d100      	bne.n	80034ca <uip_process+0x49a>
 80034c8:	e368      	b.n	8003b9c <uip_process+0xb6c>
       have more spare connections. */
    UIP_STAT(++uip_stat.tcp.syndrop);
    UIP_LOG("tcp: found no unused connections.");
    goto drop;
  }
  uip_conn = uip_connr;
 80034ca:	4b59      	ldr	r3, [pc, #356]	; (8003630 <uip_process+0x600>)
  
  /* Fill in the necessary fields for the new connection. */
  uip_connr->rto = uip_connr->timer = UIP_RTO;
  uip_connr->sa = 0;
 80034cc:	2600      	movs	r6, #0
       have more spare connections. */
    UIP_STAT(++uip_stat.tcp.syndrop);
    UIP_LOG("tcp: found no unused connections.");
    goto drop;
  }
  uip_conn = uip_connr;
 80034ce:	601c      	str	r4, [r3, #0]
  
  /* Fill in the necessary fields for the new connection. */
  uip_connr->rto = uip_connr->timer = UIP_RTO;
 80034d0:	2303      	movs	r3, #3
 80034d2:	76a3      	strb	r3, [r4, #26]
 80034d4:	7623      	strb	r3, [r4, #24]
  uip_connr->sa = 0;
  uip_connr->sv = 4;
 80034d6:	2304      	movs	r3, #4
  }
  uip_conn = uip_connr;
  
  /* Fill in the necessary fields for the new connection. */
  uip_connr->rto = uip_connr->timer = UIP_RTO;
  uip_connr->sa = 0;
 80034d8:	75a6      	strb	r6, [r4, #22]
  uip_connr->sv = 4;
 80034da:	75e3      	strb	r3, [r4, #23]
  uip_connr->nrtx = 0;
 80034dc:	76e6      	strb	r6, [r4, #27]
  uip_connr->lport = BUF->destport;
 80034de:	8aeb      	ldrh	r3, [r5, #22]
  uip_connr->rport = BUF->srcport;
  uip_ipaddr_copy(&uip_connr->ripaddr, &BUF->srcipaddr);
 80034e0:	495e      	ldr	r1, [pc, #376]	; (800365c <uip_process+0x62c>)
  /* Fill in the necessary fields for the new connection. */
  uip_connr->rto = uip_connr->timer = UIP_RTO;
  uip_connr->sa = 0;
  uip_connr->sv = 4;
  uip_connr->nrtx = 0;
  uip_connr->lport = BUF->destport;
 80034e2:	80a3      	strh	r3, [r4, #4]
  uip_connr->rport = BUF->srcport;
 80034e4:	8aab      	ldrh	r3, [r5, #20]
  uip_ipaddr_copy(&uip_connr->ripaddr, &BUF->srcipaddr);
 80034e6:	2204      	movs	r2, #4
  uip_connr->rto = uip_connr->timer = UIP_RTO;
  uip_connr->sa = 0;
  uip_connr->sv = 4;
  uip_connr->nrtx = 0;
  uip_connr->lport = BUF->destport;
  uip_connr->rport = BUF->srcport;
 80034e8:	80e3      	strh	r3, [r4, #6]
  uip_ipaddr_copy(&uip_connr->ripaddr, &BUF->srcipaddr);
 80034ea:	1c20      	adds	r0, r4, #0
 80034ec:	f003 fc7b 	bl	8006de6 <memcpy>
  uip_connr->tcpstateflags = UIP_SYN_RCVD;

  uip_connr->snd_nxt[0] = iss[0];
 80034f0:	4b5f      	ldr	r3, [pc, #380]	; (8003670 <uip_process+0x640>)
  uip_connr->sv = 4;
  uip_connr->nrtx = 0;
  uip_connr->lport = BUF->destport;
  uip_connr->rport = BUF->srcport;
  uip_ipaddr_copy(&uip_connr->ripaddr, &BUF->srcipaddr);
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
 80034f2:	2201      	movs	r2, #1
 80034f4:	7662      	strb	r2, [r4, #25]

  uip_connr->snd_nxt[0] = iss[0];
 80034f6:	7819      	ldrb	r1, [r3, #0]
  /* rcv_nxt should be the seqno from the incoming packet + 1. */
  uip_connr->rcv_nxt[3] = BUF->seqno[3];
  uip_connr->rcv_nxt[2] = BUF->seqno[2];
  uip_connr->rcv_nxt[1] = BUF->seqno[1];
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
  uip_add_rcv_nxt(1);
 80034f8:	2001      	movs	r0, #1
  uip_connr->lport = BUF->destport;
  uip_connr->rport = BUF->srcport;
  uip_ipaddr_copy(&uip_connr->ripaddr, &BUF->srcipaddr);
  uip_connr->tcpstateflags = UIP_SYN_RCVD;

  uip_connr->snd_nxt[0] = iss[0];
 80034fa:	7321      	strb	r1, [r4, #12]
  uip_connr->snd_nxt[1] = iss[1];
 80034fc:	7859      	ldrb	r1, [r3, #1]
 80034fe:	7361      	strb	r1, [r4, #13]
  uip_connr->snd_nxt[2] = iss[2];
 8003500:	7899      	ldrb	r1, [r3, #2]
 8003502:	73a1      	strb	r1, [r4, #14]
  uip_connr->snd_nxt[3] = iss[3];
 8003504:	78db      	ldrb	r3, [r3, #3]
  uip_connr->len = 1;
 8003506:	8222      	strh	r2, [r4, #16]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;

  uip_connr->snd_nxt[0] = iss[0];
  uip_connr->snd_nxt[1] = iss[1];
  uip_connr->snd_nxt[2] = iss[2];
  uip_connr->snd_nxt[3] = iss[3];
 8003508:	73e3      	strb	r3, [r4, #15]
  uip_connr->len = 1;

  /* rcv_nxt should be the seqno from the incoming packet + 1. */
  uip_connr->rcv_nxt[3] = BUF->seqno[3];
 800350a:	7eeb      	ldrb	r3, [r5, #27]
 800350c:	72e3      	strb	r3, [r4, #11]
  uip_connr->rcv_nxt[2] = BUF->seqno[2];
 800350e:	7eab      	ldrb	r3, [r5, #26]
 8003510:	72a3      	strb	r3, [r4, #10]
  uip_connr->rcv_nxt[1] = BUF->seqno[1];
 8003512:	7e6b      	ldrb	r3, [r5, #25]
 8003514:	7263      	strb	r3, [r4, #9]
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
 8003516:	7e2b      	ldrb	r3, [r5, #24]
  uip_add_rcv_nxt(1);

  /* Parse the TCP MSS option, if present. */
  if((BUF->tcpoffset & 0xf0) > 0x50) {
 8003518:	3501      	adds	r5, #1

  /* rcv_nxt should be the seqno from the incoming packet + 1. */
  uip_connr->rcv_nxt[3] = BUF->seqno[3];
  uip_connr->rcv_nxt[2] = BUF->seqno[2];
  uip_connr->rcv_nxt[1] = BUF->seqno[1];
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
 800351a:	7223      	strb	r3, [r4, #8]
  uip_add_rcv_nxt(1);
 800351c:	f7ff fcd8 	bl	8002ed0 <uip_add_rcv_nxt>

  /* Parse the TCP MSS option, if present. */
  if((BUF->tcpoffset & 0xf0) > 0x50) {
 8003520:	7feb      	ldrb	r3, [r5, #31]
 8003522:	22f0      	movs	r2, #240	; 0xf0
 8003524:	401a      	ands	r2, r3
 8003526:	2a50      	cmp	r2, #80	; 0x50
 8003528:	dd3f      	ble.n	80035aa <uip_process+0x57a>
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 800352a:	4a4f      	ldr	r2, [pc, #316]	; (8003668 <uip_process+0x638>)
 800352c:	0918      	lsrs	r0, r3, #4
 800352e:	7016      	strb	r6, [r2, #0]
 8003530:	4a50      	ldr	r2, [pc, #320]	; (8003674 <uip_process+0x644>)
 8003532:	3805      	subs	r0, #5
 8003534:	0080      	lsls	r0, r0, #2
 8003536:	7812      	ldrb	r2, [r2, #0]
 8003538:	2300      	movs	r3, #0
 800353a:	e030      	b.n	800359e <uip_process+0x56e>
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
 800353c:	494b      	ldr	r1, [pc, #300]	; (800366c <uip_process+0x63c>)
 800353e:	1859      	adds	r1, r3, r1
 8003540:	1c0a      	adds	r2, r1, #0
 8003542:	3236      	adds	r2, #54	; 0x36
 8003544:	7812      	ldrb	r2, [r2, #0]
      if(opt == TCP_OPT_END) {
 8003546:	2a00      	cmp	r2, #0
 8003548:	d02b      	beq.n	80035a2 <uip_process+0x572>
	/* End of options. */
	break;
      } else if(opt == TCP_OPT_NOOP) {
 800354a:	2a01      	cmp	r2, #1
 800354c:	d101      	bne.n	8003552 <uip_process+0x522>
	++c;
 800354e:	3301      	adds	r3, #1
 8003550:	e024      	b.n	800359c <uip_process+0x56c>
	/* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
 8003552:	2a02      	cmp	r2, #2
 8003554:	d11b      	bne.n	800358e <uip_process+0x55e>
		uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
 8003556:	1c0d      	adds	r5, r1, #0
 8003558:	3537      	adds	r5, #55	; 0x37
 800355a:	782d      	ldrb	r5, [r5, #0]
 800355c:	2d04      	cmp	r5, #4
 800355e:	d116      	bne.n	800358e <uip_process+0x55e>
 8003560:	4841      	ldr	r0, [pc, #260]	; (8003668 <uip_process+0x638>)
 8003562:	7003      	strb	r3, [r0, #0]
 8003564:	4b43      	ldr	r3, [pc, #268]	; (8003674 <uip_process+0x644>)
 8003566:	701a      	strb	r2, [r3, #0]
	/* An MSS option with the right option length. */
	tmp16 = ((uint16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 8003568:	1c0b      	adds	r3, r1, #0
 800356a:	3338      	adds	r3, #56	; 0x38
 800356c:	781a      	ldrb	r2, [r3, #0]
 800356e:	3139      	adds	r1, #57	; 0x39
 8003570:	780b      	ldrb	r3, [r1, #0]
 8003572:	0212      	lsls	r2, r2, #8
 8003574:	431a      	orrs	r2, r3
 8003576:	4b3a      	ldr	r3, [pc, #232]	; (8003660 <uip_process+0x630>)
	  (uint16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
	uip_connr->initialmss = uip_connr->mss =
 8003578:	1c11      	adds	r1, r2, #0
	++c;
	/* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
		uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	/* An MSS option with the right option length. */
	tmp16 = ((uint16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 800357a:	801a      	strh	r2, [r3, #0]
	  (uint16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
	uip_connr->initialmss = uip_connr->mss =
 800357c:	23e5      	movs	r3, #229	; 0xe5
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	429a      	cmp	r2, r3
 8003582:	d900      	bls.n	8003586 <uip_process+0x556>
 8003584:	1c19      	adds	r1, r3, #0
 8003586:	b28b      	uxth	r3, r1
 8003588:	8263      	strh	r3, [r4, #18]
 800358a:	82a3      	strh	r3, [r4, #20]
	  tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
	
	/* And we are done processing options. */
	break;
 800358c:	e00d      	b.n	80035aa <uip_process+0x57a>
      } else {
	/* All other options have a length field, so that we easily
	   can skip past them. */
	if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
 800358e:	4937      	ldr	r1, [pc, #220]	; (800366c <uip_process+0x63c>)
 8003590:	1859      	adds	r1, r3, r1
 8003592:	3137      	adds	r1, #55	; 0x37
 8003594:	7809      	ldrb	r1, [r1, #0]
 8003596:	2900      	cmp	r1, #0
 8003598:	d003      	beq.n	80035a2 <uip_process+0x572>
	  /* If the length field is zero, the options are malformed
	     and we don't process them further. */
	  break;
	}
	c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
 800359a:	18cb      	adds	r3, r1, r3
 800359c:	b2db      	uxtb	r3, r3
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
  uip_add_rcv_nxt(1);

  /* Parse the TCP MSS option, if present. */
  if((BUF->tcpoffset & 0xf0) > 0x50) {
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 800359e:	4283      	cmp	r3, r0
 80035a0:	dbcc      	blt.n	800353c <uip_process+0x50c>
 80035a2:	4931      	ldr	r1, [pc, #196]	; (8003668 <uip_process+0x638>)
 80035a4:	700b      	strb	r3, [r1, #0]
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <uip_process+0x644>)
 80035a8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Our response will be a SYNACK. */
#if UIP_ACTIVE_OPEN
 tcp_send_synack:
  BUF->flags = TCP_ACK;
 80035aa:	2210      	movs	r2, #16
 80035ac:	4b27      	ldr	r3, [pc, #156]	; (800364c <uip_process+0x61c>)
 80035ae:	3302      	adds	r3, #2
 80035b0:	77da      	strb	r2, [r3, #31]
  
 tcp_send_syn:
  BUF->flags |= TCP_SYN;
 80035b2:	4b26      	ldr	r3, [pc, #152]	; (800364c <uip_process+0x61c>)
 80035b4:	2102      	movs	r1, #2
 80035b6:	1c9a      	adds	r2, r3, #2
 80035b8:	7fd0      	ldrb	r0, [r2, #31]
 80035ba:	4301      	orrs	r1, r0
 80035bc:	77d1      	strb	r1, [r2, #31]
  BUF->flags = TCP_SYN | TCP_ACK;
#endif /* UIP_ACTIVE_OPEN */
  
  /* We send out the TCP Maximum Segment Size option with our
     SYNACK. */
  BUF->optdata[0] = TCP_OPT_MSS;
 80035be:	3226      	adds	r2, #38	; 0x26
 80035c0:	2102      	movs	r1, #2
 80035c2:	7011      	strb	r1, [r2, #0]
  BUF->optdata[1] = TCP_OPT_MSS_LEN;
 80035c4:	3201      	adds	r2, #1
 80035c6:	2104      	movs	r1, #4
 80035c8:	7011      	strb	r1, [r2, #0]
  BUF->optdata[2] = (UIP_TCP_MSS) / 256;
 80035ca:	3201      	adds	r2, #1
 80035cc:	2101      	movs	r1, #1
 80035ce:	7011      	strb	r1, [r2, #0]
  BUF->optdata[3] = (UIP_TCP_MSS) & 255;
 80035d0:	1c19      	adds	r1, r3, #0
 80035d2:	2236      	movs	r2, #54	; 0x36
 80035d4:	312b      	adds	r1, #43	; 0x2b
 80035d6:	4252      	negs	r2, r2
 80035d8:	700a      	strb	r2, [r1, #0]
  uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
 80035da:	4a1b      	ldr	r2, [pc, #108]	; (8003648 <uip_process+0x618>)
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	8011      	strh	r1, [r2, #0]
  BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
 80035e0:	3301      	adds	r3, #1
 80035e2:	2260      	movs	r2, #96	; 0x60
 80035e4:	e26f      	b.n	8003ac6 <uip_process+0xa96>
  goto tcp_send;

  /* This label will be jumped to if we found an active connection. */
 found:
  uip_conn = uip_connr;
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <uip_process+0x600>)
 80035e8:	4a1b      	ldr	r2, [pc, #108]	; (8003658 <uip_process+0x628>)
  uip_flags = 0;
 80035ea:	4912      	ldr	r1, [pc, #72]	; (8003634 <uip_process+0x604>)
 80035ec:	2000      	movs	r0, #0
  BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
  goto tcp_send;

  /* This label will be jumped to if we found an active connection. */
 found:
  uip_conn = uip_connr;
 80035ee:	601a      	str	r2, [r3, #0]
  uip_flags = 0;
 80035f0:	7008      	strb	r0, [r1, #0]
  /* We do a very naive form of TCP reset processing; we just accept
     any RST and kill our connection. We should in fact check if the
     sequence number of this reset is wihtin our advertised window
     before we accept the reset. */
  if(BUF->flags & TCP_RST) {
 80035f2:	1cab      	adds	r3, r5, #2
 80035f4:	7fdb      	ldrb	r3, [r3, #31]
 80035f6:	075c      	lsls	r4, r3, #29
 80035f8:	d503      	bpl.n	8003602 <uip_process+0x5d2>
    uip_connr->tcpstateflags = UIP_CLOSED;
    UIP_LOG("tcp: got reset, aborting connection.");
    uip_flags = UIP_ABORT;
 80035fa:	2320      	movs	r3, #32
  /* We do a very naive form of TCP reset processing; we just accept
     any RST and kill our connection. We should in fact check if the
     sequence number of this reset is wihtin our advertised window
     before we accept the reset. */
  if(BUF->flags & TCP_RST) {
    uip_connr->tcpstateflags = UIP_CLOSED;
 80035fc:	7650      	strb	r0, [r2, #25]
    UIP_LOG("tcp: got reset, aborting connection.");
    uip_flags = UIP_ABORT;
 80035fe:	700b      	strb	r3, [r1, #0]
 8003600:	e20d      	b.n	8003a1e <uip_process+0x9ee>
    UIP_APPCALL();
    goto drop;
  }
  /* Calculate the length of the data, if the application has sent
     any data to us. */
  c = (BUF->tcpoffset >> 4) << 2;
 8003602:	1c69      	adds	r1, r5, #1
 8003604:	7fcc      	ldrb	r4, [r1, #31]
  /* uip_len will contain the length of the actual TCP data. This is
     calculated by subtracing the length of the TCP header (in
     c) and the length of the IP header (20 bytes). */
  uip_len = uip_len - c - UIP_IPH_LEN;
 8003606:	4810      	ldr	r0, [pc, #64]	; (8003648 <uip_process+0x618>)
    UIP_APPCALL();
    goto drop;
  }
  /* Calculate the length of the data, if the application has sent
     any data to us. */
  c = (BUF->tcpoffset >> 4) << 2;
 8003608:	4917      	ldr	r1, [pc, #92]	; (8003668 <uip_process+0x638>)
 800360a:	0924      	lsrs	r4, r4, #4
 800360c:	00a4      	lsls	r4, r4, #2
 800360e:	700c      	strb	r4, [r1, #0]
  /* uip_len will contain the length of the actual TCP data. This is
     calculated by subtracing the length of the TCP header (in
     c) and the length of the IP header (20 bytes). */
  uip_len = uip_len - c - UIP_IPH_LEN;
 8003610:	8801      	ldrh	r1, [r0, #0]
 8003612:	3914      	subs	r1, #20
 8003614:	1b09      	subs	r1, r1, r4
 8003616:	b289      	uxth	r1, r1
 8003618:	8001      	strh	r1, [r0, #0]
  /* First, check if the sequence number of the incoming packet is
     what we're expecting next. If not, we send out an ACK with the
     correct numbers in, unless we are in the SYN_RCVD state and
     receive a SYN, in which case we should retransmit our SYNACK
     (which is done futher down). */
  if(!((((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
 800361a:	7e50      	ldrb	r0, [r2, #25]
 800361c:	220f      	movs	r2, #15
 800361e:	4002      	ands	r2, r0
 8003620:	2a02      	cmp	r2, #2
 8003622:	d129      	bne.n	8003678 <uip_process+0x648>
	((BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK))) ||
 8003624:	223f      	movs	r2, #63	; 0x3f
 8003626:	4013      	ands	r3, r2
 8003628:	2b12      	cmp	r3, #18
 800362a:	d12b      	bne.n	8003684 <uip_process+0x654>
 800362c:	e03b      	b.n	80036a6 <uip_process+0x676>
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	20001788 	.word	0x20001788
 8003634:	2000177c 	.word	0x2000177c
 8003638:	200015a6 	.word	0x200015a6
 800363c:	20001784 	.word	0x20001784
 8003640:	20001574 	.word	0x20001574
 8003644:	200017e4 	.word	0x200017e4
 8003648:	20001570 	.word	0x20001570
 800364c:	2000158a 	.word	0x2000158a
 8003650:	20001780 	.word	0x20001780
 8003654:	200017e0 	.word	0x200017e0
 8003658:	2000178c 	.word	0x2000178c
 800365c:	20001596 	.word	0x20001596
 8003660:	20000fc8 	.word	0x20000fc8
 8003664:	200017b0 	.word	0x200017b0
 8003668:	20000fcc 	.word	0x20000fcc
 800366c:	2000157c 	.word	0x2000157c
 8003670:	20000fc4 	.word	0x20000fc4
 8003674:	20000fcd 	.word	0x20000fcd
  /* First, check if the sequence number of the incoming packet is
     what we're expecting next. If not, we send out an ACK with the
     correct numbers in, unless we are in the SYN_RCVD state and
     receive a SYN, in which case we should retransmit our SYNACK
     (which is done futher down). */
  if(!((((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
 8003678:	2a01      	cmp	r2, #1
 800367a:	d103      	bne.n	8003684 <uip_process+0x654>
	((BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK))) ||
       (((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_RCVD) &&
	((BUF->flags & TCP_CTL) == TCP_SYN)))) {
 800367c:	223f      	movs	r2, #63	; 0x3f
 800367e:	4013      	ands	r3, r2
 8003680:	2b02      	cmp	r3, #2
 8003682:	d010      	beq.n	80036a6 <uip_process+0x676>
    if((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
 8003684:	2900      	cmp	r1, #0
 8003686:	d103      	bne.n	8003690 <uip_process+0x660>
 8003688:	1cab      	adds	r3, r5, #2
 800368a:	7fdb      	ldrb	r3, [r3, #31]
 800368c:	0798      	lsls	r0, r3, #30
 800368e:	d00a      	beq.n	80036a6 <uip_process+0x676>
       (BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
 8003690:	4bc1      	ldr	r3, [pc, #772]	; (8003998 <uip_process+0x968>)
 8003692:	8b29      	ldrh	r1, [r5, #24]
 8003694:	891a      	ldrh	r2, [r3, #8]
 8003696:	4291      	cmp	r1, r2
 8003698:	d000      	beq.n	800369c <uip_process+0x66c>
 800369a:	e20a      	b.n	8003ab2 <uip_process+0xa82>
	BUF->seqno[1] != uip_connr->rcv_nxt[1] ||
	BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
 800369c:	8b6a      	ldrh	r2, [r5, #26]
 800369e:	895b      	ldrh	r3, [r3, #10]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d000      	beq.n	80036a6 <uip_process+0x676>
 80036a4:	e205      	b.n	8003ab2 <uip_process+0xa82>

  /* Next, check if the incoming segment acknowledges any outstanding
     data. If so, we update the sequence number, reset the length of
     the outstanding data, calculate RTT estimations, and reset the
     retransmission timer. */
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
 80036a6:	1cab      	adds	r3, r5, #2
 80036a8:	7fdb      	ldrb	r3, [r3, #31]
 80036aa:	06d9      	lsls	r1, r3, #27
 80036ac:	d53e      	bpl.n	800372c <uip_process+0x6fc>
 80036ae:	4cba      	ldr	r4, [pc, #744]	; (8003998 <uip_process+0x968>)
 80036b0:	8a21      	ldrh	r1, [r4, #16]
 80036b2:	2900      	cmp	r1, #0
 80036b4:	d03a      	beq.n	800372c <uip_process+0x6fc>
    uip_add32(uip_connr->snd_nxt, uip_connr->len);
 80036b6:	1c20      	adds	r0, r4, #0
 80036b8:	300c      	adds	r0, #12
 80036ba:	f7ff fb77 	bl	8002dac <uip_add32>

    if(BUF->ackno[0] == uip_acc32[0] &&
 80036be:	4bb7      	ldr	r3, [pc, #732]	; (800399c <uip_process+0x96c>)
 80036c0:	7f2a      	ldrb	r2, [r5, #28]
 80036c2:	781e      	ldrb	r6, [r3, #0]
 80036c4:	4296      	cmp	r6, r2
 80036c6:	d131      	bne.n	800372c <uip_process+0x6fc>
       BUF->ackno[1] == uip_acc32[1] &&
 80036c8:	7f68      	ldrb	r0, [r5, #29]
 80036ca:	785a      	ldrb	r2, [r3, #1]
 80036cc:	4290      	cmp	r0, r2
 80036ce:	d12d      	bne.n	800372c <uip_process+0x6fc>
       BUF->ackno[2] == uip_acc32[2] &&
 80036d0:	7fa9      	ldrb	r1, [r5, #30]
 80036d2:	789a      	ldrb	r2, [r3, #2]
 80036d4:	4291      	cmp	r1, r2
 80036d6:	d129      	bne.n	800372c <uip_process+0x6fc>
       BUF->ackno[3] == uip_acc32[3]) {
 80036d8:	7fea      	ldrb	r2, [r5, #31]
 80036da:	78db      	ldrb	r3, [r3, #3]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d125      	bne.n	800372c <uip_process+0x6fc>
      uip_connr->snd_nxt[1] = uip_acc32[1];
      uip_connr->snd_nxt[2] = uip_acc32[2];
      uip_connr->snd_nxt[3] = uip_acc32[3];
	
      /* Do RTT estimation, unless we have done retransmissions. */
      if(uip_connr->nrtx == 0) {
 80036e0:	7ee3      	ldrb	r3, [r4, #27]
    if(BUF->ackno[0] == uip_acc32[0] &&
       BUF->ackno[1] == uip_acc32[1] &&
       BUF->ackno[2] == uip_acc32[2] &&
       BUF->ackno[3] == uip_acc32[3]) {
      /* Update sequence number. */
      uip_connr->snd_nxt[0] = uip_acc32[0];
 80036e2:	7326      	strb	r6, [r4, #12]
      uip_connr->snd_nxt[1] = uip_acc32[1];
 80036e4:	7360      	strb	r0, [r4, #13]
      uip_connr->snd_nxt[2] = uip_acc32[2];
 80036e6:	73a1      	strb	r1, [r4, #14]
      uip_connr->snd_nxt[3] = uip_acc32[3];
 80036e8:	73e2      	strb	r2, [r4, #15]
	
      /* Do RTT estimation, unless we have done retransmissions. */
      if(uip_connr->nrtx == 0) {
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d116      	bne.n	800371c <uip_process+0x6ec>
	signed char m;
	m = uip_connr->rto - uip_connr->timer;
	/* This is taken directly from VJs original code in his paper */
	m = m - (uip_connr->sa >> 3);
 80036ee:	7da2      	ldrb	r2, [r4, #22]
 80036f0:	7e21      	ldrb	r1, [r4, #24]
 80036f2:	7ea3      	ldrb	r3, [r4, #26]
 80036f4:	1ac9      	subs	r1, r1, r3
 80036f6:	08d3      	lsrs	r3, r2, #3
 80036f8:	1ac9      	subs	r1, r1, r3
	uip_connr->sa += m;
	if(m < 0) {
	  m = -m;
	}
	m = m - (uip_connr->sv >> 2);
 80036fa:	7de3      	ldrb	r3, [r4, #23]
      /* Do RTT estimation, unless we have done retransmissions. */
      if(uip_connr->nrtx == 0) {
	signed char m;
	m = uip_connr->rto - uip_connr->timer;
	/* This is taken directly from VJs original code in his paper */
	m = m - (uip_connr->sa >> 3);
 80036fc:	b2c9      	uxtb	r1, r1
	uip_connr->sa += m;
 80036fe:	188a      	adds	r2, r1, r2
	if(m < 0) {
	  m = -m;
	}
	m = m - (uip_connr->sv >> 2);
	uip_connr->sv += m;
 8003700:	0898      	lsrs	r0, r3, #2
 8003702:	b249      	sxtb	r1, r1
 8003704:	1a1b      	subs	r3, r3, r0
 8003706:	17c8      	asrs	r0, r1, #31
 8003708:	1809      	adds	r1, r1, r0
 800370a:	4041      	eors	r1, r0
      if(uip_connr->nrtx == 0) {
	signed char m;
	m = uip_connr->rto - uip_connr->timer;
	/* This is taken directly from VJs original code in his paper */
	m = m - (uip_connr->sa >> 3);
	uip_connr->sa += m;
 800370c:	b2d2      	uxtb	r2, r2
	if(m < 0) {
	  m = -m;
	}
	m = m - (uip_connr->sv >> 2);
	uip_connr->sv += m;
 800370e:	185b      	adds	r3, r3, r1
 8003710:	b2db      	uxtb	r3, r3
      if(uip_connr->nrtx == 0) {
	signed char m;
	m = uip_connr->rto - uip_connr->timer;
	/* This is taken directly from VJs original code in his paper */
	m = m - (uip_connr->sa >> 3);
	uip_connr->sa += m;
 8003712:	75a2      	strb	r2, [r4, #22]
	if(m < 0) {
	  m = -m;
	}
	m = m - (uip_connr->sv >> 2);
	uip_connr->sv += m;
	uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
 8003714:	08d2      	lsrs	r2, r2, #3
	uip_connr->sa += m;
	if(m < 0) {
	  m = -m;
	}
	m = m - (uip_connr->sv >> 2);
	uip_connr->sv += m;
 8003716:	75e3      	strb	r3, [r4, #23]
	uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
 8003718:	189b      	adds	r3, r3, r2
 800371a:	7623      	strb	r3, [r4, #24]

      }
      /* Set the acknowledged flag. */
      uip_flags = UIP_ACKDATA;
 800371c:	4ba0      	ldr	r3, [pc, #640]	; (80039a0 <uip_process+0x970>)
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]
      /* Reset the retransmission timer. */
      uip_connr->timer = uip_connr->rto;
 8003722:	4b9d      	ldr	r3, [pc, #628]	; (8003998 <uip_process+0x968>)
 8003724:	7e1a      	ldrb	r2, [r3, #24]
 8003726:	769a      	strb	r2, [r3, #26]

      /* Reset length of outstanding data. */
      uip_connr->len = 0;
 8003728:	2200      	movs	r2, #0
 800372a:	821a      	strh	r2, [r3, #16]
    }
    
  }

  /* Do different things depending on in what state the connection is. */
  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
 800372c:	4b9a      	ldr	r3, [pc, #616]	; (8003998 <uip_process+0x968>)
 800372e:	7e5a      	ldrb	r2, [r3, #25]
 8003730:	230f      	movs	r3, #15
 8003732:	4013      	ands	r3, r2
 8003734:	3b01      	subs	r3, #1
 8003736:	2b07      	cmp	r3, #7
 8003738:	d900      	bls.n	800373c <uip_process+0x70c>
 800373a:	e22f      	b.n	8003b9c <uip_process+0xb6c>
 800373c:	4999      	ldr	r1, [pc, #612]	; (80039a4 <uip_process+0x974>)
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	5859      	ldr	r1, [r3, r1]
 8003742:	4b97      	ldr	r3, [pc, #604]	; (80039a0 <uip_process+0x970>)
 8003744:	468f      	mov	pc, r1
  case UIP_SYN_RCVD:
    /* In SYN_RCVD we have sent out a SYNACK in response to a SYN, and
       we are waiting for an ACK that acknowledges the data we sent
       out the last time. Therefore, we want to have the UIP_ACKDATA
       flag set. If so, we enter the ESTABLISHED state. */
    if(uip_flags & UIP_ACKDATA) {
 8003746:	781a      	ldrb	r2, [r3, #0]
 8003748:	07d1      	lsls	r1, r2, #31
 800374a:	d515      	bpl.n	8003778 <uip_process+0x748>
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
 800374c:	4a92      	ldr	r2, [pc, #584]	; (8003998 <uip_process+0x968>)
 800374e:	2103      	movs	r1, #3
 8003750:	7651      	strb	r1, [r2, #25]
      uip_flags = UIP_CONNECTED;
 8003752:	2140      	movs	r1, #64	; 0x40
 8003754:	7019      	strb	r1, [r3, #0]
      uip_connr->len = 0;
 8003756:	2100      	movs	r1, #0
 8003758:	8211      	strh	r1, [r2, #16]
      if(uip_len > 0) {
 800375a:	4a93      	ldr	r2, [pc, #588]	; (80039a8 <uip_process+0x978>)
 800375c:	8810      	ldrh	r0, [r2, #0]
 800375e:	2800      	cmp	r0, #0
 8003760:	d003      	beq.n	800376a <uip_process+0x73a>
        uip_flags |= UIP_NEWDATA;
 8003762:	2242      	movs	r2, #66	; 0x42
 8003764:	701a      	strb	r2, [r3, #0]
        uip_add_rcv_nxt(uip_len);
 8003766:	f7ff fbb3 	bl	8002ed0 <uip_add_rcv_nxt>
      }
      uip_slen = 0;
 800376a:	4b90      	ldr	r3, [pc, #576]	; (80039ac <uip_process+0x97c>)
 800376c:	2200      	movs	r2, #0
 800376e:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
 8003770:	f001 f83e 	bl	80047f0 <tcpip_uipcall>
 8003774:	4c88      	ldr	r4, [pc, #544]	; (8003998 <uip_process+0x968>)
      goto appsend;
 8003776:	e0e4      	b.n	8003942 <uip_process+0x912>
    }
    /* We need to retransmit the SYNACK */
    if((BUF->flags & TCP_CTL) == TCP_SYN) {
 8003778:	3502      	adds	r5, #2
 800377a:	7fea      	ldrb	r2, [r5, #31]
 800377c:	233f      	movs	r3, #63	; 0x3f
 800377e:	4013      	ands	r3, r2
 8003780:	2b02      	cmp	r3, #2
 8003782:	d000      	beq.n	8003786 <uip_process+0x756>
 8003784:	e20a      	b.n	8003b9c <uip_process+0xb6c>
 8003786:	4c84      	ldr	r4, [pc, #528]	; (8003998 <uip_process+0x968>)
 8003788:	e70f      	b.n	80035aa <uip_process+0x57a>
  case UIP_SYN_SENT:
    /* In SYN_SENT, we wait for a SYNACK that is sent in response to
       our SYN. The rcv_nxt is set to sequence number in the SYNACK
       plus one, and we send an ACK. We move into the ESTABLISHED
       state. */
    if((uip_flags & UIP_ACKDATA) &&
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	07da      	lsls	r2, r3, #31
 800378e:	d565      	bpl.n	800385c <uip_process+0x82c>
       (BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {
 8003790:	1cab      	adds	r3, r5, #2
 8003792:	7fda      	ldrb	r2, [r3, #31]
 8003794:	233f      	movs	r3, #63	; 0x3f
 8003796:	4013      	ands	r3, r2
 8003798:	2b12      	cmp	r3, #18
 800379a:	d15f      	bne.n	800385c <uip_process+0x82c>

      /* Parse the TCP MSS option, if present. */
      if((BUF->tcpoffset & 0xf0) > 0x50) {
 800379c:	1c6b      	adds	r3, r5, #1
 800379e:	7fdb      	ldrb	r3, [r3, #31]
 80037a0:	22f0      	movs	r2, #240	; 0xf0
 80037a2:	401a      	ands	r2, r3
 80037a4:	2a50      	cmp	r2, #80	; 0x50
 80037a6:	dd41      	ble.n	800382c <uip_process+0x7fc>
	for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 80037a8:	4a81      	ldr	r2, [pc, #516]	; (80039b0 <uip_process+0x980>)
 80037aa:	2100      	movs	r1, #0
 80037ac:	0918      	lsrs	r0, r3, #4
 80037ae:	7011      	strb	r1, [r2, #0]
 80037b0:	4a80      	ldr	r2, [pc, #512]	; (80039b4 <uip_process+0x984>)
 80037b2:	3805      	subs	r0, #5
 80037b4:	0080      	lsls	r0, r0, #2
 80037b6:	7812      	ldrb	r2, [r2, #0]
 80037b8:	2300      	movs	r3, #0
 80037ba:	e031      	b.n	8003820 <uip_process+0x7f0>
	  opt = uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + c];
 80037bc:	497e      	ldr	r1, [pc, #504]	; (80039b8 <uip_process+0x988>)
 80037be:	1859      	adds	r1, r3, r1
 80037c0:	1c0a      	adds	r2, r1, #0
 80037c2:	3236      	adds	r2, #54	; 0x36
 80037c4:	7812      	ldrb	r2, [r2, #0]
	  if(opt == TCP_OPT_END) {
 80037c6:	2a00      	cmp	r2, #0
 80037c8:	d02c      	beq.n	8003824 <uip_process+0x7f4>
	    /* End of options. */
	    break;
	  } else if(opt == TCP_OPT_NOOP) {
 80037ca:	2a01      	cmp	r2, #1
 80037cc:	d101      	bne.n	80037d2 <uip_process+0x7a2>
	    ++c;
 80037ce:	3301      	adds	r3, #1
 80037d0:	e025      	b.n	800381e <uip_process+0x7ee>
	    /* NOP option. */
	  } else if(opt == TCP_OPT_MSS &&
 80037d2:	2a02      	cmp	r2, #2
 80037d4:	d11c      	bne.n	8003810 <uip_process+0x7e0>
		    uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
 80037d6:	1c0c      	adds	r4, r1, #0
 80037d8:	3437      	adds	r4, #55	; 0x37
 80037da:	7824      	ldrb	r4, [r4, #0]
 80037dc:	2c04      	cmp	r4, #4
 80037de:	d117      	bne.n	8003810 <uip_process+0x7e0>
 80037e0:	4873      	ldr	r0, [pc, #460]	; (80039b0 <uip_process+0x980>)
 80037e2:	7003      	strb	r3, [r0, #0]
 80037e4:	4b73      	ldr	r3, [pc, #460]	; (80039b4 <uip_process+0x984>)
 80037e6:	701a      	strb	r2, [r3, #0]
	    /* An MSS option with the right option length. */
	    tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 80037e8:	1c0b      	adds	r3, r1, #0
 80037ea:	3338      	adds	r3, #56	; 0x38
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	3139      	adds	r1, #57	; 0x39
 80037f0:	780b      	ldrb	r3, [r1, #0]
 80037f2:	0212      	lsls	r2, r2, #8
 80037f4:	431a      	orrs	r2, r3
 80037f6:	4b71      	ldr	r3, [pc, #452]	; (80039bc <uip_process+0x98c>)
	      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
	    uip_connr->initialmss =
	      uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
 80037f8:	1c11      	adds	r1, r2, #0
	    ++c;
	    /* NOP option. */
	  } else if(opt == TCP_OPT_MSS &&
		    uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	    /* An MSS option with the right option length. */
	    tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 80037fa:	801a      	strh	r2, [r3, #0]
	      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
	    uip_connr->initialmss =
	      uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
 80037fc:	23e5      	movs	r3, #229	; 0xe5
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	429a      	cmp	r2, r3
 8003802:	d900      	bls.n	8003806 <uip_process+0x7d6>
 8003804:	1c19      	adds	r1, r3, #0
	  } else if(opt == TCP_OPT_MSS &&
		    uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	    /* An MSS option with the right option length. */
	    tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
	      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
	    uip_connr->initialmss =
 8003806:	4b64      	ldr	r3, [pc, #400]	; (8003998 <uip_process+0x968>)
	      uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
 8003808:	b28a      	uxth	r2, r1
	  } else if(opt == TCP_OPT_MSS &&
		    uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	    /* An MSS option with the right option length. */
	    tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
	      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
	    uip_connr->initialmss =
 800380a:	825a      	strh	r2, [r3, #18]
 800380c:	829a      	strh	r2, [r3, #20]
	      uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;

	    /* And we are done processing options. */
	    break;
 800380e:	e00d      	b.n	800382c <uip_process+0x7fc>
	  } else {
	    /* All other options have a length field, so that we easily
	       can skip past them. */
	    if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
 8003810:	4969      	ldr	r1, [pc, #420]	; (80039b8 <uip_process+0x988>)
 8003812:	1859      	adds	r1, r3, r1
 8003814:	3137      	adds	r1, #55	; 0x37
 8003816:	7809      	ldrb	r1, [r1, #0]
 8003818:	2900      	cmp	r1, #0
 800381a:	d003      	beq.n	8003824 <uip_process+0x7f4>
	      /* If the length field is zero, the options are malformed
		 and we don't process them further. */
	      break;
	    }
	    c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
 800381c:	18cb      	adds	r3, r1, r3
 800381e:	b2db      	uxtb	r3, r3
    if((uip_flags & UIP_ACKDATA) &&
       (BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {

      /* Parse the TCP MSS option, if present. */
      if((BUF->tcpoffset & 0xf0) > 0x50) {
	for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 8003820:	4283      	cmp	r3, r0
 8003822:	dbcb      	blt.n	80037bc <uip_process+0x78c>
 8003824:	4962      	ldr	r1, [pc, #392]	; (80039b0 <uip_process+0x980>)
 8003826:	700b      	strb	r3, [r1, #0]
 8003828:	4b62      	ldr	r3, [pc, #392]	; (80039b4 <uip_process+0x984>)
 800382a:	701a      	strb	r2, [r3, #0]
	    }
	    c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
	  }
	}
      }
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
 800382c:	4c5a      	ldr	r4, [pc, #360]	; (8003998 <uip_process+0x968>)
 800382e:	2303      	movs	r3, #3
 8003830:	7663      	strb	r3, [r4, #25]
      uip_connr->rcv_nxt[0] = BUF->seqno[0];
 8003832:	7e2b      	ldrb	r3, [r5, #24]
      uip_connr->rcv_nxt[1] = BUF->seqno[1];
      uip_connr->rcv_nxt[2] = BUF->seqno[2];
      uip_connr->rcv_nxt[3] = BUF->seqno[3];
      uip_add_rcv_nxt(1);
 8003834:	2001      	movs	r0, #1
	    c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
	  }
	}
      }
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
      uip_connr->rcv_nxt[0] = BUF->seqno[0];
 8003836:	7223      	strb	r3, [r4, #8]
      uip_connr->rcv_nxt[1] = BUF->seqno[1];
 8003838:	7e6b      	ldrb	r3, [r5, #25]
 800383a:	7263      	strb	r3, [r4, #9]
      uip_connr->rcv_nxt[2] = BUF->seqno[2];
 800383c:	7eab      	ldrb	r3, [r5, #26]
 800383e:	72a3      	strb	r3, [r4, #10]
      uip_connr->rcv_nxt[3] = BUF->seqno[3];
 8003840:	7eeb      	ldrb	r3, [r5, #27]
 8003842:	72e3      	strb	r3, [r4, #11]
      uip_add_rcv_nxt(1);
 8003844:	f7ff fb44 	bl	8002ed0 <uip_add_rcv_nxt>
      uip_flags = UIP_CONNECTED | UIP_NEWDATA;
 8003848:	4b55      	ldr	r3, [pc, #340]	; (80039a0 <uip_process+0x970>)
 800384a:	2242      	movs	r2, #66	; 0x42
 800384c:	701a      	strb	r2, [r3, #0]
      uip_connr->len = 0;
      uip_len = 0;
 800384e:	4a56      	ldr	r2, [pc, #344]	; (80039a8 <uip_process+0x978>)
      uip_connr->rcv_nxt[1] = BUF->seqno[1];
      uip_connr->rcv_nxt[2] = BUF->seqno[2];
      uip_connr->rcv_nxt[3] = BUF->seqno[3];
      uip_add_rcv_nxt(1);
      uip_flags = UIP_CONNECTED | UIP_NEWDATA;
      uip_connr->len = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	8223      	strh	r3, [r4, #16]
      uip_len = 0;
 8003854:	8013      	strh	r3, [r2, #0]
      uip_slen = 0;
 8003856:	4a55      	ldr	r2, [pc, #340]	; (80039ac <uip_process+0x97c>)
 8003858:	8013      	strh	r3, [r2, #0]
 800385a:	e070      	b.n	800393e <uip_process+0x90e>
      UIP_APPCALL();
      goto appsend;
    }
    /* Inform the application that the connection failed */
    uip_flags = UIP_ABORT;
 800385c:	4b50      	ldr	r3, [pc, #320]	; (80039a0 <uip_process+0x970>)
 800385e:	2220      	movs	r2, #32
 8003860:	701a      	strb	r2, [r3, #0]
    UIP_APPCALL();
 8003862:	f000 ffc5 	bl	80047f0 <tcpip_uipcall>
    /* The connection is closed after we send the RST */
    uip_conn->tcpstateflags = UIP_CLOSED;
 8003866:	4b56      	ldr	r3, [pc, #344]	; (80039c0 <uip_process+0x990>)
 8003868:	2200      	movs	r2, #0
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	765a      	strb	r2, [r3, #25]
    goto reset;
 800386e:	e5d8      	b.n	8003422 <uip_process+0x3f2>
    If the incoming packet is a FIN, we should close the connection on
    this side as well, and we send out a FIN and enter the LAST_ACK
    state. We require that there is no outstanding data; otherwise the
    sequence numbers will be screwed up. */

    if(BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
 8003870:	1cab      	adds	r3, r5, #2
 8003872:	7fdb      	ldrb	r3, [r3, #31]
 8003874:	07dc      	lsls	r4, r3, #31
 8003876:	d525      	bpl.n	80038c4 <uip_process+0x894>
 8003878:	06d0      	lsls	r0, r2, #27
 800387a:	d423      	bmi.n	80038c4 <uip_process+0x894>
      if(uip_outstanding(uip_connr)) {
 800387c:	4b46      	ldr	r3, [pc, #280]	; (8003998 <uip_process+0x968>)
 800387e:	8a1b      	ldrh	r3, [r3, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d000      	beq.n	8003886 <uip_process+0x856>
 8003884:	e18a      	b.n	8003b9c <uip_process+0xb6c>
	goto drop;
      }
      uip_add_rcv_nxt(1 + uip_len);
 8003886:	4c48      	ldr	r4, [pc, #288]	; (80039a8 <uip_process+0x978>)
 8003888:	8820      	ldrh	r0, [r4, #0]
 800388a:	3001      	adds	r0, #1
 800388c:	b280      	uxth	r0, r0
 800388e:	f7ff fb1f 	bl	8002ed0 <uip_add_rcv_nxt>
      uip_flags |= UIP_CLOSE;
 8003892:	4b43      	ldr	r3, [pc, #268]	; (80039a0 <uip_process+0x970>)
 8003894:	2210      	movs	r2, #16
 8003896:	7819      	ldrb	r1, [r3, #0]
 8003898:	430a      	orrs	r2, r1
      if(uip_len > 0) {
 800389a:	8821      	ldrh	r1, [r4, #0]
    if(BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
      if(uip_outstanding(uip_connr)) {
	goto drop;
      }
      uip_add_rcv_nxt(1 + uip_len);
      uip_flags |= UIP_CLOSE;
 800389c:	701a      	strb	r2, [r3, #0]
      if(uip_len > 0) {
 800389e:	2900      	cmp	r1, #0
 80038a0:	d002      	beq.n	80038a8 <uip_process+0x878>
	uip_flags |= UIP_NEWDATA;
 80038a2:	2102      	movs	r1, #2
 80038a4:	430a      	orrs	r2, r1
 80038a6:	701a      	strb	r2, [r3, #0]
      }
      UIP_APPCALL();
 80038a8:	f000 ffa2 	bl	80047f0 <tcpip_uipcall>
      uip_connr->len = 1;
 80038ac:	4c3a      	ldr	r4, [pc, #232]	; (8003998 <uip_process+0x968>)
 80038ae:	2301      	movs	r3, #1
 80038b0:	8223      	strh	r3, [r4, #16]
      uip_connr->tcpstateflags = UIP_LAST_ACK;
 80038b2:	2308      	movs	r3, #8
 80038b4:	7663      	strb	r3, [r4, #25]
      uip_connr->nrtx = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	76e3      	strb	r3, [r4, #27]
    tcp_send_finack:
      BUF->flags = TCP_FIN | TCP_ACK;
 80038ba:	2211      	movs	r2, #17
 80038bc:	4b41      	ldr	r3, [pc, #260]	; (80039c4 <uip_process+0x994>)
 80038be:	3302      	adds	r3, #2
 80038c0:	77da      	strb	r2, [r3, #31]
      goto tcp_send_nodata;
 80038c2:	e0fa      	b.n	8003aba <uip_process+0xa8a>
    }

    /* Check the URG flag. If this is set, the segment carries urgent
       data that we must pass to the application. */
    if((BUF->flags & TCP_URG) != 0) {
 80038c4:	0699      	lsls	r1, r3, #26
 80038c6:	d50e      	bpl.n	80038e6 <uip_process+0x8b6>
      uip_urgdata = uip_appdata;
      uip_appdata += uip_urglen;
    } else {
      uip_urglen = 0;
#else /* UIP_URGDATA > 0 */
      uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
 80038c8:	1dea      	adds	r2, r5, #7
 80038ca:	1c29      	adds	r1, r5, #0
 80038cc:	7fd2      	ldrb	r2, [r2, #31]
 80038ce:	3108      	adds	r1, #8
 80038d0:	7fc9      	ldrb	r1, [r1, #31]
 80038d2:	4b3d      	ldr	r3, [pc, #244]	; (80039c8 <uip_process+0x998>)
 80038d4:	0212      	lsls	r2, r2, #8
 80038d6:	430a      	orrs	r2, r1
 80038d8:	6819      	ldr	r1, [r3, #0]
 80038da:	1889      	adds	r1, r1, r2
 80038dc:	6019      	str	r1, [r3, #0]
      uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
 80038de:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <uip_process+0x978>)
 80038e0:	8819      	ldrh	r1, [r3, #0]
 80038e2:	1a8a      	subs	r2, r1, r2
 80038e4:	801a      	strh	r2, [r3, #0]
    /* If uip_len > 0 we have TCP data in the packet, and we flag this
       by setting the UIP_NEWDATA flag and update the sequence number
       we acknowledge. If the application has stopped the dataflow
       using uip_stop(), we must not accept any data packets from the
       remote host. */
    if(uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
 80038e6:	4b30      	ldr	r3, [pc, #192]	; (80039a8 <uip_process+0x978>)
 80038e8:	8818      	ldrh	r0, [r3, #0]
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d00a      	beq.n	8003904 <uip_process+0x8d4>
 80038ee:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <uip_process+0x968>)
 80038f0:	7e5b      	ldrb	r3, [r3, #25]
 80038f2:	06da      	lsls	r2, r3, #27
 80038f4:	d406      	bmi.n	8003904 <uip_process+0x8d4>
      uip_flags |= UIP_NEWDATA;
 80038f6:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <uip_process+0x970>)
 80038f8:	2202      	movs	r2, #2
 80038fa:	7819      	ldrb	r1, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	701a      	strb	r2, [r3, #0]
      uip_add_rcv_nxt(uip_len);
 8003900:	f7ff fae6 	bl	8002ed0 <uip_add_rcv_nxt>
       the initial MSS so that the application will send an entire MSS
       of data. This data will not be acknowledged by the receiver,
       and the application will retransmit it. This is called the
       "persistent timer" and uses the retransmission mechanim.
    */
    tmp16 = ((uint16_t)BUF->wnd[0] << 8) + (uint16_t)BUF->wnd[1];
 8003904:	1ceb      	adds	r3, r5, #3
 8003906:	7fdb      	ldrb	r3, [r3, #31]
 8003908:	3504      	adds	r5, #4
 800390a:	7fea      	ldrb	r2, [r5, #31]
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	189b      	adds	r3, r3, r2
 8003910:	4a2a      	ldr	r2, [pc, #168]	; (80039bc <uip_process+0x98c>)
 8003912:	b29b      	uxth	r3, r3
 8003914:	8013      	strh	r3, [r2, #0]
    if(tmp16 > uip_connr->initialmss ||
 8003916:	4a20      	ldr	r2, [pc, #128]	; (8003998 <uip_process+0x968>)
 8003918:	8a92      	ldrh	r2, [r2, #20]
 800391a:	4293      	cmp	r3, r2
 800391c:	d801      	bhi.n	8003922 <uip_process+0x8f2>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <uip_process+0x8f6>
       tmp16 == 0) {
      tmp16 = uip_connr->initialmss;
 8003922:	4b26      	ldr	r3, [pc, #152]	; (80039bc <uip_process+0x98c>)
 8003924:	801a      	strh	r2, [r3, #0]
    }
    uip_connr->mss = tmp16;
 8003926:	4b25      	ldr	r3, [pc, #148]	; (80039bc <uip_process+0x98c>)
 8003928:	4c1b      	ldr	r4, [pc, #108]	; (8003998 <uip_process+0x968>)
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	8263      	strh	r3, [r4, #18]

       If the application wishes to send any data, this data should be
       put into the uip_appdata and the length of the data should be
       put into uip_len. If the application don't have any data to
       send, uip_len must be set to 0. */
    if(uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
 800392e:	4b1c      	ldr	r3, [pc, #112]	; (80039a0 <uip_process+0x970>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	079d      	lsls	r5, r3, #30
 8003934:	d100      	bne.n	8003938 <uip_process+0x908>
 8003936:	e131      	b.n	8003b9c <uip_process+0xb6c>
      uip_slen = 0;
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <uip_process+0x97c>)
 800393a:	2200      	movs	r2, #0
 800393c:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
 800393e:	f000 ff57 	bl	80047f0 <tcpip_uipcall>

    appsend:
      
      if(uip_flags & UIP_ABORT) {
 8003942:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <uip_process+0x970>)
 8003944:	781a      	ldrb	r2, [r3, #0]
 8003946:	2320      	movs	r3, #32
 8003948:	1c10      	adds	r0, r2, #0
 800394a:	4018      	ands	r0, r3
 800394c:	d006      	beq.n	800395c <uip_process+0x92c>
	uip_slen = 0;
 800394e:	4b17      	ldr	r3, [pc, #92]	; (80039ac <uip_process+0x97c>)
 8003950:	2200      	movs	r2, #0
 8003952:	801a      	strh	r2, [r3, #0]
	uip_connr->tcpstateflags = UIP_CLOSED;
 8003954:	2300      	movs	r3, #0
 8003956:	7663      	strb	r3, [r4, #25]
	BUF->flags = TCP_RST | TCP_ACK;
 8003958:	2214      	movs	r2, #20
 800395a:	e7af      	b.n	80038bc <uip_process+0x88c>
	goto tcp_send_nodata;
      }

      if(uip_flags & UIP_CLOSE) {
 800395c:	2110      	movs	r1, #16
 800395e:	4b13      	ldr	r3, [pc, #76]	; (80039ac <uip_process+0x97c>)
 8003960:	4011      	ands	r1, r2
 8003962:	d006      	beq.n	8003972 <uip_process+0x942>
	uip_slen = 0;
 8003964:	8018      	strh	r0, [r3, #0]
	uip_connr->len = 1;
 8003966:	2301      	movs	r3, #1
 8003968:	8223      	strh	r3, [r4, #16]
	uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
 800396a:	2304      	movs	r3, #4
 800396c:	7663      	strb	r3, [r4, #25]
	uip_connr->nrtx = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	e7a2      	b.n	80038b8 <uip_process+0x888>
	BUF->flags = TCP_FIN | TCP_ACK;
	goto tcp_send_nodata;
      }

      /* If uip_slen > 0, the application has data to be sent. */
      if(uip_slen > 0) {
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d02a      	beq.n	80039ce <uip_process+0x99e>

	/* If the connection has acknowledged data, the contents of
	   the ->len variable should be discarded. */
	if((uip_flags & UIP_ACKDATA) != 0) {
 8003978:	07d0      	lsls	r0, r2, #31
 800397a:	d500      	bpl.n	800397e <uip_process+0x94e>
	  uip_connr->len = 0;
 800397c:	8221      	strh	r1, [r4, #16]
	}

	/* If the ->len variable is non-zero the connection has
	   already data in transit and cannot send anymore right
	   now. */
	if(uip_connr->len == 0) {
 800397e:	8a22      	ldrh	r2, [r4, #16]
 8003980:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <uip_process+0x97c>)
 8003982:	2a00      	cmp	r2, #0
 8003984:	d122      	bne.n	80039cc <uip_process+0x99c>

	  /* The application cannot send more than what is allowed by
	     the mss (the minumum of the MSS and the available
	     window). */
	  if(uip_slen > uip_connr->mss) {
 8003986:	8a62      	ldrh	r2, [r4, #18]
 8003988:	8819      	ldrh	r1, [r3, #0]
 800398a:	4291      	cmp	r1, r2
 800398c:	d900      	bls.n	8003990 <uip_process+0x960>
	    uip_slen = uip_connr->mss;
 800398e:	801a      	strh	r2, [r3, #0]
	  }

	  /* Remember how much data we send out now so that we know
	     when everything has been acknowledged. */
	  uip_connr->len = uip_slen;
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <uip_process+0x97c>)
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	8223      	strh	r3, [r4, #16]
 8003996:	e01a      	b.n	80039ce <uip_process+0x99e>
 8003998:	2000178c 	.word	0x2000178c
 800399c:	20001578 	.word	0x20001578
 80039a0:	2000177c 	.word	0x2000177c
 80039a4:	0800ae48 	.word	0x0800ae48
 80039a8:	20001570 	.word	0x20001570
 80039ac:	200017e4 	.word	0x200017e4
 80039b0:	20000fcc 	.word	0x20000fcc
 80039b4:	20000fcd 	.word	0x20000fcd
 80039b8:	2000157c 	.word	0x2000157c
 80039bc:	20000fc8 	.word	0x20000fc8
 80039c0:	20001788 	.word	0x20001788
 80039c4:	2000158a 	.word	0x2000158a
 80039c8:	20001784 	.word	0x20001784
	} else {

	  /* If the application already had unacknowledged data, we
	     make sure that the application does not send (i.e.,
	     retransmit) out more than it previously sent out. */
	  uip_slen = uip_connr->len;
 80039cc:	801a      	strh	r2, [r3, #0]
	}
      }
      uip_connr->nrtx = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	76e3      	strb	r3, [r4, #27]
    apprexmit:
      uip_appdata = uip_sappdata;
 80039d2:	4b76      	ldr	r3, [pc, #472]	; (8003bac <uip_process+0xb7c>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4b76      	ldr	r3, [pc, #472]	; (8003bb0 <uip_process+0xb80>)
 80039d8:	601a      	str	r2, [r3, #0]
      
      /* If the application has data to be sent, or if the incoming
         packet had new data in it, we must send out a packet. */
      if(uip_slen > 0 && uip_connr->len > 0) {
 80039da:	4b76      	ldr	r3, [pc, #472]	; (8003bb4 <uip_process+0xb84>)
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <uip_process+0x9c2>
 80039e2:	8a23      	ldrh	r3, [r4, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d004      	beq.n	80039f2 <uip_process+0x9c2>
	/* Add the length of the IP and TCP headers. */
	uip_len = uip_connr->len + UIP_TCPIP_HLEN;
 80039e8:	4a73      	ldr	r2, [pc, #460]	; (8003bb8 <uip_process+0xb88>)
 80039ea:	3328      	adds	r3, #40	; 0x28
 80039ec:	8013      	strh	r3, [r2, #0]
	/* We always set the ACK flag in response packets. */
	BUF->flags = TCP_ACK | TCP_PSH;
 80039ee:	2218      	movs	r2, #24
 80039f0:	e008      	b.n	8003a04 <uip_process+0x9d4>
	/* Send the packet. */
	goto tcp_send_noopts;
      }
      /* If there is no data to send, just send out a pure ACK if
	 there is newdata. */
      if(uip_flags & UIP_NEWDATA) {
 80039f2:	4b72      	ldr	r3, [pc, #456]	; (8003bbc <uip_process+0xb8c>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	0799      	lsls	r1, r3, #30
 80039f8:	d400      	bmi.n	80039fc <uip_process+0x9cc>
 80039fa:	e0cf      	b.n	8003b9c <uip_process+0xb6c>
	uip_len = UIP_TCPIP_HLEN;
 80039fc:	4b6e      	ldr	r3, [pc, #440]	; (8003bb8 <uip_process+0xb88>)
 80039fe:	2228      	movs	r2, #40	; 0x28
 8003a00:	801a      	strh	r2, [r3, #0]
	BUF->flags = TCP_ACK;
 8003a02:	2210      	movs	r2, #16
 8003a04:	4b6e      	ldr	r3, [pc, #440]	; (8003bc0 <uip_process+0xb90>)
 8003a06:	3302      	adds	r3, #2
 8003a08:	77da      	strb	r2, [r3, #31]
	goto tcp_send_noopts;
 8003a0a:	e059      	b.n	8003ac0 <uip_process+0xa90>
    }
    goto drop;
  case UIP_LAST_ACK:
    /* We can close this connection if the peer has acknowledged our
       FIN. This is indicated by the UIP_ACKDATA flag. */
    if(uip_flags & UIP_ACKDATA) {
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	07d4      	lsls	r4, r2, #31
 8003a10:	d400      	bmi.n	8003a14 <uip_process+0x9e4>
 8003a12:	e0c3      	b.n	8003b9c <uip_process+0xb6c>
      uip_connr->tcpstateflags = UIP_CLOSED;
 8003a14:	4a6b      	ldr	r2, [pc, #428]	; (8003bc4 <uip_process+0xb94>)
 8003a16:	2100      	movs	r1, #0
 8003a18:	7651      	strb	r1, [r2, #25]
      uip_flags = UIP_CLOSE;
 8003a1a:	2210      	movs	r2, #16
 8003a1c:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 8003a1e:	f000 fee7 	bl	80047f0 <tcpip_uipcall>
 8003a22:	e0bb      	b.n	8003b9c <uip_process+0xb6c>
    
  case UIP_FIN_WAIT_1:
    /* The application has closed the connection, but the remote host
       hasn't closed its end yet. Thus we do nothing but wait for a
       FIN from the other side. */
    if(uip_len > 0) {
 8003a24:	4b64      	ldr	r3, [pc, #400]	; (8003bb8 <uip_process+0xb88>)
 8003a26:	8818      	ldrh	r0, [r3, #0]
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	d001      	beq.n	8003a30 <uip_process+0xa00>
      uip_add_rcv_nxt(uip_len);
 8003a2c:	f7ff fa50 	bl	8002ed0 <uip_add_rcv_nxt>
    }
    if(BUF->flags & TCP_FIN) {
 8003a30:	1cab      	adds	r3, r5, #2
 8003a32:	7fd9      	ldrb	r1, [r3, #31]
 8003a34:	2201      	movs	r2, #1
 8003a36:	4b61      	ldr	r3, [pc, #388]	; (8003bbc <uip_process+0xb8c>)
 8003a38:	4011      	ands	r1, r2
 8003a3a:	d00c      	beq.n	8003a56 <uip_process+0xa26>
      if(uip_flags & UIP_ACKDATA) {
 8003a3c:	7819      	ldrb	r1, [r3, #0]
 8003a3e:	4b61      	ldr	r3, [pc, #388]	; (8003bc4 <uip_process+0xb94>)
 8003a40:	4211      	tst	r1, r2
 8003a42:	d005      	beq.n	8003a50 <uip_process+0xa20>
	uip_connr->tcpstateflags = UIP_TIME_WAIT;
 8003a44:	2207      	movs	r2, #7
 8003a46:	765a      	strb	r2, [r3, #25]
	uip_connr->timer = 0;
 8003a48:	2200      	movs	r2, #0
 8003a4a:	769a      	strb	r2, [r3, #26]
	uip_connr->len = 0;
 8003a4c:	821a      	strh	r2, [r3, #16]
 8003a4e:	e019      	b.n	8003a84 <uip_process+0xa54>
      } else {
	uip_connr->tcpstateflags = UIP_CLOSING;
 8003a50:	2206      	movs	r2, #6
 8003a52:	765a      	strb	r2, [r3, #25]
 8003a54:	e016      	b.n	8003a84 <uip_process+0xa54>
      }
      uip_add_rcv_nxt(1);
      uip_flags = UIP_CLOSE;
      UIP_APPCALL();
      goto tcp_send_ack;
    } else if(uip_flags & UIP_ACKDATA) {
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	4213      	tst	r3, r2
 8003a5a:	d01c      	beq.n	8003a96 <uip_process+0xa66>
      uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
 8003a5c:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <uip_process+0xb94>)
 8003a5e:	2205      	movs	r2, #5
 8003a60:	765a      	strb	r2, [r3, #25]
      uip_connr->len = 0;
 8003a62:	8219      	strh	r1, [r3, #16]
      goto drop;
 8003a64:	e09a      	b.n	8003b9c <uip_process+0xb6c>
      goto tcp_send_ack;
    }
    goto drop;
      
  case UIP_FIN_WAIT_2:
    if(uip_len > 0) {
 8003a66:	4b54      	ldr	r3, [pc, #336]	; (8003bb8 <uip_process+0xb88>)
 8003a68:	8818      	ldrh	r0, [r3, #0]
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	d001      	beq.n	8003a72 <uip_process+0xa42>
      uip_add_rcv_nxt(uip_len);
 8003a6e:	f7ff fa2f 	bl	8002ed0 <uip_add_rcv_nxt>
    }
    if(BUF->flags & TCP_FIN) {
 8003a72:	1cab      	adds	r3, r5, #2
 8003a74:	7fdb      	ldrb	r3, [r3, #31]
 8003a76:	07d8      	lsls	r0, r3, #31
 8003a78:	d50d      	bpl.n	8003a96 <uip_process+0xa66>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
 8003a7a:	4b52      	ldr	r3, [pc, #328]	; (8003bc4 <uip_process+0xb94>)
 8003a7c:	2207      	movs	r2, #7
 8003a7e:	765a      	strb	r2, [r3, #25]
      uip_connr->timer = 0;
 8003a80:	2200      	movs	r2, #0
 8003a82:	769a      	strb	r2, [r3, #26]
      uip_add_rcv_nxt(1);
 8003a84:	2001      	movs	r0, #1
 8003a86:	f7ff fa23 	bl	8002ed0 <uip_add_rcv_nxt>
      uip_flags = UIP_CLOSE;
 8003a8a:	4b4c      	ldr	r3, [pc, #304]	; (8003bbc <uip_process+0xb8c>)
 8003a8c:	2210      	movs	r2, #16
 8003a8e:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 8003a90:	f000 feae 	bl	80047f0 <tcpip_uipcall>
      goto tcp_send_ack;
 8003a94:	e00d      	b.n	8003ab2 <uip_process+0xa82>
    }
    if(uip_len > 0) {
 8003a96:	4b48      	ldr	r3, [pc, #288]	; (8003bb8 <uip_process+0xb88>)
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <uip_process+0xa82>
 8003a9e:	e07d      	b.n	8003b9c <uip_process+0xb6c>

  case UIP_TIME_WAIT:
    goto tcp_send_ack;
    
  case UIP_CLOSING:
    if(uip_flags & UIP_ACKDATA) {
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	07d9      	lsls	r1, r3, #31
 8003aa4:	d57a      	bpl.n	8003b9c <uip_process+0xb6c>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <uip_process+0xb94>)
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	765a      	strb	r2, [r3, #25]
      uip_connr->timer = 0;
 8003aac:	2200      	movs	r2, #0
 8003aae:	769a      	strb	r2, [r3, #26]
 8003ab0:	e074      	b.n	8003b9c <uip_process+0xb6c>
  goto drop;
  
  /* We jump here when we are ready to send the packet, and just want
     to set the appropriate TCP sequence numbers in the TCP header. */
 tcp_send_ack:
  BUF->flags = TCP_ACK;
 8003ab2:	3502      	adds	r5, #2
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	4c43      	ldr	r4, [pc, #268]	; (8003bc4 <uip_process+0xb94>)
 8003ab8:	77eb      	strb	r3, [r5, #31]
  
 tcp_send_nodata:
  uip_len = UIP_IPTCPH_LEN;
 8003aba:	4b3f      	ldr	r3, [pc, #252]	; (8003bb8 <uip_process+0xb88>)
 8003abc:	2228      	movs	r2, #40	; 0x28
 8003abe:	801a      	strh	r2, [r3, #0]

 tcp_send_noopts:
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
 8003ac0:	4b3f      	ldr	r3, [pc, #252]	; (8003bc0 <uip_process+0xb90>)
 8003ac2:	2250      	movs	r2, #80	; 0x50
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	77da      	strb	r2, [r3, #31]
  /* We're done with the input processing. We are now ready to send a
     reply. Our job is to fill in all the fields of the TCP and IP
     headers before calculating the checksum and finally send the
     packet. */
 tcp_send:
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
 8003ac8:	4d3d      	ldr	r5, [pc, #244]	; (8003bc0 <uip_process+0xb90>)
 8003aca:	7a23      	ldrb	r3, [r4, #8]
  BUF->proto = UIP_PROTO_TCP;
  
  BUF->srcport  = uip_connr->lport;
  BUF->destport = uip_connr->rport;

  uip_ipaddr_copy(&BUF->srcipaddr, &uip_hostaddr);
 8003acc:	1c28      	adds	r0, r5, #0
  /* We're done with the input processing. We are now ready to send a
     reply. Our job is to fill in all the fields of the TCP and IP
     headers before calculating the checksum and finally send the
     packet. */
 tcp_send:
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
 8003ace:	772b      	strb	r3, [r5, #28]
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
 8003ad0:	7a63      	ldrb	r3, [r4, #9]
  BUF->proto = UIP_PROTO_TCP;
  
  BUF->srcport  = uip_connr->lport;
  BUF->destport = uip_connr->rport;

  uip_ipaddr_copy(&BUF->srcipaddr, &uip_hostaddr);
 8003ad2:	493d      	ldr	r1, [pc, #244]	; (8003bc8 <uip_process+0xb98>)
     reply. Our job is to fill in all the fields of the TCP and IP
     headers before calculating the checksum and finally send the
     packet. */
 tcp_send:
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
 8003ad4:	776b      	strb	r3, [r5, #29]
  BUF->ackno[2] = uip_connr->rcv_nxt[2];
 8003ad6:	7aa3      	ldrb	r3, [r4, #10]
  BUF->proto = UIP_PROTO_TCP;
  
  BUF->srcport  = uip_connr->lport;
  BUF->destport = uip_connr->rport;

  uip_ipaddr_copy(&BUF->srcipaddr, &uip_hostaddr);
 8003ad8:	2204      	movs	r2, #4
     headers before calculating the checksum and finally send the
     packet. */
 tcp_send:
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
  BUF->ackno[2] = uip_connr->rcv_nxt[2];
 8003ada:	77ab      	strb	r3, [r5, #30]
  BUF->ackno[3] = uip_connr->rcv_nxt[3];
 8003adc:	7ae3      	ldrb	r3, [r4, #11]
  BUF->proto = UIP_PROTO_TCP;
  
  BUF->srcport  = uip_connr->lport;
  BUF->destport = uip_connr->rport;

  uip_ipaddr_copy(&BUF->srcipaddr, &uip_hostaddr);
 8003ade:	300c      	adds	r0, #12
     packet. */
 tcp_send:
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
  BUF->ackno[2] = uip_connr->rcv_nxt[2];
  BUF->ackno[3] = uip_connr->rcv_nxt[3];
 8003ae0:	77eb      	strb	r3, [r5, #31]
  
  BUF->seqno[0] = uip_connr->snd_nxt[0];
 8003ae2:	7b23      	ldrb	r3, [r4, #12]
 8003ae4:	762b      	strb	r3, [r5, #24]
  BUF->seqno[1] = uip_connr->snd_nxt[1];
 8003ae6:	7b63      	ldrb	r3, [r4, #13]
 8003ae8:	766b      	strb	r3, [r5, #25]
  BUF->seqno[2] = uip_connr->snd_nxt[2];
 8003aea:	7ba3      	ldrb	r3, [r4, #14]
 8003aec:	76ab      	strb	r3, [r5, #26]
  BUF->seqno[3] = uip_connr->snd_nxt[3];
 8003aee:	7be3      	ldrb	r3, [r4, #15]
 8003af0:	76eb      	strb	r3, [r5, #27]

  BUF->proto = UIP_PROTO_TCP;
 8003af2:	2306      	movs	r3, #6
 8003af4:	726b      	strb	r3, [r5, #9]
  
  BUF->srcport  = uip_connr->lport;
 8003af6:	88a3      	ldrh	r3, [r4, #4]
 8003af8:	82ab      	strh	r3, [r5, #20]
  BUF->destport = uip_connr->rport;
 8003afa:	88e3      	ldrh	r3, [r4, #6]
 8003afc:	82eb      	strh	r3, [r5, #22]

  uip_ipaddr_copy(&BUF->srcipaddr, &uip_hostaddr);
 8003afe:	f003 f972 	bl	8006de6 <memcpy>
  uip_ipaddr_copy(&BUF->destipaddr, &uip_connr->ripaddr);
 8003b02:	1c28      	adds	r0, r5, #0
 8003b04:	2204      	movs	r2, #4
 8003b06:	3010      	adds	r0, #16
 8003b08:	1c21      	adds	r1, r4, #0
 8003b0a:	f003 f96c 	bl	8006de6 <memcpy>

  if(uip_connr->tcpstateflags & UIP_STOPPED) {
 8003b0e:	7e63      	ldrb	r3, [r4, #25]
 8003b10:	1d2a      	adds	r2, r5, #4
 8003b12:	3503      	adds	r5, #3
 8003b14:	06dc      	lsls	r4, r3, #27
 8003b16:	d503      	bpl.n	8003b20 <uip_process+0xaf0>
    /* If the connection has issued uip_stop(), we advertise a zero
       window so that the remote host will stop sending data. */
    BUF->wnd[0] = BUF->wnd[1] = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	77d3      	strb	r3, [r2, #31]
 8003b1c:	77eb      	strb	r3, [r5, #31]
 8003b1e:	e004      	b.n	8003b2a <uip_process+0xafa>
  } else {
    BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
 8003b20:	2301      	movs	r3, #1
 8003b22:	77eb      	strb	r3, [r5, #31]
    BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
 8003b24:	2336      	movs	r3, #54	; 0x36
 8003b26:	425b      	negs	r3, r3
 8003b28:	77d3      	strb	r3, [r2, #31]
  }
  
 tcp_send_noconn:
  BUF->ttl = UIP_TTL;
 8003b2a:	4c25      	ldr	r4, [pc, #148]	; (8003bc0 <uip_process+0xb90>)
 8003b2c:	2340      	movs	r3, #64	; 0x40
 8003b2e:	7223      	strb	r3, [r4, #8]
  /* For IPv6, the IP length field does not include the IPv6 IP header
     length. */
  BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
  BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
#else /* UIP_CONF_IPV6 */
  BUF->len[0] = (uip_len >> 8);
 8003b30:	4b21      	ldr	r3, [pc, #132]	; (8003bb8 <uip_process+0xb88>)
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	0a1a      	lsrs	r2, r3, #8
 8003b36:	70a2      	strb	r2, [r4, #2]
  BUF->len[1] = (uip_len & 0xff);
#endif /* UIP_CONF_IPV6 */

  BUF->urgp[0] = BUF->urgp[1] = 0;
 8003b38:	1c22      	adds	r2, r4, #0
     length. */
  BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
  BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
#else /* UIP_CONF_IPV6 */
  BUF->len[0] = (uip_len >> 8);
  BUF->len[1] = (uip_len & 0xff);
 8003b3a:	70e3      	strb	r3, [r4, #3]
#endif /* UIP_CONF_IPV6 */

  BUF->urgp[0] = BUF->urgp[1] = 0;
 8003b3c:	3208      	adds	r2, #8
 8003b3e:	2300      	movs	r3, #0
 8003b40:	77d3      	strb	r3, [r2, #31]
 8003b42:	1de2      	adds	r2, r4, #7
 8003b44:	77d3      	strb	r3, [r2, #31]
  
  /* Calculate TCP checksum. */
  BUF->tcpchksum = 0;
 8003b46:	84a3      	strh	r3, [r4, #36]	; 0x24
  BUF->tcpchksum = ~(uip_tcpchksum());
 8003b48:	f7ff fa52 	bl	8002ff0 <uip_tcpchksum>
 8003b4c:	43c0      	mvns	r0, r0
 8003b4e:	84a0      	strh	r0, [r4, #36]	; 0x24
#if UIP_CONF_IPV6
  BUF->vtc = 0x60;
  BUF->tcflow = 0x00;
  BUF->flow = 0x00;
#else /* UIP_CONF_IPV6 */
  BUF->vhl = 0x45;
 8003b50:	4c1b      	ldr	r4, [pc, #108]	; (8003bc0 <uip_process+0xb90>)
 8003b52:	2345      	movs	r3, #69	; 0x45
 8003b54:	7023      	strb	r3, [r4, #0]
  BUF->tos = 0;
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
  ++ipid;
 8003b56:	491d      	ldr	r1, [pc, #116]	; (8003bcc <uip_process+0xb9c>)
  BUF->vtc = 0x60;
  BUF->tcflow = 0x00;
  BUF->flow = 0x00;
#else /* UIP_CONF_IPV6 */
  BUF->vhl = 0x45;
  BUF->tos = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	7063      	strb	r3, [r4, #1]
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
 8003b5c:	71e3      	strb	r3, [r4, #7]
 8003b5e:	71a3      	strb	r3, [r4, #6]
  ++ipid;
 8003b60:	880a      	ldrh	r2, [r1, #0]
 8003b62:	3201      	adds	r2, #1
 8003b64:	b292      	uxth	r2, r2
 8003b66:	800a      	strh	r2, [r1, #0]
  BUF->ipid[0] = ipid >> 8;
 8003b68:	0a11      	lsrs	r1, r2, #8
  BUF->ipid[1] = ipid & 0xff;
 8003b6a:	7162      	strb	r2, [r4, #5]
  /* Calculate IP checksum. */
  BUF->ipchksum = 0;
 8003b6c:	8163      	strh	r3, [r4, #10]
#else /* UIP_CONF_IPV6 */
  BUF->vhl = 0x45;
  BUF->tos = 0;
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
  ++ipid;
  BUF->ipid[0] = ipid >> 8;
 8003b6e:	7121      	strb	r1, [r4, #4]
  BUF->ipid[1] = ipid & 0xff;
  /* Calculate IP checksum. */
  BUF->ipchksum = 0;
  BUF->ipchksum = ~(uip_ipchksum());
 8003b70:	f7ff f9ca 	bl	8002f08 <uip_ipchksum>
 8003b74:	43c0      	mvns	r0, r0
 8003b76:	8160      	strh	r0, [r4, #10]
  DEBUG_PRINTF("uip ip_send_nolen: chkecum 0x%04x\n", uip_ipchksum());
 8003b78:	f7ff f9c6 	bl	8002f08 <uip_ipchksum>
 8003b7c:	1c01      	adds	r1, r0, #0
 8003b7e:	4814      	ldr	r0, [pc, #80]	; (8003bd0 <uip_process+0xba0>)
 8003b80:	f002 fef4 	bl	800696c <iprintf>
#endif /* UIP_CONF_IPV6 */   
  UIP_STAT(++uip_stat.tcp.sent);
#if UIP_CONF_IPV6
 send:
#endif /* UIP_CONF_IPV6 */
  DEBUG_PRINTF("Sending packet with length %d (%d)\n", uip_len,
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <uip_process+0xb88>)
 8003b86:	78a2      	ldrb	r2, [r4, #2]
 8003b88:	8819      	ldrh	r1, [r3, #0]
 8003b8a:	78e3      	ldrb	r3, [r4, #3]
 8003b8c:	0212      	lsls	r2, r2, #8
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	4810      	ldr	r0, [pc, #64]	; (8003bd4 <uip_process+0xba4>)
 8003b92:	f002 feeb 	bl	800696c <iprintf>
	       (BUF->len[0] << 8) | BUF->len[1]);
  
  UIP_STAT(++uip_stat.ip.sent);
  /* Return and let the caller do the actual transmission. */
  uip_flags = 0;
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <uip_process+0xb8c>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	e003      	b.n	8003ba4 <uip_process+0xb74>
  return;

 drop:
  uip_len = 0;
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <uip_process+0xb88>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	801a      	strh	r2, [r3, #0]
  uip_flags = 0;
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <uip_process+0xb8c>)
  return;
}
 8003ba4:	b003      	add	sp, #12
  uip_flags = 0;
  return;

 drop:
  uip_len = 0;
  uip_flags = 0;
 8003ba6:	701a      	strb	r2, [r3, #0]
  return;
}
 8003ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	20001574 	.word	0x20001574
 8003bb0:	20001784 	.word	0x20001784
 8003bb4:	200017e4 	.word	0x200017e4
 8003bb8:	20001570 	.word	0x20001570
 8003bbc:	2000177c 	.word	0x2000177c
 8003bc0:	2000158a 	.word	0x2000158a
 8003bc4:	2000178c 	.word	0x2000178c
 8003bc8:	200017e0 	.word	0x200017e0
 8003bcc:	20000fc0 	.word	0x20000fc0
 8003bd0:	0800ae8a 	.word	0x0800ae8a
 8003bd4:	0800aead 	.word	0x0800aead

08003bd8 <uip_arp_out>:
 * uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_out(void)
{
 8003bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

     If not ARP table entry is found, we overwrite the original IP
     packet with an ARP request for the IP address. */

  /* First check if destination is a local broadcast. */
  if(uip_ipaddr_cmp(&IPBUF->destipaddr, &uip_broadcast_addr)) {
 8003bda:	4e4c      	ldr	r6, [pc, #304]	; (8003d0c <uip_arp_out+0x134>)
 8003bdc:	4b4c      	ldr	r3, [pc, #304]	; (8003d10 <uip_arp_out+0x138>)
 8003bde:	8bf0      	ldrh	r0, [r6, #30]
 8003be0:	881a      	ldrh	r2, [r3, #0]
 8003be2:	1c31      	adds	r1, r6, #0
 8003be4:	311e      	adds	r1, #30
 8003be6:	4290      	cmp	r0, r2
 8003be8:	d106      	bne.n	8003bf8 <uip_arp_out+0x20>
 8003bea:	884a      	ldrh	r2, [r1, #2]
 8003bec:	885b      	ldrh	r3, [r3, #2]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d102      	bne.n	8003bf8 <uip_arp_out+0x20>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
 8003bf2:	1c30      	adds	r0, r6, #0
 8003bf4:	4947      	ldr	r1, [pc, #284]	; (8003d14 <uip_arp_out+0x13c>)
 8003bf6:	e079      	b.n	8003cec <uip_arp_out+0x114>
  } else if(IPBUF->destipaddr.u8[0] == 224) {
 8003bf8:	4b44      	ldr	r3, [pc, #272]	; (8003d0c <uip_arp_out+0x134>)
 8003bfa:	7f9a      	ldrb	r2, [r3, #30]
 8003bfc:	2ae0      	cmp	r2, #224	; 0xe0
 8003bfe:	d10e      	bne.n	8003c1e <uip_arp_out+0x46>
    /* Multicast. */
    IPBUF->ethhdr.dest.addr[0] = 0x01;
 8003c00:	2201      	movs	r2, #1
 8003c02:	701a      	strb	r2, [r3, #0]
    IPBUF->ethhdr.dest.addr[1] = 0x00;
 8003c04:	2200      	movs	r2, #0
 8003c06:	705a      	strb	r2, [r3, #1]
    IPBUF->ethhdr.dest.addr[2] = 0x5e;
 8003c08:	225e      	movs	r2, #94	; 0x5e
 8003c0a:	709a      	strb	r2, [r3, #2]
    IPBUF->ethhdr.dest.addr[3] = IPBUF->destipaddr.u8[1];
 8003c0c:	7fda      	ldrb	r2, [r3, #31]
 8003c0e:	70da      	strb	r2, [r3, #3]
    IPBUF->ethhdr.dest.addr[4] = IPBUF->destipaddr.u8[2];
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	7fd1      	ldrb	r1, [r2, #31]
    IPBUF->ethhdr.dest.addr[5] = IPBUF->destipaddr.u8[3];
 8003c14:	3201      	adds	r2, #1
    /* Multicast. */
    IPBUF->ethhdr.dest.addr[0] = 0x01;
    IPBUF->ethhdr.dest.addr[1] = 0x00;
    IPBUF->ethhdr.dest.addr[2] = 0x5e;
    IPBUF->ethhdr.dest.addr[3] = IPBUF->destipaddr.u8[1];
    IPBUF->ethhdr.dest.addr[4] = IPBUF->destipaddr.u8[2];
 8003c16:	7119      	strb	r1, [r3, #4]
    IPBUF->ethhdr.dest.addr[5] = IPBUF->destipaddr.u8[3];
 8003c18:	7fd2      	ldrb	r2, [r2, #31]
 8003c1a:	715a      	strb	r2, [r3, #5]
 8003c1c:	e069      	b.n	8003cf2 <uip_arp_out+0x11a>
  } else {
    /* Check if the destination address is on the local network. */
    if(!uip_ipaddr_maskcmp(&IPBUF->destipaddr, &uip_hostaddr, &uip_netmask)) {
 8003c1e:	483e      	ldr	r0, [pc, #248]	; (8003d18 <uip_arp_out+0x140>)
 8003c20:	8bdd      	ldrh	r5, [r3, #30]
 8003c22:	8802      	ldrh	r2, [r0, #0]
 8003c24:	4055      	eors	r5, r2
 8003c26:	4a3d      	ldr	r2, [pc, #244]	; (8003d1c <uip_arp_out+0x144>)
 8003c28:	8814      	ldrh	r4, [r2, #0]
 8003c2a:	4225      	tst	r5, r4
 8003c2c:	d106      	bne.n	8003c3c <uip_arp_out+0x64>
 8003c2e:	8c1c      	ldrh	r4, [r3, #32]
 8003c30:	8843      	ldrh	r3, [r0, #2]
 8003c32:	1c20      	adds	r0, r4, #0
 8003c34:	4058      	eors	r0, r3
 8003c36:	8853      	ldrh	r3, [r2, #2]
 8003c38:	4218      	tst	r0, r3
 8003c3a:	d002      	beq.n	8003c42 <uip_arp_out+0x6a>
      /* Destination address was not on the local network, so we need to
	 use the default router's IP address instead of the destination
	 address when determining the MAC address. */
      uip_ipaddr_copy(&ipaddr, &uip_draddr);
 8003c3c:	4838      	ldr	r0, [pc, #224]	; (8003d20 <uip_arp_out+0x148>)
 8003c3e:	4939      	ldr	r1, [pc, #228]	; (8003d24 <uip_arp_out+0x14c>)
 8003c40:	e000      	b.n	8003c44 <uip_arp_out+0x6c>
    } else {
      /* Else, we use the destination IP address. */
      uip_ipaddr_copy(&ipaddr, &IPBUF->destipaddr);
 8003c42:	4837      	ldr	r0, [pc, #220]	; (8003d20 <uip_arp_out+0x148>)
 8003c44:	2204      	movs	r2, #4
 8003c46:	f003 f8ce 	bl	8006de6 <memcpy>
    }
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8003c4a:	4b37      	ldr	r3, [pc, #220]	; (8003d28 <uip_arp_out+0x150>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
      if(uip_ipaddr_cmp(&ipaddr, &tabptr->ipaddr)) {
 8003c50:	4b33      	ldr	r3, [pc, #204]	; (8003d20 <uip_arp_out+0x148>)
 8003c52:	2500      	movs	r5, #0
 8003c54:	881a      	ldrh	r2, [r3, #0]
 8003c56:	4935      	ldr	r1, [pc, #212]	; (8003d2c <uip_arp_out+0x154>)
 8003c58:	885b      	ldrh	r3, [r3, #2]
      uip_ipaddr_copy(&ipaddr, &uip_draddr);
    } else {
      /* Else, we use the destination IP address. */
      uip_ipaddr_copy(&ipaddr, &IPBUF->destipaddr);
    }
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8003c5a:	e008      	b.n	8003c6e <uip_arp_out+0x96>
      if(uip_ipaddr_cmp(&ipaddr, &tabptr->ipaddr)) {
 8003c5c:	8808      	ldrh	r0, [r1, #0]
 8003c5e:	4290      	cmp	r0, r2
 8003c60:	d102      	bne.n	8003c68 <uip_arp_out+0x90>
 8003c62:	8848      	ldrh	r0, [r1, #2]
 8003c64:	4298      	cmp	r0, r3
 8003c66:	d03d      	beq.n	8003ce4 <uip_arp_out+0x10c>
	break;
      }
	  tabptr++;
 8003c68:	3501      	adds	r5, #1
 8003c6a:	310c      	adds	r1, #12
 8003c6c:	b2ed      	uxtb	r5, r5
      uip_ipaddr_copy(&ipaddr, &uip_draddr);
    } else {
      /* Else, we use the destination IP address. */
      uip_ipaddr_copy(&ipaddr, &IPBUF->destipaddr);
    }
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8003c6e:	2d07      	cmp	r5, #7
 8003c70:	d9f4      	bls.n	8003c5c <uip_arp_out+0x84>
 8003c72:	4b2d      	ldr	r3, [pc, #180]	; (8003d28 <uip_arp_out+0x150>)
 8003c74:	701d      	strb	r5, [r3, #0]
	break;
      }
	  tabptr++;
    }

    if(i == UIP_ARPTAB_SIZE) {
 8003c76:	2d08      	cmp	r5, #8
 8003c78:	d136      	bne.n	8003ce8 <uip_arp_out+0x110>
      /* The destination address was not in our ARP table, so we
	 overwrite the IP packet with an ARP request. */

      memset(BUF->ethhdr.dest.addr, 0xff, 6);
 8003c7a:	4c24      	ldr	r4, [pc, #144]	; (8003d0c <uip_arp_out+0x134>)
 8003c7c:	21ff      	movs	r1, #255	; 0xff
 8003c7e:	1c20      	adds	r0, r4, #0
 8003c80:	2206      	movs	r2, #6
 8003c82:	f003 f8d4 	bl	8006e2e <memset>
      memset(BUF->dhwaddr.addr, 0x00, 6);
      memcpy(BUF->ethhdr.src.addr, uip_lladdr.addr, 6);
 8003c86:	4f2a      	ldr	r7, [pc, #168]	; (8003d30 <uip_arp_out+0x158>)
    if(i == UIP_ARPTAB_SIZE) {
      /* The destination address was not in our ARP table, so we
	 overwrite the IP packet with an ARP request. */

      memset(BUF->ethhdr.dest.addr, 0xff, 6);
      memset(BUF->dhwaddr.addr, 0x00, 6);
 8003c88:	1c22      	adds	r2, r4, #0
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	3220      	adds	r2, #32
 8003c8e:	6223      	str	r3, [r4, #32]
 8003c90:	8093      	strh	r3, [r2, #4]
      memcpy(BUF->ethhdr.src.addr, uip_lladdr.addr, 6);
 8003c92:	1da0      	adds	r0, r4, #6
 8003c94:	1c39      	adds	r1, r7, #0
 8003c96:	2206      	movs	r2, #6
 8003c98:	f003 f8a5 	bl	8006de6 <memcpy>
      memcpy(BUF->shwaddr.addr, uip_lladdr.addr, 6);
 8003c9c:	1c20      	adds	r0, r4, #0
 8003c9e:	1c39      	adds	r1, r7, #0
 8003ca0:	2206      	movs	r2, #6
 8003ca2:	3016      	adds	r0, #22
 8003ca4:	f003 f89f 	bl	8006de6 <memcpy>
    
      uip_ipaddr_copy(&BUF->dipaddr, &ipaddr);
 8003ca8:	1c30      	adds	r0, r6, #0
 8003caa:	491d      	ldr	r1, [pc, #116]	; (8003d20 <uip_arp_out+0x148>)
 8003cac:	2204      	movs	r2, #4
 8003cae:	3026      	adds	r0, #38	; 0x26
 8003cb0:	f003 f899 	bl	8006de6 <memcpy>
      uip_ipaddr_copy(&BUF->sipaddr, &uip_hostaddr);
 8003cb4:	1c30      	adds	r0, r6, #0
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	301c      	adds	r0, #28
 8003cba:	4917      	ldr	r1, [pc, #92]	; (8003d18 <uip_arp_out+0x140>)
 8003cbc:	f003 f893 	bl	8006de6 <memcpy>
      BUF->opcode = UIP_HTONS(ARP_REQUEST); /* ARP request. */
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	82a3      	strh	r3, [r4, #20]
      BUF->hwtype = UIP_HTONS(ARP_HWTYPE_ETH);
 8003cc6:	81e3      	strh	r3, [r4, #14]
      BUF->protocol = UIP_HTONS(UIP_ETHTYPE_IP);
      BUF->hwlen = 6;
 8003cc8:	2306      	movs	r3, #6
 8003cca:	74a3      	strb	r3, [r4, #18]
      BUF->protolen = 4;
 8003ccc:	2304      	movs	r3, #4
 8003cce:	74e3      	strb	r3, [r4, #19]
      BUF->ethhdr.type = UIP_HTONS(UIP_ETHTYPE_ARP);
 8003cd0:	23c1      	movs	r3, #193	; 0xc1
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	81a3      	strh	r3, [r4, #12]

      uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
 8003cd6:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <uip_arp_out+0x15c>)
    
      uip_ipaddr_copy(&BUF->dipaddr, &ipaddr);
      uip_ipaddr_copy(&BUF->sipaddr, &uip_hostaddr);
      BUF->opcode = UIP_HTONS(ARP_REQUEST); /* ARP request. */
      BUF->hwtype = UIP_HTONS(ARP_HWTYPE_ETH);
      BUF->protocol = UIP_HTONS(UIP_ETHTYPE_IP);
 8003cd8:	8225      	strh	r5, [r4, #16]
      BUF->hwlen = 6;
      BUF->protolen = 4;
      BUF->ethhdr.type = UIP_HTONS(UIP_ETHTYPE_ARP);

      uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
 8003cda:	3436      	adds	r4, #54	; 0x36
 8003cdc:	601c      	str	r4, [r3, #0]
    
      uip_len = sizeof(struct arp_hdr);
 8003cde:	222a      	movs	r2, #42	; 0x2a
 8003ce0:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <uip_arp_out+0x160>)
 8003ce2:	e011      	b.n	8003d08 <uip_arp_out+0x130>
      return;
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <uip_arp_out+0x150>)
 8003ce6:	701d      	strb	r5, [r3, #0]
    }

    /* Build an ethernet header. */
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
 8003ce8:	4808      	ldr	r0, [pc, #32]	; (8003d0c <uip_arp_out+0x134>)
 8003cea:	3104      	adds	r1, #4
 8003cec:	2206      	movs	r2, #6
 8003cee:	f003 f87a 	bl	8006de6 <memcpy>
  }
  memcpy(IPBUF->ethhdr.src.addr, uip_lladdr.addr, 6);
 8003cf2:	4c12      	ldr	r4, [pc, #72]	; (8003d3c <uip_arp_out+0x164>)
 8003cf4:	2206      	movs	r2, #6
 8003cf6:	1c20      	adds	r0, r4, #0
 8003cf8:	490d      	ldr	r1, [pc, #52]	; (8003d30 <uip_arp_out+0x158>)
 8003cfa:	f003 f874 	bl	8006de6 <memcpy>
  
  IPBUF->ethhdr.type = UIP_HTONS(UIP_ETHTYPE_IP);
 8003cfe:	2308      	movs	r3, #8
 8003d00:	80e3      	strh	r3, [r4, #6]

  uip_len += sizeof(struct uip_eth_hdr);
 8003d02:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <uip_arp_out+0x160>)
 8003d04:	881a      	ldrh	r2, [r3, #0]
 8003d06:	320e      	adds	r2, #14
 8003d08:	801a      	strh	r2, [r3, #0]
}
 8003d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d0c:	2000157c 	.word	0x2000157c
 8003d10:	0800ae68 	.word	0x0800ae68
 8003d14:	0800aed4 	.word	0x0800aed4
 8003d18:	200017e0 	.word	0x200017e0
 8003d1c:	200017dc 	.word	0x200017dc
 8003d20:	20001034 	.word	0x20001034
 8003d24:	200017d8 	.word	0x200017d8
 8003d28:	20001030 	.word	0x20001030
 8003d2c:	20000fd0 	.word	0x20000fd0
 8003d30:	20000fb8 	.word	0x20000fb8
 8003d34:	20001784 	.word	0x20001784
 8003d38:	20001570 	.word	0x20001570
 8003d3c:	20001582 	.word	0x20001582

08003d40 <uip_arp_update>:
}

/*-----------------------------------------------------------------------------------*/
static void
uip_arp_update(uip_ipaddr_t *ipaddr, struct uip_eth_addr *ethaddr)
{
 8003d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  register struct arp_entry *tabptr = arp_table;

  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8003d42:	4a36      	ldr	r2, [pc, #216]	; (8003e1c <uip_arp_update+0xdc>)
}

/*-----------------------------------------------------------------------------------*/
static void
uip_arp_update(uip_ipaddr_t *ipaddr, struct uip_eth_addr *ethaddr)
{
 8003d44:	1c0d      	adds	r5, r1, #0
  register struct arp_entry *tabptr = arp_table;

  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8003d46:	2100      	movs	r1, #0
 8003d48:	7011      	strb	r1, [r2, #0]
    tabptr = &arp_table[i];

    /* Only check those entries that are actually in use. */
    if(!uip_ipaddr_cmp(&tabptr->ipaddr, &uip_all_zeroes_addr)) {
 8003d4a:	4a35      	ldr	r2, [pc, #212]	; (8003e20 <uip_arp_update+0xe0>)
}

/*-----------------------------------------------------------------------------------*/
static void
uip_arp_update(uip_ipaddr_t *ipaddr, struct uip_eth_addr *ethaddr)
{
 8003d4c:	1c03      	adds	r3, r0, #0
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    tabptr = &arp_table[i];

    /* Only check those entries that are actually in use. */
    if(!uip_ipaddr_cmp(&tabptr->ipaddr, &uip_all_zeroes_addr)) {
 8003d4e:	8851      	ldrh	r1, [r2, #2]
 8003d50:	8810      	ldrh	r0, [r2, #0]
 8003d52:	4c34      	ldr	r4, [pc, #208]	; (8003e24 <uip_arp_update+0xe4>)
 8003d54:	2200      	movs	r2, #0
  register struct arp_entry *tabptr = arp_table;

  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8003d56:	e017      	b.n	8003d88 <uip_arp_update+0x48>
    tabptr = &arp_table[i];
 8003d58:	0054      	lsls	r4, r2, #1
 8003d5a:	4e32      	ldr	r6, [pc, #200]	; (8003e24 <uip_arp_update+0xe4>)
 8003d5c:	18a4      	adds	r4, r4, r2
 8003d5e:	00a4      	lsls	r4, r4, #2
 8003d60:	1934      	adds	r4, r6, r4

    /* Only check those entries that are actually in use. */
    if(!uip_ipaddr_cmp(&tabptr->ipaddr, &uip_all_zeroes_addr)) {
 8003d62:	8826      	ldrh	r6, [r4, #0]
 8003d64:	4286      	cmp	r6, r0
 8003d66:	d102      	bne.n	8003d6e <uip_arp_update+0x2e>
 8003d68:	8867      	ldrh	r7, [r4, #2]
 8003d6a:	428f      	cmp	r7, r1
 8003d6c:	d009      	beq.n	8003d82 <uip_arp_update+0x42>

      /* Check if the source IP address of the incoming packet matches
         the IP address in this ARP table entry. */
      if(uip_ipaddr_cmp(ipaddr, &tabptr->ipaddr)) {
 8003d6e:	881f      	ldrh	r7, [r3, #0]
 8003d70:	42b7      	cmp	r7, r6
 8003d72:	d106      	bne.n	8003d82 <uip_arp_update+0x42>
 8003d74:	885f      	ldrh	r7, [r3, #2]
 8003d76:	8866      	ldrh	r6, [r4, #2]
 8003d78:	42b7      	cmp	r7, r6
 8003d7a:	d102      	bne.n	8003d82 <uip_arp_update+0x42>
 8003d7c:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <uip_arp_update+0xdc>)
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	e043      	b.n	8003e0a <uip_arp_update+0xca>
	tabptr->time = arptime;

	return;
      }
    }
	tabptr++;
 8003d82:	3201      	adds	r2, #1
 8003d84:	340c      	adds	r4, #12
 8003d86:	b2d2      	uxtb	r2, r2
  register struct arp_entry *tabptr = arp_table;

  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8003d88:	2a07      	cmp	r2, #7
 8003d8a:	d9e5      	bls.n	8003d58 <uip_arp_update+0x18>

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8003d8c:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <uip_arp_update+0xdc>)
 8003d8e:	2600      	movs	r6, #0
 8003d90:	7016      	strb	r6, [r2, #0]
 8003d92:	2200      	movs	r2, #0
 8003d94:	e00f      	b.n	8003db6 <uip_arp_update+0x76>
    tabptr = &arp_table[i];
 8003d96:	0054      	lsls	r4, r2, #1
 8003d98:	4e22      	ldr	r6, [pc, #136]	; (8003e24 <uip_arp_update+0xe4>)
 8003d9a:	18a4      	adds	r4, r4, r2
 8003d9c:	00a4      	lsls	r4, r4, #2
 8003d9e:	1934      	adds	r4, r6, r4
    if(uip_ipaddr_cmp(&tabptr->ipaddr, &uip_all_zeroes_addr)) {
 8003da0:	8826      	ldrh	r6, [r4, #0]
 8003da2:	4286      	cmp	r6, r0
 8003da4:	d105      	bne.n	8003db2 <uip_arp_update+0x72>
 8003da6:	8866      	ldrh	r6, [r4, #2]
 8003da8:	428e      	cmp	r6, r1
 8003daa:	d102      	bne.n	8003db2 <uip_arp_update+0x72>
 8003dac:	491b      	ldr	r1, [pc, #108]	; (8003e1c <uip_arp_update+0xdc>)
 8003dae:	700a      	strb	r2, [r1, #0]
 8003db0:	e026      	b.n	8003e00 <uip_arp_update+0xc0>
 8003db2:	3201      	adds	r2, #1
 8003db4:	b2d2      	uxtb	r2, r2

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8003db6:	2a07      	cmp	r2, #7
 8003db8:	d9ed      	bls.n	8003d96 <uip_arp_update+0x56>
 8003dba:	4918      	ldr	r1, [pc, #96]	; (8003e1c <uip_arp_update+0xdc>)
 8003dbc:	700a      	strb	r2, [r1, #0]
    }
  }

  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
 8003dbe:	2a08      	cmp	r2, #8
 8003dc0:	d11e      	bne.n	8003e00 <uip_arp_update+0xc0>
    tmpage = 0;
    c = 0;
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
      tabptr = &arp_table[i];
      if(arptime - tabptr->time > tmpage) {
 8003dc2:	4a19      	ldr	r2, [pc, #100]	; (8003e28 <uip_arp_update+0xe8>)
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	7817      	ldrb	r7, [r2, #0]
 8003dc8:	2000      	movs	r0, #0
 8003dca:	2200      	movs	r2, #0
  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
    tmpage = 0;
    c = 0;
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8003dcc:	e00b      	b.n	8003de6 <uip_arp_update+0xa6>
      tabptr = &arp_table[i];
      if(arptime - tabptr->time > tmpage) {
 8003dce:	0054      	lsls	r4, r2, #1
 8003dd0:	18a4      	adds	r4, r4, r2
 8003dd2:	00a4      	lsls	r4, r4, #2
 8003dd4:	19a6      	adds	r6, r4, r6
 8003dd6:	7ab4      	ldrb	r4, [r6, #10]
 8003dd8:	1b3c      	subs	r4, r7, r4
 8003dda:	4284      	cmp	r4, r0
 8003ddc:	dd01      	ble.n	8003de2 <uip_arp_update+0xa2>
	tmpage = arptime - tabptr->time;
 8003dde:	b2e0      	uxtb	r0, r4
 8003de0:	1c11      	adds	r1, r2, #0
 8003de2:	3201      	adds	r2, #1
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	4e0f      	ldr	r6, [pc, #60]	; (8003e24 <uip_arp_update+0xe4>)
  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
    tmpage = 0;
    c = 0;
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8003de8:	2a07      	cmp	r2, #7
 8003dea:	d9f0      	bls.n	8003dce <uip_arp_update+0x8e>
 8003dec:	4a0f      	ldr	r2, [pc, #60]	; (8003e2c <uip_arp_update+0xec>)
	tmpage = arptime - tabptr->time;
	c = i;
      }
    }
    i = c;
    tabptr = &arp_table[i];
 8003dee:	004c      	lsls	r4, r1, #1
  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
    tmpage = 0;
    c = 0;
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8003df0:	7010      	strb	r0, [r2, #0]
 8003df2:	4a0f      	ldr	r2, [pc, #60]	; (8003e30 <uip_arp_update+0xf0>)
	tmpage = arptime - tabptr->time;
	c = i;
      }
    }
    i = c;
    tabptr = &arp_table[i];
 8003df4:	1864      	adds	r4, r4, r1
  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
    tmpage = 0;
    c = 0;
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8003df6:	7011      	strb	r1, [r2, #0]
      if(arptime - tabptr->time > tmpage) {
	tmpage = arptime - tabptr->time;
	c = i;
      }
    }
    i = c;
 8003df8:	4a08      	ldr	r2, [pc, #32]	; (8003e1c <uip_arp_update+0xdc>)
    tabptr = &arp_table[i];
 8003dfa:	00a4      	lsls	r4, r4, #2
      if(arptime - tabptr->time > tmpage) {
	tmpage = arptime - tabptr->time;
	c = i;
      }
    }
    i = c;
 8003dfc:	7011      	strb	r1, [r2, #0]
    tabptr = &arp_table[i];
 8003dfe:	1934      	adds	r4, r6, r4
  }

  /* Now, i is the ARP table entry which we will fill with the new
     information. */
  uip_ipaddr_copy(&tabptr->ipaddr, ipaddr);
 8003e00:	1c20      	adds	r0, r4, #0
 8003e02:	1c19      	adds	r1, r3, #0
 8003e04:	2204      	movs	r2, #4
 8003e06:	f002 ffee 	bl	8006de6 <memcpy>
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 8003e0a:	1c29      	adds	r1, r5, #0
 8003e0c:	1d20      	adds	r0, r4, #4
 8003e0e:	2206      	movs	r2, #6
 8003e10:	f002 ffe9 	bl	8006de6 <memcpy>
  tabptr->time = arptime;
 8003e14:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <uip_arp_update+0xe8>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	72a3      	strb	r3, [r4, #10]
}
 8003e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e1c:	20001030 	.word	0x20001030
 8003e20:	0800ae6c 	.word	0x0800ae6c
 8003e24:	20000fd0 	.word	0x20000fd0
 8003e28:	20000fce 	.word	0x20000fce
 8003e2c:	20000fcf 	.word	0x20000fcf
 8003e30:	20001031 	.word	0x20001031

08003e34 <uip_arp_arpin>:
 * global variable uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_arpin(void)
{
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  if(uip_len < sizeof(struct arp_hdr)) {
 8003e36:	4d2f      	ldr	r5, [pc, #188]	; (8003ef4 <uip_arp_arpin+0xc0>)
 8003e38:	882b      	ldrh	r3, [r5, #0]
 8003e3a:	2b29      	cmp	r3, #41	; 0x29
 8003e3c:	d801      	bhi.n	8003e42 <uip_arp_arpin+0xe>
    uip_len = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e043      	b.n	8003eca <uip_arp_arpin+0x96>
    return;
  }
  uip_len = 0;
 8003e42:	2300      	movs	r3, #0
  
  switch(BUF->opcode) {
 8003e44:	4c2c      	ldr	r4, [pc, #176]	; (8003ef8 <uip_arp_arpin+0xc4>)
  
  if(uip_len < sizeof(struct arp_hdr)) {
    uip_len = 0;
    return;
  }
  uip_len = 0;
 8003e46:	802b      	strh	r3, [r5, #0]
  
  switch(BUF->opcode) {
 8003e48:	8aa2      	ldrh	r2, [r4, #20]
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d004      	beq.n	8003e5c <uip_arp_arpin+0x28>
 8003e52:	2380      	movs	r3, #128	; 0x80
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d14a      	bne.n	8003ef0 <uip_arp_arpin+0xbc>
 8003e5a:	e038      	b.n	8003ece <uip_arp_arpin+0x9a>
    PRINTF("uip_arp_arpin: request for %d.%d.%d.%d (we are %d.%d.%d.%d)\n",
	   BUF->dipaddr.u8[0], BUF->dipaddr.u8[1],
	   BUF->dipaddr.u8[2], BUF->dipaddr.u8[3],
	   uip_hostaddr.u8[0], uip_hostaddr.u8[1],
	   uip_hostaddr.u8[2], uip_hostaddr.u8[3]);
    if(uip_ipaddr_cmp(&BUF->dipaddr, &uip_hostaddr)) {
 8003e5c:	4927      	ldr	r1, [pc, #156]	; (8003efc <uip_arp_arpin+0xc8>)
 8003e5e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003e60:	880b      	ldrh	r3, [r1, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d144      	bne.n	8003ef0 <uip_arp_arpin+0xbc>
 8003e66:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <uip_arp_arpin+0xcc>)
 8003e68:	885a      	ldrh	r2, [r3, #2]
 8003e6a:	884b      	ldrh	r3, [r1, #2]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d13f      	bne.n	8003ef0 <uip_arp_arpin+0xbc>
      /* First, we register the one who made the request in our ARP
	 table, since it is likely that we will do more communication
	 with this host in the future. */
      uip_arp_update(&BUF->sipaddr, &BUF->shwaddr);
 8003e70:	1c27      	adds	r7, r4, #0
 8003e72:	1c26      	adds	r6, r4, #0
 8003e74:	371c      	adds	r7, #28
 8003e76:	3616      	adds	r6, #22
 8003e78:	1c38      	adds	r0, r7, #0
 8003e7a:	1c31      	adds	r1, r6, #0
 8003e7c:	f7ff ff60 	bl	8003d40 <uip_arp_update>
      
      BUF->opcode = UIP_HTONS(ARP_REPLY);
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	82a3      	strh	r3, [r4, #20]

      memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
 8003e86:	1c31      	adds	r1, r6, #0
 8003e88:	2206      	movs	r2, #6
 8003e8a:	481e      	ldr	r0, [pc, #120]	; (8003f04 <uip_arp_arpin+0xd0>)
 8003e8c:	f002 ffab 	bl	8006de6 <memcpy>
      memcpy(BUF->shwaddr.addr, uip_lladdr.addr, 6);
 8003e90:	491d      	ldr	r1, [pc, #116]	; (8003f08 <uip_arp_arpin+0xd4>)
 8003e92:	2206      	movs	r2, #6
 8003e94:	1c30      	adds	r0, r6, #0
 8003e96:	f002 ffa6 	bl	8006de6 <memcpy>
      memcpy(BUF->ethhdr.src.addr, uip_lladdr.addr, 6);
 8003e9a:	491b      	ldr	r1, [pc, #108]	; (8003f08 <uip_arp_arpin+0xd4>)
 8003e9c:	2206      	movs	r2, #6
 8003e9e:	1da0      	adds	r0, r4, #6
 8003ea0:	f002 ffa1 	bl	8006de6 <memcpy>
      memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
 8003ea4:	6a23      	ldr	r3, [r4, #32]
 8003ea6:	4917      	ldr	r1, [pc, #92]	; (8003f04 <uip_arp_arpin+0xd0>)
 8003ea8:	6023      	str	r3, [r4, #0]
 8003eaa:	888b      	ldrh	r3, [r1, #4]
      
      uip_ipaddr_copy(&BUF->dipaddr, &BUF->sipaddr);
 8003eac:	2204      	movs	r2, #4
      BUF->opcode = UIP_HTONS(ARP_REPLY);

      memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
      memcpy(BUF->shwaddr.addr, uip_lladdr.addr, 6);
      memcpy(BUF->ethhdr.src.addr, uip_lladdr.addr, 6);
      memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
 8003eae:	80a3      	strh	r3, [r4, #4]
      
      uip_ipaddr_copy(&BUF->dipaddr, &BUF->sipaddr);
 8003eb0:	1c39      	adds	r1, r7, #0
 8003eb2:	4813      	ldr	r0, [pc, #76]	; (8003f00 <uip_arp_arpin+0xcc>)
 8003eb4:	f002 ff97 	bl	8006de6 <memcpy>
      uip_ipaddr_copy(&BUF->sipaddr, &uip_hostaddr);
 8003eb8:	1c38      	adds	r0, r7, #0
 8003eba:	4910      	ldr	r1, [pc, #64]	; (8003efc <uip_arp_arpin+0xc8>)
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	f002 ff92 	bl	8006de6 <memcpy>

      BUF->ethhdr.type = UIP_HTONS(UIP_ETHTYPE_ARP);
 8003ec2:	23c1      	movs	r3, #193	; 0xc1
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	81a3      	strh	r3, [r4, #12]
      uip_len = sizeof(struct arp_hdr);
 8003ec8:	232a      	movs	r3, #42	; 0x2a
 8003eca:	802b      	strh	r3, [r5, #0]
 8003ecc:	e010      	b.n	8003ef0 <uip_arp_arpin+0xbc>
    }
    break;
  case UIP_HTONS(ARP_REPLY):
    /* ARP reply. We insert or update the ARP table if it was meant
       for us. */
    if(uip_ipaddr_cmp(&BUF->dipaddr, &uip_hostaddr)) {
 8003ece:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <uip_arp_arpin+0xc8>)
 8003ed0:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8003ed2:	8819      	ldrh	r1, [r3, #0]
 8003ed4:	1c22      	adds	r2, r4, #0
 8003ed6:	3226      	adds	r2, #38	; 0x26
 8003ed8:	4288      	cmp	r0, r1
 8003eda:	d109      	bne.n	8003ef0 <uip_arp_arpin+0xbc>
 8003edc:	8852      	ldrh	r2, [r2, #2]
 8003ede:	885b      	ldrh	r3, [r3, #2]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d105      	bne.n	8003ef0 <uip_arp_arpin+0xbc>
      uip_arp_update(&BUF->sipaddr, &BUF->shwaddr);
 8003ee4:	1c20      	adds	r0, r4, #0
 8003ee6:	1c21      	adds	r1, r4, #0
 8003ee8:	301c      	adds	r0, #28
 8003eea:	3116      	adds	r1, #22
 8003eec:	f7ff ff28 	bl	8003d40 <uip_arp_update>
    }
    break;
  }

  return;
}
 8003ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	20001570 	.word	0x20001570
 8003ef8:	2000157c 	.word	0x2000157c
 8003efc:	200017e0 	.word	0x200017e0
 8003f00:	200015a2 	.word	0x200015a2
 8003f04:	2000159c 	.word	0x2000159c
 8003f08:	20000fb8 	.word	0x20000fb8

08003f0c <process_alloc_event>:

/*---------------------------------------------------------------------------*/
process_event_t
process_alloc_event(void)
{
  return lastevent++;
 8003f0c:	4b02      	ldr	r3, [pc, #8]	; (8003f18 <process_alloc_event+0xc>)
 8003f0e:	7818      	ldrb	r0, [r3, #0]
 8003f10:	1c42      	adds	r2, r0, #1
 8003f12:	701a      	strb	r2, [r3, #0]
}
 8003f14:	4770      	bx	lr
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	2000103a 	.word	0x2000103a

08003f1c <process_init>:
}
/*---------------------------------------------------------------------------*/
void
process_init(void)
{
  lastevent = PROCESS_EVENT_MAX;
 8003f1c:	4a06      	ldr	r2, [pc, #24]	; (8003f38 <process_init+0x1c>)
 8003f1e:	2376      	movs	r3, #118	; 0x76
 8003f20:	425b      	negs	r3, r3
 8003f22:	7013      	strb	r3, [r2, #0]

  nevents = fevent = 0;
 8003f24:	4a05      	ldr	r2, [pc, #20]	; (8003f3c <process_init+0x20>)
 8003f26:	2300      	movs	r3, #0
 8003f28:	7013      	strb	r3, [r2, #0]
 8003f2a:	4a05      	ldr	r2, [pc, #20]	; (8003f40 <process_init+0x24>)
 8003f2c:	7013      	strb	r3, [r2, #0]
#if PROCESS_CONF_STATS
  process_maxevents = 0;
#endif /* PROCESS_CONF_STATS */

  process_current = process_list = NULL;
 8003f2e:	4a05      	ldr	r2, [pc, #20]	; (8003f44 <process_init+0x28>)
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <process_init+0x2c>)
 8003f34:	6013      	str	r3, [r2, #0]
}
 8003f36:	4770      	bx	lr
 8003f38:	2000103a 	.word	0x2000103a
 8003f3c:	20001038 	.word	0x20001038
 8003f40:	20001039 	.word	0x20001039
 8003f44:	20001040 	.word	0x20001040
 8003f48:	2000103c 	.word	0x2000103c

08003f4c <process_post>:
  return nevents + poll_requested;
}
/*---------------------------------------------------------------------------*/
int
process_post(struct process *p, process_event_t ev, process_data_t data)
{
 8003f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    PRINTF("process_post: Process '%s' posts event %d to process '%s', nevents %d\n",
	   PROCESS_NAME_STRING(PROCESS_CURRENT()), ev,
	   p == PROCESS_BROADCAST? "<broadcast>": PROCESS_NAME_STRING(p), nevents);
  }
  
  if(nevents == PROCESS_CONF_NUMEVENTS) {
 8003f4e:	4d0c      	ldr	r5, [pc, #48]	; (8003f80 <process_post+0x34>)
 8003f50:	782b      	ldrb	r3, [r5, #0]
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d101      	bne.n	8003f5a <process_post+0xe>
 8003f56:	2001      	movs	r0, #1
 8003f58:	e011      	b.n	8003f7e <process_post+0x32>
    }
#endif /* DEBUG */
    return PROCESS_ERR_FULL;
  }
  
  snum = (process_num_events_t)(fevent + nevents) % PROCESS_CONF_NUMEVENTS;
 8003f5a:	4c0a      	ldr	r4, [pc, #40]	; (8003f84 <process_post+0x38>)
 8003f5c:	260f      	movs	r6, #15
 8003f5e:	7824      	ldrb	r4, [r4, #0]
 8003f60:	191c      	adds	r4, r3, r4
 8003f62:	4034      	ands	r4, r6
 8003f64:	4e08      	ldr	r6, [pc, #32]	; (8003f88 <process_post+0x3c>)
  events[snum].ev = ev;
 8003f66:	0067      	lsls	r7, r4, #1
    }
#endif /* DEBUG */
    return PROCESS_ERR_FULL;
  }
  
  snum = (process_num_events_t)(fevent + nevents) % PROCESS_CONF_NUMEVENTS;
 8003f68:	7034      	strb	r4, [r6, #0]
  events[snum].ev = ev;
 8003f6a:	4e08      	ldr	r6, [pc, #32]	; (8003f8c <process_post+0x40>)
 8003f6c:	193c      	adds	r4, r7, r4
 8003f6e:	00a4      	lsls	r4, r4, #2
 8003f70:	55a1      	strb	r1, [r4, r6]
  events[snum].data = data;
  events[snum].p = p;
  ++nevents;
 8003f72:	3301      	adds	r3, #1
    return PROCESS_ERR_FULL;
  }
  
  snum = (process_num_events_t)(fevent + nevents) % PROCESS_CONF_NUMEVENTS;
  events[snum].ev = ev;
  events[snum].data = data;
 8003f74:	19a4      	adds	r4, r4, r6
  events[snum].p = p;
 8003f76:	60a0      	str	r0, [r4, #8]
    return PROCESS_ERR_FULL;
  }
  
  snum = (process_num_events_t)(fevent + nevents) % PROCESS_CONF_NUMEVENTS;
  events[snum].ev = ev;
  events[snum].data = data;
 8003f78:	6062      	str	r2, [r4, #4]
  events[snum].p = p;
  ++nevents;
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	702b      	strb	r3, [r5, #0]
    process_maxevents = nevents;
  }
#endif /* PROCESS_CONF_STATS */
  
  return PROCESS_ERR_OK;
}
 8003f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f80:	20001039 	.word	0x20001039
 8003f84:	20001038 	.word	0x20001038
 8003f88:	20001045 	.word	0x20001045
 8003f8c:	20001048 	.word	0x20001048

08003f90 <process_poll>:
  process_current = caller;
}
/*---------------------------------------------------------------------------*/
void
process_poll(struct process *p)
{
 8003f90:	b500      	push	{lr}
  if(p != NULL) {
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d008      	beq.n	8003fa8 <process_poll+0x18>
    if(p->state == PROCESS_STATE_RUNNING ||
 8003f96:	7b83      	ldrb	r3, [r0, #14]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d803      	bhi.n	8003fa8 <process_poll+0x18>
       p->state == PROCESS_STATE_CALLED) {
      p->needspoll = 1;
      poll_requested = 1;
 8003fa0:	4a02      	ldr	r2, [pc, #8]	; (8003fac <process_poll+0x1c>)
process_poll(struct process *p)
{
  if(p != NULL) {
    if(p->state == PROCESS_STATE_RUNNING ||
       p->state == PROCESS_STATE_CALLED) {
      p->needspoll = 1;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73c3      	strb	r3, [r0, #15]
      poll_requested = 1;
 8003fa6:	7013      	strb	r3, [r2, #0]
    }
  }
}
 8003fa8:	bd00      	pop	{pc}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	20001044 	.word	0x20001044

08003fb0 <process_is_running>:
/*---------------------------------------------------------------------------*/
int
process_is_running(struct process *p)
{
 8003fb0:	7b80      	ldrb	r0, [r0, #14]
 8003fb2:	1e43      	subs	r3, r0, #1
 8003fb4:	4198      	sbcs	r0, r3
  return p->state != PROCESS_STATE_NONE;
}
 8003fb6:	4770      	bx	lr

08003fb8 <exit_process>:
  process_post_synch(p, PROCESS_EVENT_INIT, (process_data_t)arg);
}
/*---------------------------------------------------------------------------*/
static void
exit_process(struct process *p, struct process *fromprocess)
{
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  register struct process *q;
  struct process *old_current = process_current;
 8003fba:	4b1f      	ldr	r3, [pc, #124]	; (8004038 <exit_process+0x80>)
  process_post_synch(p, PROCESS_EVENT_INIT, (process_data_t)arg);
}
/*---------------------------------------------------------------------------*/
static void
exit_process(struct process *p, struct process *fromprocess)
{
 8003fbc:	1c04      	adds	r4, r0, #0
  register struct process *q;
  struct process *old_current = process_current;
 8003fbe:	681f      	ldr	r7, [r3, #0]

  PRINTF("process: exit_process '%s'\n", PROCESS_NAME_STRING(p));

  /* Make sure the process is in the process list before we try to
     exit it. */
  for(q = process_list; q != p && q != NULL; q = q->next);
 8003fc0:	4b1e      	ldr	r3, [pc, #120]	; (800403c <exit_process+0x84>)
  process_post_synch(p, PROCESS_EVENT_INIT, (process_data_t)arg);
}
/*---------------------------------------------------------------------------*/
static void
exit_process(struct process *p, struct process *fromprocess)
{
 8003fc2:	1c0e      	adds	r6, r1, #0

  PRINTF("process: exit_process '%s'\n", PROCESS_NAME_STRING(p));

  /* Make sure the process is in the process list before we try to
     exit it. */
  for(q = process_list; q != p && q != NULL; q = q->next);
 8003fc4:	681d      	ldr	r5, [r3, #0]
 8003fc6:	1c2b      	adds	r3, r5, #0
 8003fc8:	e000      	b.n	8003fcc <exit_process+0x14>
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d031      	beq.n	8004034 <exit_process+0x7c>
 8003fd0:	42a3      	cmp	r3, r4
 8003fd2:	d1fa      	bne.n	8003fca <exit_process+0x12>
  if(q == NULL) {
    return;
  }

  if(process_is_running(p)) {
 8003fd4:	1c20      	adds	r0, r4, #0
 8003fd6:	f7ff ffeb 	bl	8003fb0 <process_is_running>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d018      	beq.n	8004010 <exit_process+0x58>
    /* Process was running */
    p->state = PROCESS_STATE_NONE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	73a3      	strb	r3, [r4, #14]
    /*
     * Post a synchronous event to all processes to inform them that
     * this process is about to exit. This will allow services to
     * deallocate state associated with this process.
     */
    for(q = process_list; q != NULL; q = q->next) {
 8003fe2:	e007      	b.n	8003ff4 <exit_process+0x3c>
      if(p != q) {
 8003fe4:	42ac      	cmp	r4, r5
 8003fe6:	d004      	beq.n	8003ff2 <exit_process+0x3a>
	call_process(q, PROCESS_EVENT_EXITED, (process_data_t)p);
 8003fe8:	1c28      	adds	r0, r5, #0
 8003fea:	2187      	movs	r1, #135	; 0x87
 8003fec:	1c22      	adds	r2, r4, #0
 8003fee:	f000 f827 	bl	8004040 <call_process>
    /*
     * Post a synchronous event to all processes to inform them that
     * this process is about to exit. This will allow services to
     * deallocate state associated with this process.
     */
    for(q = process_list; q != NULL; q = q->next) {
 8003ff2:	682d      	ldr	r5, [r5, #0]
 8003ff4:	2d00      	cmp	r5, #0
 8003ff6:	d1f5      	bne.n	8003fe4 <exit_process+0x2c>
      if(p != q) {
	call_process(q, PROCESS_EVENT_EXITED, (process_data_t)p);
      }
    }

    if(p->thread != NULL && p != fromprocess) {
 8003ff8:	68a3      	ldr	r3, [r4, #8]
 8003ffa:	42b4      	cmp	r4, r6
 8003ffc:	d008      	beq.n	8004010 <exit_process+0x58>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d006      	beq.n	8004010 <exit_process+0x58>
      /* Post the exit event to the process that is about to exit. */
      process_current = p;
 8004002:	4a0d      	ldr	r2, [pc, #52]	; (8004038 <exit_process+0x80>)
      p->thread(&p->pt, PROCESS_EVENT_EXIT, NULL);
 8004004:	1c20      	adds	r0, r4, #0
      }
    }

    if(p->thread != NULL && p != fromprocess) {
      /* Post the exit event to the process that is about to exit. */
      process_current = p;
 8004006:	6014      	str	r4, [r2, #0]
      p->thread(&p->pt, PROCESS_EVENT_EXIT, NULL);
 8004008:	300c      	adds	r0, #12
 800400a:	2183      	movs	r1, #131	; 0x83
 800400c:	2200      	movs	r2, #0
 800400e:	4798      	blx	r3
    }
  }

  if(p == process_list) {
 8004010:	4a0a      	ldr	r2, [pc, #40]	; (800403c <exit_process+0x84>)
 8004012:	6813      	ldr	r3, [r2, #0]
 8004014:	429c      	cmp	r4, r3
 8004016:	d109      	bne.n	800402c <exit_process+0x74>
    process_list = process_list->next;
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	e008      	b.n	8004030 <exit_process+0x78>
  } else {
    for(q = process_list; q != NULL; q = q->next) {
      if(q->next == p) {
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	42a2      	cmp	r2, r4
 8004022:	d102      	bne.n	800402a <exit_process+0x72>
	q->next = p->next;
 8004024:	6822      	ldr	r2, [r4, #0]
 8004026:	601a      	str	r2, [r3, #0]
	break;
 8004028:	e002      	b.n	8004030 <exit_process+0x78>
 800402a:	1c13      	adds	r3, r2, #0
  }

  if(p == process_list) {
    process_list = process_list->next;
  } else {
    for(q = process_list; q != NULL; q = q->next) {
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f6      	bne.n	800401e <exit_process+0x66>
	break;
      }
    }
  }

  process_current = old_current;
 8004030:	4b01      	ldr	r3, [pc, #4]	; (8004038 <exit_process+0x80>)
 8004032:	601f      	str	r7, [r3, #0]
}
 8004034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	2000103c 	.word	0x2000103c
 800403c:	20001040 	.word	0x20001040

08004040 <call_process>:
/*---------------------------------------------------------------------------*/
static void
call_process(struct process *p, process_event_t ev, process_data_t data)
{
 8004040:	b570      	push	{r4, r5, r6, lr}
  if(p->state == PROCESS_STATE_CALLED) {
    printf("process: process '%s' called again with event %d\n", PROCESS_NAME_STRING(p), ev);
  }
#endif /* DEBUG */
  
  if((p->state & PROCESS_STATE_RUNNING) &&
 8004042:	7b83      	ldrb	r3, [r0, #14]
 8004044:	2601      	movs	r6, #1
  process_current = old_current;
}
/*---------------------------------------------------------------------------*/
static void
call_process(struct process *p, process_event_t ev, process_data_t data)
{
 8004046:	1c04      	adds	r4, r0, #0
 8004048:	1c0d      	adds	r5, r1, #0
  if(p->state == PROCESS_STATE_CALLED) {
    printf("process: process '%s' called again with event %d\n", PROCESS_NAME_STRING(p), ev);
  }
#endif /* DEBUG */
  
  if((p->state & PROCESS_STATE_RUNNING) &&
 800404a:	4233      	tst	r3, r6
 800404c:	d014      	beq.n	8004078 <call_process+0x38>
     p->thread != NULL) {
 800404e:	6883      	ldr	r3, [r0, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d011      	beq.n	8004078 <call_process+0x38>
    PRINTF("process: calling process '%s' with event %d\n", PROCESS_NAME_STRING(p), ev);
    process_current = p;
 8004054:	4909      	ldr	r1, [pc, #36]	; (800407c <call_process+0x3c>)
 8004056:	6008      	str	r0, [r1, #0]
    p->state = PROCESS_STATE_CALLED;
 8004058:	2102      	movs	r1, #2
 800405a:	7381      	strb	r1, [r0, #14]
    ret = p->thread(&p->pt, ev, data);
 800405c:	300c      	adds	r0, #12
 800405e:	1c29      	adds	r1, r5, #0
 8004060:	4798      	blx	r3
    if(ret == PT_EXITED ||
 8004062:	3802      	subs	r0, #2
 8004064:	2801      	cmp	r0, #1
 8004066:	d901      	bls.n	800406c <call_process+0x2c>
 8004068:	2d83      	cmp	r5, #131	; 0x83
 800406a:	d104      	bne.n	8004076 <call_process+0x36>
       ret == PT_ENDED ||
       ev == PROCESS_EVENT_EXIT) {
      exit_process(p, p);
 800406c:	1c20      	adds	r0, r4, #0
 800406e:	1c21      	adds	r1, r4, #0
 8004070:	f7ff ffa2 	bl	8003fb8 <exit_process>
 8004074:	e000      	b.n	8004078 <call_process+0x38>
    } else {
      p->state = PROCESS_STATE_RUNNING;
 8004076:	73a6      	strb	r6, [r4, #14]
    }
  }
}
 8004078:	bd70      	pop	{r4, r5, r6, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	2000103c 	.word	0x2000103c

08004080 <process_post_synch>:
  return PROCESS_ERR_OK;
}
/*---------------------------------------------------------------------------*/
void
process_post_synch(struct process *p, process_event_t ev, process_data_t data)
{
 8004080:	b538      	push	{r3, r4, r5, lr}
  struct process *caller = process_current;
 8004082:	4c03      	ldr	r4, [pc, #12]	; (8004090 <process_post_synch+0x10>)
 8004084:	6825      	ldr	r5, [r4, #0]

  call_process(p, ev, data);
 8004086:	f7ff ffdb 	bl	8004040 <call_process>
  process_current = caller;
 800408a:	6025      	str	r5, [r4, #0]
}
 800408c:	bd38      	pop	{r3, r4, r5, pc}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	2000103c 	.word	0x2000103c

08004094 <process_start>:
  return lastevent++;
}
/*---------------------------------------------------------------------------*/
void
process_start(struct process *p, const char *arg)
{
 8004094:	b508      	push	{r3, lr}
  struct process *q;

  /* First make sure that we don't try to start a process that is
     already running. */
  for(q = process_list; q != p && q != NULL; q = q->next);
 8004096:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <process_start+0x30>)
  return lastevent++;
}
/*---------------------------------------------------------------------------*/
void
process_start(struct process *p, const char *arg)
{
 8004098:	1c0a      	adds	r2, r1, #0
  struct process *q;

  /* First make sure that we don't try to start a process that is
     already running. */
  for(q = process_list; q != p && q != NULL; q = q->next);
 800409a:	6819      	ldr	r1, [r3, #0]
 800409c:	1c0b      	adds	r3, r1, #0
 800409e:	e000      	b.n	80040a2 <process_start+0xe>
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <process_start+0x18>
 80040a6:	4283      	cmp	r3, r0
 80040a8:	d1fa      	bne.n	80040a0 <process_start+0xc>
 80040aa:	e00a      	b.n	80040c2 <process_start+0x2e>

  /* If we found the process on the process list, we bail out. */
  if(q == p) {
 80040ac:	4283      	cmp	r3, r0
 80040ae:	d008      	beq.n	80040c2 <process_start+0x2e>
    return;
  }
  /* Put on the procs list.*/
  p->next = process_list;
 80040b0:	6001      	str	r1, [r0, #0]
  process_list = p;
 80040b2:	4904      	ldr	r1, [pc, #16]	; (80040c4 <process_start+0x30>)
  p->state = PROCESS_STATE_RUNNING;
  PT_INIT(&p->pt);
 80040b4:	8183      	strh	r3, [r0, #12]
  if(q == p) {
    return;
  }
  /* Put on the procs list.*/
  p->next = process_list;
  process_list = p;
 80040b6:	6008      	str	r0, [r1, #0]
  p->state = PROCESS_STATE_RUNNING;
 80040b8:	2101      	movs	r1, #1
 80040ba:	7381      	strb	r1, [r0, #14]
  PT_INIT(&p->pt);

  PRINTF("process: starting '%s'\n", PROCESS_NAME_STRING(p));

  /* Post a synchronous initialization event to the process. */
  process_post_synch(p, PROCESS_EVENT_INIT, (process_data_t)arg);
 80040bc:	2181      	movs	r1, #129	; 0x81
 80040be:	f7ff ffdf 	bl	8004080 <process_post_synch>
}
 80040c2:	bd08      	pop	{r3, pc}
 80040c4:	20001040 	.word	0x20001040

080040c8 <update_time>:

PROCESS(etimer_process, "Event timer");
/*---------------------------------------------------------------------------*/
static void
update_time(void)
{
 80040c8:	b510      	push	{r4, lr}
  clock_time_t tdist;
  clock_time_t now;
  struct etimer *t;

  if (timerlist == NULL) {
 80040ca:	4b0e      	ldr	r3, [pc, #56]	; (8004104 <update_time+0x3c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <update_time+0x10>
    next_expiration = 0;
 80040d2:	4a0d      	ldr	r2, [pc, #52]	; (8004108 <update_time+0x40>)
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e013      	b.n	8004100 <update_time+0x38>
#define CLOCK_SECOND 1000

typedef unsigned int clock_time_t;

static inline clock_time_t clock_time(void) {
    return millisecondCount;
 80040d8:	4a0c      	ldr	r2, [pc, #48]	; (800410c <update_time+0x44>)
  } else {
    now = clock_time();
    t = timerlist;
    /* Must calculate distance to next time into account due to wraps */
    tdist = t->timer.start + t->timer.interval - now;
 80040da:	6858      	ldr	r0, [r3, #4]
 80040dc:	6819      	ldr	r1, [r3, #0]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	1841      	adds	r1, r0, r1
 80040e2:	1a89      	subs	r1, r1, r2
 80040e4:	e006      	b.n	80040f4 <update_time+0x2c>
    for(t = t->next; t != NULL; t = t->next) {
 80040e6:	685c      	ldr	r4, [r3, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	1820      	adds	r0, r4, r0
 80040ec:	1a80      	subs	r0, r0, r2
 80040ee:	4281      	cmp	r1, r0
 80040f0:	d900      	bls.n	80040f4 <update_time+0x2c>
 80040f2:	1c01      	adds	r1, r0, #0
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f5      	bne.n	80040e6 <update_time+0x1e>
      if(t->timer.start + t->timer.interval - now < tdist) {
	tdist = t->timer.start + t->timer.interval - now;
      }
    }
    next_expiration = now + tdist;
 80040fa:	4b03      	ldr	r3, [pc, #12]	; (8004108 <update_time+0x40>)
 80040fc:	188a      	adds	r2, r1, r2
 80040fe:	601a      	str	r2, [r3, #0]
  }
}
 8004100:	bd10      	pop	{r4, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	20001108 	.word	0x20001108
 8004108:	2000110c 	.word	0x2000110c
 800410c:	20000ed4 	.word	0x20000ed4

08004110 <etimer_expired>:
  update_time();
}
/*---------------------------------------------------------------------------*/
int
etimer_expired(struct etimer *et)
{
 8004110:	68c0      	ldr	r0, [r0, #12]
 8004112:	4243      	negs	r3, r0
 8004114:	4158      	adcs	r0, r3
  return et->p == PROCESS_NONE;
}
 8004116:	4770      	bx	lr

08004118 <etimer_pending>:
  return et->timer.start;
}
/*---------------------------------------------------------------------------*/
int
etimer_pending(void)
{
 8004118:	4b02      	ldr	r3, [pc, #8]	; (8004124 <etimer_pending+0xc>)
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	1e43      	subs	r3, r0, #1
 800411e:	4198      	sbcs	r0, r3
  return timerlist != NULL;
}
 8004120:	4770      	bx	lr
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	20001108 	.word	0x20001108

08004128 <etimer_stop>:
  return etimer_pending() ? next_expiration : 0;
}
/*---------------------------------------------------------------------------*/
void
etimer_stop(struct etimer *et)
{
 8004128:	b510      	push	{r4, lr}
  struct etimer *t;

  /* First check if et is the first event timer on the list. */
  if(et == timerlist) {
 800412a:	4a0c      	ldr	r2, [pc, #48]	; (800415c <etimer_stop+0x34>)
  return etimer_pending() ? next_expiration : 0;
}
/*---------------------------------------------------------------------------*/
void
etimer_stop(struct etimer *et)
{
 800412c:	1c04      	adds	r4, r0, #0
  struct etimer *t;

  /* First check if et is the first event timer on the list. */
  if(et == timerlist) {
 800412e:	6813      	ldr	r3, [r2, #0]
 8004130:	4298      	cmp	r0, r3
 8004132:	d103      	bne.n	800413c <etimer_stop+0x14>
    timerlist = timerlist->next;
 8004134:	6883      	ldr	r3, [r0, #8]
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	e00c      	b.n	8004154 <etimer_stop+0x2c>
    update_time();
 800413a:	1c13      	adds	r3, r2, #0
  } else {
    /* Else walk through the list and try to find the item before the
       et timer. */
    for(t = timerlist; t != NULL && t->next != et; t = t->next);
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <etimer_stop+0x20>
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	42a2      	cmp	r2, r4
 8004144:	d1f9      	bne.n	800413a <etimer_stop+0x12>
 8004146:	e003      	b.n	8004150 <etimer_stop+0x28>
      update_time();
    }
  }

  /* Remove the next pointer from the item to be removed. */
  et->next = NULL;
 8004148:	2300      	movs	r3, #0
 800414a:	60a3      	str	r3, [r4, #8]
  /* Set the timer as expired */
  et->p = PROCESS_NONE;
 800414c:	60e3      	str	r3, [r4, #12]
}
 800414e:	bd10      	pop	{r4, pc}

    if(t != NULL) {
      /* We've found the item before the event timer that we are about
	 to remove. We point the items next pointer to the event after
	 the removed item. */
      t->next = et->next;
 8004150:	68a2      	ldr	r2, [r4, #8]
 8004152:	609a      	str	r2, [r3, #8]

      update_time();
 8004154:	f7ff ffb8 	bl	80040c8 <update_time>
 8004158:	e7f6      	b.n	8004148 <etimer_stop+0x20>
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	20001108 	.word	0x20001108

08004160 <etimer_request_poll>:
  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
void
etimer_request_poll(void)
{
 8004160:	b508      	push	{r3, lr}
  process_poll(&etimer_process);
 8004162:	4802      	ldr	r0, [pc, #8]	; (800416c <etimer_request_poll+0xc>)
 8004164:	f7ff ff14 	bl	8003f90 <process_poll>
}
 8004168:	bd08      	pop	{r3, pc}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	2000054c 	.word	0x2000054c

08004170 <process_thread_etimer_process>:
    next_expiration = now + tdist;
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(etimer_process, ev, data)
{
 8004170:	b570      	push	{r4, r5, r6, lr}
  struct etimer *t, *u;
	
  PROCESS_BEGIN();
 8004172:	8803      	ldrh	r3, [r0, #0]
    next_expiration = now + tdist;
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(etimer_process, ev, data)
{
 8004174:	1c06      	adds	r6, r0, #0
  struct etimer *t, *u;
	
  PROCESS_BEGIN();
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <process_thread_etimer_process+0x10>
 800417a:	2b59      	cmp	r3, #89	; 0x59
 800417c:	d143      	bne.n	8004206 <process_thread_etimer_process+0x96>
 800417e:	e005      	b.n	800418c <process_thread_etimer_process+0x1c>

  timerlist = NULL;
 8004180:	4a24      	ldr	r2, [pc, #144]	; (8004214 <process_thread_etimer_process+0xa4>)
 8004182:	6013      	str	r3, [r2, #0]
  
  while(1) {
    PROCESS_YIELD();
 8004184:	2359      	movs	r3, #89	; 0x59
 8004186:	8033      	strh	r3, [r6, #0]
 8004188:	2001      	movs	r0, #1
 800418a:	e03f      	b.n	800420c <process_thread_etimer_process+0x9c>

    if(ev == PROCESS_EVENT_EXITED) {
 800418c:	2987      	cmp	r1, #135	; 0x87
 800418e:	d114      	bne.n	80041ba <process_thread_etimer_process+0x4a>
      struct process *p = data;
 8004190:	4b20      	ldr	r3, [pc, #128]	; (8004214 <process_thread_etimer_process+0xa4>)
 8004192:	681b      	ldr	r3, [r3, #0]

      while(timerlist != NULL && timerlist->p == p) {
 8004194:	e000      	b.n	8004198 <process_thread_etimer_process+0x28>
	timerlist = timerlist->next;
 8004196:	689b      	ldr	r3, [r3, #8]
    PROCESS_YIELD();

    if(ev == PROCESS_EVENT_EXITED) {
      struct process *p = data;

      while(timerlist != NULL && timerlist->p == p) {
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f1      	beq.n	8004180 <process_thread_etimer_process+0x10>
 800419c:	68d9      	ldr	r1, [r3, #12]
 800419e:	4291      	cmp	r1, r2
 80041a0:	d0f9      	beq.n	8004196 <process_thread_etimer_process+0x26>
 80041a2:	e034      	b.n	800420e <process_thread_etimer_process+0x9e>
      }

      if(timerlist != NULL) {
	t = timerlist;
	while(t->next != NULL) {
	  if(t->next->p == p) {
 80041a4:	68c8      	ldr	r0, [r1, #12]
 80041a6:	4290      	cmp	r0, r2
 80041a8:	d001      	beq.n	80041ae <process_thread_etimer_process+0x3e>
 80041aa:	1c0b      	adds	r3, r1, #0
 80041ac:	e001      	b.n	80041b2 <process_thread_etimer_process+0x42>
	    t->next = t->next->next;
 80041ae:	6889      	ldr	r1, [r1, #8]
 80041b0:	6099      	str	r1, [r3, #8]
	timerlist = timerlist->next;
      }

      if(timerlist != NULL) {
	t = timerlist;
	while(t->next != NULL) {
 80041b2:	6899      	ldr	r1, [r3, #8]
 80041b4:	2900      	cmp	r1, #0
 80041b6:	d1f5      	bne.n	80041a4 <process_thread_etimer_process+0x34>
 80041b8:	e7e4      	b.n	8004184 <process_thread_etimer_process+0x14>
	  } else
	    t = t->next;
	}
      }
      continue;
    } else if(ev != PROCESS_EVENT_POLL) {
 80041ba:	2982      	cmp	r1, #130	; 0x82
 80041bc:	d1e2      	bne.n	8004184 <process_thread_etimer_process+0x14>

  again:
    
    u = NULL;
    
    for(t = timerlist; t != NULL; t = t->next) {
 80041be:	4b15      	ldr	r3, [pc, #84]	; (8004214 <process_thread_etimer_process+0xa4>)
 80041c0:	2500      	movs	r5, #0
 80041c2:	681c      	ldr	r4, [r3, #0]
 80041c4:	e01c      	b.n	8004200 <process_thread_etimer_process+0x90>
      if(timer_expired(&t->timer)) {
 80041c6:	1c20      	adds	r0, r4, #0
 80041c8:	f000 f9da 	bl	8004580 <timer_expired>
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d015      	beq.n	80041fc <process_thread_etimer_process+0x8c>
	if(process_post(t->p, PROCESS_EVENT_TIMER, t) == PROCESS_ERR_OK) {
 80041d0:	68e0      	ldr	r0, [r4, #12]
 80041d2:	2188      	movs	r1, #136	; 0x88
 80041d4:	1c22      	adds	r2, r4, #0
 80041d6:	f7ff feb9 	bl	8003f4c <process_post>
 80041da:	2800      	cmp	r0, #0
 80041dc:	d10c      	bne.n	80041f8 <process_thread_etimer_process+0x88>
	  
	  /* Reset the process ID of the event timer, to signal that the
	     etimer has expired. This is later checked in the
	     etimer_expired() function. */
	  t->p = PROCESS_NONE;
 80041de:	60e0      	str	r0, [r4, #12]
 80041e0:	68a3      	ldr	r3, [r4, #8]
	  if(u != NULL) {
 80041e2:	2d00      	cmp	r5, #0
 80041e4:	d001      	beq.n	80041ea <process_thread_etimer_process+0x7a>
	    u->next = t->next;
 80041e6:	60ab      	str	r3, [r5, #8]
 80041e8:	e001      	b.n	80041ee <process_thread_etimer_process+0x7e>
	  } else {
	    timerlist = t->next;
 80041ea:	4a0a      	ldr	r2, [pc, #40]	; (8004214 <process_thread_etimer_process+0xa4>)
 80041ec:	6013      	str	r3, [r2, #0]
	  }
	  t->next = NULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60a3      	str	r3, [r4, #8]
	  update_time();
 80041f2:	f7ff ff69 	bl	80040c8 <update_time>
	  goto again;
 80041f6:	e7e2      	b.n	80041be <process_thread_etimer_process+0x4e>
	} else {
	  etimer_request_poll();
 80041f8:	f7ff ffb2 	bl	8004160 <etimer_request_poll>

  again:
    
    u = NULL;
    
    for(t = timerlist; t != NULL; t = t->next) {
 80041fc:	1c25      	adds	r5, r4, #0
 80041fe:	68a4      	ldr	r4, [r4, #8]
 8004200:	2c00      	cmp	r4, #0
 8004202:	d1e0      	bne.n	80041c6 <process_thread_etimer_process+0x56>
 8004204:	e7be      	b.n	8004184 <process_thread_etimer_process+0x14>
      u = t;
    }
    
  }
  
  PROCESS_END();
 8004206:	2300      	movs	r3, #0
 8004208:	8003      	strh	r3, [r0, #0]
 800420a:	2003      	movs	r0, #3
}
 800420c:	bd70      	pop	{r4, r5, r6, pc}
      u = t;
    }
    
  }
  
  PROCESS_END();
 800420e:	4901      	ldr	r1, [pc, #4]	; (8004214 <process_thread_etimer_process+0xa4>)
 8004210:	600b      	str	r3, [r1, #0]
 8004212:	e7ce      	b.n	80041b2 <process_thread_etimer_process+0x42>
 8004214:	20001108 	.word	0x20001108

08004218 <add_timer>:
  process_poll(&etimer_process);
}
/*---------------------------------------------------------------------------*/
static void
add_timer(struct etimer *timer)
{
 8004218:	b510      	push	{r4, lr}
 800421a:	1c04      	adds	r4, r0, #0
  struct etimer *t;

  etimer_request_poll();
 800421c:	f7ff ffa0 	bl	8004160 <etimer_request_poll>

  if(timer->p != PROCESS_NONE) {
 8004220:	68e3      	ldr	r3, [r4, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <add_timer+0x26>
    for(t = timerlist; t != NULL; t = t->next) {
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <add_timer+0x3c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	e006      	b.n	800423a <add_timer+0x22>
      if(t == timer) {
 800422c:	42a3      	cmp	r3, r4
 800422e:	d103      	bne.n	8004238 <add_timer+0x20>
	/* Timer already on list, bail out. */
        timer->p = PROCESS_CURRENT();
 8004230:	4a09      	ldr	r2, [pc, #36]	; (8004258 <add_timer+0x40>)
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	60da      	str	r2, [r3, #12]
 8004236:	e009      	b.n	800424c <add_timer+0x34>
  struct etimer *t;

  etimer_request_poll();

  if(timer->p != PROCESS_NONE) {
    for(t = timerlist; t != NULL; t = t->next) {
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f6      	bne.n	800422c <add_timer+0x14>
      }
    }
  }

  /* Timer not on list. */
  timer->p = PROCESS_CURRENT();
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <add_timer+0x40>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60e3      	str	r3, [r4, #12]
  timer->next = timerlist;
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <add_timer+0x3c>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	60a2      	str	r2, [r4, #8]
  timerlist = timer;
 800424a:	601c      	str	r4, [r3, #0]

  update_time();
 800424c:	f7ff ff3c 	bl	80040c8 <update_time>
}
 8004250:	bd10      	pop	{r4, pc}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	20001108 	.word	0x20001108
 8004258:	2000103c 	.word	0x2000103c

0800425c <etimer_restart>:
  add_timer(et);
}
/*---------------------------------------------------------------------------*/
void
etimer_restart(struct etimer *et)
{
 800425c:	b510      	push	{r4, lr}
 800425e:	1c04      	adds	r4, r0, #0
  timer_restart(&et->timer);
 8004260:	f000 f988 	bl	8004574 <timer_restart>
  add_timer(et);
 8004264:	1c20      	adds	r0, r4, #0
 8004266:	f7ff ffd7 	bl	8004218 <add_timer>
}
 800426a:	bd10      	pop	{r4, pc}

0800426c <etimer_reset>:
  add_timer(et);
}
/*---------------------------------------------------------------------------*/
void
etimer_reset(struct etimer *et)
{
 800426c:	b510      	push	{r4, lr}
 800426e:	1c04      	adds	r4, r0, #0
  timer_reset(&et->timer);
 8004270:	f000 f97a 	bl	8004568 <timer_reset>
  add_timer(et);
 8004274:	1c20      	adds	r0, r4, #0
 8004276:	f7ff ffcf 	bl	8004218 <add_timer>
}
 800427a:	bd10      	pop	{r4, pc}

0800427c <etimer_set>:
  update_time();
}
/*---------------------------------------------------------------------------*/
void
etimer_set(struct etimer *et, clock_time_t interval)
{
 800427c:	b510      	push	{r4, lr}
 800427e:	1c04      	adds	r4, r0, #0
  timer_set(&et->timer, interval);
 8004280:	f000 f96a 	bl	8004558 <timer_set>
  add_timer(et);
 8004284:	1c20      	adds	r0, r4, #0
 8004286:	f7ff ffc7 	bl	8004218 <add_timer>
}
 800428a:	bd10      	pop	{r4, pc}

0800428c <rest_get_resources>:

list_t
rest_get_resources(void)
{
  return restful_services;
}
 800428c:	4800      	ldr	r0, [pc, #0]	; (8004290 <rest_get_resources+0x4>)
 800428e:	4770      	bx	lr
 8004290:	20001114 	.word	0x20001114

08004294 <rest_set_pre_handler>:
}

void
rest_set_pre_handler(resource_t* resource, restful_pre_handler pre_handler)
{
  resource->pre_handler = pre_handler;
 8004294:	6141      	str	r1, [r0, #20]
}
 8004296:	4770      	bx	lr

08004298 <rest_set_post_handler>:

void
rest_set_post_handler(resource_t* resource, restful_post_handler post_handler)
{
  resource->post_handler = post_handler;
 8004298:	6181      	str	r1, [r0, #24]
}
 800429a:	4770      	bx	lr

0800429c <process_thread_rest_manager_process>:
/*-----------------------------------------------------------------------------------*/

PROCESS(rest_manager_process, "Rest Process");

PROCESS_THREAD(rest_manager_process, ev, data)
{
 800429c:	b570      	push	{r4, r5, r6, lr}
  PROCESS_BEGIN();
 800429e:	8803      	ldrh	r3, [r0, #0]
/*-----------------------------------------------------------------------------------*/

PROCESS(rest_manager_process, "Rest Process");

PROCESS_THREAD(rest_manager_process, ev, data)
{
 80042a0:	1c05      	adds	r5, r0, #0
  PROCESS_BEGIN();
 80042a2:	2bcd      	cmp	r3, #205	; 0xcd
 80042a4:	d00b      	beq.n	80042be <process_thread_rest_manager_process+0x22>
 80042a6:	2bd9      	cmp	r3, #217	; 0xd9
 80042a8:	d01e      	beq.n	80042e8 <process_thread_rest_manager_process+0x4c>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d139      	bne.n	8004322 <process_thread_rest_manager_process+0x86>

  PROCESS_PAUSE();
 80042ae:	4b1f      	ldr	r3, [pc, #124]	; (800432c <process_thread_rest_manager_process+0x90>)
 80042b0:	2185      	movs	r1, #133	; 0x85
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f7ff fe49 	bl	8003f4c <process_post>
 80042ba:	23cd      	movs	r3, #205	; 0xcd
 80042bc:	e011      	b.n	80042e2 <process_thread_rest_manager_process+0x46>
 80042be:	2985      	cmp	r1, #133	; 0x85
 80042c0:	d110      	bne.n	80042e4 <process_thread_rest_manager_process+0x48>

  /* Initialize the PERIODIC_RESOURCE timers, which will be handled by this process. */
  periodic_resource_t* periodic_resource = NULL;
  for (periodic_resource = (periodic_resource_t*) list_head(restful_periodic_services); periodic_resource; periodic_resource = periodic_resource->next) {
 80042c2:	481b      	ldr	r0, [pc, #108]	; (8004330 <process_thread_rest_manager_process+0x94>)
 80042c4:	f000 f8df 	bl	8004486 <list_head>
 80042c8:	1c04      	adds	r4, r0, #0
 80042ca:	e007      	b.n	80042dc <process_thread_rest_manager_process+0x40>
    if (periodic_resource->period) {
 80042cc:	68a1      	ldr	r1, [r4, #8]
 80042ce:	2900      	cmp	r1, #0
 80042d0:	d003      	beq.n	80042da <process_thread_rest_manager_process+0x3e>
      PRINTF("Periodic: Set timer for %s to %lu\n", periodic_resource->resource->url, periodic_resource->period);
      etimer_set(&periodic_resource->periodic_timer, periodic_resource->period);
 80042d2:	1c20      	adds	r0, r4, #0
 80042d4:	300c      	adds	r0, #12
 80042d6:	f7ff ffd1 	bl	800427c <etimer_set>

  PROCESS_PAUSE();

  /* Initialize the PERIODIC_RESOURCE timers, which will be handled by this process. */
  periodic_resource_t* periodic_resource = NULL;
  for (periodic_resource = (periodic_resource_t*) list_head(restful_periodic_services); periodic_resource; periodic_resource = periodic_resource->next) {
 80042da:	6824      	ldr	r4, [r4, #0]
 80042dc:	2c00      	cmp	r4, #0
 80042de:	d1f5      	bne.n	80042cc <process_thread_rest_manager_process+0x30>
      etimer_set(&periodic_resource->periodic_timer, periodic_resource->period);
    }
  }

  while (1) {
    PROCESS_WAIT_EVENT();
 80042e0:	23d9      	movs	r3, #217	; 0xd9
 80042e2:	802b      	strh	r3, [r5, #0]
 80042e4:	2001      	movs	r0, #1
 80042e6:	e01f      	b.n	8004328 <process_thread_rest_manager_process+0x8c>
    if (ev == PROCESS_EVENT_TIMER) {
 80042e8:	2988      	cmp	r1, #136	; 0x88
 80042ea:	d1f9      	bne.n	80042e0 <process_thread_rest_manager_process+0x44>
      for (periodic_resource = (periodic_resource_t*)list_head(restful_periodic_services);periodic_resource;periodic_resource = periodic_resource->next) {
 80042ec:	4810      	ldr	r0, [pc, #64]	; (8004330 <process_thread_rest_manager_process+0x94>)
 80042ee:	f000 f8ca 	bl	8004486 <list_head>
 80042f2:	1c04      	adds	r4, r0, #0
 80042f4:	e012      	b.n	800431c <process_thread_rest_manager_process+0x80>
        if (periodic_resource->period && etimer_expired(&periodic_resource->periodic_timer)) {
 80042f6:	68a3      	ldr	r3, [r4, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00e      	beq.n	800431a <process_thread_rest_manager_process+0x7e>
 80042fc:	1c26      	adds	r6, r4, #0
 80042fe:	360c      	adds	r6, #12
 8004300:	1c30      	adds	r0, r6, #0
 8004302:	f7ff ff05 	bl	8004110 <etimer_expired>
 8004306:	2800      	cmp	r0, #0
 8004308:	d007      	beq.n	800431a <process_thread_rest_manager_process+0x7e>

          PRINTF("Periodic: etimer expired for /%s (period: %lu)\n", periodic_resource->resource->url, periodic_resource->period);

          /* Call the periodic_handler function if it exists. */
          if (periodic_resource->periodic_handler) {
 800430a:	69e3      	ldr	r3, [r4, #28]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <process_thread_rest_manager_process+0x78>
            (periodic_resource->periodic_handler)(periodic_resource->resource);
 8004310:	6860      	ldr	r0, [r4, #4]
 8004312:	4798      	blx	r3
          }
          etimer_reset(&periodic_resource->periodic_timer);
 8004314:	1c30      	adds	r0, r6, #0
 8004316:	f7ff ffa9 	bl	800426c <etimer_reset>
  }

  while (1) {
    PROCESS_WAIT_EVENT();
    if (ev == PROCESS_EVENT_TIMER) {
      for (periodic_resource = (periodic_resource_t*)list_head(restful_periodic_services);periodic_resource;periodic_resource = periodic_resource->next) {
 800431a:	6824      	ldr	r4, [r4, #0]
 800431c:	2c00      	cmp	r4, #0
 800431e:	d1ea      	bne.n	80042f6 <process_thread_rest_manager_process+0x5a>
 8004320:	e7de      	b.n	80042e0 <process_thread_rest_manager_process+0x44>
        }
      }
    }
  }

  PROCESS_END();
 8004322:	2300      	movs	r3, #0
 8004324:	8003      	strh	r3, [r0, #0]
 8004326:	2003      	movs	r0, #3
}
 8004328:	bd70      	pop	{r4, r5, r6, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	2000103c 	.word	0x2000103c
 8004330:	20001110 	.word	0x20001110

08004334 <rest_invoke_restful_service>:
  resource->flags |= flags;
}

int
rest_invoke_restful_service(void* request, void* response, uint8_t *buffer, uint16_t buffer_size, int32_t *offset)
{
 8004334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004336:	b089      	sub	sp, #36	; 0x24
 8004338:	9305      	str	r3, [sp, #20]
 800433a:	1c06      	adds	r6, r0, #0
  uint8_t allowed = 0;

  PRINTF("rest_invoke_restful_service url /%.*s -->\n", url_len, url);

  resource_t* resource = NULL;
  const char *url = NULL;
 800433c:	2300      	movs	r3, #0

  for (resource = (resource_t*)list_head(restful_services); resource; resource = resource->next)
 800433e:	4835      	ldr	r0, [pc, #212]	; (8004414 <rest_invoke_restful_service+0xe0>)
  uint8_t allowed = 0;

  PRINTF("rest_invoke_restful_service url /%.*s -->\n", url_len, url);

  resource_t* resource = NULL;
  const char *url = NULL;
 8004340:	9307      	str	r3, [sp, #28]
  resource->flags |= flags;
}

int
rest_invoke_restful_service(void* request, void* response, uint8_t *buffer, uint16_t buffer_size, int32_t *offset)
{
 8004342:	1c0f      	adds	r7, r1, #0
 8004344:	9204      	str	r2, [sp, #16]
  PRINTF("rest_invoke_restful_service url /%.*s -->\n", url_len, url);

  resource_t* resource = NULL;
  const char *url = NULL;

  for (resource = (resource_t*)list_head(restful_services); resource; resource = resource->next)
 8004346:	f000 f89e 	bl	8004486 <list_head>
  {
    /*if the web service handles that kind of requests and urls matches*/
    if ((REST.get_url(request, &url)==strlen(resource->url) || (REST.get_url(request, &url)>strlen(resource->url) && (resource->flags & HAS_SUB_RESOURCES)))
 800434a:	4b33      	ldr	r3, [pc, #204]	; (8004418 <rest_invoke_restful_service+0xe4>)
  PRINTF("rest_invoke_restful_service url /%.*s -->\n", url_len, url);

  resource_t* resource = NULL;
  const char *url = NULL;

  for (resource = (resource_t*)list_head(restful_services); resource; resource = resource->next)
 800434c:	1c05      	adds	r5, r0, #0
  {
    /*if the web service handles that kind of requests and urls matches*/
    if ((REST.get_url(request, &url)==strlen(resource->url) || (REST.get_url(request, &url)>strlen(resource->url) && (resource->flags & HAS_SUB_RESOURCES)))
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	9302      	str	r3, [sp, #8]
  PRINTF("rest_invoke_restful_service url /%.*s -->\n", url_len, url);

  resource_t* resource = NULL;
  const char *url = NULL;

  for (resource = (resource_t*)list_head(restful_services); resource; resource = resource->next)
 8004352:	e04d      	b.n	80043f0 <rest_invoke_restful_service+0xbc>
  {
    /*if the web service handles that kind of requests and urls matches*/
    if ((REST.get_url(request, &url)==strlen(resource->url) || (REST.get_url(request, &url)>strlen(resource->url) && (resource->flags & HAS_SUB_RESOURCES)))
 8004354:	ac07      	add	r4, sp, #28
 8004356:	9b02      	ldr	r3, [sp, #8]
 8004358:	1c21      	adds	r1, r4, #0
 800435a:	1c30      	adds	r0, r6, #0
 800435c:	4798      	blx	r3
 800435e:	9003      	str	r0, [sp, #12]
 8004360:	68a8      	ldr	r0, [r5, #8]
 8004362:	f002 ffab 	bl	80072bc <strlen>
 8004366:	9b03      	ldr	r3, [sp, #12]
 8004368:	4283      	cmp	r3, r0
 800436a:	d00d      	beq.n	8004388 <rest_invoke_restful_service+0x54>
 800436c:	1c21      	adds	r1, r4, #0
 800436e:	1c30      	adds	r0, r6, #0
 8004370:	9b02      	ldr	r3, [sp, #8]
 8004372:	4798      	blx	r3
 8004374:	1c04      	adds	r4, r0, #0
 8004376:	68a8      	ldr	r0, [r5, #8]
 8004378:	f002 ffa0 	bl	80072bc <strlen>
 800437c:	4284      	cmp	r4, r0
 800437e:	d936      	bls.n	80043ee <rest_invoke_restful_service+0xba>
 8004380:	2304      	movs	r3, #4
 8004382:	56eb      	ldrsb	r3, [r5, r3]
 8004384:	2b00      	cmp	r3, #0
 8004386:	da32      	bge.n	80043ee <rest_invoke_restful_service+0xba>
        && strncmp(resource->url, url, strlen(resource->url)) == 0)
 8004388:	68ac      	ldr	r4, [r5, #8]
 800438a:	1c20      	adds	r0, r4, #0
 800438c:	f002 ff96 	bl	80072bc <strlen>
 8004390:	9907      	ldr	r1, [sp, #28]
 8004392:	1c02      	adds	r2, r0, #0
 8004394:	1c20      	adds	r0, r4, #0
 8004396:	f002 ff99 	bl	80072cc <strncmp>
  const char *url = NULL;

  for (resource = (resource_t*)list_head(restful_services); resource; resource = resource->next)
  {
    /*if the web service handles that kind of requests and urls matches*/
    if ((REST.get_url(request, &url)==strlen(resource->url) || (REST.get_url(request, &url)>strlen(resource->url) && (resource->flags & HAS_SUB_RESOURCES)))
 800439a:	2800      	cmp	r0, #0
 800439c:	d127      	bne.n	80043ee <rest_invoke_restful_service+0xba>
        && strncmp(resource->url, url, strlen(resource->url)) == 0)
    {
      found = 1;
      rest_resource_flags_t method = REST.get_method_type(request);
 800439e:	4c1e      	ldr	r4, [pc, #120]	; (8004418 <rest_invoke_restful_service+0xe4>)
 80043a0:	1c30      	adds	r0, r6, #0
 80043a2:	6963      	ldr	r3, [r4, #20]
 80043a4:	4798      	blx	r3

      PRINTF("method %u, resource->flags %u\n", (uint16_t)method, resource->flags);

      if (resource->flags & method)
 80043a6:	792b      	ldrb	r3, [r5, #4]
 80043a8:	4218      	tst	r0, r3
 80043aa:	d018      	beq.n	80043de <rest_invoke_restful_service+0xaa>
      {
        allowed = 1;

        /*call pre handler if it exists*/
        if (!resource->pre_handler || resource->pre_handler(resource, request, response))
 80043ac:	696b      	ldr	r3, [r5, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <rest_invoke_restful_service+0x8a>
 80043b2:	1c28      	adds	r0, r5, #0
 80043b4:	1c31      	adds	r1, r6, #0
 80043b6:	1c3a      	adds	r2, r7, #0
 80043b8:	4798      	blx	r3
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d01b      	beq.n	80043f6 <rest_invoke_restful_service+0xc2>
        {
          /* call handler function*/
          resource->handler(request, response, buffer, buffer_size, offset);
 80043be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043c0:	1c30      	adds	r0, r6, #0
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	692c      	ldr	r4, [r5, #16]
 80043c6:	9b05      	ldr	r3, [sp, #20]
 80043c8:	1c39      	adds	r1, r7, #0
 80043ca:	9a04      	ldr	r2, [sp, #16]
 80043cc:	47a0      	blx	r4

          /*call post handler if it exists*/
          if (resource->post_handler)
 80043ce:	69ab      	ldr	r3, [r5, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d010      	beq.n	80043f6 <rest_invoke_restful_service+0xc2>
          {
            resource->post_handler(resource, request, response);
 80043d4:	1c28      	adds	r0, r5, #0
 80043d6:	1c31      	adds	r1, r6, #0
 80043d8:	1c3a      	adds	r2, r7, #0
 80043da:	4798      	blx	r3
 80043dc:	e00b      	b.n	80043f6 <rest_invoke_restful_service+0xc2>
          }
        }
      } else {
        REST.set_response_status(response, REST.status.METHOD_NOT_ALLOWED);
 80043de:	1c22      	adds	r2, r4, #0
 80043e0:	3298      	adds	r2, #152	; 0x98
 80043e2:	69a3      	ldr	r3, [r4, #24]
 80043e4:	1c38      	adds	r0, r7, #0
 80043e6:	6811      	ldr	r1, [r2, #0]
 80043e8:	4798      	blx	r3
 80043ea:	2300      	movs	r3, #0
 80043ec:	e004      	b.n	80043f8 <rest_invoke_restful_service+0xc4>
  PRINTF("rest_invoke_restful_service url /%.*s -->\n", url_len, url);

  resource_t* resource = NULL;
  const char *url = NULL;

  for (resource = (resource_t*)list_head(restful_services); resource; resource = resource->next)
 80043ee:	682d      	ldr	r5, [r5, #0]
 80043f0:	2d00      	cmp	r5, #0
 80043f2:	d1af      	bne.n	8004354 <rest_invoke_restful_service+0x20>
 80043f4:	e004      	b.n	8004400 <rest_invoke_restful_service+0xcc>
 80043f6:	2301      	movs	r3, #1
 80043f8:	2001      	movs	r0, #1
  if (!found) {
    REST.set_response_status(response, REST.status.NOT_FOUND);
  }

  return found & allowed;
}
 80043fa:	b009      	add	sp, #36	; 0x24
  PRINTF("rest_invoke_restful_service url /%.*s -->\n", url_len, url);

  resource_t* resource = NULL;
  const char *url = NULL;

  for (resource = (resource_t*)list_head(restful_services); resource; resource = resource->next)
 80043fc:	4018      	ands	r0, r3
  if (!found) {
    REST.set_response_status(response, REST.status.NOT_FOUND);
  }

  return found & allowed;
}
 80043fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      break;
    }
  }

  if (!found) {
    REST.set_response_status(response, REST.status.NOT_FOUND);
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <rest_invoke_restful_service+0xe4>)
 8004402:	1c38      	adds	r0, r7, #0
 8004404:	1c1a      	adds	r2, r3, #0
 8004406:	3294      	adds	r2, #148	; 0x94
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	6811      	ldr	r1, [r2, #0]
 800440c:	4798      	blx	r3
 800440e:	2300      	movs	r3, #0
 8004410:	2000      	movs	r0, #0
 8004412:	e7f2      	b.n	80043fa <rest_invoke_restful_service+0xc6>
 8004414:	20001114 	.word	0x20001114
 8004418:	0800b414 	.word	0x0800b414

0800441c <rest_activate_resource>:
  process_start(&rest_manager_process, NULL);
}

void
rest_activate_resource(resource_t* resource)
{
 800441c:	b510      	push	{r4, lr}
  PRINTF("Activating: %s", resource->url);

  if (!resource->pre_handler)
 800441e:	6943      	ldr	r3, [r0, #20]
  process_start(&rest_manager_process, NULL);
}

void
rest_activate_resource(resource_t* resource)
{
 8004420:	1c04      	adds	r4, r0, #0
  PRINTF("Activating: %s", resource->url);

  if (!resource->pre_handler)
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <rest_activate_resource+0x12>
  {
    rest_set_pre_handler(resource, REST.default_pre_handler);
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <rest_activate_resource+0x2c>)
 8004428:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800442a:	f7ff ff33 	bl	8004294 <rest_set_pre_handler>
  }
  if (!resource->post_handler)
 800442e:	69a3      	ldr	r3, [r4, #24]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d104      	bne.n	800443e <rest_activate_resource+0x22>
  {
    rest_set_post_handler(resource, REST.default_post_handler);
 8004434:	4b04      	ldr	r3, [pc, #16]	; (8004448 <rest_activate_resource+0x2c>)
 8004436:	1c20      	adds	r0, r4, #0
 8004438:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800443a:	f7ff ff2d 	bl	8004298 <rest_set_post_handler>
  }

  list_add(restful_services, resource);
 800443e:	4803      	ldr	r0, [pc, #12]	; (800444c <rest_activate_resource+0x30>)
 8004440:	1c21      	adds	r1, r4, #0
 8004442:	f000 f843 	bl	80044cc <list_add>
}
 8004446:	bd10      	pop	{r4, pc}
 8004448:	0800b414 	.word	0x0800b414
 800444c:	20001114 	.word	0x20001114

08004450 <rest_init_engine>:
LIST(restful_periodic_services);


void
rest_init_engine(void)
{
 8004450:	b510      	push	{r4, lr}
  list_init(restful_services);
 8004452:	4807      	ldr	r0, [pc, #28]	; (8004470 <rest_init_engine+0x20>)
 8004454:	f000 f814 	bl	8004480 <list_init>

  REST.set_service_callback(rest_invoke_restful_service);
 8004458:	4c06      	ldr	r4, [pc, #24]	; (8004474 <rest_init_engine+0x24>)
 800445a:	4807      	ldr	r0, [pc, #28]	; (8004478 <rest_init_engine+0x28>)
 800445c:	68a3      	ldr	r3, [r4, #8]
 800445e:	4798      	blx	r3

  /* Start the RESTful server implementation. */
  REST.init();
 8004460:	6863      	ldr	r3, [r4, #4]
 8004462:	4798      	blx	r3

  /*Start rest manager process*/
  process_start(&rest_manager_process, NULL);
 8004464:	4805      	ldr	r0, [pc, #20]	; (800447c <rest_init_engine+0x2c>)
 8004466:	2100      	movs	r1, #0
 8004468:	f7ff fe14 	bl	8004094 <process_start>
}
 800446c:	bd10      	pop	{r4, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	20001114 	.word	0x20001114
 8004474:	0800b414 	.word	0x0800b414
 8004478:	08004335 	.word	0x08004335
 800447c:	2000055c 	.word	0x2000055c

08004480 <list_init>:
 * \param list The list to be initialized.
 */
void
list_init(list_t list)
{
  *list = NULL;
 8004480:	2300      	movs	r3, #0
 8004482:	6003      	str	r3, [r0, #0]
}
 8004484:	4770      	bx	lr

08004486 <list_head>:
 *
 * \sa list_tail()
 */
void *
list_head(list_t list)
{
 8004486:	6800      	ldr	r0, [r0, #0]
  return *list;
}
 8004488:	4770      	bx	lr

0800448a <list_tail>:
 *
 * \sa list_head()
 */
void *
list_tail(list_t list)
{
 800448a:	b500      	push	{lr}
  struct list *l;
  
  if(*list == NULL) {
 800448c:	6803      	ldr	r3, [r0, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <list_tail+0xc>
 8004492:	2000      	movs	r0, #0
 8004494:	e003      	b.n	800449e <list_tail+0x14>
    return NULL;
  }
  
  for(l = *list; l->next != NULL; l = l->next);
 8004496:	1c18      	adds	r0, r3, #0
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1fb      	bne.n	8004496 <list_tail+0xc>
  
  return l;
}
 800449e:	bd00      	pop	{pc}

080044a0 <list_remove>:
 *
 */
/*---------------------------------------------------------------------------*/
void
list_remove(list_t list, void *item)
{
 80044a0:	b500      	push	{lr}
  struct list *l, *r;
  
  if(*list == NULL) {
 80044a2:	6803      	ldr	r3, [r0, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d010      	beq.n	80044ca <list_remove+0x2a>
    return;
  }
  
  r = NULL;
  for(l = *list; l != NULL; l = l->next) {
 80044a8:	2200      	movs	r2, #0
 80044aa:	e00c      	b.n	80044c6 <list_remove+0x26>
    if(l == item) {
 80044ac:	428b      	cmp	r3, r1
 80044ae:	d108      	bne.n	80044c2 <list_remove+0x22>
 80044b0:	6819      	ldr	r1, [r3, #0]
      if(r == NULL) {
 80044b2:	2a00      	cmp	r2, #0
 80044b4:	d101      	bne.n	80044ba <list_remove+0x1a>
	/* First on list */
	*list = l->next;
 80044b6:	6001      	str	r1, [r0, #0]
 80044b8:	e000      	b.n	80044bc <list_remove+0x1c>
      } else {
	/* Not first on list */
	r->next = l->next;
 80044ba:	6011      	str	r1, [r2, #0]
      }
      l->next = NULL;
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
      return;
 80044c0:	e003      	b.n	80044ca <list_remove+0x2a>
  if(*list == NULL) {
    return;
  }
  
  r = NULL;
  for(l = *list; l != NULL; l = l->next) {
 80044c2:	1c1a      	adds	r2, r3, #0
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <list_remove+0xc>
      l->next = NULL;
      return;
    }
    r = l;
  }
}
 80044ca:	bd00      	pop	{pc}

080044cc <list_add>:
 * \sa list_push()
 *
 */
void
list_add(list_t list, void *item)
{
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	1c05      	adds	r5, r0, #0
 80044d0:	1c0c      	adds	r4, r1, #0
  struct list *l;

  /* Make sure not to add the same element twice */
  list_remove(list, item);
 80044d2:	f7ff ffe5 	bl	80044a0 <list_remove>

  ((struct list *)item)->next = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	6023      	str	r3, [r4, #0]
  
  l = list_tail(list);
 80044da:	1c28      	adds	r0, r5, #0
 80044dc:	f7ff ffd5 	bl	800448a <list_tail>

  if(l == NULL) {
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d101      	bne.n	80044e8 <list_add+0x1c>
    *list = item;
 80044e4:	602c      	str	r4, [r5, #0]
 80044e6:	e000      	b.n	80044ea <list_add+0x1e>
  } else {
    l->next = item;
 80044e8:	6004      	str	r4, [r0, #0]
  }
}
 80044ea:	bd38      	pop	{r3, r4, r5, pc}

080044ec <list_length>:
 * \return The length of the list.
 */
/*---------------------------------------------------------------------------*/
int
list_length(list_t list)
{
 80044ec:	b500      	push	{lr}
  struct list *l;
  int n = 0;

  for(l = *list; l != NULL; l = l->next) {
 80044ee:	6803      	ldr	r3, [r0, #0]
 80044f0:	2000      	movs	r0, #0
 80044f2:	e001      	b.n	80044f8 <list_length+0xc>
 80044f4:	681b      	ldr	r3, [r3, #0]
    ++n;
 80044f6:	3001      	adds	r0, #1
list_length(list_t list)
{
  struct list *l;
  int n = 0;

  for(l = *list; l != NULL; l = l->next) {
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1fb      	bne.n	80044f4 <list_length+0x8>
    ++n;
  }

  return n;
}
 80044fc:	bd00      	pop	{pc}

080044fe <memb_alloc>:
  memset(m->mem, 0, m->size * m->num);
}
/*---------------------------------------------------------------------------*/
void *
memb_alloc(struct memb *m)
{
 80044fe:	b510      	push	{r4, lr}
  int i;

  for(i = 0; i < m->num; ++i) {
 8004500:	8841      	ldrh	r1, [r0, #2]
 8004502:	2300      	movs	r3, #0
 8004504:	e00c      	b.n	8004520 <memb_alloc+0x22>
    if(m->count[i] == 0) {
 8004506:	6842      	ldr	r2, [r0, #4]
 8004508:	189a      	adds	r2, r3, r2
 800450a:	7814      	ldrb	r4, [r2, #0]
 800450c:	2c00      	cmp	r4, #0
 800450e:	d106      	bne.n	800451e <memb_alloc+0x20>
      /* If this block was unused, we increase the reference count to
	 indicate that it now is used and return a pointer to the
	 memory block. */
      ++(m->count[i]);
 8004510:	2101      	movs	r1, #1
 8004512:	7011      	strb	r1, [r2, #0]
      return (void *)((char *)m->mem + (i * m->size));
 8004514:	8802      	ldrh	r2, [r0, #0]
 8004516:	4353      	muls	r3, r2
 8004518:	6882      	ldr	r2, [r0, #8]
 800451a:	1898      	adds	r0, r3, r2
 800451c:	e003      	b.n	8004526 <memb_alloc+0x28>
void *
memb_alloc(struct memb *m)
{
  int i;

  for(i = 0; i < m->num; ++i) {
 800451e:	3301      	adds	r3, #1
 8004520:	428b      	cmp	r3, r1
 8004522:	dbf0      	blt.n	8004506 <memb_alloc+0x8>
 8004524:	2000      	movs	r0, #0
  }

  /* No free block was found, so we return NULL to indicate failure to
     allocate block. */
  return NULL;
}
 8004526:	bd10      	pop	{r4, pc}

08004528 <memb_free>:
/*---------------------------------------------------------------------------*/
char
memb_free(struct memb *m, void *ptr)
{
 8004528:	b530      	push	{r4, r5, lr}
  int i;
  char *ptr2;

  /* Walk through the list of blocks and try to find the block to
     which the pointer "ptr" points to. */
  ptr2 = (char *)m->mem;
 800452a:	6882      	ldr	r2, [r0, #8]
  for(i = 0; i < m->num; ++i) {
 800452c:	8844      	ldrh	r4, [r0, #2]
 800452e:	2300      	movs	r3, #0
 8004530:	e00e      	b.n	8004550 <memb_free+0x28>
    
    if(ptr2 == (char *)ptr) {
 8004532:	428a      	cmp	r2, r1
 8004534:	d109      	bne.n	800454a <memb_free+0x22>
      /* We've found to block to which "ptr" points so we decrease the
	 reference count and return the new value of it. */
      if(m->count[i] > 0) {
 8004536:	6842      	ldr	r2, [r0, #4]
 8004538:	189a      	adds	r2, r3, r2
 800453a:	7811      	ldrb	r1, [r2, #0]
 800453c:	2900      	cmp	r1, #0
 800453e:	d001      	beq.n	8004544 <memb_free+0x1c>
	/* Make sure that we don't deallocate free memory. */
	--(m->count[i]);
 8004540:	3901      	subs	r1, #1
 8004542:	7011      	strb	r1, [r2, #0]
      }
      return m->count[i];
 8004544:	6842      	ldr	r2, [r0, #4]
 8004546:	5cd0      	ldrb	r0, [r2, r3]
 8004548:	e005      	b.n	8004556 <memb_free+0x2e>
    }
    ptr2 += m->size;
 800454a:	8805      	ldrh	r5, [r0, #0]
  char *ptr2;

  /* Walk through the list of blocks and try to find the block to
     which the pointer "ptr" points to. */
  ptr2 = (char *)m->mem;
  for(i = 0; i < m->num; ++i) {
 800454c:	3301      	adds	r3, #1
	/* Make sure that we don't deallocate free memory. */
	--(m->count[i]);
      }
      return m->count[i];
    }
    ptr2 += m->size;
 800454e:	1952      	adds	r2, r2, r5
  char *ptr2;

  /* Walk through the list of blocks and try to find the block to
     which the pointer "ptr" points to. */
  ptr2 = (char *)m->mem;
  for(i = 0; i < m->num; ++i) {
 8004550:	42a3      	cmp	r3, r4
 8004552:	dbee      	blt.n	8004532 <memb_free+0xa>
 8004554:	20ff      	movs	r0, #255	; 0xff
      return m->count[i];
    }
    ptr2 += m->size;
  }
  return -1;
}
 8004556:	bd30      	pop	{r4, r5, pc}

08004558 <timer_set>:
 8004558:	4b02      	ldr	r3, [pc, #8]	; (8004564 <timer_set+0xc>)
 *
 */
void
timer_set(struct timer *t, clock_time_t interval)
{
  t->interval = interval;
 800455a:	6041      	str	r1, [r0, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
  t->start = clock_time();
 800455e:	6003      	str	r3, [r0, #0]
}
 8004560:	4770      	bx	lr
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	20000ed4 	.word	0x20000ed4

08004568 <timer_reset>:
 * \sa timer_restart()
 */
void
timer_reset(struct timer *t)
{
  t->start += t->interval;
 8004568:	6802      	ldr	r2, [r0, #0]
 800456a:	6843      	ldr	r3, [r0, #4]
 800456c:	18d3      	adds	r3, r2, r3
 800456e:	6003      	str	r3, [r0, #0]
}
 8004570:	4770      	bx	lr
	...

08004574 <timer_restart>:
 8004574:	4b01      	ldr	r3, [pc, #4]	; (800457c <timer_restart+0x8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 * \sa timer_reset()
 */
void
timer_restart(struct timer *t)
{
  t->start = clock_time();
 8004578:	6003      	str	r3, [r0, #0]
}
 800457a:	4770      	bx	lr
 800457c:	20000ed4 	.word	0x20000ed4

08004580 <timer_expired>:
 8004580:	4b04      	ldr	r3, [pc, #16]	; (8004594 <timer_expired+0x14>)
 8004582:	6802      	ldr	r2, [r0, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6840      	ldr	r0, [r0, #4]
 8004588:	3301      	adds	r3, #1
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	4298      	cmp	r0, r3
 800458e:	4180      	sbcs	r0, r0
 8004590:	4240      	negs	r0, r0
  /* Note: Can not return diff >= t->interval so we add 1 to diff and return
     t->interval < diff - required to avoid an internal error in mspgcc. */
  clock_time_t diff = (clock_time() - t->start) + 1;
  return t->interval < diff;

}
 8004592:	4770      	bx	lr
 8004594:	20000ed4 	.word	0x20000ed4

08004598 <stimer_set>:
 * \param interval The interval before the timer expires.
 *
 */
void
stimer_set(struct stimer *t, unsigned long interval)
{
 8004598:	b510      	push	{r4, lr}
}


static inline long unsigned int clock_seconds(void) {
    return millisecondCount / 1000;
 800459a:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <stimer_set+0x18>)
  t->interval = interval;
 800459c:	6041      	str	r1, [r0, #4]
  t->start = clock_seconds();
 800459e:	21fa      	movs	r1, #250	; 0xfa
 * \param interval The interval before the timer expires.
 *
 */
void
stimer_set(struct stimer *t, unsigned long interval)
{
 80045a0:	1c04      	adds	r4, r0, #0
  t->interval = interval;
  t->start = clock_seconds();
 80045a2:	0089      	lsls	r1, r1, #2
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	f7fb fda5 	bl	80000f4 <__aeabi_uidiv>
 80045aa:	6020      	str	r0, [r4, #0]
}
 80045ac:	bd10      	pop	{r4, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	20000ed4 	.word	0x20000ed4

080045b4 <stimer_restart>:
 *
 * \sa stimer_reset()
 */
void
stimer_restart(struct stimer *t)
{
 80045b4:	b510      	push	{r4, lr}
 80045b6:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <stimer_restart+0x14>)
  t->start = clock_seconds();
 80045b8:	21fa      	movs	r1, #250	; 0xfa
 *
 * \sa stimer_reset()
 */
void
stimer_restart(struct stimer *t)
{
 80045ba:	1c04      	adds	r4, r0, #0
  t->start = clock_seconds();
 80045bc:	0089      	lsls	r1, r1, #2
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	f7fb fd98 	bl	80000f4 <__aeabi_uidiv>
 80045c4:	6020      	str	r0, [r4, #0]
}
 80045c6:	bd10      	pop	{r4, pc}
 80045c8:	20000ed4 	.word	0x20000ed4

080045cc <stimer_expired>:
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
int
stimer_expired(struct stimer *t)
{
 80045cc:	b510      	push	{r4, lr}
 80045ce:	4b08      	ldr	r3, [pc, #32]	; (80045f0 <stimer_expired+0x24>)
 80045d0:	21fa      	movs	r1, #250	; 0xfa
 80045d2:	1c04      	adds	r4, r0, #0
 80045d4:	0089      	lsls	r1, r1, #2
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	f7fb fd8c 	bl	80000f4 <__aeabi_uidiv>
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	6862      	ldr	r2, [r4, #4]
 80045e0:	1ac3      	subs	r3, r0, r3
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	4a03      	ldr	r2, [pc, #12]	; (80045f4 <stimer_expired+0x28>)
 80045e6:	2000      	movs	r0, #0
 80045e8:	429a      	cmp	r2, r3
 80045ea:	4140      	adcs	r0, r0
  return SCLOCK_GEQ(clock_seconds(), t->start + t->interval);
}
 80045ec:	bd10      	pop	{r4, pc}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	20000ed4 	.word	0x20000ed4
 80045f4:	7ffffffe 	.word	0x7ffffffe

080045f8 <tcpip_output>:
#else

static uint8_t (* outputfunc)(void);
uint8_t
tcpip_output(void)
{
 80045f8:	b508      	push	{r3, lr}
  if(outputfunc != NULL) {
 80045fa:	4b04      	ldr	r3, [pc, #16]	; (800460c <tcpip_output+0x14>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <tcpip_output+0xe>
 8004602:	2000      	movs	r0, #0
 8004604:	e000      	b.n	8004608 <tcpip_output+0x10>
    return outputfunc();
 8004606:	4798      	blx	r3
  }
  UIP_LOG("tcpip_output: Use tcpip_set_outputfunc() to set an output function");
  return 0;
}
 8004608:	bd08      	pop	{r3, pc}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	200011d0 	.word	0x200011d0

08004610 <tcpip_set_outputfunc>:

void
tcpip_set_outputfunc(uint8_t (*f)(void))
{
  outputfunc = f;
 8004610:	4b01      	ldr	r3, [pc, #4]	; (8004618 <tcpip_set_outputfunc+0x8>)
 8004612:	6018      	str	r0, [r3, #0]
}
 8004614:	4770      	bx	lr
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	200011d0 	.word	0x200011d0

0800461c <start_periodic_tcp_timer>:
PROCESS(tcpip_process, "TCP/IP stack");

/*---------------------------------------------------------------------------*/
static void
start_periodic_tcp_timer(void)
{
 800461c:	b510      	push	{r4, lr}
  if(etimer_expired(&periodic)) {
 800461e:	4c05      	ldr	r4, [pc, #20]	; (8004634 <start_periodic_tcp_timer+0x18>)
 8004620:	1c20      	adds	r0, r4, #0
 8004622:	f7ff fd75 	bl	8004110 <etimer_expired>
 8004626:	2800      	cmp	r0, #0
 8004628:	d002      	beq.n	8004630 <start_periodic_tcp_timer+0x14>
    etimer_restart(&periodic);
 800462a:	1c20      	adds	r0, r4, #0
 800462c:	f7ff fe16 	bl	800425c <etimer_restart>
  }
}
 8004630:	bd10      	pop	{r4, pc}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	200011c0 	.word	0x200011c0

08004638 <process_thread_tcpip_process>:
    process_post_synch(ts->p, tcpip_event, ts->state);
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(tcpip_process, ev, data)
{
 8004638:	b570      	push	{r4, r5, r6, lr}
  PROCESS_BEGIN();
 800463a:	8803      	ldrh	r3, [r0, #0]
    process_post_synch(ts->p, tcpip_event, ts->state);
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(tcpip_process, ev, data)
{
 800463c:	1c06      	adds	r6, r0, #0
 800463e:	1c15      	adds	r5, r2, #0
  PROCESS_BEGIN();
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <process_thread_tcpip_process+0x16>
 8004644:	4a5d      	ldr	r2, [pc, #372]	; (80047bc <process_thread_tcpip_process+0x184>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d000      	beq.n	800464c <process_thread_tcpip_process+0x14>
 800464a:	e0b2      	b.n	80047b2 <process_thread_tcpip_process+0x17a>
 800464c:	e01d      	b.n	800468a <process_thread_tcpip_process+0x52>
 800464e:	2300      	movs	r3, #0
  
#if UIP_TCP
 {
   static unsigned char i;
   
   for(i = 0; i < UIP_LISTENPORTS; ++i) {
 8004650:	e004      	b.n	800465c <process_thread_tcpip_process+0x24>
     s.listenports[i].port = 0;
 8004652:	00d9      	lsls	r1, r3, #3
 8004654:	2000      	movs	r0, #0
 8004656:	3301      	adds	r3, #1
 8004658:	5288      	strh	r0, [r1, r2]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <process_thread_tcpip_process+0x188>)
  
#if UIP_TCP
 {
   static unsigned char i;
   
   for(i = 0; i < UIP_LISTENPORTS; ++i) {
 800465e:	2b13      	cmp	r3, #19
 8004660:	d9f7      	bls.n	8004652 <process_thread_tcpip_process+0x1a>
 8004662:	4958      	ldr	r1, [pc, #352]	; (80047c4 <process_thread_tcpip_process+0x18c>)
     s.listenports[i].port = 0;
   }
   s.p = PROCESS_CURRENT();
 8004664:	32a0      	adds	r2, #160	; 0xa0
  
#if UIP_TCP
 {
   static unsigned char i;
   
   for(i = 0; i < UIP_LISTENPORTS; ++i) {
 8004666:	700b      	strb	r3, [r1, #0]
     s.listenports[i].port = 0;
   }
   s.p = PROCESS_CURRENT();
 8004668:	4b57      	ldr	r3, [pc, #348]	; (80047c8 <process_thread_tcpip_process+0x190>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6013      	str	r3, [r2, #0]
 }
#endif

  tcpip_event = process_alloc_event();
 800466e:	f7ff fc4d 	bl	8003f0c <process_alloc_event>
 8004672:	4b56      	ldr	r3, [pc, #344]	; (80047cc <process_thread_tcpip_process+0x194>)
#if UIP_CONF_ICMP6
  tcpip_icmp6_event = process_alloc_event();
#endif /* UIP_CONF_ICMP6 */
  etimer_set(&periodic, CLOCK_SECOND / 2);
 8004674:	2110      	movs	r1, #16
   }
   s.p = PROCESS_CURRENT();
 }
#endif

  tcpip_event = process_alloc_event();
 8004676:	7018      	strb	r0, [r3, #0]
#if UIP_CONF_ICMP6
  tcpip_icmp6_event = process_alloc_event();
#endif /* UIP_CONF_ICMP6 */
  etimer_set(&periodic, CLOCK_SECOND / 2);
 8004678:	4855      	ldr	r0, [pc, #340]	; (80047d0 <process_thread_tcpip_process+0x198>)
 800467a:	f7ff fdff 	bl	800427c <etimer_set>

  uip_init();
 800467e:	f7fe fbe1 	bl	8002e44 <uip_init>
#if UIP_CONF_IPV6 && UIP_CONF_IPV6_RPL
  rpl_init();
#endif /* UIP_CONF_IPV6_RPL */

  while(1) {
    PROCESS_YIELD();
 8004682:	4b4e      	ldr	r3, [pc, #312]	; (80047bc <process_thread_tcpip_process+0x184>)
 8004684:	2001      	movs	r0, #1
 8004686:	8033      	strh	r3, [r6, #0]
 8004688:	e096      	b.n	80047b8 <process_thread_tcpip_process+0x180>
  static unsigned char i;
  register struct listenport *l;
#endif /*UIP_TCP*/
  struct process *p;

  switch(ev) {
 800468a:	2902      	cmp	r1, #2
 800468c:	d077      	beq.n	800477e <process_thread_tcpip_process+0x146>
 800468e:	2902      	cmp	r1, #2
 8004690:	d804      	bhi.n	800469c <process_thread_tcpip_process+0x64>
 8004692:	2900      	cmp	r1, #0
 8004694:	d05d      	beq.n	8004752 <process_thread_tcpip_process+0x11a>
 8004696:	2901      	cmp	r1, #1
 8004698:	d1f3      	bne.n	8004682 <process_thread_tcpip_process+0x4a>
 800469a:	e06a      	b.n	8004772 <process_thread_tcpip_process+0x13a>
 800469c:	2987      	cmp	r1, #135	; 0x87
 800469e:	d002      	beq.n	80046a6 <process_thread_tcpip_process+0x6e>
 80046a0:	2988      	cmp	r1, #136	; 0x88
 80046a2:	d1ee      	bne.n	8004682 <process_thread_tcpip_process+0x4a>
 80046a4:	e02a      	b.n	80046fc <process_thread_tcpip_process+0xc4>
         connections. */

      p = (struct process *)data;
#if UIP_TCP
      l = s.listenports;
      for(i = 0; i < UIP_LISTENPORTS; ++i) {
 80046a6:	4b4b      	ldr	r3, [pc, #300]	; (80047d4 <process_thread_tcpip_process+0x19c>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	4c44      	ldr	r4, [pc, #272]	; (80047c0 <process_thread_tcpip_process+0x188>)
 80046ae:	e00d      	b.n	80046cc <process_thread_tcpip_process+0x94>
        if(l->p == p) {
 80046b0:	6863      	ldr	r3, [r4, #4]
 80046b2:	42ab      	cmp	r3, r5
 80046b4:	d105      	bne.n	80046c2 <process_thread_tcpip_process+0x8a>
          uip_unlisten(l->port);
 80046b6:	8820      	ldrh	r0, [r4, #0]
 80046b8:	f7fe fbf0 	bl	8002e9c <uip_unlisten>
          l->port = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	8023      	strh	r3, [r4, #0]
          l->p = PROCESS_NONE;
 80046c0:	6063      	str	r3, [r4, #4]
         connections. */

      p = (struct process *)data;
#if UIP_TCP
      l = s.listenports;
      for(i = 0; i < UIP_LISTENPORTS; ++i) {
 80046c2:	4b44      	ldr	r3, [pc, #272]	; (80047d4 <process_thread_tcpip_process+0x19c>)
        if(l->p == p) {
          uip_unlisten(l->port);
          l->port = 0;
          l->p = PROCESS_NONE;
        }
        ++l;
 80046c4:	3408      	adds	r4, #8
         connections. */

      p = (struct process *)data;
#if UIP_TCP
      l = s.listenports;
      for(i = 0; i < UIP_LISTENPORTS; ++i) {
 80046c6:	781a      	ldrb	r2, [r3, #0]
 80046c8:	3201      	adds	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	4b41      	ldr	r3, [pc, #260]	; (80047d4 <process_thread_tcpip_process+0x19c>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b13      	cmp	r3, #19
 80046d2:	d9ed      	bls.n	80046b0 <process_thread_tcpip_process+0x78>
	 
      {
        struct uip_conn *cptr;
	    
        for(cptr = &uip_conns[0]; cptr < &uip_conns[UIP_CONNS]; ++cptr) {
          if(cptr->appstate.p == p) {
 80046d4:	4b40      	ldr	r3, [pc, #256]	; (80047d8 <process_thread_tcpip_process+0x1a0>)
 80046d6:	69da      	ldr	r2, [r3, #28]
 80046d8:	42aa      	cmp	r2, r5
 80046da:	d102      	bne.n	80046e2 <process_thread_tcpip_process+0xaa>
            cptr->appstate.p = PROCESS_NONE;
 80046dc:	2200      	movs	r2, #0
 80046de:	61da      	str	r2, [r3, #28]
            cptr->tcpstateflags = UIP_CLOSED;
 80046e0:	765a      	strb	r2, [r3, #25]
  if(ts->p != NULL) {
    process_post_synch(ts->p, tcpip_event, ts->state);
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(tcpip_process, ev, data)
 80046e2:	4a3e      	ldr	r2, [pc, #248]	; (80047dc <process_thread_tcpip_process+0x1a4>)
 80046e4:	1c13      	adds	r3, r2, #0
 80046e6:	3bc8      	subs	r3, #200	; 0xc8
 80046e8:	e005      	b.n	80046f6 <process_thread_tcpip_process+0xbe>
      {
        struct uip_udp_conn *cptr;

        for(cptr = &uip_udp_conns[0];
            cptr < &uip_udp_conns[UIP_UDP_CONNS]; ++cptr) {
          if(cptr->appstate.p == p) {
 80046ea:	68d9      	ldr	r1, [r3, #12]
 80046ec:	42a9      	cmp	r1, r5
 80046ee:	d101      	bne.n	80046f4 <process_thread_tcpip_process+0xbc>
            cptr->lport = 0;
 80046f0:	2100      	movs	r1, #0
 80046f2:	8099      	strh	r1, [r3, #4]
#if UIP_UDP
      {
        struct uip_udp_conn *cptr;

        for(cptr = &uip_udp_conns[0];
            cptr < &uip_udp_conns[UIP_UDP_CONNS]; ++cptr) {
 80046f4:	3314      	adds	r3, #20
#endif /* UIP_TCP */
#if UIP_UDP
      {
        struct uip_udp_conn *cptr;

        for(cptr = &uip_udp_conns[0];
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d1f7      	bne.n	80046ea <process_thread_tcpip_process+0xb2>
 80046fa:	e7c2      	b.n	8004682 <process_thread_tcpip_process+0x4a>
    case PROCESS_EVENT_TIMER:
      /* We get this event if one of our timers have expired. */
      {
        /* Check the clock so see if we should call the periodic uIP
           processing. */
        if(data == &periodic &&
 80046fc:	4b34      	ldr	r3, [pc, #208]	; (80047d0 <process_thread_tcpip_process+0x198>)
 80046fe:	429d      	cmp	r5, r3
 8004700:	d1bf      	bne.n	8004682 <process_thread_tcpip_process+0x4a>
           etimer_expired(&periodic)) {
 8004702:	1c28      	adds	r0, r5, #0
 8004704:	f7ff fd04 	bl	8004110 <etimer_expired>
    case PROCESS_EVENT_TIMER:
      /* We get this event if one of our timers have expired. */
      {
        /* Check the clock so see if we should call the periodic uIP
           processing. */
        if(data == &periodic &&
 8004708:	2800      	cmp	r0, #0
 800470a:	d0ba      	beq.n	8004682 <process_thread_tcpip_process+0x4a>
           etimer_expired(&periodic)) {
#if UIP_TCP
          for(i = 0; i < UIP_CONNS; ++i) {
 800470c:	2200      	movs	r2, #0
 800470e:	4b31      	ldr	r3, [pc, #196]	; (80047d4 <process_thread_tcpip_process+0x19c>)
 8004710:	e019      	b.n	8004746 <process_thread_tcpip_process+0x10e>
            if(uip_conn_active(i)) {
 8004712:	4c31      	ldr	r4, [pc, #196]	; (80047d8 <process_thread_tcpip_process+0x1a0>)
 8004714:	7e63      	ldrb	r3, [r4, #25]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d012      	beq.n	8004740 <process_thread_tcpip_process+0x108>
              /* Only restart the timer if there are active
                 connections. */
              etimer_restart(&periodic);
 800471a:	482d      	ldr	r0, [pc, #180]	; (80047d0 <process_thread_tcpip_process+0x198>)
 800471c:	f7ff fd9e 	bl	800425c <etimer_restart>
              uip_periodic(i);
 8004720:	782b      	ldrb	r3, [r5, #0]
 8004722:	2002      	movs	r0, #2
 8004724:	00da      	lsls	r2, r3, #3
 8004726:	18d3      	adds	r3, r2, r3
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4a2d      	ldr	r2, [pc, #180]	; (80047e0 <process_thread_tcpip_process+0x1a8>)
 800472c:	18e4      	adds	r4, r4, r3
 800472e:	6014      	str	r4, [r2, #0]
 8004730:	f7fe fc7e 	bl	8003030 <uip_process>
#if UIP_CONF_IPV6
              tcpip_ipv6_output();
#else
              if(uip_len > 0) {
 8004734:	4b2b      	ldr	r3, [pc, #172]	; (80047e4 <process_thread_tcpip_process+0x1ac>)
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <process_thread_tcpip_process+0x108>
		PRINTF("tcpip_output from periodic len %d\n", uip_len);
                tcpip_output();
 800473c:	f7ff ff5c 	bl	80045f8 <tcpip_output>
        /* Check the clock so see if we should call the periodic uIP
           processing. */
        if(data == &periodic &&
           etimer_expired(&periodic)) {
#if UIP_TCP
          for(i = 0; i < UIP_CONNS; ++i) {
 8004740:	4b24      	ldr	r3, [pc, #144]	; (80047d4 <process_thread_tcpip_process+0x19c>)
 8004742:	781a      	ldrb	r2, [r3, #0]
 8004744:	3201      	adds	r2, #1
 8004746:	4d23      	ldr	r5, [pc, #140]	; (80047d4 <process_thread_tcpip_process+0x19c>)
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	782b      	ldrb	r3, [r5, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0e0      	beq.n	8004712 <process_thread_tcpip_process+0xda>
 8004750:	e797      	b.n	8004682 <process_thread_tcpip_process+0x4a>
      }
      break;
	 
#if UIP_TCP
    case TCP_POLL:
      if(data != NULL) {
 8004752:	2d00      	cmp	r5, #0
 8004754:	d095      	beq.n	8004682 <process_thread_tcpip_process+0x4a>
        uip_poll_conn(data);
 8004756:	4b22      	ldr	r3, [pc, #136]	; (80047e0 <process_thread_tcpip_process+0x1a8>)
 8004758:	2003      	movs	r0, #3
 800475a:	601d      	str	r5, [r3, #0]
 800475c:	f7fe fc68 	bl	8003030 <uip_process>
#if UIP_CONF_IPV6
        tcpip_ipv6_output();
#else /* UIP_CONF_IPV6 */
        if(uip_len > 0) {
 8004760:	4b20      	ldr	r3, [pc, #128]	; (80047e4 <process_thread_tcpip_process+0x1ac>)
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <process_thread_tcpip_process+0x134>
	  PRINTF("tcpip_output from tcp poll len %d\n", uip_len);
          tcpip_output();
 8004768:	f7ff ff46 	bl	80045f8 <tcpip_output>
        }
#endif /* UIP_CONF_IPV6 */
        /* Start the periodic polling, if it isn't already active. */
        start_periodic_tcp_timer();
 800476c:	f7ff ff56 	bl	800461c <start_periodic_tcp_timer>
 8004770:	e787      	b.n	8004682 <process_thread_tcpip_process+0x4a>
      }
      break;
#endif /* UIP_TCP */
#if UIP_UDP
    case UDP_POLL:
      if(data != NULL) {
 8004772:	2d00      	cmp	r5, #0
 8004774:	d085      	beq.n	8004682 <process_thread_tcpip_process+0x4a>
        uip_udp_periodic_conn(data);
 8004776:	4b1c      	ldr	r3, [pc, #112]	; (80047e8 <process_thread_tcpip_process+0x1b0>)
 8004778:	2005      	movs	r0, #5
 800477a:	601d      	str	r5, [r3, #0]
 800477c:	e00f      	b.n	800479e <process_thread_tcpip_process+0x166>
      }
    }
    tcpip_is_forwarding = 0;
  }
#else /* UIP_CONF_IP_FORWARD */
  if(uip_len > 0) {
 800477e:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <process_thread_tcpip_process+0x1ac>)
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d100      	bne.n	8004788 <process_thread_tcpip_process+0x150>
 8004786:	e77c      	b.n	8004682 <process_thread_tcpip_process+0x4a>
     an incoming packet contains a SYN: since uIP does not inform the
     application if a SYN arrives, we have no other way of starting
     this timer.  This function is called for every incoming IP packet
     to check for such SYNs. */
#define TCP_SYN 0x02
  if(UIP_IP_BUF->proto == UIP_PROTO_TCP &&
 8004788:	4b18      	ldr	r3, [pc, #96]	; (80047ec <process_thread_tcpip_process+0x1b4>)
 800478a:	7a5a      	ldrb	r2, [r3, #9]
 800478c:	2a06      	cmp	r2, #6
 800478e:	d105      	bne.n	800479c <process_thread_tcpip_process+0x164>
     (UIP_TCP_BUF->flags & TCP_SYN) == TCP_SYN) {
 8004790:	3302      	adds	r3, #2
 8004792:	7fdb      	ldrb	r3, [r3, #31]
 8004794:	420b      	tst	r3, r1
 8004796:	d001      	beq.n	800479c <process_thread_tcpip_process+0x164>
    start_periodic_tcp_timer();
 8004798:	f7ff ff40 	bl	800461c <start_periodic_tcp_timer>
    tcpip_is_forwarding = 0;
  }
#else /* UIP_CONF_IP_FORWARD */
  if(uip_len > 0) {
    check_for_tcp_syn();
    uip_input();
 800479c:	2001      	movs	r0, #1
 800479e:	f7fe fc47 	bl	8003030 <uip_process>
    if(uip_len > 0) {
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <process_thread_tcpip_process+0x1ac>)
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d100      	bne.n	80047ac <process_thread_tcpip_process+0x174>
 80047aa:	e76a      	b.n	8004682 <process_thread_tcpip_process+0x4a>
#else /* UIP_CONF_TCP_SPLIT */
#if UIP_CONF_IPV6
      tcpip_ipv6_output();
#else
      PRINTF("tcpip packet_input output len %d\n", uip_len);
      tcpip_output();
 80047ac:	f7ff ff24 	bl	80045f8 <tcpip_output>
 80047b0:	e767      	b.n	8004682 <process_thread_tcpip_process+0x4a>
  while(1) {
    PROCESS_YIELD();
    eventhandler(ev, data);
  }
  
  PROCESS_END();
 80047b2:	2300      	movs	r3, #0
 80047b4:	8003      	strh	r3, [r0, #0]
 80047b6:	2003      	movs	r0, #3
}
 80047b8:	bd70      	pop	{r4, r5, r6, pc}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	0000033a 	.word	0x0000033a
 80047c0:	20001118 	.word	0x20001118
 80047c4:	200011bd 	.word	0x200011bd
 80047c8:	2000103c 	.word	0x2000103c
 80047cc:	200018b0 	.word	0x200018b0
 80047d0:	200011c0 	.word	0x200011c0
 80047d4:	200011bc 	.word	0x200011bc
 80047d8:	2000178c 	.word	0x2000178c
 80047dc:	200018b0 	.word	0x200018b0
 80047e0:	20001788 	.word	0x20001788
 80047e4:	20001570 	.word	0x20001570
 80047e8:	20001780 	.word	0x20001780
 80047ec:	2000158a 	.word	0x2000158a

080047f0 <tcpip_uipcall>:
}
#endif /* UIP_TCP */
/*---------------------------------------------------------------------------*/
void
tcpip_uipcall(void)
{
 80047f0:	b538      	push	{r3, r4, r5, lr}
  uip_udp_appstate_t *ts;
  
#if UIP_UDP
  if(uip_conn != NULL) {
 80047f2:	4b19      	ldr	r3, [pc, #100]	; (8004858 <tcpip_uipcall+0x68>)
 80047f4:	6819      	ldr	r1, [r3, #0]
 80047f6:	2900      	cmp	r1, #0
 80047f8:	d002      	beq.n	8004800 <tcpip_uipcall+0x10>
    ts = &uip_conn->appstate;
 80047fa:	1c0c      	adds	r4, r1, #0
 80047fc:	341c      	adds	r4, #28
 80047fe:	e002      	b.n	8004806 <tcpip_uipcall+0x16>
  } else {
    ts = &uip_udp_conn->appstate;
 8004800:	4b16      	ldr	r3, [pc, #88]	; (800485c <tcpip_uipcall+0x6c>)
 8004802:	681c      	ldr	r4, [r3, #0]
 8004804:	340c      	adds	r4, #12
   static unsigned char i;
   struct listenport *l;
   
   /* If this is a connection request for a listening port, we must
      mark the connection with the right process ID. */
   if(uip_connected()) {
 8004806:	4b16      	ldr	r3, [pc, #88]	; (8004860 <tcpip_uipcall+0x70>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	065a      	lsls	r2, r3, #25
 800480c:	d51b      	bpl.n	8004846 <tcpip_uipcall+0x56>
     l = &s.listenports[0];
     for(i = 0; i < UIP_LISTENPORTS; ++i) {
 800480e:	4b15      	ldr	r3, [pc, #84]	; (8004864 <tcpip_uipcall+0x74>)
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	2300      	movs	r3, #0
 8004816:	4a14      	ldr	r2, [pc, #80]	; (8004868 <tcpip_uipcall+0x78>)
 8004818:	e00f      	b.n	800483a <tcpip_uipcall+0x4a>
       if(l->port == uip_conn->lport &&
 800481a:	8815      	ldrh	r5, [r2, #0]
 800481c:	8888      	ldrh	r0, [r1, #4]
 800481e:	4285      	cmp	r5, r0
 8004820:	d108      	bne.n	8004834 <tcpip_uipcall+0x44>
	  l->p != PROCESS_NONE) {
 8004822:	6850      	ldr	r0, [r2, #4]
   /* If this is a connection request for a listening port, we must
      mark the connection with the right process ID. */
   if(uip_connected()) {
     l = &s.listenports[0];
     for(i = 0; i < UIP_LISTENPORTS; ++i) {
       if(l->port == uip_conn->lport &&
 8004824:	2800      	cmp	r0, #0
 8004826:	d005      	beq.n	8004834 <tcpip_uipcall+0x44>
 8004828:	4a0e      	ldr	r2, [pc, #56]	; (8004864 <tcpip_uipcall+0x74>)
 800482a:	7013      	strb	r3, [r2, #0]
	  l->p != PROCESS_NONE) {
	 ts->p = l->p;
	 ts->state = NULL;
 800482c:	2300      	movs	r3, #0
   if(uip_connected()) {
     l = &s.listenports[0];
     for(i = 0; i < UIP_LISTENPORTS; ++i) {
       if(l->port == uip_conn->lport &&
	  l->p != PROCESS_NONE) {
	 ts->p = l->p;
 800482e:	6020      	str	r0, [r4, #0]
	 ts->state = NULL;
 8004830:	6063      	str	r3, [r4, #4]
	 break;
 8004832:	e006      	b.n	8004842 <tcpip_uipcall+0x52>
       }
       ++l;
 8004834:	3301      	adds	r3, #1
 8004836:	3208      	adds	r2, #8
 8004838:	b2db      	uxtb	r3, r3
   
   /* If this is a connection request for a listening port, we must
      mark the connection with the right process ID. */
   if(uip_connected()) {
     l = &s.listenports[0];
     for(i = 0; i < UIP_LISTENPORTS; ++i) {
 800483a:	2b13      	cmp	r3, #19
 800483c:	d9ed      	bls.n	800481a <tcpip_uipcall+0x2a>
 800483e:	4a09      	ldr	r2, [pc, #36]	; (8004864 <tcpip_uipcall+0x74>)
 8004840:	7013      	strb	r3, [r2, #0]
       }
       ++l;
     }
     
     /* Start the periodic polling, if it isn't already active. */
     start_periodic_tcp_timer();
 8004842:	f7ff feeb 	bl	800461c <start_periodic_tcp_timer>
   }
 }
#endif /* UIP_TCP */
  
  if(ts->p != NULL) {
 8004846:	6820      	ldr	r0, [r4, #0]
 8004848:	2800      	cmp	r0, #0
 800484a:	d004      	beq.n	8004856 <tcpip_uipcall+0x66>
    process_post_synch(ts->p, tcpip_event, ts->state);
 800484c:	4b07      	ldr	r3, [pc, #28]	; (800486c <tcpip_uipcall+0x7c>)
 800484e:	6862      	ldr	r2, [r4, #4]
 8004850:	7819      	ldrb	r1, [r3, #0]
 8004852:	f7ff fc15 	bl	8004080 <process_post_synch>
  }
}
 8004856:	bd38      	pop	{r3, r4, r5, pc}
 8004858:	20001788 	.word	0x20001788
 800485c:	20001780 	.word	0x20001780
 8004860:	2000177c 	.word	0x2000177c
 8004864:	200011d4 	.word	0x200011d4
 8004868:	20001118 	.word	0x20001118
 800486c:	200018b0 	.word	0x200018b0

08004870 <udp_new>:
  s->state = appstate;
}
/*---------------------------------------------------------------------------*/
struct uip_udp_conn *
udp_new(const uip_ipaddr_t *ripaddr, uint16_t port, void *appstate)
{
 8004870:	b510      	push	{r4, lr}
 8004872:	1c14      	adds	r4, r2, #0
  struct uip_udp_conn *c;
  uip_udp_appstate_t *s;
  
  c = uip_udp_new(ripaddr, port);
 8004874:	f7fe fb62 	bl	8002f3c <uip_udp_new>
  if(c == NULL) {
 8004878:	2800      	cmp	r0, #0
 800487a:	d003      	beq.n	8004884 <udp_new+0x14>
    return NULL;
  }

  s = &c->appstate;
  s->p = PROCESS_CURRENT();
 800487c:	4b02      	ldr	r3, [pc, #8]	; (8004888 <udp_new+0x18>)
  s->state = appstate;
 800487e:	6104      	str	r4, [r0, #16]
  if(c == NULL) {
    return NULL;
  }

  s = &c->appstate;
  s->p = PROCESS_CURRENT();
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60c3      	str	r3, [r0, #12]
  s->state = appstate;

  return c;
}
 8004884:	bd10      	pop	{r4, pc}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	2000103c 	.word	0x2000103c

0800488c <random_rand>:
  srand(seed);
}
/*---------------------------------------------------------------------------*/
unsigned short
random_rand(void)
{
 800488c:	b508      	push	{r3, lr}
/* In gcc int rand() uses RAND_MAX and long random() uses RANDOM_MAX=0x7FFFFFFF */
/* RAND_MAX varies depending on the architecture */

  return (unsigned short)rand();
 800488e:	f002 fadb 	bl	8006e48 <rand>
 8004892:	b280      	uxth	r0, r0
}
 8004894:	bd08      	pop	{r3, pc}
	...

08004898 <uip_udp_packet_send>:
#include <string.h>

/*---------------------------------------------------------------------------*/
void
uip_udp_packet_send(struct uip_udp_conn *c, const void *data, int len)
{
 8004898:	b508      	push	{r3, lr}
#if UIP_UDP
  if(data != NULL) {
 800489a:	2900      	cmp	r1, #0
 800489c:	d014      	beq.n	80048c8 <uip_udp_packet_send+0x30>
    uip_udp_conn = c;
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <uip_udp_packet_send+0x38>)
 80048a0:	6018      	str	r0, [r3, #0]
    uip_slen = len;
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <uip_udp_packet_send+0x3c>)
 80048a4:	801a      	strh	r2, [r3, #0]
    memcpy(&uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN], data,
 80048a6:	23eb      	movs	r3, #235	; 0xeb
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	429a      	cmp	r2, r3
 80048ac:	dd00      	ble.n	80048b0 <uip_udp_packet_send+0x18>
 80048ae:	1c1a      	adds	r2, r3, #0
 80048b0:	4809      	ldr	r0, [pc, #36]	; (80048d8 <uip_udp_packet_send+0x40>)
 80048b2:	f002 fa98 	bl	8006de6 <memcpy>
           len > UIP_BUFSIZE - UIP_LLH_LEN - UIP_IPUDPH_LEN?
           UIP_BUFSIZE - UIP_LLH_LEN - UIP_IPUDPH_LEN: len);
    uip_process(UIP_UDP_SEND_CONN);
 80048b6:	2004      	movs	r0, #4
 80048b8:	f7fe fbba 	bl	8003030 <uip_process>
#if UIP_CONF_IPV6
    tcpip_ipv6_output();
#else
    if(uip_len > 0) {
 80048bc:	4b07      	ldr	r3, [pc, #28]	; (80048dc <uip_udp_packet_send+0x44>)
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <uip_udp_packet_send+0x30>
      tcpip_output();
 80048c4:	f7ff fe98 	bl	80045f8 <tcpip_output>
    }
#endif
  }
  uip_slen = 0;
 80048c8:	4b02      	ldr	r3, [pc, #8]	; (80048d4 <uip_udp_packet_send+0x3c>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	801a      	strh	r2, [r3, #0]
#endif /* UIP_UDP */
}
 80048ce:	bd08      	pop	{r3, pc}
 80048d0:	20001780 	.word	0x20001780
 80048d4:	200017e4 	.word	0x200017e4
 80048d8:	200015a6 	.word	0x200015a6
 80048dc:	20001570 	.word	0x20001570

080048e0 <coap_log_2>:
/*- LOCAL HELP FUNCTIONS ------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
static
uint16_t
coap_log_2(uint16_t value)
{
 80048e0:	b500      	push	{lr}
 80048e2:	1c02      	adds	r2, r0, #0
 80048e4:	2300      	movs	r3, #0
  uint16_t result = 0;
  do {
    value = value >> 1;
    result++;
 80048e6:	1c58      	adds	r0, r3, #1
uint16_t
coap_log_2(uint16_t value)
{
  uint16_t result = 0;
  do {
    value = value >> 1;
 80048e8:	0852      	lsrs	r2, r2, #1
    result++;
 80048ea:	b280      	uxth	r0, r0
  } while (value);
 80048ec:	2a00      	cmp	r2, #0
 80048ee:	d001      	beq.n	80048f4 <coap_log_2+0x14>
 80048f0:	1c03      	adds	r3, r0, #0
 80048f2:	e7f8      	b.n	80048e6 <coap_log_2+0x6>

  return result ? result - 1 : result;
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d000      	beq.n	80048fa <coap_log_2+0x1a>
 80048f8:	1c18      	adds	r0, r3, #0
}
 80048fa:	bd00      	pop	{pc}

080048fc <coap_parse_int_option>:
/*-----------------------------------------------------------------------------------*/
static
uint32_t
coap_parse_int_option(uint8_t *bytes, size_t length)
{
 80048fc:	b510      	push	{r4, lr}
 80048fe:	1c03      	adds	r3, r0, #0
  return result ? result - 1 : result;
}
/*-----------------------------------------------------------------------------------*/
static
uint32_t
coap_parse_int_option(uint8_t *bytes, size_t length)
 8004900:	2200      	movs	r2, #0
 8004902:	2000      	movs	r0, #0
{
  uint32_t var = 0;
  int i = 0;
  while (i<length)
 8004904:	e003      	b.n	800490e <coap_parse_int_option+0x12>
  {
    var <<= 8;
    var |= bytes[i++];
 8004906:	5c9c      	ldrb	r4, [r3, r2]
{
  uint32_t var = 0;
  int i = 0;
  while (i<length)
  {
    var <<= 8;
 8004908:	0200      	lsls	r0, r0, #8
    var |= bytes[i++];
 800490a:	4320      	orrs	r0, r4
 800490c:	3201      	adds	r2, #1
uint32_t
coap_parse_int_option(uint8_t *bytes, size_t length)
{
  uint32_t var = 0;
  int i = 0;
  while (i<length)
 800490e:	428a      	cmp	r2, r1
 8004910:	d1f9      	bne.n	8004906 <coap_parse_int_option+0xa>
  {
    var <<= 8;
    var |= bytes[i++];
  }
  return var;
}
 8004912:	bd10      	pop	{r4, pc}

08004914 <coap_option_nibble>:
/*-----------------------------------------------------------------------------------*/
static
uint8_t
coap_option_nibble(unsigned int value)
{
 8004914:	b500      	push	{lr}
  if (value<13)
 8004916:	280c      	cmp	r0, #12
 8004918:	d801      	bhi.n	800491e <coap_option_nibble+0xa>
  {
    return value;
 800491a:	b2c0      	uxtb	r0, r0
 800491c:	e006      	b.n	800492c <coap_option_nibble+0x18>
  }
  else if (value<=0xFF+13)
 800491e:	2386      	movs	r3, #134	; 0x86
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	4298      	cmp	r0, r3
 8004924:	d901      	bls.n	800492a <coap_option_nibble+0x16>
 8004926:	200e      	movs	r0, #14
 8004928:	e000      	b.n	800492c <coap_option_nibble+0x18>
 800492a:	200d      	movs	r0, #13
  }
  else
  {
    return 14;
  }
}
 800492c:	bd00      	pop	{pc}
	...

08004930 <coap_get_mid>:
}
/*-----------------------------------------------------------------------------------*/
uint16_t
coap_get_mid()
{
  return ++current_mid;
 8004930:	4b02      	ldr	r3, [pc, #8]	; (800493c <coap_get_mid+0xc>)
 8004932:	8818      	ldrh	r0, [r3, #0]
 8004934:	3001      	adds	r0, #1
 8004936:	b280      	uxth	r0, r0
 8004938:	8018      	strh	r0, [r3, #0]
}
 800493a:	4770      	bx	lr
 800493c:	200011de 	.word	0x200011de

08004940 <coap_set_status_code>:
  return 0;
}
/*-----------------------------------------------------------------------------------*/
int
coap_set_status_code(void *packet, unsigned int code)
{
 8004940:	b500      	push	{lr}
  if (code <= 0xFF)
 8004942:	29ff      	cmp	r1, #255	; 0xff
 8004944:	d901      	bls.n	800494a <coap_set_status_code+0xa>
 8004946:	2000      	movs	r0, #0
 8004948:	e001      	b.n	800494e <coap_set_status_code+0xe>
  {
    ((coap_packet_t *)packet)->code = (uint8_t) code;
 800494a:	7181      	strb	r1, [r0, #6]
 800494c:	2001      	movs	r0, #1
  }
  else
  {
    return 0;
  }
}
 800494e:	bd00      	pop	{pc}

08004950 <coap_get_header_content_type>:
/*-----------------------------------------------------------------------------------*/
/*- HEADER OPTION GETTERS AND SETTERS -----------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
unsigned int
coap_get_header_content_type(void *packet)
{
 8004950:	b500      	push	{lr}
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (!IS_OPTION(coap_pkt, COAP_OPTION_CONTENT_TYPE)) return -1;
 8004952:	7ac3      	ldrb	r3, [r0, #11]
 8004954:	06da      	lsls	r2, r3, #27
 8004956:	d402      	bmi.n	800495e <coap_get_header_content_type+0xe>
 8004958:	2001      	movs	r0, #1
 800495a:	4240      	negs	r0, r0
 800495c:	e000      	b.n	8004960 <coap_get_header_content_type+0x10>

  return coap_pkt->content_type;
 800495e:	7bc0      	ldrb	r0, [r0, #15]
}
 8004960:	bd00      	pop	{pc}

08004962 <coap_set_header_content_type>:
coap_set_header_content_type(void *packet, unsigned int content_type)
{
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  coap_pkt->content_type = (coap_content_type_t) content_type;
  SET_OPTION(coap_pkt, COAP_OPTION_CONTENT_TYPE);
 8004962:	7ac2      	ldrb	r2, [r0, #11]
 8004964:	2310      	movs	r3, #16
 8004966:	4313      	orrs	r3, r2
int
coap_set_header_content_type(void *packet, unsigned int content_type)
{
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  coap_pkt->content_type = (coap_content_type_t) content_type;
 8004968:	73c1      	strb	r1, [r0, #15]
  SET_OPTION(coap_pkt, COAP_OPTION_CONTENT_TYPE);
 800496a:	72c3      	strb	r3, [r0, #11]
  return 1;
}
 800496c:	2001      	movs	r0, #1
 800496e:	4770      	bx	lr

08004970 <coap_get_header_accept>:
/*-----------------------------------------------------------------------------------*/
int
coap_get_header_accept(void *packet, const uint16_t **accept)
{
 8004970:	b500      	push	{lr}
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (!IS_OPTION(coap_pkt, COAP_OPTION_ACCEPT)) return 0;
 8004972:	7b03      	ldrb	r3, [r0, #12]
 8004974:	07da      	lsls	r2, r3, #31
 8004976:	d401      	bmi.n	800497c <coap_get_header_accept+0xc>
 8004978:	2000      	movs	r0, #0
 800497a:	e004      	b.n	8004986 <coap_get_header_accept+0x16>

  *accept = coap_pkt->accept;
 800497c:	1c03      	adds	r3, r0, #0
 800497e:	3358      	adds	r3, #88	; 0x58
 8004980:	600b      	str	r3, [r1, #0]
  return coap_pkt->accept_num;
 8004982:	3057      	adds	r0, #87	; 0x57
 8004984:	7800      	ldrb	r0, [r0, #0]
}
 8004986:	bd00      	pop	{pc}

08004988 <coap_get_header_max_age>:
  return coap_pkt->accept_num;
}
/*-----------------------------------------------------------------------------------*/
int
coap_get_header_max_age(void *packet, uint32_t *age)
{
 8004988:	b500      	push	{lr}
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (!IS_OPTION(coap_pkt, COAP_OPTION_MAX_AGE)) {
 800498a:	7ac3      	ldrb	r3, [r0, #11]
 800498c:	065a      	lsls	r2, r3, #25
 800498e:	d401      	bmi.n	8004994 <coap_get_header_max_age+0xc>
    *age = COAP_DEFAULT_MAX_AGE;
 8004990:	233c      	movs	r3, #60	; 0x3c
 8004992:	e000      	b.n	8004996 <coap_get_header_max_age+0xe>
  } else {
    *age = coap_pkt->max_age;
 8004994:	6903      	ldr	r3, [r0, #16]
  }
  return 1;
}
 8004996:	2001      	movs	r0, #1
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (!IS_OPTION(coap_pkt, COAP_OPTION_MAX_AGE)) {
    *age = COAP_DEFAULT_MAX_AGE;
  } else {
    *age = coap_pkt->max_age;
 8004998:	600b      	str	r3, [r1, #0]
  }
  return 1;
}
 800499a:	bd00      	pop	{pc}

0800499c <coap_set_header_max_age>:
coap_set_header_max_age(void *packet, uint32_t age)
{
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  coap_pkt->max_age = age;
  SET_OPTION(coap_pkt, COAP_OPTION_MAX_AGE);
 800499c:	7ac2      	ldrb	r2, [r0, #11]
 800499e:	2340      	movs	r3, #64	; 0x40
 80049a0:	4313      	orrs	r3, r2
int
coap_set_header_max_age(void *packet, uint32_t age)
{
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  coap_pkt->max_age = age;
 80049a2:	6101      	str	r1, [r0, #16]
  SET_OPTION(coap_pkt, COAP_OPTION_MAX_AGE);
 80049a4:	72c3      	strb	r3, [r0, #11]
  return 1;
}
 80049a6:	2001      	movs	r0, #1
 80049a8:	4770      	bx	lr

080049aa <coap_get_header_if_match>:
}
/*-----------------------------------------------------------------------------------*/
/*FIXME support multiple ETags */
int
coap_get_header_if_match(void *packet, const uint8_t **etag)
{
 80049aa:	b500      	push	{lr}
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (!IS_OPTION(coap_pkt, COAP_OPTION_IF_MATCH)) return 0;
 80049ac:	7a83      	ldrb	r3, [r0, #10]
 80049ae:	079a      	lsls	r2, r3, #30
 80049b0:	d401      	bmi.n	80049b6 <coap_get_header_if_match+0xc>
 80049b2:	2000      	movs	r0, #0
 80049b4:	e004      	b.n	80049c0 <coap_get_header_if_match+0x16>

  *etag = coap_pkt->if_match;
 80049b6:	1c03      	adds	r3, r0, #0
 80049b8:	335d      	adds	r3, #93	; 0x5d
 80049ba:	600b      	str	r3, [r1, #0]
  return coap_pkt->if_match_len;
 80049bc:	305c      	adds	r0, #92	; 0x5c
 80049be:	7800      	ldrb	r0, [r0, #0]
}
 80049c0:	bd00      	pop	{pc}

080049c2 <coap_get_header_if_none_match>:
  return coap_pkt->if_match_len;
}
/*-----------------------------------------------------------------------------------*/
int
coap_get_header_if_none_match(void *packet)
{
 80049c2:	7a80      	ldrb	r0, [r0, #10]
 80049c4:	0680      	lsls	r0, r0, #26
 80049c6:	0fc0      	lsrs	r0, r0, #31
  return IS_OPTION((coap_packet_t *)packet, COAP_OPTION_IF_NONE_MATCH) ? 1 : 0;
}
 80049c8:	4770      	bx	lr

080049ca <coap_get_header_uri_host>:
  return coap_pkt->proxy_uri_len;
}
/*-----------------------------------------------------------------------------------*/
int
coap_get_header_uri_host(void *packet, const char **host)
{
 80049ca:	b500      	push	{lr}
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (!IS_OPTION(coap_pkt, COAP_OPTION_URI_HOST)) return 0;
 80049cc:	7a83      	ldrb	r3, [r0, #10]
 80049ce:	071a      	lsls	r2, r3, #28
 80049d0:	d401      	bmi.n	80049d6 <coap_get_header_uri_host+0xc>
 80049d2:	2000      	movs	r0, #0
 80049d4:	e002      	b.n	80049dc <coap_get_header_uri_host+0x12>

  *host = coap_pkt->uri_host;
 80049d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  return coap_pkt->uri_host_len;
 80049d8:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (!IS_OPTION(coap_pkt, COAP_OPTION_URI_HOST)) return 0;

  *host = coap_pkt->uri_host;
 80049da:	600b      	str	r3, [r1, #0]
  return coap_pkt->uri_host_len;
}
 80049dc:	bd00      	pop	{pc}

080049de <coap_get_header_uri_path>:
  return coap_pkt->uri_host_len;
}
/*-----------------------------------------------------------------------------------*/
int
coap_get_header_uri_path(void *packet, const char **path)
{
 80049de:	b500      	push	{lr}
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (!IS_OPTION(coap_pkt, COAP_OPTION_URI_PATH)) return 0;
 80049e0:	7ac3      	ldrb	r3, [r0, #11]
 80049e2:	071a      	lsls	r2, r3, #28
 80049e4:	d401      	bmi.n	80049ea <coap_get_header_uri_path+0xc>
 80049e6:	2000      	movs	r0, #0
 80049e8:	e002      	b.n	80049f0 <coap_get_header_uri_path+0x12>

  *path = coap_pkt->uri_path;
 80049ea:	6c83      	ldr	r3, [r0, #72]	; 0x48
  return coap_pkt->uri_path_len;
 80049ec:	6c40      	ldr	r0, [r0, #68]	; 0x44
{
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (!IS_OPTION(coap_pkt, COAP_OPTION_URI_PATH)) return 0;

  *path = coap_pkt->uri_path;
 80049ee:	600b      	str	r3, [r1, #0]
  return coap_pkt->uri_path_len;
}
 80049f0:	bd00      	pop	{pc}

080049f2 <coap_get_header_uri_query>:
  return coap_pkt->uri_path_len;
}
/*-----------------------------------------------------------------------------------*/
int
coap_get_header_uri_query(void *packet, const char **query)
{
 80049f2:	b500      	push	{lr}
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (!IS_OPTION(coap_pkt, COAP_OPTION_URI_QUERY)) return 0;
 80049f4:	230b      	movs	r3, #11
 80049f6:	56c3      	ldrsb	r3, [r0, r3]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	db01      	blt.n	8004a00 <coap_get_header_uri_query+0xe>
 80049fc:	2000      	movs	r0, #0
 80049fe:	e005      	b.n	8004a0c <coap_get_header_uri_query+0x1a>

  *query = coap_pkt->uri_query;
 8004a00:	1c03      	adds	r3, r0, #0
 8004a02:	3088      	adds	r0, #136	; 0x88
 8004a04:	6802      	ldr	r2, [r0, #0]
 8004a06:	3308      	adds	r3, #8
  return coap_pkt->uri_query_len;
 8004a08:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
{
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (!IS_OPTION(coap_pkt, COAP_OPTION_URI_QUERY)) return 0;

  *query = coap_pkt->uri_query;
 8004a0a:	600a      	str	r2, [r1, #0]
  return coap_pkt->uri_query_len;
}
 8004a0c:	bd00      	pop	{pc}

08004a0e <coap_set_header_observe>:
int
coap_set_header_observe(void *packet, uint32_t observe)
{
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  coap_pkt->observe = 0x00FFFFFF & observe;
 8004a0e:	1c03      	adds	r3, r0, #0
 8004a10:	334c      	adds	r3, #76	; 0x4c
 8004a12:	8019      	strh	r1, [r3, #0]
  SET_OPTION(coap_pkt, COAP_OPTION_OBSERVE);
 8004a14:	7a82      	ldrb	r2, [r0, #10]
 8004a16:	2340      	movs	r3, #64	; 0x40
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	7283      	strb	r3, [r0, #10]
  return 1;
}
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	4770      	bx	lr

08004a20 <coap_get_header_block2>:
/*-----------------------------------------------------------------------------------*/
int
coap_get_header_block2(void *packet, uint32_t *num, uint8_t *more, uint16_t *size, uint32_t *offset)
{
 8004a20:	b530      	push	{r4, r5, lr}
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (!IS_OPTION(coap_pkt, COAP_OPTION_BLOCK2)) return 0;
 8004a22:	250c      	movs	r5, #12
 8004a24:	5745      	ldrsb	r5, [r0, r5]
  return 1;
}
/*-----------------------------------------------------------------------------------*/
int
coap_get_header_block2(void *packet, uint32_t *num, uint8_t *more, uint16_t *size, uint32_t *offset)
{
 8004a26:	9c03      	ldr	r4, [sp, #12]
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (!IS_OPTION(coap_pkt, COAP_OPTION_BLOCK2)) return 0;
 8004a28:	2d00      	cmp	r5, #0
 8004a2a:	db01      	blt.n	8004a30 <coap_get_header_block2+0x10>
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	e014      	b.n	8004a5a <coap_get_header_block2+0x3a>

  /* pointers may be NULL to get only specific block parameters */
  if (num!=NULL) *num = coap_pkt->block2_num;
 8004a30:	2900      	cmp	r1, #0
 8004a32:	d001      	beq.n	8004a38 <coap_get_header_block2+0x18>
 8004a34:	6e85      	ldr	r5, [r0, #104]	; 0x68
 8004a36:	600d      	str	r5, [r1, #0]
  if (more!=NULL) *more = coap_pkt->block2_more;
 8004a38:	2a00      	cmp	r2, #0
 8004a3a:	d003      	beq.n	8004a44 <coap_get_header_block2+0x24>
 8004a3c:	1c01      	adds	r1, r0, #0
 8004a3e:	316c      	adds	r1, #108	; 0x6c
 8004a40:	7809      	ldrb	r1, [r1, #0]
 8004a42:	7011      	strb	r1, [r2, #0]
  if (size!=NULL) *size = coap_pkt->block2_size;
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <coap_get_header_block2+0x30>
 8004a48:	1c02      	adds	r2, r0, #0
 8004a4a:	326e      	adds	r2, #110	; 0x6e
 8004a4c:	8812      	ldrh	r2, [r2, #0]
 8004a4e:	801a      	strh	r2, [r3, #0]
  if (offset!=NULL) *offset = coap_pkt->block2_offset;
 8004a50:	2c00      	cmp	r4, #0
 8004a52:	d001      	beq.n	8004a58 <coap_get_header_block2+0x38>
 8004a54:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004a56:	6023      	str	r3, [r4, #0]
 8004a58:	2001      	movs	r0, #1

  return 1;
}
 8004a5a:	bd30      	pop	{r4, r5, pc}

08004a5c <coap_set_header_block2>:

int
coap_set_header_block2(void *packet, uint32_t num, uint8_t more, uint16_t size)
{
 8004a5c:	b510      	push	{r4, lr}
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (size<16) return 0;
 8004a5e:	2b0f      	cmp	r3, #15
 8004a60:	d916      	bls.n	8004a90 <coap_set_header_block2+0x34>
  if (size>2048) return 0;
 8004a62:	2480      	movs	r4, #128	; 0x80
 8004a64:	0124      	lsls	r4, r4, #4
 8004a66:	42a3      	cmp	r3, r4
 8004a68:	d812      	bhi.n	8004a90 <coap_set_header_block2+0x34>
  if (num>0x0FFFFF) return 0;
 8004a6a:	4c0a      	ldr	r4, [pc, #40]	; (8004a94 <coap_set_header_block2+0x38>)
 8004a6c:	42a1      	cmp	r1, r4
 8004a6e:	d80f      	bhi.n	8004a90 <coap_set_header_block2+0x34>

  coap_pkt->block2_num = num;
 8004a70:	6681      	str	r1, [r0, #104]	; 0x68
  coap_pkt->block2_more = more ? 1 : 0;
 8004a72:	1e51      	subs	r1, r2, #1
 8004a74:	418a      	sbcs	r2, r1
 8004a76:	1c01      	adds	r1, r0, #0
 8004a78:	316c      	adds	r1, #108	; 0x6c
 8004a7a:	700a      	strb	r2, [r1, #0]
  coap_pkt->block2_size = size;
 8004a7c:	1c02      	adds	r2, r0, #0
 8004a7e:	326e      	adds	r2, #110	; 0x6e
 8004a80:	8013      	strh	r3, [r2, #0]

  SET_OPTION(coap_pkt, COAP_OPTION_BLOCK2);
 8004a82:	7b02      	ldrb	r2, [r0, #12]
 8004a84:	2380      	movs	r3, #128	; 0x80
 8004a86:	425b      	negs	r3, r3
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	7303      	strb	r3, [r0, #12]
 8004a8c:	2001      	movs	r0, #1
  return 1;
 8004a8e:	e000      	b.n	8004a92 <coap_set_header_block2+0x36>
 8004a90:	2000      	movs	r0, #0
}
 8004a92:	bd10      	pop	{r4, pc}
 8004a94:	000fffff 	.word	0x000fffff

08004a98 <coap_get_header_size>:
  return 1;
}
/*-----------------------------------------------------------------------------------*/
int
coap_get_header_size(void *packet, uint32_t *size)
{
 8004a98:	b500      	push	{lr}
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (!IS_OPTION(coap_pkt, COAP_OPTION_SIZE)) return 0;
 8004a9a:	7b43      	ldrb	r3, [r0, #13]
 8004a9c:	06da      	lsls	r2, r3, #27
 8004a9e:	d401      	bmi.n	8004aa4 <coap_get_header_size+0xc>
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	e003      	b.n	8004aac <coap_get_header_size+0x14>
  
  *size = coap_pkt->size;
 8004aa4:	3004      	adds	r0, #4
 8004aa6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	600b      	str	r3, [r1, #0]
  return 1;
}
 8004aac:	bd00      	pop	{pc}

08004aae <coap_set_header_size>:
int
coap_set_header_size(void *packet, uint32_t size)
{
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  coap_pkt->size = size;
 8004aae:	1d03      	adds	r3, r0, #4
 8004ab0:	67d9      	str	r1, [r3, #124]	; 0x7c
  SET_OPTION(coap_pkt, COAP_OPTION_SIZE);
 8004ab2:	7b42      	ldrb	r2, [r0, #13]
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	7343      	strb	r3, [r0, #13]
  return 1;
}
 8004aba:	2001      	movs	r0, #1
 8004abc:	4770      	bx	lr

08004abe <coap_get_payload>:
/*-----------------------------------------------------------------------------------*/
/*- PAYLOAD -------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
int
coap_get_payload(void *packet, const uint8_t **payload)
{
 8004abe:	b500      	push	{lr}
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (coap_pkt->payload) {
 8004ac0:	1c03      	adds	r3, r0, #0
 8004ac2:	3390      	adds	r3, #144	; 0x90
 8004ac4:	681b      	ldr	r3, [r3, #0]
    *payload = coap_pkt->payload;
 8004ac6:	600b      	str	r3, [r1, #0]
int
coap_get_payload(void *packet, const uint8_t **payload)
{
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (coap_pkt->payload) {
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <coap_get_payload+0x14>
    *payload = coap_pkt->payload;
    return coap_pkt->payload_len;
 8004acc:	308e      	adds	r0, #142	; 0x8e
 8004ace:	8800      	ldrh	r0, [r0, #0]
 8004ad0:	e000      	b.n	8004ad4 <coap_get_payload+0x16>
  } else {
    *payload = NULL;
 8004ad2:	2000      	movs	r0, #0
    return 0;
  }
}
 8004ad4:	bd00      	pop	{pc}

08004ad6 <coap_set_payload>:

int
coap_set_payload(void *packet, const void *payload, size_t length)
{
 8004ad6:	b500      	push	{lr}
 8004ad8:	1c03      	adds	r3, r0, #0
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  //PRINTF("setting payload (%u/%u)\n", length, REST_MAX_CHUNK_SIZE);

  coap_pkt->payload = (uint8_t *) payload;
 8004ada:	3090      	adds	r0, #144	; 0x90
 8004adc:	6001      	str	r1, [r0, #0]
  coap_pkt->payload_len = MIN(REST_MAX_CHUNK_SIZE, length);
 8004ade:	2a80      	cmp	r2, #128	; 0x80
 8004ae0:	d900      	bls.n	8004ae4 <coap_set_payload+0xe>
 8004ae2:	2280      	movs	r2, #128	; 0x80
 8004ae4:	b290      	uxth	r0, r2
 8004ae6:	338e      	adds	r3, #142	; 0x8e
 8004ae8:	8018      	strh	r0, [r3, #0]

  return coap_pkt->payload_len;
}
 8004aea:	bd00      	pop	{pc}

08004aec <coap_set_header_location_query>:
  return coap_pkt->location_query_len;
}

int
coap_set_header_location_query(void *packet, const char *query)
{
 8004aec:	b510      	push	{r4, lr}
 8004aee:	1c04      	adds	r4, r0, #0
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  while (query[0]=='?') ++query;
 8004af0:	e000      	b.n	8004af4 <coap_set_header_location_query+0x8>
 8004af2:	3101      	adds	r1, #1
 8004af4:	780b      	ldrb	r3, [r1, #0]
 8004af6:	2b3f      	cmp	r3, #63	; 0x3f
 8004af8:	d0fb      	beq.n	8004af2 <coap_set_header_location_query+0x6>

  coap_pkt->location_query = query;
 8004afa:	6421      	str	r1, [r4, #64]	; 0x40
  coap_pkt->location_query_len = strlen(query);
 8004afc:	1c08      	adds	r0, r1, #0
 8004afe:	f002 fbdd 	bl	80072bc <strlen>

  SET_OPTION(coap_pkt, COAP_OPTION_LOCATION_QUERY);
 8004b02:	7b22      	ldrb	r2, [r4, #12]
 8004b04:	2310      	movs	r3, #16
 8004b06:	4313      	orrs	r3, r2
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  while (query[0]=='?') ++query;

  coap_pkt->location_query = query;
  coap_pkt->location_query_len = strlen(query);
 8004b08:	63e0      	str	r0, [r4, #60]	; 0x3c

  SET_OPTION(coap_pkt, COAP_OPTION_LOCATION_QUERY);
 8004b0a:	7323      	strb	r3, [r4, #12]
  return coap_pkt->location_query_len;
}
 8004b0c:	bd10      	pop	{r4, pc}

08004b0e <coap_set_header_uri_path>:
  return coap_pkt->uri_path_len;
}

int
coap_set_header_uri_path(void *packet, const char *path)
{
 8004b0e:	b510      	push	{r4, lr}
 8004b10:	1c04      	adds	r4, r0, #0
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  while (path[0]=='/') ++path;
 8004b12:	e000      	b.n	8004b16 <coap_set_header_uri_path+0x8>
 8004b14:	3101      	adds	r1, #1
 8004b16:	780b      	ldrb	r3, [r1, #0]
 8004b18:	2b2f      	cmp	r3, #47	; 0x2f
 8004b1a:	d0fb      	beq.n	8004b14 <coap_set_header_uri_path+0x6>

  coap_pkt->uri_path = path;
 8004b1c:	64a1      	str	r1, [r4, #72]	; 0x48
  coap_pkt->uri_path_len = strlen(path);
 8004b1e:	1c08      	adds	r0, r1, #0
 8004b20:	f002 fbcc 	bl	80072bc <strlen>

  SET_OPTION(coap_pkt, COAP_OPTION_URI_PATH);
 8004b24:	7ae2      	ldrb	r2, [r4, #11]
 8004b26:	2308      	movs	r3, #8
 8004b28:	4313      	orrs	r3, r2
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  while (path[0]=='/') ++path;

  coap_pkt->uri_path = path;
  coap_pkt->uri_path_len = strlen(path);
 8004b2a:	6460      	str	r0, [r4, #68]	; 0x44

  SET_OPTION(coap_pkt, COAP_OPTION_URI_PATH);
 8004b2c:	72e3      	strb	r3, [r4, #11]
  return coap_pkt->uri_path_len;
}
 8004b2e:	bd10      	pop	{r4, pc}

08004b30 <coap_set_header_location_path>:
  return coap_pkt->location_path_len;
}

int
coap_set_header_location_path(void *packet, const char *path)
{
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	1c04      	adds	r4, r0, #0
 8004b34:	1c0d      	adds	r5, r1, #0
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  char *query;

  while (path[0]=='/') ++path;
 8004b36:	e000      	b.n	8004b3a <coap_set_header_location_path+0xa>
 8004b38:	3501      	adds	r5, #1
 8004b3a:	782b      	ldrb	r3, [r5, #0]
 8004b3c:	2b2f      	cmp	r3, #47	; 0x2f
 8004b3e:	d0fb      	beq.n	8004b38 <coap_set_header_location_path+0x8>

  if ((query = strchr(path, '?')))
 8004b40:	1c28      	adds	r0, r5, #0
 8004b42:	213f      	movs	r1, #63	; 0x3f
 8004b44:	f002 fba2 	bl	800728c <strchr>
 8004b48:	1c06      	adds	r6, r0, #0
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d006      	beq.n	8004b5c <coap_set_header_location_path+0x2c>
  {
    coap_set_header_location_query(packet, query+1);
 8004b4e:	1c41      	adds	r1, r0, #1
    coap_pkt->location_path_len = query - path;
 8004b50:	1b76      	subs	r6, r6, r5

  while (path[0]=='/') ++path;

  if ((query = strchr(path, '?')))
  {
    coap_set_header_location_query(packet, query+1);
 8004b52:	1c20      	adds	r0, r4, #0
 8004b54:	f7ff ffca 	bl	8004aec <coap_set_header_location_query>
    coap_pkt->location_path_len = query - path;
 8004b58:	6326      	str	r6, [r4, #48]	; 0x30
 8004b5a:	e003      	b.n	8004b64 <coap_set_header_location_path+0x34>
  }
  else
  {
    coap_pkt->location_path_len = strlen(path);
 8004b5c:	1c28      	adds	r0, r5, #0
 8004b5e:	f002 fbad 	bl	80072bc <strlen>
 8004b62:	6320      	str	r0, [r4, #48]	; 0x30
  }

  coap_pkt->location_path = path;

  SET_OPTION(coap_pkt, COAP_OPTION_LOCATION_PATH);
 8004b64:	7ae2      	ldrb	r2, [r4, #11]
 8004b66:	2301      	movs	r3, #1
 8004b68:	4313      	orrs	r3, r2
  else
  {
    coap_pkt->location_path_len = strlen(path);
  }

  coap_pkt->location_path = path;
 8004b6a:	6365      	str	r5, [r4, #52]	; 0x34

  SET_OPTION(coap_pkt, COAP_OPTION_LOCATION_PATH);
 8004b6c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004b6e:	72e3      	strb	r3, [r4, #11]
  return coap_pkt->location_path_len;
}
 8004b70:	bd70      	pop	{r4, r5, r6, pc}

08004b72 <coap_set_header_token>:
  return coap_pkt->token_len;
}

int
coap_set_header_token(void *packet, const uint8_t *token, size_t token_len)
{
 8004b72:	b510      	push	{r4, lr}
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  coap_pkt->token_len = MIN(COAP_TOKEN_LEN, token_len);
 8004b74:	2a08      	cmp	r2, #8
 8004b76:	d900      	bls.n	8004b7a <coap_set_header_token+0x8>
 8004b78:	2208      	movs	r2, #8
 8004b7a:	1c04      	adds	r4, r0, #0
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	344e      	adds	r4, #78	; 0x4e
 8004b80:	7022      	strb	r2, [r4, #0]
  memcpy(coap_pkt->token, token, coap_pkt->token_len);
 8004b82:	304f      	adds	r0, #79	; 0x4f
 8004b84:	f002 f92f 	bl	8006de6 <memcpy>
 8004b88:	7820      	ldrb	r0, [r4, #0]

  return coap_pkt->token_len;
}
 8004b8a:	bd10      	pop	{r4, pc}

08004b8c <coap_set_header_etag>:
  return coap_pkt->etag_len;
}

int
coap_set_header_etag(void *packet, const uint8_t *etag, size_t etag_len)
{
 8004b8c:	b510      	push	{r4, lr}
 8004b8e:	1c04      	adds	r4, r0, #0
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  coap_pkt->etag_len = MIN(COAP_ETAG_LEN, etag_len);
 8004b90:	2a08      	cmp	r2, #8
 8004b92:	d900      	bls.n	8004b96 <coap_set_header_etag+0xa>
 8004b94:	2208      	movs	r2, #8
 8004b96:	b2d2      	uxtb	r2, r2
  memcpy(coap_pkt->etag, etag, coap_pkt->etag_len);
 8004b98:	1c20      	adds	r0, r4, #0
int
coap_set_header_etag(void *packet, const uint8_t *etag, size_t etag_len)
{
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  coap_pkt->etag_len = MIN(COAP_ETAG_LEN, etag_len);
 8004b9a:	7722      	strb	r2, [r4, #28]
  memcpy(coap_pkt->etag, etag, coap_pkt->etag_len);
 8004b9c:	301d      	adds	r0, #29
 8004b9e:	f002 f922 	bl	8006de6 <memcpy>

  SET_OPTION(coap_pkt, COAP_OPTION_ETAG);
 8004ba2:	7aa2      	ldrb	r2, [r4, #10]
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	7f20      	ldrb	r0, [r4, #28]
 8004baa:	72a3      	strb	r3, [r4, #10]
  return coap_pkt->etag_len;
}
 8004bac:	bd10      	pop	{r4, pc}

08004bae <coap_get_variable>:
}
/*-----------------------------------------------------------------------------------*/
static
int
coap_get_variable(const char *buffer, size_t length, const char *name, const char **output)
{
 8004bae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bb0:	1c1f      	adds	r7, r3, #0
  const char *end = NULL;
  const char *value_end = NULL;
  size_t name_len = 0;

  /*initialize the output buffer first*/
  *output = 0;
 8004bb2:	2300      	movs	r3, #0
}
/*-----------------------------------------------------------------------------------*/
static
int
coap_get_variable(const char *buffer, size_t length, const char *name, const char **output)
{
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	1c06      	adds	r6, r0, #0
  const char *end = NULL;
  const char *value_end = NULL;
  size_t name_len = 0;

  /*initialize the output buffer first*/
  *output = 0;
 8004bb8:	603b      	str	r3, [r7, #0]

  name_len = strlen(name);
 8004bba:	1c10      	adds	r0, r2, #0
}
/*-----------------------------------------------------------------------------------*/
static
int
coap_get_variable(const char *buffer, size_t length, const char *name, const char **output)
{
 8004bbc:	1c0c      	adds	r4, r1, #0
 8004bbe:	9203      	str	r2, [sp, #12]
  size_t name_len = 0;

  /*initialize the output buffer first*/
  *output = 0;

  name_len = strlen(name);
 8004bc0:	f002 fb7c 	bl	80072bc <strlen>
  end = buffer + length;
 8004bc4:	1934      	adds	r4, r6, r4
 8004bc6:	9401      	str	r4, [sp, #4]
  size_t name_len = 0;

  /*initialize the output buffer first*/
  *output = 0;

  name_len = strlen(name);
 8004bc8:	9002      	str	r0, [sp, #8]
  end = buffer + length;
 8004bca:	1835      	adds	r5, r6, r0
 8004bcc:	1c34      	adds	r4, r6, #0

  for (start = buffer; start + name_len < end; ++start){
 8004bce:	e020      	b.n	8004c12 <coap_get_variable+0x64>
    if ((start == buffer || start[-1] == '&') && start[name_len] == '=' &&
 8004bd0:	42b4      	cmp	r4, r6
 8004bd2:	d003      	beq.n	8004bdc <coap_get_variable+0x2e>
 8004bd4:	1e63      	subs	r3, r4, #1
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b26      	cmp	r3, #38	; 0x26
 8004bda:	d118      	bne.n	8004c0e <coap_get_variable+0x60>
 8004bdc:	782b      	ldrb	r3, [r5, #0]
 8004bde:	2b3d      	cmp	r3, #61	; 0x3d
 8004be0:	d115      	bne.n	8004c0e <coap_get_variable+0x60>
        strncmp(name, start, name_len)==0) {
 8004be2:	9803      	ldr	r0, [sp, #12]
 8004be4:	1c21      	adds	r1, r4, #0
 8004be6:	9a02      	ldr	r2, [sp, #8]
 8004be8:	f002 fb70 	bl	80072cc <strncmp>

  name_len = strlen(name);
  end = buffer + length;

  for (start = buffer; start + name_len < end; ++start){
    if ((start == buffer || start[-1] == '&') && start[name_len] == '=' &&
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d10e      	bne.n	8004c0e <coap_get_variable+0x60>
        strncmp(name, start, name_len)==0) {

      /* Point start to variable value */
      start += name_len + 1;
 8004bf0:	9b02      	ldr	r3, [sp, #8]

      /* Point end to the end of the value */
      value_end = (const char *) memchr(start, '&', end - start);
 8004bf2:	2126      	movs	r1, #38	; 0x26
  for (start = buffer; start + name_len < end; ++start){
    if ((start == buffer || start[-1] == '&') && start[name_len] == '=' &&
        strncmp(name, start, name_len)==0) {

      /* Point start to variable value */
      start += name_len + 1;
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	18e4      	adds	r4, r4, r3

      /* Point end to the end of the value */
      value_end = (const char *) memchr(start, '&', end - start);
 8004bf8:	9b01      	ldr	r3, [sp, #4]
 8004bfa:	1c20      	adds	r0, r4, #0
 8004bfc:	1b1a      	subs	r2, r3, r4
 8004bfe:	f002 f8d7 	bl	8006db0 <memchr>
      if (value_end == NULL) {
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d100      	bne.n	8004c08 <coap_get_variable+0x5a>
 8004c06:	9801      	ldr	r0, [sp, #4]
        value_end = end;
      }

      *output = start;
 8004c08:	603c      	str	r4, [r7, #0]

      return (value_end - start);
 8004c0a:	1b00      	subs	r0, r0, r4
 8004c0c:	e005      	b.n	8004c1a <coap_get_variable+0x6c>
  *output = 0;

  name_len = strlen(name);
  end = buffer + length;

  for (start = buffer; start + name_len < end; ++start){
 8004c0e:	3401      	adds	r4, #1
 8004c10:	3501      	adds	r5, #1
 8004c12:	9b01      	ldr	r3, [sp, #4]
 8004c14:	429d      	cmp	r5, r3
 8004c16:	d3db      	bcc.n	8004bd0 <coap_get_variable+0x22>
 8004c18:	2000      	movs	r0, #0
      return (value_end - start);
    }
  }

  return 0;
}
 8004c1a:	b005      	add	sp, #20
 8004c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c1e <coap_get_post_variable>:
  return 0;
}

int
coap_get_post_variable(void *packet, const char *name, const char **output)
{
 8004c1e:	b510      	push	{r4, lr}
 8004c20:	1c13      	adds	r3, r2, #0
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (coap_pkt->payload_len) {
 8004c22:	1c02      	adds	r2, r0, #0
 8004c24:	328e      	adds	r2, #142	; 0x8e
  return 0;
}

int
coap_get_post_variable(void *packet, const char *name, const char **output)
{
 8004c26:	1c0c      	adds	r4, r1, #0
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (coap_pkt->payload_len) {
 8004c28:	8811      	ldrh	r1, [r2, #0]
 8004c2a:	2900      	cmp	r1, #0
 8004c2c:	d101      	bne.n	8004c32 <coap_get_post_variable+0x14>
 8004c2e:	2000      	movs	r0, #0
 8004c30:	e004      	b.n	8004c3c <coap_get_post_variable+0x1e>
    return coap_get_variable((const char *)coap_pkt->payload, coap_pkt->payload_len, name, output);
 8004c32:	3090      	adds	r0, #144	; 0x90
 8004c34:	6800      	ldr	r0, [r0, #0]
 8004c36:	1c22      	adds	r2, r4, #0
 8004c38:	f7ff ffb9 	bl	8004bae <coap_get_variable>
  }
  return 0;
}
 8004c3c:	bd10      	pop	{r4, pc}

08004c3e <coap_get_query_variable>:
/*-----------------------------------------------------------------------------------*/
/*- REST FRAMEWORK FUNCTIONS --------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
int
coap_get_query_variable(void *packet, const char *name, const char **output)
{
 8004c3e:	b510      	push	{r4, lr}
 8004c40:	1c13      	adds	r3, r2, #0
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (IS_OPTION(coap_pkt, COAP_OPTION_URI_QUERY)) {
 8004c42:	220b      	movs	r2, #11
 8004c44:	5682      	ldrsb	r2, [r0, r2]
/*-----------------------------------------------------------------------------------*/
/*- REST FRAMEWORK FUNCTIONS --------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
int
coap_get_query_variable(void *packet, const char *name, const char **output)
{
 8004c46:	1c0c      	adds	r4, r1, #0
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (IS_OPTION(coap_pkt, COAP_OPTION_URI_QUERY)) {
 8004c48:	2a00      	cmp	r2, #0
 8004c4a:	db01      	blt.n	8004c50 <coap_get_query_variable+0x12>
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	e007      	b.n	8004c60 <coap_get_query_variable+0x22>
    return coap_get_variable(coap_pkt->uri_query, coap_pkt->uri_query_len, name, output);
 8004c50:	1c02      	adds	r2, r0, #0
 8004c52:	3208      	adds	r2, #8
 8004c54:	3088      	adds	r0, #136	; 0x88
 8004c56:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 8004c58:	6800      	ldr	r0, [r0, #0]
 8004c5a:	1c22      	adds	r2, r4, #0
 8004c5c:	f7ff ffa7 	bl	8004bae <coap_get_variable>
  }
  return 0;
}
 8004c60:	bd10      	pop	{r4, pc}

08004c62 <coap_init_message>:
/*-----------------------------------------------------------------------------------*/
/*- MEASSAGE PROCESSING -------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
void
coap_init_message(void *packet, coap_message_type_t type, uint8_t code, uint16_t mid)
{
 8004c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c64:	1c04      	adds	r4, r0, #0
 8004c66:	1c0d      	adds	r5, r1, #0
 8004c68:	1c16      	adds	r6, r2, #0
 8004c6a:	1c1f      	adds	r7, r3, #0
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  /* Important thing */
  memset(coap_pkt, 0, sizeof(coap_packet_t));
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	2294      	movs	r2, #148	; 0x94
 8004c70:	f002 f8dd 	bl	8006e2e <memset>

  coap_pkt->type = type;
 8004c74:	7165      	strb	r5, [r4, #5]
  coap_pkt->code = code;
 8004c76:	71a6      	strb	r6, [r4, #6]
  coap_pkt->mid = mid;
 8004c78:	8127      	strh	r7, [r4, #8]
}
 8004c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c7c <coap_set_option_header>:
}
/*-----------------------------------------------------------------------------------*/
static
size_t
coap_set_option_header(unsigned int delta, size_t length, uint8_t *buffer)
{
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	1c0c      	adds	r4, r1, #0
 8004c82:	1c15      	adds	r5, r2, #0
 8004c84:	9100      	str	r1, [sp, #0]
 8004c86:	9001      	str	r0, [sp, #4]
  size_t written = 0;

  buffer[0] = coap_option_nibble(delta)<<4 | coap_option_nibble(length);
 8004c88:	f7ff fe44 	bl	8004914 <coap_option_nibble>
 8004c8c:	1c06      	adds	r6, r0, #0
 8004c8e:	1c20      	adds	r0, r4, #0
 8004c90:	f7ff fe40 	bl	8004914 <coap_option_nibble>
 8004c94:	0136      	lsls	r6, r6, #4
 8004c96:	4306      	orrs	r6, r0
 8004c98:	702e      	strb	r6, [r5, #0]
 8004c9a:	aa01      	add	r2, sp, #4
 8004c9c:	2400      	movs	r4, #0

  /* avoids code duplication without function overhead */
  unsigned int *x = &delta;
  do
  {
    if (*x>268)
 8004c9e:	2186      	movs	r1, #134	; 0x86
 8004ca0:	6813      	ldr	r3, [r2, #0]
 8004ca2:	0049      	lsls	r1, r1, #1
 8004ca4:	428b      	cmp	r3, r1
 8004ca6:	d905      	bls.n	8004cb4 <coap_set_option_header+0x38>
    {
      buffer[++written] = (*x-269)>>8;
 8004ca8:	480b      	ldr	r0, [pc, #44]	; (8004cd8 <coap_set_option_header+0x5c>)
 8004caa:	3401      	adds	r4, #1
 8004cac:	1819      	adds	r1, r3, r0
 8004cae:	0a09      	lsrs	r1, r1, #8
 8004cb0:	5529      	strb	r1, [r5, r4]
 8004cb2:	e001      	b.n	8004cb8 <coap_set_option_header+0x3c>
      buffer[++written] = (*x-269);
    }
    else if (*x>12)
 8004cb4:	2b0c      	cmp	r3, #12
 8004cb6:	d902      	bls.n	8004cbe <coap_set_option_header+0x42>
    {
      buffer[++written] = (*x-13);
 8004cb8:	3401      	adds	r4, #1
 8004cba:	3b0d      	subs	r3, #13
 8004cbc:	552b      	strb	r3, [r5, r4]
    }
  }
  while (x!=&length && (x=&length));
 8004cbe:	466b      	mov	r3, sp
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <coap_set_option_header+0x4c>
 8004cc4:	466a      	mov	r2, sp
 8004cc6:	e7ea      	b.n	8004c9e <coap_set_option_header+0x22>

  PRINTF("WRITTEN %u B opt header\n", written);
 8004cc8:	1c21      	adds	r1, r4, #0
 8004cca:	4804      	ldr	r0, [pc, #16]	; (8004cdc <coap_set_option_header+0x60>)
 8004ccc:	f001 fe4e 	bl	800696c <iprintf>

  return ++written;
}
 8004cd0:	b002      	add	sp, #8
      buffer[++written] = (*x-13);
    }
  }
  while (x!=&length && (x=&length));

  PRINTF("WRITTEN %u B opt header\n", written);
 8004cd2:	1c60      	adds	r0, r4, #1

  return ++written;
}
 8004cd4:	bd70      	pop	{r4, r5, r6, pc}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	fffffef3 	.word	0xfffffef3
 8004cdc:	0800af90 	.word	0x0800af90

08004ce0 <coap_serialize_int_option>:
/*-----------------------------------------------------------------------------------*/
static
size_t
coap_serialize_int_option(unsigned int number, unsigned int current_number, uint8_t *buffer, uint32_t value)
{
 8004ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ce2:	1c1d      	adds	r5, r3, #0
  return ++written;
}
/*-----------------------------------------------------------------------------------*/
static
size_t
coap_serialize_int_option(unsigned int number, unsigned int current_number, uint8_t *buffer, uint32_t value)
 8004ce4:	23ff      	movs	r3, #255	; 0xff
 8004ce6:	061b      	lsls	r3, r3, #24
 8004ce8:	402b      	ands	r3, r5
{
 8004cea:	1c17      	adds	r7, r2, #0
  return ++written;
}
/*-----------------------------------------------------------------------------------*/
static
size_t
coap_serialize_int_option(unsigned int number, unsigned int current_number, uint8_t *buffer, uint32_t value)
 8004cec:	1c1a      	adds	r2, r3, #0
 8004cee:	1e53      	subs	r3, r2, #1
 8004cf0:	419a      	sbcs	r2, r3
{
 8004cf2:	b085      	sub	sp, #20
  size_t i = 0;

  if (0xFF000000 & value) ++i;
  if (0xFFFF0000 & value) ++i;
 8004cf4:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <coap_serialize_int_option+0x88>)
  return ++written;
}
/*-----------------------------------------------------------------------------------*/
static
size_t
coap_serialize_int_option(unsigned int number, unsigned int current_number, uint8_t *buffer, uint32_t value)
 8004cf6:	9201      	str	r2, [sp, #4]
 8004cf8:	1c16      	adds	r6, r2, #0
{
  size_t i = 0;

  if (0xFF000000 & value) ++i;
  if (0xFFFF0000 & value) ++i;
 8004cfa:	1c2a      	adds	r2, r5, #0
}
/*-----------------------------------------------------------------------------------*/
static
size_t
coap_serialize_int_option(unsigned int number, unsigned int current_number, uint8_t *buffer, uint32_t value)
{
 8004cfc:	4684      	mov	ip, r0
  size_t i = 0;

  if (0xFF000000 & value) ++i;
  if (0xFFFF0000 & value) ++i;
 8004cfe:	401a      	ands	r2, r3
 8004d00:	9203      	str	r2, [sp, #12]
 8004d02:	d000      	beq.n	8004d06 <coap_serialize_int_option+0x26>
 8004d04:	3601      	adds	r6, #1
  if (0xFFFFFF00 & value) ++i;
 8004d06:	23ff      	movs	r3, #255	; 0xff
 8004d08:	1c2a      	adds	r2, r5, #0
 8004d0a:	439a      	bics	r2, r3
 8004d0c:	9202      	str	r2, [sp, #8]
 8004d0e:	d001      	beq.n	8004d14 <coap_serialize_int_option+0x34>
 8004d10:	3601      	adds	r6, #1
 8004d12:	e001      	b.n	8004d18 <coap_serialize_int_option+0x38>
  if (0xFFFFFFFF & value) ++i;
 8004d14:	2d00      	cmp	r5, #0
 8004d16:	d000      	beq.n	8004d1a <coap_serialize_int_option+0x3a>
 8004d18:	3601      	adds	r6, #1

  PRINTF("OPTION %u (delta %u, len %u)\n", number, number - current_number, i);
 8004d1a:	4663      	mov	r3, ip
 8004d1c:	1a5c      	subs	r4, r3, r1
 8004d1e:	1c22      	adds	r2, r4, #0
 8004d20:	4661      	mov	r1, ip
 8004d22:	1c33      	adds	r3, r6, #0
 8004d24:	4811      	ldr	r0, [pc, #68]	; (8004d6c <coap_serialize_int_option+0x8c>)
 8004d26:	f001 fe21 	bl	800696c <iprintf>

  i = coap_set_option_header(number - current_number, i, buffer);
 8004d2a:	1c3a      	adds	r2, r7, #0
 8004d2c:	1c20      	adds	r0, r4, #0
 8004d2e:	1c31      	adds	r1, r6, #0
 8004d30:	f7ff ffa4 	bl	8004c7c <coap_set_option_header>

  if (0xFF000000 & value) buffer[i++] = (uint8_t) (value>>24);
 8004d34:	9a01      	ldr	r2, [sp, #4]
 8004d36:	2a00      	cmp	r2, #0
 8004d38:	d002      	beq.n	8004d40 <coap_serialize_int_option+0x60>
 8004d3a:	0e2b      	lsrs	r3, r5, #24
 8004d3c:	543b      	strb	r3, [r7, r0]
 8004d3e:	3001      	adds	r0, #1
  if (0xFFFF0000 & value) buffer[i++] = (uint8_t) (value>>16);
 8004d40:	9b03      	ldr	r3, [sp, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <coap_serialize_int_option+0x6c>
 8004d46:	0c2b      	lsrs	r3, r5, #16
 8004d48:	543b      	strb	r3, [r7, r0]
 8004d4a:	3001      	adds	r0, #1
  if (0xFFFFFF00 & value) buffer[i++] = (uint8_t) (value>>8);
 8004d4c:	9a02      	ldr	r2, [sp, #8]
 8004d4e:	2a00      	cmp	r2, #0
 8004d50:	d003      	beq.n	8004d5a <coap_serialize_int_option+0x7a>
 8004d52:	0a2b      	lsrs	r3, r5, #8
 8004d54:	543b      	strb	r3, [r7, r0]
 8004d56:	3001      	adds	r0, #1
 8004d58:	e001      	b.n	8004d5e <coap_serialize_int_option+0x7e>
  if (0xFFFFFFFF & value) buffer[i++] = (uint8_t) (value);
 8004d5a:	2d00      	cmp	r5, #0
 8004d5c:	d001      	beq.n	8004d62 <coap_serialize_int_option+0x82>
 8004d5e:	543d      	strb	r5, [r7, r0]
 8004d60:	3001      	adds	r0, #1

  return i;
}
 8004d62:	b005      	add	sp, #20
 8004d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	ffff0000 	.word	0xffff0000
 8004d6c:	0800afa9 	.word	0x0800afa9

08004d70 <coap_serialize_array_option>:
/*-----------------------------------------------------------------------------------*/
static
size_t
coap_serialize_array_option(unsigned int number, unsigned int current_number, uint8_t *buffer, uint8_t *array, size_t length, char split_char)
{
 8004d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d72:	b089      	sub	sp, #36	; 0x24
 8004d74:	9305      	str	r3, [sp, #20]
 8004d76:	ab0e      	add	r3, sp, #56	; 0x38
 8004d78:	cb80      	ldmia	r3!, {r7}
 8004d7a:	9204      	str	r2, [sp, #16]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	1c06      	adds	r6, r0, #0
 8004d80:	9307      	str	r3, [sp, #28]
  size_t i = 0;

  if (split_char!='\0')
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d032      	beq.n	8004dec <coap_serialize_array_option+0x7c>
 8004d86:	9805      	ldr	r0, [sp, #20]
 8004d88:	2400      	movs	r4, #0
 8004d8a:	9003      	str	r0, [sp, #12]
 8004d8c:	2500      	movs	r5, #0
 8004d8e:	e02a      	b.n	8004de6 <coap_serialize_array_option+0x76>
    uint8_t *part_end = NULL;
    size_t temp_length;

    for (j = 0; j<=length; ++j)
    {
      if (array[j]==split_char || j==length)
 8004d90:	9a05      	ldr	r2, [sp, #20]
 8004d92:	9807      	ldr	r0, [sp, #28]
 8004d94:	1913      	adds	r3, r2, r4
 8004d96:	781a      	ldrb	r2, [r3, #0]
 8004d98:	4282      	cmp	r2, r0
 8004d9a:	d001      	beq.n	8004da0 <coap_serialize_array_option+0x30>
 8004d9c:	42bc      	cmp	r4, r7
 8004d9e:	d121      	bne.n	8004de4 <coap_serialize_array_option+0x74>
      {
        part_end = array + j;
        temp_length = part_end-part_start;
 8004da0:	9a03      	ldr	r2, [sp, #12]

        i += coap_set_option_header(number - current_number, temp_length, &buffer[i]);
 8004da2:	1a71      	subs	r1, r6, r1
    for (j = 0; j<=length; ++j)
    {
      if (array[j]==split_char || j==length)
      {
        part_end = array + j;
        temp_length = part_end-part_start;
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	9302      	str	r3, [sp, #8]

        i += coap_set_option_header(number - current_number, temp_length, &buffer[i]);
 8004da8:	9b04      	ldr	r3, [sp, #16]
 8004daa:	9106      	str	r1, [sp, #24]
 8004dac:	195a      	adds	r2, r3, r5
 8004dae:	1c08      	adds	r0, r1, #0
 8004db0:	9902      	ldr	r1, [sp, #8]
 8004db2:	f7ff ff63 	bl	8004c7c <coap_set_option_header>
        memcpy(&buffer[i], part_start, temp_length);
 8004db6:	9a04      	ldr	r2, [sp, #16]
      if (array[j]==split_char || j==length)
      {
        part_end = array + j;
        temp_length = part_end-part_start;

        i += coap_set_option_header(number - current_number, temp_length, &buffer[i]);
 8004db8:	1945      	adds	r5, r0, r5
        memcpy(&buffer[i], part_start, temp_length);
 8004dba:	1950      	adds	r0, r2, r5
 8004dbc:	9903      	ldr	r1, [sp, #12]
 8004dbe:	9a02      	ldr	r2, [sp, #8]
 8004dc0:	f002 f811 	bl	8006de6 <memcpy>
        i += temp_length;
 8004dc4:	9b02      	ldr	r3, [sp, #8]

        PRINTF("OPTION type %u, delta %u, len %u, part [%.*s]\n", number, number - current_number, i, temp_length, part_start);
 8004dc6:	9803      	ldr	r0, [sp, #12]
        part_end = array + j;
        temp_length = part_end-part_start;

        i += coap_set_option_header(number - current_number, temp_length, &buffer[i]);
        memcpy(&buffer[i], part_start, temp_length);
        i += temp_length;
 8004dc8:	18ed      	adds	r5, r5, r3

        PRINTF("OPTION type %u, delta %u, len %u, part [%.*s]\n", number, number - current_number, i, temp_length, part_start);
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	9001      	str	r0, [sp, #4]
 8004dce:	1c31      	adds	r1, r6, #0
 8004dd0:	9a06      	ldr	r2, [sp, #24]
 8004dd2:	4812      	ldr	r0, [pc, #72]	; (8004e1c <coap_serialize_array_option+0xac>)
 8004dd4:	1c2b      	adds	r3, r5, #0
 8004dd6:	f001 fdc9 	bl	800696c <iprintf>

        ++j; /* skip the splitter */
        current_number = number;
        part_start = array + j;
 8004dda:	9a05      	ldr	r2, [sp, #20]
        memcpy(&buffer[i], part_start, temp_length);
        i += temp_length;

        PRINTF("OPTION type %u, delta %u, len %u, part [%.*s]\n", number, number - current_number, i, temp_length, part_start);

        ++j; /* skip the splitter */
 8004ddc:	3401      	adds	r4, #1
        current_number = number;
        part_start = array + j;
 8004dde:	1912      	adds	r2, r2, r4
 8004de0:	9203      	str	r2, [sp, #12]
 8004de2:	1c31      	adds	r1, r6, #0
    int j;
    uint8_t *part_start = array;
    uint8_t *part_end = NULL;
    size_t temp_length;

    for (j = 0; j<=length; ++j)
 8004de4:	3401      	adds	r4, #1
 8004de6:	42bc      	cmp	r4, r7
 8004de8:	d9d2      	bls.n	8004d90 <coap_serialize_array_option+0x20>
 8004dea:	e013      	b.n	8004e14 <coap_serialize_array_option+0xa4>
      }
    } /* for */
  }
  else
  {
    i += coap_set_option_header(number - current_number, length, &buffer[i]);
 8004dec:	1a44      	subs	r4, r0, r1
 8004dee:	9a04      	ldr	r2, [sp, #16]
 8004df0:	1c39      	adds	r1, r7, #0
 8004df2:	1c20      	adds	r0, r4, #0
 8004df4:	f7ff ff42 	bl	8004c7c <coap_set_option_header>
    memcpy(&buffer[i], array, length);
 8004df8:	9b04      	ldr	r3, [sp, #16]
      }
    } /* for */
  }
  else
  {
    i += coap_set_option_header(number - current_number, length, &buffer[i]);
 8004dfa:	1c05      	adds	r5, r0, #0
    memcpy(&buffer[i], array, length);
 8004dfc:	9905      	ldr	r1, [sp, #20]
 8004dfe:	1818      	adds	r0, r3, r0
 8004e00:	1c3a      	adds	r2, r7, #0
 8004e02:	f001 fff0 	bl	8006de6 <memcpy>
    i += length;

    PRINTF("OPTION type %u, delta %u, len %u\n", number, number - current_number, length);
 8004e06:	4806      	ldr	r0, [pc, #24]	; (8004e20 <coap_serialize_array_option+0xb0>)
 8004e08:	1c31      	adds	r1, r6, #0
 8004e0a:	1c22      	adds	r2, r4, #0
 8004e0c:	1c3b      	adds	r3, r7, #0
  }
  else
  {
    i += coap_set_option_header(number - current_number, length, &buffer[i]);
    memcpy(&buffer[i], array, length);
    i += length;
 8004e0e:	19ed      	adds	r5, r5, r7

    PRINTF("OPTION type %u, delta %u, len %u\n", number, number - current_number, length);
 8004e10:	f001 fdac 	bl	800696c <iprintf>
  }

  return i;
}
 8004e14:	b009      	add	sp, #36	; 0x24
 8004e16:	1c28      	adds	r0, r5, #0
 8004e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	0800afc7 	.word	0x0800afc7
 8004e20:	0800aff6 	.word	0x0800aff6

08004e24 <coap_merge_multi_option>:
/*-----------------------------------------------------------------------------------*/
static
void
coap_merge_multi_option(char **dst, size_t *dst_len, uint8_t *option, size_t option_len, char separator)
{
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	1c1d      	adds	r5, r3, #0
 8004e28:	ab04      	add	r3, sp, #16
 8004e2a:	781e      	ldrb	r6, [r3, #0]
  /* Merge multiple options. */
  if (*dst_len > 0)
 8004e2c:	680b      	ldr	r3, [r1, #0]
}
/*-----------------------------------------------------------------------------------*/
static
void
coap_merge_multi_option(char **dst, size_t *dst_len, uint8_t *option, size_t option_len, char separator)
{
 8004e2e:	1c0c      	adds	r4, r1, #0
  /* Merge multiple options. */
  if (*dst_len > 0)
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00d      	beq.n	8004e50 <coap_merge_multi_option+0x2c>
  {
    /* dst already contains an option: concatenate */
    (*dst)[*dst_len] = separator;
 8004e34:	6801      	ldr	r1, [r0, #0]
 8004e36:	54ce      	strb	r6, [r1, r3]
    *dst_len += 1;
 8004e38:	6823      	ldr	r3, [r4, #0]

    /* memmove handles 2-byte option headers */
    memmove((*dst)+(*dst_len), option, option_len);
 8004e3a:	6800      	ldr	r0, [r0, #0]
  /* Merge multiple options. */
  if (*dst_len > 0)
  {
    /* dst already contains an option: concatenate */
    (*dst)[*dst_len] = separator;
    *dst_len += 1;
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	6023      	str	r3, [r4, #0]

    /* memmove handles 2-byte option headers */
    memmove((*dst)+(*dst_len), option, option_len);
 8004e40:	1818      	adds	r0, r3, r0
 8004e42:	1c11      	adds	r1, r2, #0
 8004e44:	1c2a      	adds	r2, r5, #0
 8004e46:	f001 ffd9 	bl	8006dfc <memmove>

    *dst_len += option_len;
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	195d      	adds	r5, r3, r5
 8004e4e:	e000      	b.n	8004e52 <coap_merge_multi_option+0x2e>
  }
  else
  {
    /* dst is empty: set to option */
    *dst = (char *) option;
 8004e50:	6002      	str	r2, [r0, #0]
    *dst_len = option_len;
 8004e52:	6025      	str	r5, [r4, #0]
  }
}
 8004e54:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e58 <coap_parse_message>:
  udp_conn->rport = 0;
}
/*-----------------------------------------------------------------------------------*/
coap_status_t
coap_parse_message(void *packet, uint8_t *data, uint16_t data_len)
{
 8004e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e5a:	b097      	sub	sp, #92	; 0x5c
 8004e5c:	1c0f      	adds	r7, r1, #0
 8004e5e:	1c05      	adds	r5, r0, #0
 8004e60:	9213      	str	r2, [sp, #76]	; 0x4c
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  /* Initialize packet */
  memset(coap_pkt, 0, sizeof(coap_packet_t));
 8004e62:	2100      	movs	r1, #0
 8004e64:	2294      	movs	r2, #148	; 0x94
 8004e66:	f001 ffe2 	bl	8006e2e <memset>

  /* pointer to packet bytes */
  coap_pkt->buffer = data;
 8004e6a:	602f      	str	r7, [r5, #0]

  /* parse header fields */
  coap_pkt->version = (COAP_HEADER_VERSION_MASK & coap_pkt->buffer[0])>>COAP_HEADER_VERSION_POSITION;
 8004e6c:	783b      	ldrb	r3, [r7, #0]
 8004e6e:	099b      	lsrs	r3, r3, #6
 8004e70:	712b      	strb	r3, [r5, #4]
  coap_pkt->type = (COAP_HEADER_TYPE_MASK & coap_pkt->buffer[0])>>COAP_HEADER_TYPE_POSITION;
 8004e72:	783a      	ldrb	r2, [r7, #0]
 8004e74:	0692      	lsls	r2, r2, #26
 8004e76:	0f92      	lsrs	r2, r2, #30
 8004e78:	716a      	strb	r2, [r5, #5]
  coap_pkt->token_len = MIN(COAP_TOKEN_LEN, (COAP_HEADER_TOKEN_LEN_MASK & coap_pkt->buffer[0])>>COAP_HEADER_TOKEN_LEN_POSITION);
 8004e7a:	7839      	ldrb	r1, [r7, #0]
 8004e7c:	220f      	movs	r2, #15
 8004e7e:	400a      	ands	r2, r1
 8004e80:	2a08      	cmp	r2, #8
 8004e82:	dd00      	ble.n	8004e86 <coap_parse_message+0x2e>
 8004e84:	2208      	movs	r2, #8
 8004e86:	1c2c      	adds	r4, r5, #0
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	344e      	adds	r4, #78	; 0x4e
 8004e8c:	7022      	strb	r2, [r4, #0]
  coap_pkt->code = coap_pkt->buffer[1];
 8004e8e:	7879      	ldrb	r1, [r7, #1]
 8004e90:	71a9      	strb	r1, [r5, #6]
  coap_pkt->mid = coap_pkt->buffer[2]<<8 | coap_pkt->buffer[3];
 8004e92:	78b9      	ldrb	r1, [r7, #2]
 8004e94:	78f8      	ldrb	r0, [r7, #3]
 8004e96:	0209      	lsls	r1, r1, #8
 8004e98:	4301      	orrs	r1, r0
 8004e9a:	8129      	strh	r1, [r5, #8]

  if (coap_pkt->version != 1)
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d004      	beq.n	8004eaa <coap_parse_message+0x52>
  {
    coap_error_message = "CoAP version must be 1";
 8004ea0:	4adf      	ldr	r2, [pc, #892]	; (8005220 <coap_parse_message+0x3c8>)
 8004ea2:	4be0      	ldr	r3, [pc, #896]	; (8005224 <coap_parse_message+0x3cc>)
 8004ea4:	2080      	movs	r0, #128	; 0x80
 8004ea6:	601a      	str	r2, [r3, #0]
    return BAD_REQUEST_4_00;
 8004ea8:	e20d      	b.n	80052c6 <coap_parse_message+0x46e>
  }

  uint8_t *current_option = data + COAP_HEADER_LEN;

  memcpy(coap_pkt->token, current_option, coap_pkt->token_len);
 8004eaa:	1c2e      	adds	r6, r5, #0
 8004eac:	364f      	adds	r6, #79	; 0x4f
  {
    coap_error_message = "CoAP version must be 1";
    return BAD_REQUEST_4_00;
  }

  uint8_t *current_option = data + COAP_HEADER_LEN;
 8004eae:	1d39      	adds	r1, r7, #4

  memcpy(coap_pkt->token, current_option, coap_pkt->token_len);
 8004eb0:	1c30      	adds	r0, r6, #0
  {
    coap_error_message = "CoAP version must be 1";
    return BAD_REQUEST_4_00;
  }

  uint8_t *current_option = data + COAP_HEADER_LEN;
 8004eb2:	9107      	str	r1, [sp, #28]

  memcpy(coap_pkt->token, current_option, coap_pkt->token_len);
 8004eb4:	f001 ff97 	bl	8006de6 <memcpy>
  PRINTF("Token (len %u) [0x%02X%02X%02X%02X%02X%02X%02X%02X]\n", coap_pkt->token_len,
 8004eb8:	1c28      	adds	r0, r5, #0
 8004eba:	3051      	adds	r0, #81	; 0x51
 8004ebc:	7800      	ldrb	r0, [r0, #0]
 8004ebe:	1c2b      	adds	r3, r5, #0
 8004ec0:	3350      	adds	r3, #80	; 0x50
 8004ec2:	7821      	ldrb	r1, [r4, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	7832      	ldrb	r2, [r6, #0]
 8004ec8:	9000      	str	r0, [sp, #0]
 8004eca:	1c28      	adds	r0, r5, #0
 8004ecc:	3052      	adds	r0, #82	; 0x52
 8004ece:	7800      	ldrb	r0, [r0, #0]
 8004ed0:	9001      	str	r0, [sp, #4]
 8004ed2:	1c28      	adds	r0, r5, #0
 8004ed4:	3053      	adds	r0, #83	; 0x53
 8004ed6:	7800      	ldrb	r0, [r0, #0]
 8004ed8:	9002      	str	r0, [sp, #8]
 8004eda:	1c28      	adds	r0, r5, #0
 8004edc:	3054      	adds	r0, #84	; 0x54
 8004ede:	7800      	ldrb	r0, [r0, #0]
 8004ee0:	9003      	str	r0, [sp, #12]
 8004ee2:	1c28      	adds	r0, r5, #0
 8004ee4:	3055      	adds	r0, #85	; 0x55
 8004ee6:	7800      	ldrb	r0, [r0, #0]
 8004ee8:	9004      	str	r0, [sp, #16]
 8004eea:	1c28      	adds	r0, r5, #0
 8004eec:	3056      	adds	r0, #86	; 0x56
 8004eee:	7800      	ldrb	r0, [r0, #0]
 8004ef0:	9005      	str	r0, [sp, #20]
 8004ef2:	48cd      	ldr	r0, [pc, #820]	; (8005228 <coap_parse_message+0x3d0>)
 8004ef4:	f001 fd3a 	bl	800696c <iprintf>
    coap_pkt->token[7]
  ); /*FIXME always prints 8 bytes */


  /* parse options */
  memset(coap_pkt->options, 0, sizeof(coap_pkt->options));
 8004ef8:	1c28      	adds	r0, r5, #0
 8004efa:	2100      	movs	r1, #0
 8004efc:	2205      	movs	r2, #5
 8004efe:	300a      	adds	r0, #10
 8004f00:	f001 ff95 	bl	8006e2e <memset>
  current_option += coap_pkt->token_len;
 8004f04:	7823      	ldrb	r3, [r4, #0]
 8004f06:	9a07      	ldr	r2, [sp, #28]
        coap_pkt->max_age = coap_parse_int_option(current_option, option_length);
        PRINTF("Max-Age [%lu]\n", coap_pkt->max_age);
        break;
      case COAP_OPTION_ETAG:
        coap_pkt->etag_len = MIN(COAP_ETAG_LEN, option_length);
        memcpy(coap_pkt->etag, current_option, coap_pkt->etag_len);
 8004f08:	1c2c      	adds	r4, r5, #0
  ); /*FIXME always prints 8 bytes */


  /* parse options */
  memset(coap_pkt->options, 0, sizeof(coap_pkt->options));
  current_option += coap_pkt->token_len;
 8004f0a:	18d3      	adds	r3, r2, r3
        }
        break;
      case COAP_OPTION_IF_MATCH:
        /*FIXME support multiple ETags */
        coap_pkt->if_match_len = MIN(COAP_ETAG_LEN, option_length);
        memcpy(coap_pkt->if_match, current_option, coap_pkt->if_match_len);
 8004f0c:	1c29      	adds	r1, r5, #0
  /* parse options */
  memset(coap_pkt->options, 0, sizeof(coap_pkt->options));
  current_option += coap_pkt->token_len;

  unsigned int option_number = 0;
  unsigned int option_delta = 0;
 8004f0e:	2200      	movs	r2, #0
        coap_pkt->max_age = coap_parse_int_option(current_option, option_length);
        PRINTF("Max-Age [%lu]\n", coap_pkt->max_age);
        break;
      case COAP_OPTION_ETAG:
        coap_pkt->etag_len = MIN(COAP_ETAG_LEN, option_length);
        memcpy(coap_pkt->etag, current_option, coap_pkt->etag_len);
 8004f10:	341d      	adds	r4, #29
        }
        break;
      case COAP_OPTION_IF_MATCH:
        /*FIXME support multiple ETags */
        coap_pkt->if_match_len = MIN(COAP_ETAG_LEN, option_length);
        memcpy(coap_pkt->if_match, current_option, coap_pkt->if_match_len);
 8004f12:	315d      	adds	r1, #93	; 0x5d
  /* parse options */
  memset(coap_pkt->options, 0, sizeof(coap_pkt->options));
  current_option += coap_pkt->token_len;

  unsigned int option_number = 0;
  unsigned int option_delta = 0;
 8004f14:	9215      	str	r2, [sp, #84]	; 0x54
  size_t option_length = 0;
 8004f16:	9214      	str	r2, [sp, #80]	; 0x50
        coap_pkt->uri_port = coap_parse_int_option(current_option, option_length);
        PRINTF("Uri-Port [%u]\n", coap_pkt->uri_port);
        break;
      case COAP_OPTION_URI_PATH:
        /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
        coap_merge_multi_option( (char **) &(coap_pkt->uri_path), &(coap_pkt->uri_path_len), current_option, option_length, '/');
 8004f18:	1c2a      	adds	r2, r5, #0
 8004f1a:	3248      	adds	r2, #72	; 0x48
        coap_pkt->max_age = coap_parse_int_option(current_option, option_length);
        PRINTF("Max-Age [%lu]\n", coap_pkt->max_age);
        break;
      case COAP_OPTION_ETAG:
        coap_pkt->etag_len = MIN(COAP_ETAG_LEN, option_length);
        memcpy(coap_pkt->etag, current_option, coap_pkt->etag_len);
 8004f1c:	9412      	str	r4, [sp, #72]	; 0x48
        }
        break;
      case COAP_OPTION_IF_MATCH:
        /*FIXME support multiple ETags */
        coap_pkt->if_match_len = MIN(COAP_ETAG_LEN, option_length);
        memcpy(coap_pkt->if_match, current_option, coap_pkt->if_match_len);
 8004f1e:	9111      	str	r1, [sp, #68]	; 0x44
        coap_pkt->uri_port = coap_parse_int_option(current_option, option_length);
        PRINTF("Uri-Port [%u]\n", coap_pkt->uri_port);
        break;
      case COAP_OPTION_URI_PATH:
        /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
        coap_merge_multi_option( (char **) &(coap_pkt->uri_path), &(coap_pkt->uri_path_len), current_option, option_length, '/');
 8004f20:	3427      	adds	r4, #39	; 0x27
        PRINTF("Uri-Path [%.*s]\n", coap_pkt->uri_path_len, coap_pkt->uri_path);
        break;
      case COAP_OPTION_URI_QUERY:
        /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
        coap_merge_multi_option( (char **) &(coap_pkt->uri_query), &(coap_pkt->uri_query_len), current_option, option_length, '&');
 8004f22:	312b      	adds	r1, #43	; 0x2b
        coap_pkt->uri_port = coap_parse_int_option(current_option, option_length);
        PRINTF("Uri-Port [%u]\n", coap_pkt->uri_port);
        break;
      case COAP_OPTION_URI_PATH:
        /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
        coap_merge_multi_option( (char **) &(coap_pkt->uri_path), &(coap_pkt->uri_path_len), current_option, option_length, '/');
 8004f24:	9210      	str	r2, [sp, #64]	; 0x40
 8004f26:	940f      	str	r4, [sp, #60]	; 0x3c
        PRINTF("Uri-Path [%.*s]\n", coap_pkt->uri_path_len, coap_pkt->uri_path);
        break;
      case COAP_OPTION_URI_QUERY:
        /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
        coap_merge_multi_option( (char **) &(coap_pkt->uri_query), &(coap_pkt->uri_query_len), current_option, option_length, '&');
 8004f28:	323c      	adds	r2, #60	; 0x3c
        PRINTF("Uri-Query [%.*s]\n", coap_pkt->uri_query_len, coap_pkt->uri_query);
        break;

      case COAP_OPTION_LOCATION_PATH:
        /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
        coap_merge_multi_option( (char **) &(coap_pkt->location_path), &(coap_pkt->location_path_len), current_option, option_length, '/');
 8004f2a:	3c10      	subs	r4, #16
        coap_merge_multi_option( (char **) &(coap_pkt->uri_path), &(coap_pkt->uri_path_len), current_option, option_length, '/');
        PRINTF("Uri-Path [%.*s]\n", coap_pkt->uri_path_len, coap_pkt->uri_path);
        break;
      case COAP_OPTION_URI_QUERY:
        /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
        coap_merge_multi_option( (char **) &(coap_pkt->uri_query), &(coap_pkt->uri_query_len), current_option, option_length, '&');
 8004f2c:	910e      	str	r1, [sp, #56]	; 0x38
        PRINTF("Uri-Query [%.*s]\n", coap_pkt->uri_query_len, coap_pkt->uri_query);
        break;

      case COAP_OPTION_LOCATION_PATH:
        /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
        coap_merge_multi_option( (char **) &(coap_pkt->location_path), &(coap_pkt->location_path_len), current_option, option_length, '/');
 8004f2e:	3958      	subs	r1, #88	; 0x58
        coap_merge_multi_option( (char **) &(coap_pkt->uri_path), &(coap_pkt->uri_path_len), current_option, option_length, '/');
        PRINTF("Uri-Path [%.*s]\n", coap_pkt->uri_path_len, coap_pkt->uri_path);
        break;
      case COAP_OPTION_URI_QUERY:
        /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
        coap_merge_multi_option( (char **) &(coap_pkt->uri_query), &(coap_pkt->uri_query_len), current_option, option_length, '&');
 8004f30:	920d      	str	r2, [sp, #52]	; 0x34
        PRINTF("Uri-Query [%.*s]\n", coap_pkt->uri_query_len, coap_pkt->uri_query);
        break;

      case COAP_OPTION_LOCATION_PATH:
        /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
        coap_merge_multi_option( (char **) &(coap_pkt->location_path), &(coap_pkt->location_path_len), current_option, option_length, '/');
 8004f32:	940c      	str	r4, [sp, #48]	; 0x30
 8004f34:	910b      	str	r1, [sp, #44]	; 0x2c
        PRINTF("Location-Path [%.*s]\n", coap_pkt->location_path_len, coap_pkt->location_path);
        break;
      case COAP_OPTION_LOCATION_QUERY:
        /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
        coap_merge_multi_option( (char **) &(coap_pkt->location_query), &(coap_pkt->location_query_len), current_option, option_length, '&');
 8004f36:	3a44      	subs	r2, #68	; 0x44
 8004f38:	3408      	adds	r4, #8
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	920a      	str	r2, [sp, #40]	; 0x28
 8004f3e:	9409      	str	r4, [sp, #36]	; 0x24
 8004f40:	9107      	str	r1, [sp, #28]

  unsigned int option_number = 0;
  unsigned int option_delta = 0;
  size_t option_length = 0;

  while (current_option < data+data_len)
 8004f42:	e1b7      	b.n	80052b4 <coap_parse_message+0x45c>
  {
    /* Payload marker 0xFF, currently only checking for 0xF* because rest is reserved */
    if ((current_option[0] & 0xF0)==0xF0)
 8004f44:	7819      	ldrb	r1, [r3, #0]
 8004f46:	20f0      	movs	r0, #240	; 0xf0
 8004f48:	4008      	ands	r0, r1
 8004f4a:	1c5e      	adds	r6, r3, #1
 8004f4c:	28f0      	cmp	r0, #240	; 0xf0
 8004f4e:	d112      	bne.n	8004f76 <coap_parse_message+0x11e>
    {
      coap_pkt->payload = ++current_option;
 8004f50:	1c2b      	adds	r3, r5, #0
 8004f52:	3390      	adds	r3, #144	; 0x90
 8004f54:	601e      	str	r6, [r3, #0]
      coap_pkt->payload_len = data_len - (coap_pkt->payload - data);
 8004f56:	1b96      	subs	r6, r2, r6
 8004f58:	b2b6      	uxth	r6, r6
 8004f5a:	3b02      	subs	r3, #2
 8004f5c:	801e      	strh	r6, [r3, #0]

      /* also for receiving, the Erbium upper bound is REST_MAX_CHUNK_SIZE */
      if (coap_pkt->payload_len > REST_MAX_CHUNK_SIZE)
 8004f5e:	2e80      	cmp	r6, #128	; 0x80
 8004f60:	d901      	bls.n	8004f66 <coap_parse_message+0x10e>
      {
        coap_pkt->payload_len = REST_MAX_CHUNK_SIZE;
 8004f62:	2280      	movs	r2, #128	; 0x80
 8004f64:	801a      	strh	r2, [r3, #0]
      }

      /* Null-terminate payload */
      coap_pkt->payload[coap_pkt->payload_len] = '\0';
 8004f66:	1c2b      	adds	r3, r5, #0
 8004f68:	338e      	adds	r3, #142	; 0x8e
 8004f6a:	3590      	adds	r5, #144	; 0x90
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	682a      	ldr	r2, [r5, #0]
 8004f70:	2100      	movs	r1, #0
 8004f72:	54d1      	strb	r1, [r2, r3]

      break;
 8004f74:	e1a3      	b.n	80052be <coap_parse_message+0x466>
    }

    option_delta = current_option[0]>>4;
 8004f76:	0909      	lsrs	r1, r1, #4
 8004f78:	9115      	str	r1, [sp, #84]	; 0x54
    option_length = current_option[0] & 0x0F;
 8004f7a:	781a      	ldrb	r2, [r3, #0]
 8004f7c:	230f      	movs	r3, #15
 8004f7e:	4013      	ands	r3, r2
 8004f80:	9314      	str	r3, [sp, #80]	; 0x50
    ++current_option;
 8004f82:	ab15      	add	r3, sp, #84	; 0x54

    /* avoids code duplication without function overhead */
    unsigned int *x = &option_delta;
    do
    {
      if (*x==13)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	2a0d      	cmp	r2, #13
 8004f88:	d104      	bne.n	8004f94 <coap_parse_message+0x13c>
      {
        *x += current_option[0];
 8004f8a:	7832      	ldrb	r2, [r6, #0]
        ++current_option;
 8004f8c:	3601      	adds	r6, #1
    unsigned int *x = &option_delta;
    do
    {
      if (*x==13)
      {
        *x += current_option[0];
 8004f8e:	320d      	adds	r2, #13
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e00c      	b.n	8004fae <coap_parse_message+0x156>
        ++current_option;
      }
      else if (*x==14)
 8004f94:	2a0e      	cmp	r2, #14
 8004f96:	d10a      	bne.n	8004fae <coap_parse_message+0x156>
      {
        *x += 255;
 8004f98:	32ff      	adds	r2, #255	; 0xff
 8004f9a:	601a      	str	r2, [r3, #0]
        *x += current_option[0]<<8;
 8004f9c:	7832      	ldrb	r2, [r6, #0]
 8004f9e:	0212      	lsls	r2, r2, #8
 8004fa0:	320e      	adds	r2, #14
 8004fa2:	32ff      	adds	r2, #255	; 0xff
 8004fa4:	601a      	str	r2, [r3, #0]
        ++current_option;
        *x += current_option[0];
 8004fa6:	7871      	ldrb	r1, [r6, #1]
        ++current_option;
 8004fa8:	3602      	adds	r6, #2
      else if (*x==14)
      {
        *x += 255;
        *x += current_option[0]<<8;
        ++current_option;
        *x += current_option[0];
 8004faa:	1852      	adds	r2, r2, r1
 8004fac:	601a      	str	r2, [r3, #0]
        ++current_option;
 8004fae:	aa14      	add	r2, sp, #80	; 0x50
      }
    }
    while (x!=&option_length && (x=&option_length));
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d001      	beq.n	8004fb8 <coap_parse_message+0x160>
 8004fb4:	1c13      	adds	r3, r2, #0
 8004fb6:	e7e5      	b.n	8004f84 <coap_parse_message+0x12c>

    option_number += option_delta;
 8004fb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004fba:	9b07      	ldr	r3, [sp, #28]

    PRINTF("OPTION %u (delta %u, len %u): ", option_number, option_delta, option_length);
 8004fbc:	489b      	ldr	r0, [pc, #620]	; (800522c <coap_parse_message+0x3d4>)
        ++current_option;
      }
    }
    while (x!=&option_length && (x=&option_length));

    option_number += option_delta;
 8004fbe:	189b      	adds	r3, r3, r2

    PRINTF("OPTION %u (delta %u, len %u): ", option_number, option_delta, option_length);
 8004fc0:	1c19      	adds	r1, r3, #0
        ++current_option;
      }
    }
    while (x!=&option_length && (x=&option_length));

    option_number += option_delta;
 8004fc2:	9307      	str	r3, [sp, #28]

    PRINTF("OPTION %u (delta %u, len %u): ", option_number, option_delta, option_length);
 8004fc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004fc6:	f001 fcd1 	bl	800696c <iprintf>

    SET_OPTION(coap_pkt, option_number);
 8004fca:	9c07      	ldr	r4, [sp, #28]
 8004fcc:	2107      	movs	r1, #7
 8004fce:	08e3      	lsrs	r3, r4, #3
 8004fd0:	4021      	ands	r1, r4
 8004fd2:	18eb      	adds	r3, r5, r3
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	408a      	lsls	r2, r1
 8004fda:	1c11      	adds	r1, r2, #0
 8004fdc:	789a      	ldrb	r2, [r3, #2]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	709a      	strb	r2, [r3, #2]

    switch (option_number)
 8004fe2:	1c22      	adds	r2, r4, #0
 8004fe4:	3a01      	subs	r2, #1
 8004fe6:	2a22      	cmp	r2, #34	; 0x22
 8004fe8:	d900      	bls.n	8004fec <coap_parse_message+0x194>
 8004fea:	e155      	b.n	8005298 <coap_parse_message+0x440>
 8004fec:	4b90      	ldr	r3, [pc, #576]	; (8005230 <coap_parse_message+0x3d8>)
 8004fee:	0092      	lsls	r2, r2, #2
 8004ff0:	58d3      	ldr	r3, [r2, r3]
 8004ff2:	469f      	mov	pc, r3
    {
      case COAP_OPTION_CONTENT_TYPE:
        coap_pkt->content_type = coap_parse_int_option(current_option, option_length);
 8004ff4:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004ff6:	1c30      	adds	r0, r6, #0
 8004ff8:	f7ff fc80 	bl	80048fc <coap_parse_int_option>
 8004ffc:	b2c1      	uxtb	r1, r0
 8004ffe:	73e9      	strb	r1, [r5, #15]
        PRINTF("Content-Format [%u]\n", coap_pkt->content_type);
 8005000:	488c      	ldr	r0, [pc, #560]	; (8005234 <coap_parse_message+0x3dc>)
 8005002:	e006      	b.n	8005012 <coap_parse_message+0x1ba>
        break;
      case COAP_OPTION_MAX_AGE:
        coap_pkt->max_age = coap_parse_int_option(current_option, option_length);
 8005004:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005006:	1c30      	adds	r0, r6, #0
 8005008:	f7ff fc78 	bl	80048fc <coap_parse_int_option>
 800500c:	1c01      	adds	r1, r0, #0
 800500e:	6128      	str	r0, [r5, #16]
        PRINTF("Max-Age [%lu]\n", coap_pkt->max_age);
 8005010:	4889      	ldr	r0, [pc, #548]	; (8005238 <coap_parse_message+0x3e0>)
 8005012:	f001 fcab 	bl	800696c <iprintf>
        break;
 8005016:	e14b      	b.n	80052b0 <coap_parse_message+0x458>
      case COAP_OPTION_ETAG:
        coap_pkt->etag_len = MIN(COAP_ETAG_LEN, option_length);
 8005018:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800501a:	2a08      	cmp	r2, #8
 800501c:	d900      	bls.n	8005020 <coap_parse_message+0x1c8>
 800501e:	2208      	movs	r2, #8
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	772a      	strb	r2, [r5, #28]
        memcpy(coap_pkt->etag, current_option, coap_pkt->etag_len);
 8005024:	1c31      	adds	r1, r6, #0
 8005026:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005028:	f001 fedd 	bl	8006de6 <memcpy>
        PRINTF("ETag %u [0x%02X%02X%02X%02X%02X%02X%02X%02X]\n", coap_pkt->etag_len,
 800502c:	7fe8      	ldrb	r0, [r5, #31]
 800502e:	7f29      	ldrb	r1, [r5, #28]
 8005030:	7f6a      	ldrb	r2, [r5, #29]
 8005032:	7fab      	ldrb	r3, [r5, #30]
 8005034:	9000      	str	r0, [sp, #0]
 8005036:	1c68      	adds	r0, r5, #1
 8005038:	7fc0      	ldrb	r0, [r0, #31]
 800503a:	9001      	str	r0, [sp, #4]
 800503c:	1ca8      	adds	r0, r5, #2
 800503e:	7fc0      	ldrb	r0, [r0, #31]
 8005040:	9002      	str	r0, [sp, #8]
 8005042:	1ce8      	adds	r0, r5, #3
 8005044:	7fc0      	ldrb	r0, [r0, #31]
 8005046:	9003      	str	r0, [sp, #12]
 8005048:	1d28      	adds	r0, r5, #4
 800504a:	7fc0      	ldrb	r0, [r0, #31]
 800504c:	9004      	str	r0, [sp, #16]
 800504e:	1d68      	adds	r0, r5, #5
 8005050:	7fc0      	ldrb	r0, [r0, #31]
 8005052:	9005      	str	r0, [sp, #20]
 8005054:	4879      	ldr	r0, [pc, #484]	; (800523c <coap_parse_message+0x3e4>)
 8005056:	e03f      	b.n	80050d8 <coap_parse_message+0x280>
          coap_pkt->etag[6],
          coap_pkt->etag[7]
        ); /*FIXME always prints 8 bytes */
        break;
      case COAP_OPTION_ACCEPT:
        if (coap_pkt->accept_num < COAP_MAX_ACCEPT_NUM)
 8005058:	1c2c      	adds	r4, r5, #0
 800505a:	3457      	adds	r4, #87	; 0x57
 800505c:	7821      	ldrb	r1, [r4, #0]
 800505e:	9108      	str	r1, [sp, #32]
 8005060:	2901      	cmp	r1, #1
 8005062:	d900      	bls.n	8005066 <coap_parse_message+0x20e>
 8005064:	e124      	b.n	80052b0 <coap_parse_message+0x458>
        {
          coap_pkt->accept[coap_pkt->accept_num] = coap_parse_int_option(current_option, option_length);
 8005066:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005068:	1c30      	adds	r0, r6, #0
 800506a:	f7ff fc47 	bl	80048fc <coap_parse_int_option>
 800506e:	9b08      	ldr	r3, [sp, #32]
 8005070:	332c      	adds	r3, #44	; 0x2c
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	5358      	strh	r0, [r3, r5]
          coap_pkt->accept_num += 1;
 8005076:	7823      	ldrb	r3, [r4, #0]
          PRINTF("Accept [%u]\n", coap_pkt->content_type);
 8005078:	4871      	ldr	r0, [pc, #452]	; (8005240 <coap_parse_message+0x3e8>)
        break;
      case COAP_OPTION_ACCEPT:
        if (coap_pkt->accept_num < COAP_MAX_ACCEPT_NUM)
        {
          coap_pkt->accept[coap_pkt->accept_num] = coap_parse_int_option(current_option, option_length);
          coap_pkt->accept_num += 1;
 800507a:	3301      	adds	r3, #1
 800507c:	7023      	strb	r3, [r4, #0]
          PRINTF("Accept [%u]\n", coap_pkt->content_type);
 800507e:	7be9      	ldrb	r1, [r5, #15]
 8005080:	e7c7      	b.n	8005012 <coap_parse_message+0x1ba>
        }
        break;
      case COAP_OPTION_IF_MATCH:
        /*FIXME support multiple ETags */
        coap_pkt->if_match_len = MIN(COAP_ETAG_LEN, option_length);
 8005082:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005084:	2a08      	cmp	r2, #8
 8005086:	d900      	bls.n	800508a <coap_parse_message+0x232>
 8005088:	2208      	movs	r2, #8
 800508a:	1c2c      	adds	r4, r5, #0
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	345c      	adds	r4, #92	; 0x5c
 8005090:	7022      	strb	r2, [r4, #0]
        memcpy(coap_pkt->if_match, current_option, coap_pkt->if_match_len);
 8005092:	1c31      	adds	r1, r6, #0
 8005094:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005096:	f001 fea6 	bl	8006de6 <memcpy>
        PRINTF("If-Match %u [0x%02X%02X%02X%02X%02X%02X%02X%02X]\n", coap_pkt->if_match_len,
 800509a:	1c28      	adds	r0, r5, #0
 800509c:	1c2b      	adds	r3, r5, #0
 800509e:	305f      	adds	r0, #95	; 0x5f
 80050a0:	7800      	ldrb	r0, [r0, #0]
 80050a2:	335d      	adds	r3, #93	; 0x5d
 80050a4:	781a      	ldrb	r2, [r3, #0]
 80050a6:	3301      	adds	r3, #1
 80050a8:	7821      	ldrb	r1, [r4, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	9000      	str	r0, [sp, #0]
 80050ae:	1c28      	adds	r0, r5, #0
 80050b0:	3060      	adds	r0, #96	; 0x60
 80050b2:	7800      	ldrb	r0, [r0, #0]
 80050b4:	9001      	str	r0, [sp, #4]
 80050b6:	1c28      	adds	r0, r5, #0
 80050b8:	3061      	adds	r0, #97	; 0x61
 80050ba:	7800      	ldrb	r0, [r0, #0]
 80050bc:	9002      	str	r0, [sp, #8]
 80050be:	1c28      	adds	r0, r5, #0
 80050c0:	3062      	adds	r0, #98	; 0x62
 80050c2:	7800      	ldrb	r0, [r0, #0]
 80050c4:	9003      	str	r0, [sp, #12]
 80050c6:	1c28      	adds	r0, r5, #0
 80050c8:	3063      	adds	r0, #99	; 0x63
 80050ca:	7800      	ldrb	r0, [r0, #0]
 80050cc:	9004      	str	r0, [sp, #16]
 80050ce:	1c28      	adds	r0, r5, #0
 80050d0:	3064      	adds	r0, #100	; 0x64
 80050d2:	7800      	ldrb	r0, [r0, #0]
 80050d4:	9005      	str	r0, [sp, #20]
 80050d6:	485b      	ldr	r0, [pc, #364]	; (8005244 <coap_parse_message+0x3ec>)
 80050d8:	f001 fc48 	bl	800696c <iprintf>
          coap_pkt->if_match[4],
          coap_pkt->if_match[5],
          coap_pkt->if_match[6],
          coap_pkt->if_match[7]
        ); /*FIXME always prints 8 bytes */
        break;
 80050dc:	e0e8      	b.n	80052b0 <coap_parse_message+0x458>
      case COAP_OPTION_IF_NONE_MATCH:
        coap_pkt->if_none_match = 1;
 80050de:	1c2b      	adds	r3, r5, #0
 80050e0:	338c      	adds	r3, #140	; 0x8c
 80050e2:	2201      	movs	r2, #1
 80050e4:	701a      	strb	r2, [r3, #0]
        PRINTF("If-None-Match\n");
 80050e6:	4858      	ldr	r0, [pc, #352]	; (8005248 <coap_parse_message+0x3f0>)
 80050e8:	f001 fc40 	bl	800696c <iprintf>
        break;
 80050ec:	e0e0      	b.n	80052b0 <coap_parse_message+0x458>

      case COAP_OPTION_URI_HOST:
        coap_pkt->uri_host = (char *) current_option;
        coap_pkt->uri_host_len = option_length;
 80050ee:	9914      	ldr	r1, [sp, #80]	; 0x50
        coap_pkt->if_none_match = 1;
        PRINTF("If-None-Match\n");
        break;

      case COAP_OPTION_URI_HOST:
        coap_pkt->uri_host = (char *) current_option;
 80050f0:	62ee      	str	r6, [r5, #44]	; 0x2c
        coap_pkt->uri_host_len = option_length;
 80050f2:	62a9      	str	r1, [r5, #40]	; 0x28
        PRINTF("Uri-Host [%.*s]\n", coap_pkt->uri_host_len, coap_pkt->uri_host);
 80050f4:	4855      	ldr	r0, [pc, #340]	; (800524c <coap_parse_message+0x3f4>)
 80050f6:	1c32      	adds	r2, r6, #0
 80050f8:	e03a      	b.n	8005170 <coap_parse_message+0x318>
        break;
      case COAP_OPTION_URI_PORT:
        coap_pkt->uri_port = coap_parse_int_option(current_option, option_length);
 80050fa:	9914      	ldr	r1, [sp, #80]	; 0x50
 80050fc:	1c30      	adds	r0, r6, #0
 80050fe:	f7ff fbfd 	bl	80048fc <coap_parse_int_option>
 8005102:	b281      	uxth	r1, r0
 8005104:	8729      	strh	r1, [r5, #56]	; 0x38
        PRINTF("Uri-Port [%u]\n", coap_pkt->uri_port);
 8005106:	4852      	ldr	r0, [pc, #328]	; (8005250 <coap_parse_message+0x3f8>)
 8005108:	e783      	b.n	8005012 <coap_parse_message+0x1ba>
        break;
      case COAP_OPTION_URI_PATH:
        /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
        coap_merge_multi_option( (char **) &(coap_pkt->uri_path), &(coap_pkt->uri_path_len), current_option, option_length, '/');
 800510a:	232f      	movs	r3, #47	; 0x2f
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005110:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005112:	1c32      	adds	r2, r6, #0
 8005114:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005116:	f7ff fe85 	bl	8004e24 <coap_merge_multi_option>
        PRINTF("Uri-Path [%.*s]\n", coap_pkt->uri_path_len, coap_pkt->uri_path);
 800511a:	484e      	ldr	r0, [pc, #312]	; (8005254 <coap_parse_message+0x3fc>)
 800511c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800511e:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8005120:	e026      	b.n	8005170 <coap_parse_message+0x318>
        break;
      case COAP_OPTION_URI_QUERY:
        /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
        coap_merge_multi_option( (char **) &(coap_pkt->uri_query), &(coap_pkt->uri_query_len), current_option, option_length, '&');
 8005122:	2326      	movs	r3, #38	; 0x26
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005128:	990d      	ldr	r1, [sp, #52]	; 0x34
 800512a:	1c32      	adds	r2, r6, #0
 800512c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800512e:	f7ff fe79 	bl	8004e24 <coap_merge_multi_option>
        PRINTF("Uri-Query [%.*s]\n", coap_pkt->uri_query_len, coap_pkt->uri_query);
 8005132:	1c2a      	adds	r2, r5, #0
 8005134:	1c2b      	adds	r3, r5, #0
 8005136:	3208      	adds	r2, #8
 8005138:	3388      	adds	r3, #136	; 0x88
 800513a:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 800513c:	4846      	ldr	r0, [pc, #280]	; (8005258 <coap_parse_message+0x400>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	e016      	b.n	8005170 <coap_parse_message+0x318>
        break;

      case COAP_OPTION_LOCATION_PATH:
        /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
        coap_merge_multi_option( (char **) &(coap_pkt->location_path), &(coap_pkt->location_path_len), current_option, option_length, '/');
 8005142:	232f      	movs	r3, #47	; 0x2f
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005148:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800514a:	1c32      	adds	r2, r6, #0
 800514c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800514e:	f7ff fe69 	bl	8004e24 <coap_merge_multi_option>
        PRINTF("Location-Path [%.*s]\n", coap_pkt->location_path_len, coap_pkt->location_path);
 8005152:	4842      	ldr	r0, [pc, #264]	; (800525c <coap_parse_message+0x404>)
 8005154:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8005156:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005158:	e00a      	b.n	8005170 <coap_parse_message+0x318>
        break;
      case COAP_OPTION_LOCATION_QUERY:
        /* coap_merge_multi_option() operates in-place on the IPBUF, but final packet field should be const string -> cast to string */
        coap_merge_multi_option( (char **) &(coap_pkt->location_query), &(coap_pkt->location_query_len), current_option, option_length, '&');
 800515a:	2326      	movs	r3, #38	; 0x26
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005160:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005162:	1c32      	adds	r2, r6, #0
 8005164:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005166:	f7ff fe5d 	bl	8004e24 <coap_merge_multi_option>
        PRINTF("Location-Query [%.*s]\n", coap_pkt->location_query_len, coap_pkt->location_query);
 800516a:	483d      	ldr	r0, [pc, #244]	; (8005260 <coap_parse_message+0x408>)
 800516c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800516e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005170:	f001 fbfc 	bl	800696c <iprintf>
        break;
 8005174:	e09c      	b.n	80052b0 <coap_parse_message+0x458>

      case COAP_OPTION_PROXY_URI:
        /*FIXME check for own end-point */
        coap_pkt->proxy_uri = (char *) current_option;
        coap_pkt->proxy_uri_len = option_length;
 8005176:	9914      	ldr	r1, [sp, #80]	; 0x50
        /*TODO length > 270 not implemented (actually not required) */
        PRINTF("Proxy-Uri NOT IMPLEMENTED [%.*s]\n", coap_pkt->proxy_uri_len, coap_pkt->proxy_uri);
 8005178:	1c32      	adds	r2, r6, #0
        PRINTF("Location-Query [%.*s]\n", coap_pkt->location_query_len, coap_pkt->location_query);
        break;

      case COAP_OPTION_PROXY_URI:
        /*FIXME check for own end-point */
        coap_pkt->proxy_uri = (char *) current_option;
 800517a:	61ae      	str	r6, [r5, #24]
        coap_pkt->proxy_uri_len = option_length;
 800517c:	6169      	str	r1, [r5, #20]
        /*TODO length > 270 not implemented (actually not required) */
        PRINTF("Proxy-Uri NOT IMPLEMENTED [%.*s]\n", coap_pkt->proxy_uri_len, coap_pkt->proxy_uri);
 800517e:	4839      	ldr	r0, [pc, #228]	; (8005264 <coap_parse_message+0x40c>)
 8005180:	f001 fbf4 	bl	800696c <iprintf>
        coap_error_message = "This is a constrained server (Contiki)";
 8005184:	4a38      	ldr	r2, [pc, #224]	; (8005268 <coap_parse_message+0x410>)
 8005186:	4b27      	ldr	r3, [pc, #156]	; (8005224 <coap_parse_message+0x3cc>)
 8005188:	20a5      	movs	r0, #165	; 0xa5
 800518a:	601a      	str	r2, [r3, #0]
        return PROXYING_NOT_SUPPORTED_5_05;
 800518c:	e09b      	b.n	80052c6 <coap_parse_message+0x46e>
        break;

      case COAP_OPTION_OBSERVE:
        coap_pkt->observe = coap_parse_int_option(current_option, option_length);
 800518e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005190:	1c30      	adds	r0, r6, #0
 8005192:	f7ff fbb3 	bl	80048fc <coap_parse_int_option>
 8005196:	1c2b      	adds	r3, r5, #0
 8005198:	b281      	uxth	r1, r0
 800519a:	334c      	adds	r3, #76	; 0x4c
 800519c:	8019      	strh	r1, [r3, #0]
        PRINTF("Observe [%lu]\n", coap_pkt->observe);
 800519e:	4833      	ldr	r0, [pc, #204]	; (800526c <coap_parse_message+0x414>)
 80051a0:	e737      	b.n	8005012 <coap_parse_message+0x1ba>
        break;
      case COAP_OPTION_BLOCK2:
        coap_pkt->block2_num = coap_parse_int_option(current_option, option_length);
 80051a2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80051a4:	1c30      	adds	r0, r6, #0
 80051a6:	f7ff fba9 	bl	80048fc <coap_parse_int_option>
        coap_pkt->block2_more = (coap_pkt->block2_num & 0x08)>>3;
 80051aa:	1c2b      	adds	r3, r5, #0
 80051ac:	0702      	lsls	r2, r0, #28
 80051ae:	0fd2      	lsrs	r2, r2, #31
 80051b0:	336c      	adds	r3, #108	; 0x6c
        coap_pkt->block2_size = 16 << (coap_pkt->block2_num & 0x07);
 80051b2:	2107      	movs	r1, #7
        coap_pkt->observe = coap_parse_int_option(current_option, option_length);
        PRINTF("Observe [%lu]\n", coap_pkt->observe);
        break;
      case COAP_OPTION_BLOCK2:
        coap_pkt->block2_num = coap_parse_int_option(current_option, option_length);
        coap_pkt->block2_more = (coap_pkt->block2_num & 0x08)>>3;
 80051b4:	9208      	str	r2, [sp, #32]
        coap_pkt->block2_size = 16 << (coap_pkt->block2_num & 0x07);
 80051b6:	4001      	ands	r1, r0
        coap_pkt->observe = coap_parse_int_option(current_option, option_length);
        PRINTF("Observe [%lu]\n", coap_pkt->observe);
        break;
      case COAP_OPTION_BLOCK2:
        coap_pkt->block2_num = coap_parse_int_option(current_option, option_length);
        coap_pkt->block2_more = (coap_pkt->block2_num & 0x08)>>3;
 80051b8:	701a      	strb	r2, [r3, #0]
        coap_pkt->block2_size = 16 << (coap_pkt->block2_num & 0x07);
 80051ba:	2310      	movs	r3, #16
 80051bc:	408b      	lsls	r3, r1
 80051be:	1c2c      	adds	r4, r5, #0
 80051c0:	346e      	adds	r4, #110	; 0x6e
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	8023      	strh	r3, [r4, #0]
        coap_pkt->block2_offset = (coap_pkt->block2_num & ~0x0000000F)<<(coap_pkt->block2_num & 0x07);
 80051c6:	1c02      	adds	r2, r0, #0
 80051c8:	240f      	movs	r4, #15
 80051ca:	43a2      	bics	r2, r4
        coap_pkt->block2_num >>= 4;
        PRINTF("Block2 [%lu%s (%u B/blk)]\n", coap_pkt->block2_num, coap_pkt->block2_more ? "+" : "", coap_pkt->block2_size);
 80051cc:	9c08      	ldr	r4, [sp, #32]
        break;
      case COAP_OPTION_BLOCK2:
        coap_pkt->block2_num = coap_parse_int_option(current_option, option_length);
        coap_pkt->block2_more = (coap_pkt->block2_num & 0x08)>>3;
        coap_pkt->block2_size = 16 << (coap_pkt->block2_num & 0x07);
        coap_pkt->block2_offset = (coap_pkt->block2_num & ~0x0000000F)<<(coap_pkt->block2_num & 0x07);
 80051ce:	408a      	lsls	r2, r1
        coap_pkt->block2_num >>= 4;
 80051d0:	0901      	lsrs	r1, r0, #4
        break;
      case COAP_OPTION_BLOCK2:
        coap_pkt->block2_num = coap_parse_int_option(current_option, option_length);
        coap_pkt->block2_more = (coap_pkt->block2_num & 0x08)>>3;
        coap_pkt->block2_size = 16 << (coap_pkt->block2_num & 0x07);
        coap_pkt->block2_offset = (coap_pkt->block2_num & ~0x0000000F)<<(coap_pkt->block2_num & 0x07);
 80051d2:	672a      	str	r2, [r5, #112]	; 0x70
        coap_pkt->block2_num >>= 4;
 80051d4:	66a9      	str	r1, [r5, #104]	; 0x68
        PRINTF("Block2 [%lu%s (%u B/blk)]\n", coap_pkt->block2_num, coap_pkt->block2_more ? "+" : "", coap_pkt->block2_size);
 80051d6:	2c00      	cmp	r4, #0
 80051d8:	d101      	bne.n	80051de <coap_parse_message+0x386>
 80051da:	4a25      	ldr	r2, [pc, #148]	; (8005270 <coap_parse_message+0x418>)
 80051dc:	e000      	b.n	80051e0 <coap_parse_message+0x388>
 80051de:	4a25      	ldr	r2, [pc, #148]	; (8005274 <coap_parse_message+0x41c>)
 80051e0:	4825      	ldr	r0, [pc, #148]	; (8005278 <coap_parse_message+0x420>)
 80051e2:	e04d      	b.n	8005280 <coap_parse_message+0x428>
        break;
      case COAP_OPTION_BLOCK1:
        coap_pkt->block1_num = coap_parse_int_option(current_option, option_length);
 80051e4:	9914      	ldr	r1, [sp, #80]	; 0x50
 80051e6:	1c30      	adds	r0, r6, #0
 80051e8:	f7ff fb88 	bl	80048fc <coap_parse_int_option>
        coap_pkt->block1_more = (coap_pkt->block1_num & 0x08)>>3;
 80051ec:	1c2b      	adds	r3, r5, #0
 80051ee:	0702      	lsls	r2, r0, #28
 80051f0:	0fd2      	lsrs	r2, r2, #31
 80051f2:	3378      	adds	r3, #120	; 0x78
        coap_pkt->block1_size = 16 << (coap_pkt->block1_num & 0x07);
 80051f4:	2107      	movs	r1, #7
        coap_pkt->block2_num >>= 4;
        PRINTF("Block2 [%lu%s (%u B/blk)]\n", coap_pkt->block2_num, coap_pkt->block2_more ? "+" : "", coap_pkt->block2_size);
        break;
      case COAP_OPTION_BLOCK1:
        coap_pkt->block1_num = coap_parse_int_option(current_option, option_length);
        coap_pkt->block1_more = (coap_pkt->block1_num & 0x08)>>3;
 80051f6:	9208      	str	r2, [sp, #32]
        coap_pkt->block1_size = 16 << (coap_pkt->block1_num & 0x07);
 80051f8:	4001      	ands	r1, r0
        coap_pkt->block2_num >>= 4;
        PRINTF("Block2 [%lu%s (%u B/blk)]\n", coap_pkt->block2_num, coap_pkt->block2_more ? "+" : "", coap_pkt->block2_size);
        break;
      case COAP_OPTION_BLOCK1:
        coap_pkt->block1_num = coap_parse_int_option(current_option, option_length);
        coap_pkt->block1_more = (coap_pkt->block1_num & 0x08)>>3;
 80051fa:	701a      	strb	r2, [r3, #0]
        coap_pkt->block1_size = 16 << (coap_pkt->block1_num & 0x07);
 80051fc:	2310      	movs	r3, #16
 80051fe:	408b      	lsls	r3, r1
 8005200:	1c2c      	adds	r4, r5, #0
 8005202:	347a      	adds	r4, #122	; 0x7a
 8005204:	b29b      	uxth	r3, r3
        coap_pkt->block1_offset = (coap_pkt->block1_num & ~0x0000000F)<<(coap_pkt->block1_num & 0x07);
 8005206:	220f      	movs	r2, #15
        PRINTF("Block2 [%lu%s (%u B/blk)]\n", coap_pkt->block2_num, coap_pkt->block2_more ? "+" : "", coap_pkt->block2_size);
        break;
      case COAP_OPTION_BLOCK1:
        coap_pkt->block1_num = coap_parse_int_option(current_option, option_length);
        coap_pkt->block1_more = (coap_pkt->block1_num & 0x08)>>3;
        coap_pkt->block1_size = 16 << (coap_pkt->block1_num & 0x07);
 8005208:	8023      	strh	r3, [r4, #0]
        coap_pkt->block1_offset = (coap_pkt->block1_num & ~0x0000000F)<<(coap_pkt->block1_num & 0x07);
 800520a:	1c04      	adds	r4, r0, #0
 800520c:	4394      	bics	r4, r2
        coap_pkt->block1_num >>= 4;
        PRINTF("Block1 [%lu%s (%u B/blk)]\n", coap_pkt->block1_num, coap_pkt->block1_more ? "+" : "", coap_pkt->block1_size);
 800520e:	9a08      	ldr	r2, [sp, #32]
        break;
      case COAP_OPTION_BLOCK1:
        coap_pkt->block1_num = coap_parse_int_option(current_option, option_length);
        coap_pkt->block1_more = (coap_pkt->block1_num & 0x08)>>3;
        coap_pkt->block1_size = 16 << (coap_pkt->block1_num & 0x07);
        coap_pkt->block1_offset = (coap_pkt->block1_num & ~0x0000000F)<<(coap_pkt->block1_num & 0x07);
 8005210:	408c      	lsls	r4, r1
        coap_pkt->block1_num >>= 4;
 8005212:	0901      	lsrs	r1, r0, #4
        break;
      case COAP_OPTION_BLOCK1:
        coap_pkt->block1_num = coap_parse_int_option(current_option, option_length);
        coap_pkt->block1_more = (coap_pkt->block1_num & 0x08)>>3;
        coap_pkt->block1_size = 16 << (coap_pkt->block1_num & 0x07);
        coap_pkt->block1_offset = (coap_pkt->block1_num & ~0x0000000F)<<(coap_pkt->block1_num & 0x07);
 8005214:	67ec      	str	r4, [r5, #124]	; 0x7c
        coap_pkt->block1_num >>= 4;
 8005216:	6769      	str	r1, [r5, #116]	; 0x74
        PRINTF("Block1 [%lu%s (%u B/blk)]\n", coap_pkt->block1_num, coap_pkt->block1_more ? "+" : "", coap_pkt->block1_size);
 8005218:	2a00      	cmp	r2, #0
 800521a:	d12f      	bne.n	800527c <coap_parse_message+0x424>
 800521c:	4a14      	ldr	r2, [pc, #80]	; (8005270 <coap_parse_message+0x418>)
 800521e:	e02e      	b.n	800527e <coap_parse_message+0x426>
 8005220:	0800b018 	.word	0x0800b018
 8005224:	2000057c 	.word	0x2000057c
 8005228:	0800b02f 	.word	0x0800b02f
 800522c:	0800b064 	.word	0x0800b064
 8005230:	0800af04 	.word	0x0800af04
 8005234:	0800b083 	.word	0x0800b083
 8005238:	0800b098 	.word	0x0800b098
 800523c:	0800b0a7 	.word	0x0800b0a7
 8005240:	0800b0d5 	.word	0x0800b0d5
 8005244:	0800b0e2 	.word	0x0800b0e2
 8005248:	0800b114 	.word	0x0800b114
 800524c:	0800b123 	.word	0x0800b123
 8005250:	0800b134 	.word	0x0800b134
 8005254:	0800b143 	.word	0x0800b143
 8005258:	0800b154 	.word	0x0800b154
 800525c:	0800b166 	.word	0x0800b166
 8005260:	0800b17c 	.word	0x0800b17c
 8005264:	0800b193 	.word	0x0800b193
 8005268:	0800b1b5 	.word	0x0800b1b5
 800526c:	0800b1dc 	.word	0x0800b1dc
 8005270:	0800bb68 	.word	0x0800bb68
 8005274:	0800b1eb 	.word	0x0800b1eb
 8005278:	0800b1ed 	.word	0x0800b1ed
 800527c:	4a13      	ldr	r2, [pc, #76]	; (80052cc <coap_parse_message+0x474>)
 800527e:	4814      	ldr	r0, [pc, #80]	; (80052d0 <coap_parse_message+0x478>)
 8005280:	f001 fb74 	bl	800696c <iprintf>
        break;
 8005284:	e014      	b.n	80052b0 <coap_parse_message+0x458>
      case COAP_OPTION_SIZE:
        coap_pkt->size = coap_parse_int_option(current_option, option_length);
 8005286:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005288:	1c30      	adds	r0, r6, #0
 800528a:	f7ff fb37 	bl	80048fc <coap_parse_int_option>
 800528e:	1d2b      	adds	r3, r5, #4
 8005290:	1c01      	adds	r1, r0, #0
 8005292:	67d8      	str	r0, [r3, #124]	; 0x7c
        PRINTF("Size [%lu]\n", coap_pkt->size);
 8005294:	480f      	ldr	r0, [pc, #60]	; (80052d4 <coap_parse_message+0x47c>)
 8005296:	e6bc      	b.n	8005012 <coap_parse_message+0x1ba>
        break;
      default:
        PRINTF("unknown (%u)\n", option_number);
 8005298:	480f      	ldr	r0, [pc, #60]	; (80052d8 <coap_parse_message+0x480>)
 800529a:	9907      	ldr	r1, [sp, #28]
 800529c:	f001 fb66 	bl	800696c <iprintf>
        /* Check if critical (odd) */
        if (option_number & 1)
 80052a0:	9b07      	ldr	r3, [sp, #28]
 80052a2:	07db      	lsls	r3, r3, #31
 80052a4:	d504      	bpl.n	80052b0 <coap_parse_message+0x458>
        {
          coap_error_message = "Unsupported critical option";
 80052a6:	4a0d      	ldr	r2, [pc, #52]	; (80052dc <coap_parse_message+0x484>)
 80052a8:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <coap_parse_message+0x488>)
 80052aa:	2082      	movs	r0, #130	; 0x82
 80052ac:	601a      	str	r2, [r3, #0]
          return BAD_OPTION_4_02;
 80052ae:	e00a      	b.n	80052c6 <coap_parse_message+0x46e>
        }
    }

    current_option += option_length;
 80052b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80052b2:	18f3      	adds	r3, r6, r3

  unsigned int option_number = 0;
  unsigned int option_delta = 0;
  size_t option_length = 0;

  while (current_option < data+data_len)
 80052b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80052b6:	193a      	adds	r2, r7, r4
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d200      	bcs.n	80052be <coap_parse_message+0x466>
 80052bc:	e642      	b.n	8004f44 <coap_parse_message+0xec>
        }
    }

    current_option += option_length;
  } /* for */
  PRINTF("-Done parsing-------\n");
 80052be:	4809      	ldr	r0, [pc, #36]	; (80052e4 <coap_parse_message+0x48c>)
 80052c0:	f001 fb54 	bl	800696c <iprintf>
 80052c4:	2000      	movs	r0, #0



  return NO_ERROR;
}
 80052c6:	b017      	add	sp, #92	; 0x5c
 80052c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	0800b1eb 	.word	0x0800b1eb
 80052d0:	0800b208 	.word	0x0800b208
 80052d4:	0800b223 	.word	0x0800b223
 80052d8:	0800b22f 	.word	0x0800b22f
 80052dc:	0800b23d 	.word	0x0800b23d
 80052e0:	2000057c 	.word	0x2000057c
 80052e4:	0800b259 	.word	0x0800b259

080052e8 <coap_serialize_message>:
  coap_pkt->mid = mid;
}
/*-----------------------------------------------------------------------------------*/
size_t
coap_serialize_message(void *packet, uint8_t *buffer)
{
 80052e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ea:	b089      	sub	sp, #36	; 0x24
  uint8_t *option;
  unsigned int current_number = 0;

  /* Initialize */
  coap_pkt->buffer = buffer;
  coap_pkt->version = 1;
 80052ec:	2301      	movs	r3, #1
  coap_pkt->mid = mid;
}
/*-----------------------------------------------------------------------------------*/
size_t
coap_serialize_message(void *packet, uint8_t *buffer)
{
 80052ee:	9107      	str	r1, [sp, #28]
  uint8_t *option;
  unsigned int current_number = 0;

  /* Initialize */
  coap_pkt->buffer = buffer;
  coap_pkt->version = 1;
 80052f0:	7103      	strb	r3, [r0, #4]
  coap_pkt->mid = mid;
}
/*-----------------------------------------------------------------------------------*/
size_t
coap_serialize_message(void *packet, uint8_t *buffer)
{
 80052f2:	1c05      	adds	r5, r0, #0
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;
  uint8_t *option;
  unsigned int current_number = 0;

  /* Initialize */
  coap_pkt->buffer = buffer;
 80052f4:	6001      	str	r1, [r0, #0]
  coap_pkt->version = 1;

  PRINTF("-Serializing MID %u to %p, ", coap_pkt->mid, coap_pkt->buffer);
 80052f6:	9a07      	ldr	r2, [sp, #28]
 80052f8:	8901      	ldrh	r1, [r0, #8]
 80052fa:	48da      	ldr	r0, [pc, #872]	; (8005664 <coap_serialize_message+0x37c>)
 80052fc:	f001 fb36 	bl	800696c <iprintf>

  /* set header fields */
  coap_pkt->buffer[0]  = 0x00;
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	701a      	strb	r2, [r3, #0]
  coap_pkt->buffer[0] |= COAP_HEADER_VERSION_MASK & (coap_pkt->version)<<COAP_HEADER_VERSION_POSITION;
 8005306:	682b      	ldr	r3, [r5, #0]
 8005308:	792a      	ldrb	r2, [r5, #4]
 800530a:	7819      	ldrb	r1, [r3, #0]
 800530c:	0192      	lsls	r2, r2, #6
 800530e:	430a      	orrs	r2, r1
 8005310:	701a      	strb	r2, [r3, #0]
  coap_pkt->buffer[0] |= COAP_HEADER_TYPE_MASK & (coap_pkt->type)<<COAP_HEADER_TYPE_POSITION;
 8005312:	796a      	ldrb	r2, [r5, #5]
 8005314:	682b      	ldr	r3, [r5, #0]
 8005316:	2130      	movs	r1, #48	; 0x30
 8005318:	0112      	lsls	r2, r2, #4
 800531a:	400a      	ands	r2, r1
 800531c:	7819      	ldrb	r1, [r3, #0]
  coap_pkt->buffer[2] = (uint8_t) ((coap_pkt->mid)>>8);
  coap_pkt->buffer[3] = (uint8_t) (coap_pkt->mid);

  /* set Token */
  PRINTF("Token (len %u)", coap_pkt->token_len);
  option = coap_pkt->buffer + COAP_HEADER_LEN;
 800531e:	1c2c      	adds	r4, r5, #0
  PRINTF("-Serializing MID %u to %p, ", coap_pkt->mid, coap_pkt->buffer);

  /* set header fields */
  coap_pkt->buffer[0]  = 0x00;
  coap_pkt->buffer[0] |= COAP_HEADER_VERSION_MASK & (coap_pkt->version)<<COAP_HEADER_VERSION_POSITION;
  coap_pkt->buffer[0] |= COAP_HEADER_TYPE_MASK & (coap_pkt->type)<<COAP_HEADER_TYPE_POSITION;
 8005320:	430a      	orrs	r2, r1
 8005322:	701a      	strb	r2, [r3, #0]
  coap_pkt->buffer[0] |= COAP_HEADER_TOKEN_LEN_MASK & (coap_pkt->token_len)<<COAP_HEADER_TOKEN_LEN_POSITION;
 8005324:	1c2b      	adds	r3, r5, #0
 8005326:	334e      	adds	r3, #78	; 0x4e
 8005328:	682a      	ldr	r2, [r5, #0]
 800532a:	7818      	ldrb	r0, [r3, #0]
 800532c:	210f      	movs	r1, #15
 800532e:	4001      	ands	r1, r0
 8005330:	7810      	ldrb	r0, [r2, #0]
  coap_pkt->buffer[2] = (uint8_t) ((coap_pkt->mid)>>8);
  coap_pkt->buffer[3] = (uint8_t) (coap_pkt->mid);

  /* set Token */
  PRINTF("Token (len %u)", coap_pkt->token_len);
  option = coap_pkt->buffer + COAP_HEADER_LEN;
 8005332:	344f      	adds	r4, #79	; 0x4f

  /* set header fields */
  coap_pkt->buffer[0]  = 0x00;
  coap_pkt->buffer[0] |= COAP_HEADER_VERSION_MASK & (coap_pkt->version)<<COAP_HEADER_VERSION_POSITION;
  coap_pkt->buffer[0] |= COAP_HEADER_TYPE_MASK & (coap_pkt->type)<<COAP_HEADER_TYPE_POSITION;
  coap_pkt->buffer[0] |= COAP_HEADER_TOKEN_LEN_MASK & (coap_pkt->token_len)<<COAP_HEADER_TOKEN_LEN_POSITION;
 8005334:	4301      	orrs	r1, r0
 8005336:	7011      	strb	r1, [r2, #0]
  coap_pkt->buffer[1] = coap_pkt->code;
 8005338:	682a      	ldr	r2, [r5, #0]
 800533a:	79a9      	ldrb	r1, [r5, #6]
  coap_pkt->buffer[2] = (uint8_t) ((coap_pkt->mid)>>8);
  coap_pkt->buffer[3] = (uint8_t) (coap_pkt->mid);

  /* set Token */
  PRINTF("Token (len %u)", coap_pkt->token_len);
 800533c:	48ca      	ldr	r0, [pc, #808]	; (8005668 <coap_serialize_message+0x380>)
  /* set header fields */
  coap_pkt->buffer[0]  = 0x00;
  coap_pkt->buffer[0] |= COAP_HEADER_VERSION_MASK & (coap_pkt->version)<<COAP_HEADER_VERSION_POSITION;
  coap_pkt->buffer[0] |= COAP_HEADER_TYPE_MASK & (coap_pkt->type)<<COAP_HEADER_TYPE_POSITION;
  coap_pkt->buffer[0] |= COAP_HEADER_TOKEN_LEN_MASK & (coap_pkt->token_len)<<COAP_HEADER_TOKEN_LEN_POSITION;
  coap_pkt->buffer[1] = coap_pkt->code;
 800533e:	7051      	strb	r1, [r2, #1]
  coap_pkt->buffer[2] = (uint8_t) ((coap_pkt->mid)>>8);
 8005340:	8929      	ldrh	r1, [r5, #8]
 8005342:	682a      	ldr	r2, [r5, #0]
 8005344:	0a09      	lsrs	r1, r1, #8
 8005346:	7091      	strb	r1, [r2, #2]
  coap_pkt->buffer[3] = (uint8_t) (coap_pkt->mid);
 8005348:	8929      	ldrh	r1, [r5, #8]
 800534a:	682a      	ldr	r2, [r5, #0]

  /* set Token */
  PRINTF("Token (len %u)", coap_pkt->token_len);
  option = coap_pkt->buffer + COAP_HEADER_LEN;
 800534c:	2700      	movs	r7, #0
  coap_pkt->buffer[0] |= COAP_HEADER_VERSION_MASK & (coap_pkt->version)<<COAP_HEADER_VERSION_POSITION;
  coap_pkt->buffer[0] |= COAP_HEADER_TYPE_MASK & (coap_pkt->type)<<COAP_HEADER_TYPE_POSITION;
  coap_pkt->buffer[0] |= COAP_HEADER_TOKEN_LEN_MASK & (coap_pkt->token_len)<<COAP_HEADER_TOKEN_LEN_POSITION;
  coap_pkt->buffer[1] = coap_pkt->code;
  coap_pkt->buffer[2] = (uint8_t) ((coap_pkt->mid)>>8);
  coap_pkt->buffer[3] = (uint8_t) (coap_pkt->mid);
 800534e:	70d1      	strb	r1, [r2, #3]

  /* set Token */
  PRINTF("Token (len %u)", coap_pkt->token_len);
 8005350:	7819      	ldrb	r1, [r3, #0]
 8005352:	f001 fb0b 	bl	800696c <iprintf>
  option = coap_pkt->buffer + COAP_HEADER_LEN;
 8005356:	682e      	ldr	r6, [r5, #0]
 8005358:	3604      	adds	r6, #4
  for (current_number=0; current_number<coap_pkt->token_len; ++current_number)
 800535a:	e008      	b.n	800536e <coap_serialize_message+0x86>
  {
    PRINTF(" %02X", coap_pkt->token[current_number]);
 800535c:	7821      	ldrb	r1, [r4, #0]
 800535e:	48c3      	ldr	r0, [pc, #780]	; (800566c <coap_serialize_message+0x384>)
 8005360:	f001 fb04 	bl	800696c <iprintf>
    *option = coap_pkt->token[current_number];
 8005364:	7823      	ldrb	r3, [r4, #0]
  coap_pkt->buffer[3] = (uint8_t) (coap_pkt->mid);

  /* set Token */
  PRINTF("Token (len %u)", coap_pkt->token_len);
  option = coap_pkt->buffer + COAP_HEADER_LEN;
  for (current_number=0; current_number<coap_pkt->token_len; ++current_number)
 8005366:	3701      	adds	r7, #1
  {
    PRINTF(" %02X", coap_pkt->token[current_number]);
    *option = coap_pkt->token[current_number];
 8005368:	7033      	strb	r3, [r6, #0]
  coap_pkt->buffer[3] = (uint8_t) (coap_pkt->mid);

  /* set Token */
  PRINTF("Token (len %u)", coap_pkt->token_len);
  option = coap_pkt->buffer + COAP_HEADER_LEN;
  for (current_number=0; current_number<coap_pkt->token_len; ++current_number)
 800536a:	3401      	adds	r4, #1
  {
    PRINTF(" %02X", coap_pkt->token[current_number]);
    *option = coap_pkt->token[current_number];
    ++option;
 800536c:	3601      	adds	r6, #1
  coap_pkt->buffer[3] = (uint8_t) (coap_pkt->mid);

  /* set Token */
  PRINTF("Token (len %u)", coap_pkt->token_len);
  option = coap_pkt->buffer + COAP_HEADER_LEN;
  for (current_number=0; current_number<coap_pkt->token_len; ++current_number)
 800536e:	1c2b      	adds	r3, r5, #0
 8005370:	334e      	adds	r3, #78	; 0x4e
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	429f      	cmp	r7, r3
 8005376:	d3f1      	bcc.n	800535c <coap_serialize_message+0x74>
  {
    PRINTF(" %02X", coap_pkt->token[current_number]);
    *option = coap_pkt->token[current_number];
    ++option;
  }
  PRINTF("-\n");
 8005378:	48bd      	ldr	r0, [pc, #756]	; (8005670 <coap_serialize_message+0x388>)
 800537a:	f001 faf7 	bl	800696c <iprintf>

  /* Serialize options */
  current_number = 0;

  PRINTF("-Serializing options at %p-\n", option);
 800537e:	48bd      	ldr	r0, [pc, #756]	; (8005674 <coap_serialize_message+0x38c>)
 8005380:	1c31      	adds	r1, r6, #0
 8005382:	f001 faf3 	bl	800696c <iprintf>

  /* The options must be serialized in the order of their number */
  COAP_SERIALIZE_BYTE_OPTION(   COAP_OPTION_IF_MATCH,       if_match, "If-Match")
 8005386:	7aab      	ldrb	r3, [r5, #10]
 8005388:	079a      	lsls	r2, r3, #30
 800538a:	d401      	bmi.n	8005390 <coap_serialize_message+0xa8>
 800538c:	2700      	movs	r7, #0
 800538e:	e02f      	b.n	80053f0 <coap_serialize_message+0x108>
 8005390:	1c28      	adds	r0, r5, #0
 8005392:	305f      	adds	r0, #95	; 0x5f
 8005394:	7800      	ldrb	r0, [r0, #0]
 8005396:	1c2c      	adds	r4, r5, #0
 8005398:	1c2f      	adds	r7, r5, #0
 800539a:	1c2b      	adds	r3, r5, #0
 800539c:	375d      	adds	r7, #93	; 0x5d
 800539e:	345c      	adds	r4, #92	; 0x5c
 80053a0:	335e      	adds	r3, #94	; 0x5e
 80053a2:	783a      	ldrb	r2, [r7, #0]
 80053a4:	7821      	ldrb	r1, [r4, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	9000      	str	r0, [sp, #0]
 80053aa:	1c28      	adds	r0, r5, #0
 80053ac:	3060      	adds	r0, #96	; 0x60
 80053ae:	7800      	ldrb	r0, [r0, #0]
 80053b0:	9001      	str	r0, [sp, #4]
 80053b2:	1c28      	adds	r0, r5, #0
 80053b4:	3061      	adds	r0, #97	; 0x61
 80053b6:	7800      	ldrb	r0, [r0, #0]
 80053b8:	9002      	str	r0, [sp, #8]
 80053ba:	1c28      	adds	r0, r5, #0
 80053bc:	3062      	adds	r0, #98	; 0x62
 80053be:	7800      	ldrb	r0, [r0, #0]
 80053c0:	9003      	str	r0, [sp, #12]
 80053c2:	1c28      	adds	r0, r5, #0
 80053c4:	3063      	adds	r0, #99	; 0x63
 80053c6:	7800      	ldrb	r0, [r0, #0]
 80053c8:	9004      	str	r0, [sp, #16]
 80053ca:	1c28      	adds	r0, r5, #0
 80053cc:	3064      	adds	r0, #100	; 0x64
 80053ce:	7800      	ldrb	r0, [r0, #0]
 80053d0:	9005      	str	r0, [sp, #20]
 80053d2:	48a9      	ldr	r0, [pc, #676]	; (8005678 <coap_serialize_message+0x390>)
 80053d4:	f001 faca 	bl	800696c <iprintf>
 80053d8:	7823      	ldrb	r3, [r4, #0]
 80053da:	1c32      	adds	r2, r6, #0
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	2300      	movs	r3, #0
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	2001      	movs	r0, #1
 80053e4:	1c3b      	adds	r3, r7, #0
 80053e6:	2100      	movs	r1, #0
 80053e8:	f7ff fcc2 	bl	8004d70 <coap_serialize_array_option>
 80053ec:	2701      	movs	r7, #1
 80053ee:	1836      	adds	r6, r6, r0
  COAP_SERIALIZE_STRING_OPTION( COAP_OPTION_URI_HOST,       uri_host, '\0', "Uri-Host")
 80053f0:	7aab      	ldrb	r3, [r5, #10]
 80053f2:	071c      	lsls	r4, r3, #28
 80053f4:	d510      	bpl.n	8005418 <coap_serialize_message+0x130>
 80053f6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80053f8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80053fa:	48a0      	ldr	r0, [pc, #640]	; (800567c <coap_serialize_message+0x394>)
 80053fc:	f001 fab6 	bl	800696c <iprintf>
 8005400:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005402:	1c39      	adds	r1, r7, #0
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	2300      	movs	r3, #0
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	1c32      	adds	r2, r6, #0
 800540c:	2003      	movs	r0, #3
 800540e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005410:	f7ff fcae 	bl	8004d70 <coap_serialize_array_option>
 8005414:	2703      	movs	r7, #3
 8005416:	1836      	adds	r6, r6, r0
  COAP_SERIALIZE_BYTE_OPTION(   COAP_OPTION_ETAG,           etag, "ETag")
 8005418:	7aab      	ldrb	r3, [r5, #10]
 800541a:	06da      	lsls	r2, r3, #27
 800541c:	d523      	bpl.n	8005466 <coap_serialize_message+0x17e>
 800541e:	7fe8      	ldrb	r0, [r5, #31]
 8005420:	7f29      	ldrb	r1, [r5, #28]
 8005422:	7f6a      	ldrb	r2, [r5, #29]
 8005424:	7fab      	ldrb	r3, [r5, #30]
 8005426:	9000      	str	r0, [sp, #0]
 8005428:	1c68      	adds	r0, r5, #1
 800542a:	7fc0      	ldrb	r0, [r0, #31]
 800542c:	9001      	str	r0, [sp, #4]
 800542e:	1ca8      	adds	r0, r5, #2
 8005430:	7fc0      	ldrb	r0, [r0, #31]
 8005432:	9002      	str	r0, [sp, #8]
 8005434:	1ce8      	adds	r0, r5, #3
 8005436:	7fc0      	ldrb	r0, [r0, #31]
 8005438:	9003      	str	r0, [sp, #12]
 800543a:	1d28      	adds	r0, r5, #4
 800543c:	7fc0      	ldrb	r0, [r0, #31]
 800543e:	9004      	str	r0, [sp, #16]
 8005440:	1d68      	adds	r0, r5, #5
 8005442:	7fc0      	ldrb	r0, [r0, #31]
 8005444:	9005      	str	r0, [sp, #20]
 8005446:	488e      	ldr	r0, [pc, #568]	; (8005680 <coap_serialize_message+0x398>)
 8005448:	f001 fa90 	bl	800696c <iprintf>
 800544c:	7f2a      	ldrb	r2, [r5, #28]
 800544e:	1c2b      	adds	r3, r5, #0
 8005450:	9200      	str	r2, [sp, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	9201      	str	r2, [sp, #4]
 8005456:	1c39      	adds	r1, r7, #0
 8005458:	1c32      	adds	r2, r6, #0
 800545a:	331d      	adds	r3, #29
 800545c:	2004      	movs	r0, #4
 800545e:	f7ff fc87 	bl	8004d70 <coap_serialize_array_option>
 8005462:	2704      	movs	r7, #4
 8005464:	1836      	adds	r6, r6, r0
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_IF_NONE_MATCH,  content_type-coap_pkt->content_type, "If-None-Match") /* hack to get a zero field */
 8005466:	7aab      	ldrb	r3, [r5, #10]
 8005468:	069c      	lsls	r4, r3, #26
 800546a:	d50b      	bpl.n	8005484 <coap_serialize_message+0x19c>
 800546c:	2100      	movs	r1, #0
 800546e:	4885      	ldr	r0, [pc, #532]	; (8005684 <coap_serialize_message+0x39c>)
 8005470:	f001 fa7c 	bl	800696c <iprintf>
 8005474:	1c39      	adds	r1, r7, #0
 8005476:	1c32      	adds	r2, r6, #0
 8005478:	2005      	movs	r0, #5
 800547a:	2300      	movs	r3, #0
 800547c:	f7ff fc30 	bl	8004ce0 <coap_serialize_int_option>
 8005480:	2705      	movs	r7, #5
 8005482:	1836      	adds	r6, r6, r0
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_OBSERVE,        observe, "Observe")
 8005484:	7aab      	ldrb	r3, [r5, #10]
 8005486:	065a      	lsls	r2, r3, #25
 8005488:	d50d      	bpl.n	80054a6 <coap_serialize_message+0x1be>
 800548a:	1c2c      	adds	r4, r5, #0
 800548c:	344c      	adds	r4, #76	; 0x4c
 800548e:	8821      	ldrh	r1, [r4, #0]
 8005490:	487d      	ldr	r0, [pc, #500]	; (8005688 <coap_serialize_message+0x3a0>)
 8005492:	f001 fa6b 	bl	800696c <iprintf>
 8005496:	1c39      	adds	r1, r7, #0
 8005498:	1c32      	adds	r2, r6, #0
 800549a:	8823      	ldrh	r3, [r4, #0]
 800549c:	2006      	movs	r0, #6
 800549e:	f7ff fc1f 	bl	8004ce0 <coap_serialize_int_option>
 80054a2:	2706      	movs	r7, #6
 80054a4:	1836      	adds	r6, r6, r0
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_URI_PORT,       uri_port, "Uri-Port")
 80054a6:	230a      	movs	r3, #10
 80054a8:	56eb      	ldrsb	r3, [r5, r3]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	da0b      	bge.n	80054c6 <coap_serialize_message+0x1de>
 80054ae:	8f29      	ldrh	r1, [r5, #56]	; 0x38
 80054b0:	4876      	ldr	r0, [pc, #472]	; (800568c <coap_serialize_message+0x3a4>)
 80054b2:	f001 fa5b 	bl	800696c <iprintf>
 80054b6:	1c39      	adds	r1, r7, #0
 80054b8:	1c32      	adds	r2, r6, #0
 80054ba:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 80054bc:	2007      	movs	r0, #7
 80054be:	f7ff fc0f 	bl	8004ce0 <coap_serialize_int_option>
 80054c2:	2707      	movs	r7, #7
 80054c4:	1836      	adds	r6, r6, r0
  COAP_SERIALIZE_STRING_OPTION( COAP_OPTION_LOCATION_PATH,  location_path, '/', "Location-Path")
 80054c6:	7aeb      	ldrb	r3, [r5, #11]
 80054c8:	07dc      	lsls	r4, r3, #31
 80054ca:	d510      	bpl.n	80054ee <coap_serialize_message+0x206>
 80054cc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80054ce:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80054d0:	486f      	ldr	r0, [pc, #444]	; (8005690 <coap_serialize_message+0x3a8>)
 80054d2:	f001 fa4b 	bl	800696c <iprintf>
 80054d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80054d8:	1c39      	adds	r1, r7, #0
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	232f      	movs	r3, #47	; 0x2f
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	1c32      	adds	r2, r6, #0
 80054e2:	2008      	movs	r0, #8
 80054e4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80054e6:	f7ff fc43 	bl	8004d70 <coap_serialize_array_option>
 80054ea:	2708      	movs	r7, #8
 80054ec:	1836      	adds	r6, r6, r0
  COAP_SERIALIZE_STRING_OPTION( COAP_OPTION_URI_PATH,       uri_path, '/', "Uri-Path")
 80054ee:	7aeb      	ldrb	r3, [r5, #11]
 80054f0:	071a      	lsls	r2, r3, #28
 80054f2:	d510      	bpl.n	8005516 <coap_serialize_message+0x22e>
 80054f4:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80054f6:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80054f8:	4866      	ldr	r0, [pc, #408]	; (8005694 <coap_serialize_message+0x3ac>)
 80054fa:	f001 fa37 	bl	800696c <iprintf>
 80054fe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005500:	1c39      	adds	r1, r7, #0
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	232f      	movs	r3, #47	; 0x2f
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	1c32      	adds	r2, r6, #0
 800550a:	200b      	movs	r0, #11
 800550c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800550e:	f7ff fc2f 	bl	8004d70 <coap_serialize_array_option>
 8005512:	270b      	movs	r7, #11
 8005514:	1836      	adds	r6, r6, r0
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_CONTENT_TYPE,   content_type, "Content-Format")
 8005516:	7aeb      	ldrb	r3, [r5, #11]
 8005518:	06dc      	lsls	r4, r3, #27
 800551a:	d50b      	bpl.n	8005534 <coap_serialize_message+0x24c>
 800551c:	7be9      	ldrb	r1, [r5, #15]
 800551e:	485e      	ldr	r0, [pc, #376]	; (8005698 <coap_serialize_message+0x3b0>)
 8005520:	f001 fa24 	bl	800696c <iprintf>
 8005524:	1c39      	adds	r1, r7, #0
 8005526:	1c32      	adds	r2, r6, #0
 8005528:	7beb      	ldrb	r3, [r5, #15]
 800552a:	200c      	movs	r0, #12
 800552c:	f7ff fbd8 	bl	8004ce0 <coap_serialize_int_option>
 8005530:	270c      	movs	r7, #12
 8005532:	1836      	adds	r6, r6, r0
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_MAX_AGE,        max_age, "Max-Age")
 8005534:	7aeb      	ldrb	r3, [r5, #11]
 8005536:	065a      	lsls	r2, r3, #25
 8005538:	d50b      	bpl.n	8005552 <coap_serialize_message+0x26a>
 800553a:	6929      	ldr	r1, [r5, #16]
 800553c:	4857      	ldr	r0, [pc, #348]	; (800569c <coap_serialize_message+0x3b4>)
 800553e:	f001 fa15 	bl	800696c <iprintf>
 8005542:	1c39      	adds	r1, r7, #0
 8005544:	1c32      	adds	r2, r6, #0
 8005546:	200e      	movs	r0, #14
 8005548:	692b      	ldr	r3, [r5, #16]
 800554a:	f7ff fbc9 	bl	8004ce0 <coap_serialize_int_option>
 800554e:	270e      	movs	r7, #14
 8005550:	1836      	adds	r6, r6, r0
  COAP_SERIALIZE_STRING_OPTION( COAP_OPTION_URI_QUERY,      uri_query, '&', "Uri-Query")
 8005552:	230b      	movs	r3, #11
 8005554:	56eb      	ldrsb	r3, [r5, r3]
 8005556:	2b00      	cmp	r3, #0
 8005558:	da16      	bge.n	8005588 <coap_serialize_message+0x2a0>
 800555a:	1c2c      	adds	r4, r5, #0
 800555c:	1c2b      	adds	r3, r5, #0
 800555e:	3388      	adds	r3, #136	; 0x88
 8005560:	3408      	adds	r4, #8
 8005562:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	484e      	ldr	r0, [pc, #312]	; (80056a0 <coap_serialize_message+0x3b8>)
 8005568:	9306      	str	r3, [sp, #24]
 800556a:	f001 f9ff 	bl	800696c <iprintf>
 800556e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005570:	9c06      	ldr	r4, [sp, #24]
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	2326      	movs	r3, #38	; 0x26
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	1c39      	adds	r1, r7, #0
 800557a:	1c32      	adds	r2, r6, #0
 800557c:	200f      	movs	r0, #15
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	f7ff fbf6 	bl	8004d70 <coap_serialize_array_option>
 8005584:	270f      	movs	r7, #15
 8005586:	1836      	adds	r6, r6, r0
  COAP_SERIALIZE_ACCEPT_OPTION( COAP_OPTION_ACCEPT,         accept, "Accept")
 8005588:	7b2b      	ldrb	r3, [r5, #12]
 800558a:	07da      	lsls	r2, r3, #31
 800558c:	d51a      	bpl.n	80055c4 <coap_serialize_message+0x2dc>
 800558e:	1c2c      	adds	r4, r5, #0
 8005590:	2300      	movs	r3, #0
 8005592:	3458      	adds	r4, #88	; 0x58
 8005594:	9306      	str	r3, [sp, #24]
 8005596:	e00f      	b.n	80055b8 <coap_serialize_message+0x2d0>
 8005598:	8821      	ldrh	r1, [r4, #0]
 800559a:	4842      	ldr	r0, [pc, #264]	; (80056a4 <coap_serialize_message+0x3bc>)
 800559c:	f001 f9e6 	bl	800696c <iprintf>
 80055a0:	1c32      	adds	r2, r6, #0
 80055a2:	8823      	ldrh	r3, [r4, #0]
 80055a4:	1c39      	adds	r1, r7, #0
 80055a6:	2010      	movs	r0, #16
 80055a8:	f7ff fb9a 	bl	8004ce0 <coap_serialize_int_option>
 80055ac:	9a06      	ldr	r2, [sp, #24]
 80055ae:	1836      	adds	r6, r6, r0
 80055b0:	3201      	adds	r2, #1
 80055b2:	9206      	str	r2, [sp, #24]
 80055b4:	3402      	adds	r4, #2
 80055b6:	2710      	movs	r7, #16
 80055b8:	1c2b      	adds	r3, r5, #0
 80055ba:	3357      	adds	r3, #87	; 0x57
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	9a06      	ldr	r2, [sp, #24]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	dbe9      	blt.n	8005598 <coap_serialize_message+0x2b0>
  COAP_SERIALIZE_STRING_OPTION( COAP_OPTION_LOCATION_QUERY, location_query, '&', "Location-Query")
 80055c4:	7b2b      	ldrb	r3, [r5, #12]
 80055c6:	06dc      	lsls	r4, r3, #27
 80055c8:	d510      	bpl.n	80055ec <coap_serialize_message+0x304>
 80055ca:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80055cc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80055ce:	4836      	ldr	r0, [pc, #216]	; (80056a8 <coap_serialize_message+0x3c0>)
 80055d0:	f001 f9cc 	bl	800696c <iprintf>
 80055d4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80055d6:	1c39      	adds	r1, r7, #0
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	2326      	movs	r3, #38	; 0x26
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	1c32      	adds	r2, r6, #0
 80055e0:	2014      	movs	r0, #20
 80055e2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80055e4:	f7ff fbc4 	bl	8004d70 <coap_serialize_array_option>
 80055e8:	2714      	movs	r7, #20
 80055ea:	1836      	adds	r6, r6, r0
  COAP_SERIALIZE_BLOCK_OPTION(  COAP_OPTION_BLOCK2,         block2, "Block2")
 80055ec:	230c      	movs	r3, #12
 80055ee:	56eb      	ldrsb	r3, [r5, r3]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	da2c      	bge.n	800564e <coap_serialize_message+0x366>
 80055f4:	1c2b      	adds	r3, r5, #0
 80055f6:	336c      	adds	r3, #108	; 0x6c
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <coap_serialize_message+0x31c>
 8005600:	4a2a      	ldr	r2, [pc, #168]	; (80056ac <coap_serialize_message+0x3c4>)
 8005602:	e000      	b.n	8005606 <coap_serialize_message+0x31e>
 8005604:	4a2a      	ldr	r2, [pc, #168]	; (80056b0 <coap_serialize_message+0x3c8>)
 8005606:	1c2b      	adds	r3, r5, #0
 8005608:	336e      	adds	r3, #110	; 0x6e
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	4829      	ldr	r0, [pc, #164]	; (80056b4 <coap_serialize_message+0x3cc>)
 800560e:	f001 f9ad 	bl	800696c <iprintf>
 8005612:	1c2b      	adds	r3, r5, #0
 8005614:	336c      	adds	r3, #108	; 0x6c
 8005616:	6eac      	ldr	r4, [r5, #104]	; 0x68
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	0124      	lsls	r4, r4, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <coap_serialize_message+0x33c>
 8005620:	2308      	movs	r3, #8
 8005622:	431c      	orrs	r4, r3
 8005624:	1c2b      	adds	r3, r5, #0
 8005626:	336e      	adds	r3, #110	; 0x6e
 8005628:	8818      	ldrh	r0, [r3, #0]
 800562a:	0900      	lsrs	r0, r0, #4
 800562c:	f7ff f958 	bl	80048e0 <coap_log_2>
 8005630:	230f      	movs	r3, #15
 8005632:	4018      	ands	r0, r3
 8005634:	4304      	orrs	r4, r0
 8005636:	1c21      	adds	r1, r4, #0
 8005638:	481f      	ldr	r0, [pc, #124]	; (80056b8 <coap_serialize_message+0x3d0>)
 800563a:	f001 f997 	bl	800696c <iprintf>
 800563e:	1c39      	adds	r1, r7, #0
 8005640:	1c32      	adds	r2, r6, #0
 8005642:	2017      	movs	r0, #23
 8005644:	1c23      	adds	r3, r4, #0
 8005646:	f7ff fb4b 	bl	8004ce0 <coap_serialize_int_option>
 800564a:	2717      	movs	r7, #23
 800564c:	1836      	adds	r6, r6, r0
  COAP_SERIALIZE_BLOCK_OPTION(  COAP_OPTION_BLOCK1,         block1, "Block1")
 800564e:	7b6b      	ldrb	r3, [r5, #13]
 8005650:	071a      	lsls	r2, r3, #28
 8005652:	d558      	bpl.n	8005706 <coap_serialize_message+0x41e>
 8005654:	1c2b      	adds	r3, r5, #0
 8005656:	3378      	adds	r3, #120	; 0x78
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	6f69      	ldr	r1, [r5, #116]	; 0x74
 800565c:	2b00      	cmp	r3, #0
 800565e:	d12d      	bne.n	80056bc <coap_serialize_message+0x3d4>
 8005660:	4a12      	ldr	r2, [pc, #72]	; (80056ac <coap_serialize_message+0x3c4>)
 8005662:	e02c      	b.n	80056be <coap_serialize_message+0x3d6>
 8005664:	0800b26f 	.word	0x0800b26f
 8005668:	0800b28b 	.word	0x0800b28b
 800566c:	0800b29a 	.word	0x0800b29a
 8005670:	0800b37f 	.word	0x0800b37f
 8005674:	0800b2a0 	.word	0x0800b2a0
 8005678:	0800b0e2 	.word	0x0800b0e2
 800567c:	0800b123 	.word	0x0800b123
 8005680:	0800b0a7 	.word	0x0800b0a7
 8005684:	0800b2bd 	.word	0x0800b2bd
 8005688:	0800b2d1 	.word	0x0800b2d1
 800568c:	0800b134 	.word	0x0800b134
 8005690:	0800b166 	.word	0x0800b166
 8005694:	0800b143 	.word	0x0800b143
 8005698:	0800b083 	.word	0x0800b083
 800569c:	0800b2df 	.word	0x0800b2df
 80056a0:	0800b154 	.word	0x0800b154
 80056a4:	0800b0d5 	.word	0x0800b0d5
 80056a8:	0800b17c 	.word	0x0800b17c
 80056ac:	0800bb68 	.word	0x0800bb68
 80056b0:	0800b1eb 	.word	0x0800b1eb
 80056b4:	0800b1ed 	.word	0x0800b1ed
 80056b8:	0800b2ed 	.word	0x0800b2ed
 80056bc:	4a43      	ldr	r2, [pc, #268]	; (80057cc <coap_serialize_message+0x4e4>)
 80056be:	1c2b      	adds	r3, r5, #0
 80056c0:	337a      	adds	r3, #122	; 0x7a
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	4842      	ldr	r0, [pc, #264]	; (80057d0 <coap_serialize_message+0x4e8>)
 80056c6:	f001 f951 	bl	800696c <iprintf>
 80056ca:	1c2b      	adds	r3, r5, #0
 80056cc:	3378      	adds	r3, #120	; 0x78
 80056ce:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	0124      	lsls	r4, r4, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <coap_serialize_message+0x3f4>
 80056d8:	2308      	movs	r3, #8
 80056da:	431c      	orrs	r4, r3
 80056dc:	1c2b      	adds	r3, r5, #0
 80056de:	337a      	adds	r3, #122	; 0x7a
 80056e0:	8818      	ldrh	r0, [r3, #0]
 80056e2:	0900      	lsrs	r0, r0, #4
 80056e4:	f7ff f8fc 	bl	80048e0 <coap_log_2>
 80056e8:	230f      	movs	r3, #15
 80056ea:	4018      	ands	r0, r3
 80056ec:	4304      	orrs	r4, r0
 80056ee:	1c21      	adds	r1, r4, #0
 80056f0:	4838      	ldr	r0, [pc, #224]	; (80057d4 <coap_serialize_message+0x4ec>)
 80056f2:	f001 f93b 	bl	800696c <iprintf>
 80056f6:	1c39      	adds	r1, r7, #0
 80056f8:	1c32      	adds	r2, r6, #0
 80056fa:	201b      	movs	r0, #27
 80056fc:	1c23      	adds	r3, r4, #0
 80056fe:	f7ff faef 	bl	8004ce0 <coap_serialize_int_option>
 8005702:	271b      	movs	r7, #27
 8005704:	1836      	adds	r6, r6, r0
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_SIZE,           size, "Size")
 8005706:	7b6b      	ldrb	r3, [r5, #13]
 8005708:	06dc      	lsls	r4, r3, #27
 800570a:	d50c      	bpl.n	8005726 <coap_serialize_message+0x43e>
 800570c:	1d2c      	adds	r4, r5, #4
 800570e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005710:	4831      	ldr	r0, [pc, #196]	; (80057d8 <coap_serialize_message+0x4f0>)
 8005712:	f001 f92b 	bl	800696c <iprintf>
 8005716:	1c39      	adds	r1, r7, #0
 8005718:	1c32      	adds	r2, r6, #0
 800571a:	201c      	movs	r0, #28
 800571c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800571e:	f7ff fadf 	bl	8004ce0 <coap_serialize_int_option>
 8005722:	271c      	movs	r7, #28
 8005724:	1836      	adds	r6, r6, r0
  COAP_SERIALIZE_STRING_OPTION( COAP_OPTION_PROXY_URI,      proxy_uri, '\0', "Proxy-Uri")
 8005726:	7bab      	ldrb	r3, [r5, #14]
 8005728:	071a      	lsls	r2, r3, #28
 800572a:	d50f      	bpl.n	800574c <coap_serialize_message+0x464>
 800572c:	6969      	ldr	r1, [r5, #20]
 800572e:	69aa      	ldr	r2, [r5, #24]
 8005730:	482a      	ldr	r0, [pc, #168]	; (80057dc <coap_serialize_message+0x4f4>)
 8005732:	f001 f91b 	bl	800696c <iprintf>
 8005736:	696b      	ldr	r3, [r5, #20]
 8005738:	1c32      	adds	r2, r6, #0
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	2300      	movs	r3, #0
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	2023      	movs	r0, #35	; 0x23
 8005742:	1c39      	adds	r1, r7, #0
 8005744:	69ab      	ldr	r3, [r5, #24]
 8005746:	f7ff fb13 	bl	8004d70 <coap_serialize_array_option>
 800574a:	1836      	adds	r6, r6, r0

  PRINTF("-Done serializing at %p----\n", option);
 800574c:	4824      	ldr	r0, [pc, #144]	; (80057e0 <coap_serialize_message+0x4f8>)
 800574e:	1c31      	adds	r1, r6, #0
 8005750:	f001 f90c 	bl	800696c <iprintf>

  /* Pack payload */
  if ((option - coap_pkt->buffer)<=COAP_MAX_HEADER_SIZE)
 8005754:	682b      	ldr	r3, [r5, #0]
 8005756:	1af3      	subs	r3, r6, r3
 8005758:	2b43      	cmp	r3, #67	; 0x43
 800575a:	dc2e      	bgt.n	80057ba <coap_serialize_message+0x4d2>
  {
    /* Payload marker */
    if (coap_pkt->payload_len)
 800575c:	1c2b      	adds	r3, r5, #0
 800575e:	338e      	adds	r3, #142	; 0x8e
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <coap_serialize_message+0x486>
    {
      *option = 0xFF;
 8005766:	2301      	movs	r3, #1
 8005768:	425b      	negs	r3, r3
 800576a:	7033      	strb	r3, [r6, #0]
      ++option;
 800576c:	3601      	adds	r6, #1
    }

    memmove(option, coap_pkt->payload, coap_pkt->payload_len);
 800576e:	1c2b      	adds	r3, r5, #0
 8005770:	1c2c      	adds	r4, r5, #0
 8005772:	3390      	adds	r3, #144	; 0x90
 8005774:	348e      	adds	r4, #142	; 0x8e
 8005776:	6819      	ldr	r1, [r3, #0]
 8005778:	8822      	ldrh	r2, [r4, #0]
 800577a:	1c30      	adds	r0, r6, #0
 800577c:	f001 fb3e 	bl	8006dfc <memmove>
    coap_pkt->buffer = NULL;
    coap_error_message = "Serialized header exceeds COAP_MAX_HEADER_SIZE";
    return 0;
  }

  PRINTF("-Done %u B (header len %u, payload len %u)-\n", coap_pkt->payload_len + option - buffer, option - buffer, coap_pkt->payload_len);
 8005780:	9a07      	ldr	r2, [sp, #28]
 8005782:	8823      	ldrh	r3, [r4, #0]
 8005784:	1ab7      	subs	r7, r6, r2
 8005786:	18f6      	adds	r6, r6, r3
 8005788:	1ab1      	subs	r1, r6, r2
 800578a:	4816      	ldr	r0, [pc, #88]	; (80057e4 <coap_serialize_message+0x4fc>)
 800578c:	1c3a      	adds	r2, r7, #0
 800578e:	f001 f8ed 	bl	800696c <iprintf>

  PRINTF("Dump [0x%02X %02X %02X %02X  %02X %02X %02X %02X]\n",
 8005792:	6828      	ldr	r0, [r5, #0]
 8005794:	78c5      	ldrb	r5, [r0, #3]
 8005796:	7801      	ldrb	r1, [r0, #0]
 8005798:	7842      	ldrb	r2, [r0, #1]
 800579a:	7883      	ldrb	r3, [r0, #2]
 800579c:	9500      	str	r5, [sp, #0]
 800579e:	7905      	ldrb	r5, [r0, #4]
 80057a0:	9501      	str	r5, [sp, #4]
 80057a2:	7945      	ldrb	r5, [r0, #5]
 80057a4:	9502      	str	r5, [sp, #8]
 80057a6:	7985      	ldrb	r5, [r0, #6]
 80057a8:	9503      	str	r5, [sp, #12]
 80057aa:	79c0      	ldrb	r0, [r0, #7]
 80057ac:	9004      	str	r0, [sp, #16]
 80057ae:	480e      	ldr	r0, [pc, #56]	; (80057e8 <coap_serialize_message+0x500>)
 80057b0:	f001 f8dc 	bl	800696c <iprintf>
      coap_pkt->buffer[5],
      coap_pkt->buffer[6],
      coap_pkt->buffer[7]
    );

  return (option - buffer) + coap_pkt->payload_len; /* packet length */
 80057b4:	8820      	ldrh	r0, [r4, #0]
 80057b6:	1838      	adds	r0, r7, r0
 80057b8:	e005      	b.n	80057c6 <coap_serialize_message+0x4de>
    memmove(option, coap_pkt->payload, coap_pkt->payload_len);
  }
  else
  {
    /* An error occured. Caller must check for !=0. */
    coap_pkt->buffer = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	602b      	str	r3, [r5, #0]
    coap_error_message = "Serialized header exceeds COAP_MAX_HEADER_SIZE";
 80057be:	4a0b      	ldr	r2, [pc, #44]	; (80057ec <coap_serialize_message+0x504>)
 80057c0:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <coap_serialize_message+0x508>)
 80057c2:	2000      	movs	r0, #0
 80057c4:	601a      	str	r2, [r3, #0]
      coap_pkt->buffer[6],
      coap_pkt->buffer[7]
    );

  return (option - buffer) + coap_pkt->payload_len; /* packet length */
}
 80057c6:	b009      	add	sp, #36	; 0x24
 80057c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	0800b1eb 	.word	0x0800b1eb
 80057d0:	0800b208 	.word	0x0800b208
 80057d4:	0800b304 	.word	0x0800b304
 80057d8:	0800b31b 	.word	0x0800b31b
 80057dc:	0800b326 	.word	0x0800b326
 80057e0:	0800b338 	.word	0x0800b338
 80057e4:	0800b355 	.word	0x0800b355
 80057e8:	0800b382 	.word	0x0800b382
 80057ec:	0800b3b5 	.word	0x0800b3b5
 80057f0:	2000057c 	.word	0x2000057c

080057f4 <coap_send_message>:
/*-----------------------------------------------------------------------------------*/
void
coap_send_message(uip_ipaddr_t *addr, uint16_t port, uint8_t *data, uint16_t length)
{
 80057f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Configure connection to reply to client */
  uip_ipaddr_copy(&udp_conn->ripaddr, addr);
 80057f6:	4d0f      	ldr	r5, [pc, #60]	; (8005834 <coap_send_message+0x40>)
  return (option - buffer) + coap_pkt->payload_len; /* packet length */
}
/*-----------------------------------------------------------------------------------*/
void
coap_send_message(uip_ipaddr_t *addr, uint16_t port, uint8_t *data, uint16_t length)
{
 80057f8:	b083      	sub	sp, #12
  /* Configure connection to reply to client */
  uip_ipaddr_copy(&udp_conn->ripaddr, addr);
 80057fa:	682c      	ldr	r4, [r5, #0]
  return (option - buffer) + coap_pkt->payload_len; /* packet length */
}
/*-----------------------------------------------------------------------------------*/
void
coap_send_message(uip_ipaddr_t *addr, uint16_t port, uint8_t *data, uint16_t length)
{
 80057fc:	1c06      	adds	r6, r0, #0
 80057fe:	9100      	str	r1, [sp, #0]
 8005800:	9201      	str	r2, [sp, #4]
  /* Configure connection to reply to client */
  uip_ipaddr_copy(&udp_conn->ripaddr, addr);
 8005802:	1c31      	adds	r1, r6, #0
 8005804:	1c20      	adds	r0, r4, #0
 8005806:	2204      	movs	r2, #4
  return (option - buffer) + coap_pkt->payload_len; /* packet length */
}
/*-----------------------------------------------------------------------------------*/
void
coap_send_message(uip_ipaddr_t *addr, uint16_t port, uint8_t *data, uint16_t length)
{
 8005808:	1c1f      	adds	r7, r3, #0
  /* Configure connection to reply to client */
  uip_ipaddr_copy(&udp_conn->ripaddr, addr);
 800580a:	f001 faec 	bl	8006de6 <memcpy>
  udp_conn->rport = port;
 800580e:	466b      	mov	r3, sp
 8005810:	881b      	ldrh	r3, [r3, #0]

  uip_udp_packet_send(udp_conn, data, length);
 8005812:	1c3a      	adds	r2, r7, #0
void
coap_send_message(uip_ipaddr_t *addr, uint16_t port, uint8_t *data, uint16_t length)
{
  /* Configure connection to reply to client */
  uip_ipaddr_copy(&udp_conn->ripaddr, addr);
  udp_conn->rport = port;
 8005814:	80e3      	strh	r3, [r4, #6]

  uip_udp_packet_send(udp_conn, data, length);
 8005816:	9901      	ldr	r1, [sp, #4]
 8005818:	1c20      	adds	r0, r4, #0
 800581a:	f7ff f83d 	bl	8004898 <uip_udp_packet_send>
  PRINTF("-sent UDP datagram (%u)-\n", length);
 800581e:	1c39      	adds	r1, r7, #0
 8005820:	4805      	ldr	r0, [pc, #20]	; (8005838 <coap_send_message+0x44>)
 8005822:	f001 f8a3 	bl	800696c <iprintf>

  /* Restore server connection to allow data from any node */
  memset(&udp_conn->ripaddr, 0, sizeof(udp_conn->ripaddr));
 8005826:	682a      	ldr	r2, [r5, #0]
 8005828:	2300      	movs	r3, #0
 800582a:	6013      	str	r3, [r2, #0]
  udp_conn->rport = 0;
 800582c:	682a      	ldr	r2, [r5, #0]
}
 800582e:	b003      	add	sp, #12
  uip_udp_packet_send(udp_conn, data, length);
  PRINTF("-sent UDP datagram (%u)-\n", length);

  /* Restore server connection to allow data from any node */
  memset(&udp_conn->ripaddr, 0, sizeof(udp_conn->ripaddr));
  udp_conn->rport = 0;
 8005830:	80d3      	strh	r3, [r2, #6]
}
 8005832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005834:	200011d8 	.word	0x200011d8
 8005838:	0800b3e4 	.word	0x0800b3e4

0800583c <coap_init_connection>:
/*-----------------------------------------------------------------------------------*/
/*- MEASSAGE SENDING ----------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
void
coap_init_connection(uint16_t port)
{
 800583c:	b510      	push	{r4, lr}
  /* new connection with remote host */
  udp_conn = udp_new(NULL, 0, NULL);
 800583e:	2200      	movs	r2, #0
/*-----------------------------------------------------------------------------------*/
/*- MEASSAGE SENDING ----------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
void
coap_init_connection(uint16_t port)
{
 8005840:	1c04      	adds	r4, r0, #0
  /* new connection with remote host */
  udp_conn = udp_new(NULL, 0, NULL);
 8005842:	2100      	movs	r1, #0
 8005844:	2000      	movs	r0, #0
 8005846:	f7ff f813 	bl	8004870 <udp_new>
 800584a:	4b07      	ldr	r3, [pc, #28]	; (8005868 <coap_init_connection+0x2c>)
  udp_bind(udp_conn, port);
 800584c:	8084      	strh	r4, [r0, #4]
/*-----------------------------------------------------------------------------------*/
void
coap_init_connection(uint16_t port)
{
  /* new connection with remote host */
  udp_conn = udp_new(NULL, 0, NULL);
 800584e:	6018      	str	r0, [r3, #0]
  udp_bind(udp_conn, port);
  PRINTF("Listening on port %u\n", uip_ntohs(udp_conn->lport));
 8005850:	1c20      	adds	r0, r4, #0
 8005852:	f7fd fb53 	bl	8002efc <uip_htons>
 8005856:	1c01      	adds	r1, r0, #0
 8005858:	4804      	ldr	r0, [pc, #16]	; (800586c <coap_init_connection+0x30>)
 800585a:	f001 f887 	bl	800696c <iprintf>

  /* Initialize transaction ID. */
  current_mid = random_rand();
 800585e:	f7ff f815 	bl	800488c <random_rand>
 8005862:	4b03      	ldr	r3, [pc, #12]	; (8005870 <coap_init_connection+0x34>)
 8005864:	8018      	strh	r0, [r3, #0]
}
 8005866:	bd10      	pop	{r4, pc}
 8005868:	200011d8 	.word	0x200011d8
 800586c:	0800b3fe 	.word	0x0800b3fe
 8005870:	200011de 	.word	0x200011de

08005874 <coap_set_service_callback>:
}
/*----------------------------------------------------------------------------*/
void
coap_set_service_callback(service_callback_t callback)
{
  service_cbk = callback;
 8005874:	4b01      	ldr	r3, [pc, #4]	; (800587c <coap_set_service_callback+0x8>)
 8005876:	6018      	str	r0, [r3, #0]
}
 8005878:	4770      	bx	lr
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	20001308 	.word	0x20001308

08005880 <coap_get_rest_method>:
/*----------------------------------------------------------------------------*/
rest_resource_flags_t
coap_get_rest_method(void *packet)
{
 8005880:	7980      	ldrb	r0, [r0, #6]
 8005882:	2301      	movs	r3, #1
 8005884:	3801      	subs	r0, #1
 8005886:	4083      	lsls	r3, r0
 8005888:	b2d8      	uxtb	r0, r3
  return (rest_resource_flags_t)(1 << (((coap_packet_t *)packet)->code - 1));
}
 800588a:	4770      	bx	lr

0800588c <process_thread_coap_receiver>:
      *offset += preferred_size;
    }
}
/*----------------------------------------------------------------------------*/
PROCESS_THREAD(coap_receiver, ev, data)
{
 800588c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800588e:	b095      	sub	sp, #84	; 0x54
 8005890:	900f      	str	r0, [sp, #60]	; 0x3c
  PROCESS_BEGIN();
 8005892:	8802      	ldrh	r2, [r0, #0]
 8005894:	2a00      	cmp	r2, #0
 8005896:	d005      	beq.n	80058a4 <process_thread_coap_receiver+0x18>
 8005898:	23fd      	movs	r3, #253	; 0xfd
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	429a      	cmp	r2, r3
 800589e:	d000      	beq.n	80058a2 <process_thread_coap_receiver+0x16>
 80058a0:	e272      	b.n	8005d88 <process_thread_coap_receiver+0x4fc>
 80058a2:	e010      	b.n	80058c6 <process_thread_coap_receiver+0x3a>
  PRINTF("Starting CoAP-13 receiver...\n");
 80058a4:	48ba      	ldr	r0, [pc, #744]	; (8005b90 <process_thread_coap_receiver+0x304>)
 80058a6:	f001 f861 	bl	800696c <iprintf>

  rest_activate_resource(&resource_well_known_core);
 80058aa:	48ba      	ldr	r0, [pc, #744]	; (8005b94 <process_thread_coap_receiver+0x308>)
 80058ac:	f7fe fdb6 	bl	800441c <rest_activate_resource>

  coap_register_as_transaction_handler();
 80058b0:	f000 fd80 	bl	80063b4 <coap_register_as_transaction_handler>
  coap_init_connection(SERVER_LISTEN_PORT);
 80058b4:	48b8      	ldr	r0, [pc, #736]	; (8005b98 <process_thread_coap_receiver+0x30c>)
 80058b6:	f7ff ffc1 	bl	800583c <coap_init_connection>

  while(1) {
    PROCESS_YIELD();
 80058ba:	23fd      	movs	r3, #253	; 0xfd
 80058bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	8013      	strh	r3, [r2, #0]
 80058c2:	2001      	movs	r0, #1
 80058c4:	e264      	b.n	8005d90 <process_thread_coap_receiver+0x504>

    if(ev == tcpip_event) {
 80058c6:	4bb5      	ldr	r3, [pc, #724]	; (8005b9c <process_thread_coap_receiver+0x310>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	428b      	cmp	r3, r1
 80058cc:	d000      	beq.n	80058d0 <process_thread_coap_receiver+0x44>
 80058ce:	e255      	b.n	8005d7c <process_thread_coap_receiver+0x4f0>
/*----------------------------------------------------------------------------*/
static
int
coap_receive(void)
{
  coap_error_code = NO_ERROR;
 80058d0:	4bb3      	ldr	r3, [pc, #716]	; (8005ba0 <process_thread_coap_receiver+0x314>)

  PRINTF("handle_incoming_data(): received uip_datalen=%u \n",(uint16_t)uip_datalen());
 80058d2:	4cb4      	ldr	r4, [pc, #720]	; (8005ba4 <process_thread_coap_receiver+0x318>)
/*----------------------------------------------------------------------------*/
static
int
coap_receive(void)
{
  coap_error_code = NO_ERROR;
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]

  PRINTF("handle_incoming_data(): received uip_datalen=%u \n",(uint16_t)uip_datalen());
 80058d8:	8821      	ldrh	r1, [r4, #0]
 80058da:	48b3      	ldr	r0, [pc, #716]	; (8005ba8 <process_thread_coap_receiver+0x31c>)
 80058dc:	f001 f846 	bl	800696c <iprintf>
  /* Static declaration reduces stack peaks and program code size. */
  static coap_packet_t message[1]; /* This way the packet can be treated as pointer as usual. */
  static coap_packet_t response[1];
  static coap_transaction_t *transaction = NULL;

  if (uip_newdata()) {
 80058e0:	4bb2      	ldr	r3, [pc, #712]	; (8005bac <process_thread_coap_receiver+0x320>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	079a      	lsls	r2, r3, #30
 80058e6:	d5e8      	bpl.n	80058ba <process_thread_coap_receiver+0x2e>

    PRINTF("receiving UDP datagram from: ");
 80058e8:	48b1      	ldr	r0, [pc, #708]	; (8005bb0 <process_thread_coap_receiver+0x324>)
 80058ea:	f001 f83f 	bl	800696c <iprintf>
    PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
 80058ee:	4db1      	ldr	r5, [pc, #708]	; (8005bb4 <process_thread_coap_receiver+0x328>)
 80058f0:	7f68      	ldrb	r0, [r5, #29]
 80058f2:	7ea9      	ldrb	r1, [r5, #26]
 80058f4:	7eea      	ldrb	r2, [r5, #27]
 80058f6:	7f2b      	ldrb	r3, [r5, #28]
 80058f8:	9000      	str	r0, [sp, #0]
 80058fa:	7fa8      	ldrb	r0, [r5, #30]
 80058fc:	9001      	str	r0, [sp, #4]
 80058fe:	7fe8      	ldrb	r0, [r5, #31]
 8005900:	9002      	str	r0, [sp, #8]
 8005902:	1c68      	adds	r0, r5, #1
 8005904:	7fc0      	ldrb	r0, [r0, #31]
 8005906:	9003      	str	r0, [sp, #12]
 8005908:	1ca8      	adds	r0, r5, #2
 800590a:	7fc0      	ldrb	r0, [r0, #31]
 800590c:	9004      	str	r0, [sp, #16]
 800590e:	1ce8      	adds	r0, r5, #3
 8005910:	7fc0      	ldrb	r0, [r0, #31]
 8005912:	9005      	str	r0, [sp, #20]
 8005914:	1d28      	adds	r0, r5, #4
 8005916:	7fc0      	ldrb	r0, [r0, #31]
 8005918:	9006      	str	r0, [sp, #24]
 800591a:	1d68      	adds	r0, r5, #5
 800591c:	7fc0      	ldrb	r0, [r0, #31]
 800591e:	9007      	str	r0, [sp, #28]
 8005920:	1da8      	adds	r0, r5, #6
 8005922:	7fc0      	ldrb	r0, [r0, #31]
 8005924:	9008      	str	r0, [sp, #32]
 8005926:	1de8      	adds	r0, r5, #7
 8005928:	7fc0      	ldrb	r0, [r0, #31]
 800592a:	9009      	str	r0, [sp, #36]	; 0x24
 800592c:	1c28      	adds	r0, r5, #0
 800592e:	3008      	adds	r0, #8
 8005930:	7fc0      	ldrb	r0, [r0, #31]
 8005932:	900a      	str	r0, [sp, #40]	; 0x28
 8005934:	1c28      	adds	r0, r5, #0
 8005936:	3028      	adds	r0, #40	; 0x28
 8005938:	7800      	ldrb	r0, [r0, #0]
 800593a:	900b      	str	r0, [sp, #44]	; 0x2c
 800593c:	1c28      	adds	r0, r5, #0
 800593e:	3029      	adds	r0, #41	; 0x29
 8005940:	7800      	ldrb	r0, [r0, #0]
 8005942:	900c      	str	r0, [sp, #48]	; 0x30
 8005944:	489c      	ldr	r0, [pc, #624]	; (8005bb8 <process_thread_coap_receiver+0x32c>)
 8005946:	f001 f811 	bl	800696c <iprintf>
    PRINTF(":%u\n  Length: %u\n  Data: ", uip_ntohs(UIP_UDP_BUF->srcport), uip_datalen() );
 800594a:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 800594c:	f7fd fad6 	bl	8002efc <uip_htons>
 8005950:	8822      	ldrh	r2, [r4, #0]
 8005952:	1c01      	adds	r1, r0, #0
 8005954:	4899      	ldr	r0, [pc, #612]	; (8005bbc <process_thread_coap_receiver+0x330>)
 8005956:	f001 f809 	bl	800696c <iprintf>
 800595a:	2400      	movs	r4, #0
 800595c:	e012      	b.n	8005984 <process_thread_coap_receiver+0xf8>
 800595e:	2607      	movs	r6, #7
    PRINTBITS(uip_appdata, uip_datalen());
 8005960:	4b97      	ldr	r3, [pc, #604]	; (8005bc0 <process_thread_coap_receiver+0x334>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	5d1b      	ldrb	r3, [r3, r4]
 8005966:	4133      	asrs	r3, r6
 8005968:	07da      	lsls	r2, r3, #31
 800596a:	d401      	bmi.n	8005970 <process_thread_coap_receiver+0xe4>
 800596c:	2130      	movs	r1, #48	; 0x30
 800596e:	e000      	b.n	8005972 <process_thread_coap_receiver+0xe6>
 8005970:	2131      	movs	r1, #49	; 0x31
 8005972:	4894      	ldr	r0, [pc, #592]	; (8005bc4 <process_thread_coap_receiver+0x338>)
 8005974:	f000 fffa 	bl	800696c <iprintf>
 8005978:	3e01      	subs	r6, #1
 800597a:	d2f1      	bcs.n	8005960 <process_thread_coap_receiver+0xd4>
 800597c:	4892      	ldr	r0, [pc, #584]	; (8005bc8 <process_thread_coap_receiver+0x33c>)
 800597e:	f000 fff5 	bl	800696c <iprintf>
 8005982:	3401      	adds	r4, #1
 8005984:	4e87      	ldr	r6, [pc, #540]	; (8005ba4 <process_thread_coap_receiver+0x318>)
 8005986:	8833      	ldrh	r3, [r6, #0]
 8005988:	429c      	cmp	r4, r3
 800598a:	dbe8      	blt.n	800595e <process_thread_coap_receiver+0xd2>
    PRINTF("\n");
 800598c:	488f      	ldr	r0, [pc, #572]	; (8005bcc <process_thread_coap_receiver+0x340>)
 800598e:	f000 ffed 	bl	800696c <iprintf>

    coap_error_code = coap_parse_message(message, uip_appdata, uip_datalen());
 8005992:	4c8f      	ldr	r4, [pc, #572]	; (8005bd0 <process_thread_coap_receiver+0x344>)
 8005994:	4b8a      	ldr	r3, [pc, #552]	; (8005bc0 <process_thread_coap_receiver+0x334>)
 8005996:	8832      	ldrh	r2, [r6, #0]
 8005998:	1c20      	adds	r0, r4, #0
 800599a:	6819      	ldr	r1, [r3, #0]
 800599c:	f7ff fa5c 	bl	8004e58 <coap_parse_message>
 80059a0:	4f7f      	ldr	r7, [pc, #508]	; (8005ba0 <process_thread_coap_receiver+0x314>)
 80059a2:	1c06      	adds	r6, r0, #0
 80059a4:	7038      	strb	r0, [r7, #0]

    if (coap_error_code==NO_ERROR)
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d000      	beq.n	80059ac <process_thread_coap_receiver+0x120>
 80059aa:	e19b      	b.n	8005ce4 <process_thread_coap_receiver+0x458>
    {

      /*TODO duplicates suppression, if required by application */

      PRINTF("  Parsed: v %u, t %u, tkl %u, c %u, mid %u\n", message->version, message->type, message->token_len, message->code, message->mid);
 80059ac:	79a0      	ldrb	r0, [r4, #6]
 80059ae:	1c23      	adds	r3, r4, #0
 80059b0:	334e      	adds	r3, #78	; 0x4e
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	7921      	ldrb	r1, [r4, #4]
 80059b6:	7962      	ldrb	r2, [r4, #5]
 80059b8:	9000      	str	r0, [sp, #0]
 80059ba:	8920      	ldrh	r0, [r4, #8]
 80059bc:	9001      	str	r0, [sp, #4]
 80059be:	4885      	ldr	r0, [pc, #532]	; (8005bd4 <process_thread_coap_receiver+0x348>)
 80059c0:	f000 ffd4 	bl	800696c <iprintf>
      PRINTF("  URL: %.*s\n", message->uri_path_len, message->uri_path);
 80059c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80059c6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80059c8:	4883      	ldr	r0, [pc, #524]	; (8005bd8 <process_thread_coap_receiver+0x34c>)
 80059ca:	f000 ffcf 	bl	800696c <iprintf>
      PRINTF("  Payload: %.*s\n", message->payload_len, message->payload);
 80059ce:	1c23      	adds	r3, r4, #0
 80059d0:	338e      	adds	r3, #142	; 0x8e
 80059d2:	8819      	ldrh	r1, [r3, #0]
 80059d4:	3302      	adds	r3, #2
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	4880      	ldr	r0, [pc, #512]	; (8005bdc <process_thread_coap_receiver+0x350>)
 80059da:	f000 ffc7 	bl	800696c <iprintf>

      /* Handle requests. */
      if (message->code >= COAP_GET && message->code <= COAP_DELETE)
 80059de:	79a3      	ldrb	r3, [r4, #6]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d900      	bls.n	80059ea <process_thread_coap_receiver+0x15e>
 80059e8:	e14c      	b.n	8005c84 <process_thread_coap_receiver+0x3f8>
      {
        /* Use transaction buffer for response to confirmable request. */
        if ( (transaction = coap_new_transaction(message->mid, &UIP_IP_BUF->srcipaddr, UIP_UDP_BUF->srcport)) )
 80059ea:	8920      	ldrh	r0, [r4, #8]
 80059ec:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 80059ee:	497c      	ldr	r1, [pc, #496]	; (8005be0 <process_thread_coap_receiver+0x354>)
 80059f0:	f000 fd6a 	bl	80064c8 <coap_new_transaction>
 80059f4:	4b7b      	ldr	r3, [pc, #492]	; (8005be4 <process_thread_coap_receiver+0x358>)
 80059f6:	6018      	str	r0, [r3, #0]
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d100      	bne.n	80059fe <process_thread_coap_receiver+0x172>
 80059fc:	e13c      	b.n	8005c78 <process_thread_coap_receiver+0x3ec>
        {
          uint32_t block_num = 0;
          uint16_t block_size = REST_MAX_CHUNK_SIZE;
 80059fe:	466b      	mov	r3, sp
 8005a00:	334e      	adds	r3, #78	; 0x4e
 8005a02:	2280      	movs	r2, #128	; 0x80
      if (message->code >= COAP_GET && message->code <= COAP_DELETE)
      {
        /* Use transaction buffer for response to confirmable request. */
        if ( (transaction = coap_new_transaction(message->mid, &UIP_IP_BUF->srcipaddr, UIP_UDP_BUF->srcport)) )
        {
          uint32_t block_num = 0;
 8005a04:	9612      	str	r6, [sp, #72]	; 0x48
          uint16_t block_size = REST_MAX_CHUNK_SIZE;
          uint32_t block_offset = 0;
 8005a06:	9611      	str	r6, [sp, #68]	; 0x44
          int32_t new_offset = 0;
 8005a08:	9610      	str	r6, [sp, #64]	; 0x40
      {
        /* Use transaction buffer for response to confirmable request. */
        if ( (transaction = coap_new_transaction(message->mid, &UIP_IP_BUF->srcipaddr, UIP_UDP_BUF->srcport)) )
        {
          uint32_t block_num = 0;
          uint16_t block_size = REST_MAX_CHUNK_SIZE;
 8005a0a:	801a      	strh	r2, [r3, #0]
          uint32_t block_offset = 0;
          int32_t new_offset = 0;

          /* prepare response */
          if (message->type==COAP_TYPE_CON)
 8005a0c:	7963      	ldrb	r3, [r4, #5]
 8005a0e:	4e76      	ldr	r6, [pc, #472]	; (8005be8 <process_thread_coap_receiver+0x35c>)
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d103      	bne.n	8005a1c <process_thread_coap_receiver+0x190>
          {
            /* Reliable CON requests are answered with an ACK. */
            coap_init_message(response, COAP_TYPE_ACK, CONTENT_2_05, message->mid);
 8005a14:	8923      	ldrh	r3, [r4, #8]
 8005a16:	1c30      	adds	r0, r6, #0
 8005a18:	2102      	movs	r1, #2
 8005a1a:	e004      	b.n	8005a26 <process_thread_coap_receiver+0x19a>
          }
          else
          {
            /* Unreliable NON requests are answered with a NON as well. */
            coap_init_message(response, COAP_TYPE_NON, CONTENT_2_05, coap_get_mid());
 8005a1c:	f7fe ff88 	bl	8004930 <coap_get_mid>
 8005a20:	2101      	movs	r1, #1
 8005a22:	1c03      	adds	r3, r0, #0
 8005a24:	1c30      	adds	r0, r6, #0
 8005a26:	2245      	movs	r2, #69	; 0x45
 8005a28:	f7ff f91b 	bl	8004c62 <coap_init_message>
          }

          /* mirror token */
          if (message->token_len)
 8005a2c:	4968      	ldr	r1, [pc, #416]	; (8005bd0 <process_thread_coap_receiver+0x344>)
 8005a2e:	1c0b      	adds	r3, r1, #0
 8005a30:	334e      	adds	r3, #78	; 0x4e
 8005a32:	781a      	ldrb	r2, [r3, #0]
 8005a34:	2a00      	cmp	r2, #0
 8005a36:	d003      	beq.n	8005a40 <process_thread_coap_receiver+0x1b4>
          {
              coap_set_header_token(response, message->token, message->token_len);
 8005a38:	314f      	adds	r1, #79	; 0x4f
 8005a3a:	486b      	ldr	r0, [pc, #428]	; (8005be8 <process_thread_coap_receiver+0x35c>)
 8005a3c:	f7ff f899 	bl	8004b72 <coap_set_header_token>
          }

          /* get offset for blockwise transfers */
          if (coap_get_header_block2(message, &block_num, NULL, &block_size, &block_offset))
 8005a40:	466c      	mov	r4, sp
 8005a42:	ab11      	add	r3, sp, #68	; 0x44
 8005a44:	344e      	adds	r4, #78	; 0x4e
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	4861      	ldr	r0, [pc, #388]	; (8005bd0 <process_thread_coap_receiver+0x344>)
 8005a4a:	a912      	add	r1, sp, #72	; 0x48
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	1c23      	adds	r3, r4, #0
 8005a50:	f7fe ffe6 	bl	8004a20 <coap_get_header_block2>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d00f      	beq.n	8005a78 <process_thread_coap_receiver+0x1ec>
          {
              PRINTF("Blockwise: block request %lu (%u/%u) @ %lu bytes\n", block_num, block_size, REST_MAX_CHUNK_SIZE, block_offset);
 8005a58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a5a:	8822      	ldrh	r2, [r4, #0]
 8005a5c:	4863      	ldr	r0, [pc, #396]	; (8005bec <process_thread_coap_receiver+0x360>)
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005a62:	2380      	movs	r3, #128	; 0x80
 8005a64:	f000 ff82 	bl	800696c <iprintf>
              block_size = MIN(block_size, REST_MAX_CHUNK_SIZE);
 8005a68:	8823      	ldrh	r3, [r4, #0]
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	2a80      	cmp	r2, #128	; 0x80
 8005a6e:	d900      	bls.n	8005a72 <process_thread_coap_receiver+0x1e6>
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	8023      	strh	r3, [r4, #0]
              new_offset = block_offset;
 8005a74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a76:	9310      	str	r3, [sp, #64]	; 0x40
          }

          /* Invoke resource handler. */
          if (service_cbk)
 8005a78:	4b5d      	ldr	r3, [pc, #372]	; (8005bf0 <process_thread_coap_receiver+0x364>)
 8005a7a:	681e      	ldr	r6, [r3, #0]
 8005a7c:	2e00      	cmp	r6, #0
 8005a7e:	d100      	bne.n	8005a82 <process_thread_coap_receiver+0x1f6>
 8005a80:	e0f4      	b.n	8005c6c <process_thread_coap_receiver+0x3e0>
          {
            /* Call REST framework and check if found and allowed. */
            if (service_cbk(message, response, transaction->packet+COAP_MAX_HEADER_SIZE, block_size, &new_offset))
 8005a82:	4b58      	ldr	r3, [pc, #352]	; (8005be4 <process_thread_coap_receiver+0x358>)
 8005a84:	4f52      	ldr	r7, [pc, #328]	; (8005bd0 <process_thread_coap_receiver+0x344>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	4c57      	ldr	r4, [pc, #348]	; (8005be8 <process_thread_coap_receiver+0x35c>)
 8005a8a:	466b      	mov	r3, sp
 8005a8c:	a910      	add	r1, sp, #64	; 0x40
 8005a8e:	334e      	adds	r3, #78	; 0x4e
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	326d      	adds	r2, #109	; 0x6d
 8005a94:	9100      	str	r1, [sp, #0]
 8005a96:	1c38      	adds	r0, r7, #0
 8005a98:	1c21      	adds	r1, r4, #0
 8005a9a:	47b0      	blx	r6
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	d100      	bne.n	8005aa2 <process_thread_coap_receiver+0x216>
 8005aa0:	e0d1      	b.n	8005c46 <process_thread_coap_receiver+0x3ba>
            {
              if (coap_error_code==NO_ERROR)
 8005aa2:	4e3f      	ldr	r6, [pc, #252]	; (8005ba0 <process_thread_coap_receiver+0x314>)
 8005aa4:	7833      	ldrb	r3, [r6, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d000      	beq.n	8005aac <process_thread_coap_receiver+0x220>
 8005aaa:	e0cc      	b.n	8005c46 <process_thread_coap_receiver+0x3ba>
              {
                /* Apply blockwise transfers. */
                if ( IS_OPTION(message, COAP_OPTION_BLOCK1) && response->code<BAD_REQUEST_4_00 && !IS_OPTION(response, COAP_OPTION_BLOCK1) )
 8005aac:	7b7a      	ldrb	r2, [r7, #13]
 8005aae:	2308      	movs	r3, #8
 8005ab0:	421a      	tst	r2, r3
 8005ab2:	d010      	beq.n	8005ad6 <process_thread_coap_receiver+0x24a>
 8005ab4:	2206      	movs	r2, #6
 8005ab6:	56a2      	ldrsb	r2, [r4, r2]
 8005ab8:	2a00      	cmp	r2, #0
 8005aba:	db0c      	blt.n	8005ad6 <process_thread_coap_receiver+0x24a>
 8005abc:	7b62      	ldrb	r2, [r4, #13]
 8005abe:	421a      	tst	r2, r3
 8005ac0:	d109      	bne.n	8005ad6 <process_thread_coap_receiver+0x24a>
                {
                  PRINTF("Block1 NOT IMPLEMENTED\n");
 8005ac2:	484c      	ldr	r0, [pc, #304]	; (8005bf4 <process_thread_coap_receiver+0x368>)
 8005ac4:	f000 ff52 	bl	800696c <iprintf>

                  coap_error_code = NOT_IMPLEMENTED_5_01;
 8005ac8:	235f      	movs	r3, #95	; 0x5f
 8005aca:	425b      	negs	r3, r3
 8005acc:	7033      	strb	r3, [r6, #0]
                  coap_error_message = "NoBlock1Support";
 8005ace:	4a4a      	ldr	r2, [pc, #296]	; (8005bf8 <process_thread_coap_receiver+0x36c>)
 8005ad0:	4b4a      	ldr	r3, [pc, #296]	; (8005bfc <process_thread_coap_receiver+0x370>)
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e0b7      	b.n	8005c46 <process_thread_coap_receiver+0x3ba>
                }
                else if ( IS_OPTION(message, COAP_OPTION_BLOCK2) )
 8005ad6:	4b3e      	ldr	r3, [pc, #248]	; (8005bd0 <process_thread_coap_receiver+0x344>)
 8005ad8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005ada:	7b1b      	ldrb	r3, [r3, #12]
 8005adc:	b25b      	sxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	db00      	blt.n	8005ae4 <process_thread_coap_receiver+0x258>
 8005ae2:	e095      	b.n	8005c10 <process_thread_coap_receiver+0x384>
                {
                  /* unchanged new_offset indicates that resource is unaware of blockwise transfer */
                  if (new_offset==block_offset)
 8005ae4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ae6:	4299      	cmp	r1, r3
 8005ae8:	d12d      	bne.n	8005b46 <process_thread_coap_receiver+0x2ba>
                  {
                    PRINTF("Blockwise: unaware resource with payload length %u/%u\n", response->payload_len, block_size);
 8005aea:	4c3f      	ldr	r4, [pc, #252]	; (8005be8 <process_thread_coap_receiver+0x35c>)
 8005aec:	466f      	mov	r7, sp
 8005aee:	1c26      	adds	r6, r4, #0
 8005af0:	368e      	adds	r6, #142	; 0x8e
 8005af2:	374e      	adds	r7, #78	; 0x4e
 8005af4:	8831      	ldrh	r1, [r6, #0]
 8005af6:	883a      	ldrh	r2, [r7, #0]
 8005af8:	4841      	ldr	r0, [pc, #260]	; (8005c00 <process_thread_coap_receiver+0x374>)
 8005afa:	f000 ff37 	bl	800696c <iprintf>
                    if (block_offset >= response->payload_len)
 8005afe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005b00:	8831      	ldrh	r1, [r6, #0]
 8005b02:	428a      	cmp	r2, r1
 8005b04:	d309      	bcc.n	8005b1a <process_thread_coap_receiver+0x28e>
                    {
                      PRINTF("handle_incoming_data(): block_offset >= response->payload_len\n");
 8005b06:	483f      	ldr	r0, [pc, #252]	; (8005c04 <process_thread_coap_receiver+0x378>)
 8005b08:	f000 ff30 	bl	800696c <iprintf>

                      response->code = BAD_OPTION_4_02;
 8005b0c:	237e      	movs	r3, #126	; 0x7e
 8005b0e:	425b      	negs	r3, r3
 8005b10:	71a3      	strb	r3, [r4, #6]
                      coap_set_payload(response, "BlockOutOfScope", 15); /* a const char str[] and sizeof(str) produces larger code size */
 8005b12:	1c20      	adds	r0, r4, #0
 8005b14:	493c      	ldr	r1, [pc, #240]	; (8005c08 <process_thread_coap_receiver+0x37c>)
 8005b16:	220f      	movs	r2, #15
 8005b18:	e093      	b.n	8005c42 <process_thread_coap_receiver+0x3b6>
                    }
                    else
                    {
                      coap_set_header_block2(response, block_num, response->payload_len - block_offset > block_size, block_size);
 8005b1a:	883b      	ldrh	r3, [r7, #0]
 8005b1c:	1a8a      	subs	r2, r1, r2
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	4192      	sbcs	r2, r2
 8005b22:	4252      	negs	r2, r2
 8005b24:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005b26:	1c20      	adds	r0, r4, #0
 8005b28:	f7fe ff98 	bl	8004a5c <coap_set_header_block2>
                      coap_set_payload(response, response->payload+block_offset, MIN(response->payload_len - block_offset, block_size));
 8005b2c:	1c22      	adds	r2, r4, #0
 8005b2e:	3290      	adds	r2, #144	; 0x90
 8005b30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b32:	6811      	ldr	r1, [r2, #0]
 8005b34:	8832      	ldrh	r2, [r6, #0]
 8005b36:	1859      	adds	r1, r3, r1
 8005b38:	1ad2      	subs	r2, r2, r3
 8005b3a:	883b      	ldrh	r3, [r7, #0]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d900      	bls.n	8005b42 <process_thread_coap_receiver+0x2b6>
 8005b40:	1c1a      	adds	r2, r3, #0
 8005b42:	1c20      	adds	r0, r4, #0
 8005b44:	e07d      	b.n	8005c42 <process_thread_coap_receiver+0x3b6>
                    } /* if (valid offset) */
                  }
                  else
                  {
                    /* resource provides chunk-wise data */
                    PRINTF("Blockwise: blockwise resource, new offset %ld\n", new_offset);
 8005b46:	4831      	ldr	r0, [pc, #196]	; (8005c0c <process_thread_coap_receiver+0x380>)
 8005b48:	f000 ff10 	bl	800696c <iprintf>
                    coap_set_header_block2(response, block_num, new_offset!=-1 || response->payload_len > block_size, block_size);
 8005b4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b4e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005b50:	3301      	adds	r3, #1
 8005b52:	d001      	beq.n	8005b58 <process_thread_coap_receiver+0x2cc>
 8005b54:	2201      	movs	r2, #1
 8005b56:	e008      	b.n	8005b6a <process_thread_coap_receiver+0x2de>
 8005b58:	4b23      	ldr	r3, [pc, #140]	; (8005be8 <process_thread_coap_receiver+0x35c>)
 8005b5a:	466a      	mov	r2, sp
 8005b5c:	338e      	adds	r3, #142	; 0x8e
 8005b5e:	324e      	adds	r2, #78	; 0x4e
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	8812      	ldrh	r2, [r2, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	4192      	sbcs	r2, r2
 8005b68:	4252      	negs	r2, r2
 8005b6a:	4c1f      	ldr	r4, [pc, #124]	; (8005be8 <process_thread_coap_receiver+0x35c>)
 8005b6c:	466e      	mov	r6, sp
 8005b6e:	364e      	adds	r6, #78	; 0x4e
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	8833      	ldrh	r3, [r6, #0]
 8005b74:	1c20      	adds	r0, r4, #0
 8005b76:	f7fe ff71 	bl	8004a5c <coap_set_header_block2>
                    if (response->payload_len > block_size) coap_set_payload(response, response->payload, block_size);
 8005b7a:	1c23      	adds	r3, r4, #0
 8005b7c:	338e      	adds	r3, #142	; 0x8e
 8005b7e:	8832      	ldrh	r2, [r6, #0]
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d95f      	bls.n	8005c46 <process_thread_coap_receiver+0x3ba>
 8005b86:	1c23      	adds	r3, r4, #0
 8005b88:	3390      	adds	r3, #144	; 0x90
 8005b8a:	1c20      	adds	r0, r4, #0
 8005b8c:	6819      	ldr	r1, [r3, #0]
 8005b8e:	e058      	b.n	8005c42 <process_thread_coap_receiver+0x3b6>
 8005b90:	0800b5b3 	.word	0x0800b5b3
 8005b94:	20000590 	.word	0x20000590
 8005b98:	00003316 	.word	0x00003316
 8005b9c:	200018b0 	.word	0x200018b0
 8005ba0:	200011dc 	.word	0x200011dc
 8005ba4:	20001570 	.word	0x20001570
 8005ba8:	0800b5d1 	.word	0x0800b5d1
 8005bac:	2000177c 	.word	0x2000177c
 8005bb0:	0800b603 	.word	0x0800b603
 8005bb4:	2000157c 	.word	0x2000157c
 8005bb8:	0800b621 	.word	0x0800b621
 8005bbc:	0800b66b 	.word	0x0800b66b
 8005bc0:	20001784 	.word	0x20001784
 8005bc4:	0800b685 	.word	0x0800b685
 8005bc8:	0800bb70 	.word	0x0800bb70
 8005bcc:	0800bb67 	.word	0x0800bb67
 8005bd0:	20001274 	.word	0x20001274
 8005bd4:	0800b688 	.word	0x0800b688
 8005bd8:	0800b6b4 	.word	0x0800b6b4
 8005bdc:	0800b6c1 	.word	0x0800b6c1
 8005be0:	20001596 	.word	0x20001596
 8005be4:	2000130c 	.word	0x2000130c
 8005be8:	200011e0 	.word	0x200011e0
 8005bec:	0800b6d2 	.word	0x0800b6d2
 8005bf0:	20001308 	.word	0x20001308
 8005bf4:	0800b704 	.word	0x0800b704
 8005bf8:	0800b71c 	.word	0x0800b71c
 8005bfc:	2000057c 	.word	0x2000057c
 8005c00:	0800b72c 	.word	0x0800b72c
 8005c04:	0800b763 	.word	0x0800b763
 8005c08:	0800b7a2 	.word	0x0800b7a2
 8005c0c:	0800b7b2 	.word	0x0800b7b2
                  } /* if (resource aware of blockwise) */
                }
                else if (new_offset!=0)
 8005c10:	2900      	cmp	r1, #0
 8005c12:	d018      	beq.n	8005c46 <process_thread_coap_receiver+0x3ba>
                {
                  PRINTF("Blockwise: no block option for blockwise resource, using block size %u\n", REST_MAX_CHUNK_SIZE);
 8005c14:	2180      	movs	r1, #128	; 0x80
 8005c16:	485f      	ldr	r0, [pc, #380]	; (8005d94 <process_thread_coap_receiver+0x508>)
 8005c18:	f000 fea8 	bl	800696c <iprintf>

                  coap_set_header_block2(response, 0, new_offset!=-1, REST_MAX_CHUNK_SIZE);
 8005c1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c1e:	4c5e      	ldr	r4, [pc, #376]	; (8005d98 <process_thread_coap_receiver+0x50c>)
 8005c20:	3201      	adds	r2, #1
 8005c22:	1e53      	subs	r3, r2, #1
 8005c24:	419a      	sbcs	r2, r3
 8005c26:	1c20      	adds	r0, r4, #0
 8005c28:	2100      	movs	r1, #0
 8005c2a:	2380      	movs	r3, #128	; 0x80
 8005c2c:	f7fe ff16 	bl	8004a5c <coap_set_header_block2>
                  coap_set_payload(response, response->payload, MIN(response->payload_len, REST_MAX_CHUNK_SIZE));
 8005c30:	1c23      	adds	r3, r4, #0
 8005c32:	348e      	adds	r4, #142	; 0x8e
 8005c34:	8822      	ldrh	r2, [r4, #0]
 8005c36:	3390      	adds	r3, #144	; 0x90
 8005c38:	6819      	ldr	r1, [r3, #0]
 8005c3a:	2a7f      	cmp	r2, #127	; 0x7f
 8005c3c:	d900      	bls.n	8005c40 <process_thread_coap_receiver+0x3b4>
 8005c3e:	2280      	movs	r2, #128	; 0x80
 8005c40:	4855      	ldr	r0, [pc, #340]	; (8005d98 <process_thread_coap_receiver+0x50c>)
 8005c42:	f7fe ff48 	bl	8004ad6 <coap_set_payload>
                } /* if (blockwise request) */
              } /* no errors/hooks */
            } /* successful service callback */

            /* Serialize response. */
            if (coap_error_code==NO_ERROR)
 8005c46:	4e55      	ldr	r6, [pc, #340]	; (8005d9c <process_thread_coap_receiver+0x510>)
 8005c48:	7833      	ldrb	r3, [r6, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d14a      	bne.n	8005ce4 <process_thread_coap_receiver+0x458>
            {
              if ((transaction->packet_len = coap_serialize_message(response, transaction->packet))==0)
 8005c4e:	4b54      	ldr	r3, [pc, #336]	; (8005da0 <process_thread_coap_receiver+0x514>)
 8005c50:	4851      	ldr	r0, [pc, #324]	; (8005d98 <process_thread_coap_receiver+0x50c>)
 8005c52:	681c      	ldr	r4, [r3, #0]
 8005c54:	1c21      	adds	r1, r4, #0
 8005c56:	312a      	adds	r1, #42	; 0x2a
 8005c58:	f7ff fb46 	bl	80052e8 <coap_serialize_message>
 8005c5c:	b280      	uxth	r0, r0
 8005c5e:	8520      	strh	r0, [r4, #40]	; 0x28
 8005c60:	2800      	cmp	r0, #0
 8005c62:	d13f      	bne.n	8005ce4 <process_thread_coap_receiver+0x458>
              {
                coap_error_code = PACKET_SERIALIZATION_ERROR;
 8005c64:	233f      	movs	r3, #63	; 0x3f
 8005c66:	425b      	negs	r3, r3
 8005c68:	7033      	strb	r3, [r6, #0]
 8005c6a:	e03b      	b.n	8005ce4 <process_thread_coap_receiver+0x458>
            }

          }
          else
          {
            coap_error_code = NOT_IMPLEMENTED_5_01;
 8005c6c:	4a4b      	ldr	r2, [pc, #300]	; (8005d9c <process_thread_coap_receiver+0x510>)
 8005c6e:	235f      	movs	r3, #95	; 0x5f
 8005c70:	425b      	negs	r3, r3
 8005c72:	7013      	strb	r3, [r2, #0]
            coap_error_message = "NoServiceCallbck"; // no a to fit 16 bytes
 8005c74:	4a4b      	ldr	r2, [pc, #300]	; (8005da4 <process_thread_coap_receiver+0x518>)
 8005c76:	e003      	b.n	8005c80 <process_thread_coap_receiver+0x3f4>
          } /* if (service callback) */

        } else {
            coap_error_code = SERVICE_UNAVAILABLE_5_03;
 8005c78:	235d      	movs	r3, #93	; 0x5d
 8005c7a:	425b      	negs	r3, r3
            coap_error_message = "NoFreeTraBuffer";
 8005c7c:	4a4a      	ldr	r2, [pc, #296]	; (8005da8 <process_thread_coap_receiver+0x51c>)
            coap_error_code = NOT_IMPLEMENTED_5_01;
            coap_error_message = "NoServiceCallbck"; // no a to fit 16 bytes
          } /* if (service callback) */

        } else {
            coap_error_code = SERVICE_UNAVAILABLE_5_03;
 8005c7e:	703b      	strb	r3, [r7, #0]
            coap_error_message = "NoFreeTraBuffer";
 8005c80:	4b4a      	ldr	r3, [pc, #296]	; (8005dac <process_thread_coap_receiver+0x520>)
 8005c82:	e02e      	b.n	8005ce2 <process_thread_coap_receiver+0x456>
        } /* if (transaction buffer) */
      }
      else
      {
        /* Responses */
        if (message->type==COAP_TYPE_CON && message->code==0)
 8005c84:	6863      	ldr	r3, [r4, #4]
 8005c86:	4a4a      	ldr	r2, [pc, #296]	; (8005db0 <process_thread_coap_receiver+0x524>)
 8005c88:	421a      	tst	r2, r3
 8005c8a:	d106      	bne.n	8005c9a <process_thread_coap_receiver+0x40e>
        {
          PRINTF("Received Ping\n");
 8005c8c:	4849      	ldr	r0, [pc, #292]	; (8005db4 <process_thread_coap_receiver+0x528>)
 8005c8e:	f000 fe6d 	bl	800696c <iprintf>
          coap_error_code = PING_RESPONSE;
 8005c92:	233d      	movs	r3, #61	; 0x3d
 8005c94:	425b      	negs	r3, r3
 8005c96:	703b      	strb	r3, [r7, #0]
 8005c98:	e010      	b.n	8005cbc <process_thread_coap_receiver+0x430>
        }
        else if (message->type==COAP_TYPE_ACK)
 8005c9a:	7963      	ldrb	r3, [r4, #5]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d103      	bne.n	8005ca8 <process_thread_coap_receiver+0x41c>
        {
          /* Transactions are closed through lookup below */
          PRINTF("Received ACK\n");
 8005ca0:	4845      	ldr	r0, [pc, #276]	; (8005db8 <process_thread_coap_receiver+0x52c>)
 8005ca2:	f000 fe63 	bl	800696c <iprintf>
 8005ca6:	e009      	b.n	8005cbc <process_thread_coap_receiver+0x430>
        }
        else if (message->type==COAP_TYPE_RST)
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d107      	bne.n	8005cbc <process_thread_coap_receiver+0x430>
        {
          PRINTF("Received RST\n");
 8005cac:	4843      	ldr	r0, [pc, #268]	; (8005dbc <process_thread_coap_receiver+0x530>)
 8005cae:	f000 fe5d 	bl	800696c <iprintf>
          /* Cancel possible subscriptions. */
          coap_remove_observer_by_mid(&UIP_IP_BUF->srcipaddr, UIP_UDP_BUF->srcport, message->mid);
 8005cb2:	8c69      	ldrh	r1, [r5, #34]	; 0x22
 8005cb4:	8922      	ldrh	r2, [r4, #8]
 8005cb6:	4842      	ldr	r0, [pc, #264]	; (8005dc0 <process_thread_coap_receiver+0x534>)
 8005cb8:	f000 fa8a 	bl	80061d0 <coap_remove_observer_by_mid>
        }

        if ( (transaction = coap_get_transaction_by_mid(message->mid)) )
 8005cbc:	4c41      	ldr	r4, [pc, #260]	; (8005dc4 <process_thread_coap_receiver+0x538>)
 8005cbe:	8920      	ldrh	r0, [r4, #8]
 8005cc0:	f000 fb82 	bl	80063c8 <coap_get_transaction_by_mid>
 8005cc4:	4b36      	ldr	r3, [pc, #216]	; (8005da0 <process_thread_coap_receiver+0x514>)
 8005cc6:	6018      	str	r0, [r3, #0]
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d008      	beq.n	8005cde <process_thread_coap_receiver+0x452>
        {
          /* Free transaction memory before callback, as it may create a new transaction. */
          restful_response_handler callback = transaction->callback;
 8005ccc:	6a06      	ldr	r6, [r0, #32]
          void *callback_data = transaction->callback_data;
 8005cce:	6a47      	ldr	r7, [r0, #36]	; 0x24
          coap_clear_transaction(transaction);
 8005cd0:	f000 fb8a 	bl	80063e8 <coap_clear_transaction>

          /* Check if someone registered for the response */
          if (callback) {
 8005cd4:	2e00      	cmp	r6, #0
 8005cd6:	d002      	beq.n	8005cde <process_thread_coap_receiver+0x452>
            callback(callback_data, message);
 8005cd8:	1c38      	adds	r0, r7, #0
 8005cda:	1c21      	adds	r1, r4, #0
 8005cdc:	47b0      	blx	r6
          }
        } /* if (ACKed transaction) */
        transaction = NULL;
 8005cde:	4b30      	ldr	r3, [pc, #192]	; (8005da0 <process_thread_coap_receiver+0x514>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]

      } /* Request or Response */

    } /* if (parsed correctly) */

    if (coap_error_code==NO_ERROR)
 8005ce4:	4e2d      	ldr	r6, [pc, #180]	; (8005d9c <process_thread_coap_receiver+0x510>)
 8005ce6:	7831      	ldrb	r1, [r6, #0]
 8005ce8:	2900      	cmp	r1, #0
 8005cea:	d107      	bne.n	8005cfc <process_thread_coap_receiver+0x470>
    {
      if (transaction) coap_send_transaction(transaction);
 8005cec:	4b2c      	ldr	r3, [pc, #176]	; (8005da0 <process_thread_coap_receiver+0x514>)
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	d100      	bne.n	8005cf6 <process_thread_coap_receiver+0x46a>
 8005cf4:	e5e1      	b.n	80058ba <process_thread_coap_receiver+0x2e>
 8005cf6:	f000 fb8b 	bl	8006410 <coap_send_transaction>
 8005cfa:	e5de      	b.n	80058ba <process_thread_coap_receiver+0x2e>
 8005cfc:	4c28      	ldr	r4, [pc, #160]	; (8005da0 <process_thread_coap_receiver+0x514>)
    }
    else if (coap_error_code==MANUAL_RESPONSE)
 8005cfe:	29c2      	cmp	r1, #194	; 0xc2
 8005d00:	d106      	bne.n	8005d10 <process_thread_coap_receiver+0x484>
    {
      PRINTF("Clearing transaction for manual response");
 8005d02:	4831      	ldr	r0, [pc, #196]	; (8005dc8 <process_thread_coap_receiver+0x53c>)
 8005d04:	f000 fe32 	bl	800696c <iprintf>
      coap_clear_transaction(transaction);
 8005d08:	6820      	ldr	r0, [r4, #0]
 8005d0a:	f000 fb6d 	bl	80063e8 <coap_clear_transaction>
 8005d0e:	e5d4      	b.n	80058ba <process_thread_coap_receiver+0x2e>
    }
    else
    {
      coap_message_type_t reply_type = COAP_TYPE_ACK;

      PRINTF("ERROR %u: %s\n", coap_error_code, coap_error_message);
 8005d10:	4b26      	ldr	r3, [pc, #152]	; (8005dac <process_thread_coap_receiver+0x520>)
 8005d12:	482e      	ldr	r0, [pc, #184]	; (8005dcc <process_thread_coap_receiver+0x540>)
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	f000 fe29 	bl	800696c <iprintf>
      coap_clear_transaction(transaction);
 8005d1a:	6820      	ldr	r0, [r4, #0]
 8005d1c:	f000 fb64 	bl	80063e8 <coap_clear_transaction>

      /* Set to sendable error code. */
      if (coap_error_code >= 192)
 8005d20:	7833      	ldrb	r3, [r6, #0]
 8005d22:	2bbf      	cmp	r3, #191	; 0xbf
 8005d24:	d902      	bls.n	8005d2c <process_thread_coap_receiver+0x4a0>
      {
        coap_error_code = INTERNAL_SERVER_ERROR_5_00;
 8005d26:	2360      	movs	r3, #96	; 0x60
 8005d28:	425b      	negs	r3, r3
 8005d2a:	7033      	strb	r3, [r6, #0]
      }
      if (coap_error_code == PING_RESPONSE)
 8005d2c:	4b1b      	ldr	r3, [pc, #108]	; (8005d9c <process_thread_coap_receiver+0x510>)
 8005d2e:	781a      	ldrb	r2, [r3, #0]
 8005d30:	2ac3      	cmp	r2, #195	; 0xc3
 8005d32:	d001      	beq.n	8005d38 <process_thread_coap_receiver+0x4ac>
 8005d34:	2102      	movs	r1, #2
 8005d36:	e002      	b.n	8005d3e <process_thread_coap_receiver+0x4b2>
      {
        coap_error_code = 0;
 8005d38:	2200      	movs	r2, #0
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	2103      	movs	r1, #3
        reply_type = COAP_TYPE_RST;
      }
      /* Reuse input buffer for error message. */
      coap_init_message(message, reply_type, coap_error_code, message->mid);
 8005d3e:	4c21      	ldr	r4, [pc, #132]	; (8005dc4 <process_thread_coap_receiver+0x538>)
 8005d40:	4b16      	ldr	r3, [pc, #88]	; (8005d9c <process_thread_coap_receiver+0x510>)
 8005d42:	1c20      	adds	r0, r4, #0
 8005d44:	781a      	ldrb	r2, [r3, #0]
 8005d46:	8923      	ldrh	r3, [r4, #8]
 8005d48:	f7fe ff8b 	bl	8004c62 <coap_init_message>
      coap_set_payload(message, coap_error_message, strlen(coap_error_message));
 8005d4c:	4b17      	ldr	r3, [pc, #92]	; (8005dac <process_thread_coap_receiver+0x520>)
 8005d4e:	681e      	ldr	r6, [r3, #0]
 8005d50:	1c30      	adds	r0, r6, #0
 8005d52:	f001 fab3 	bl	80072bc <strlen>
 8005d56:	1c31      	adds	r1, r6, #0
 8005d58:	1c02      	adds	r2, r0, #0
 8005d5a:	1c20      	adds	r0, r4, #0
 8005d5c:	f7fe febb 	bl	8004ad6 <coap_set_payload>
      coap_send_message(&UIP_IP_BUF->srcipaddr, UIP_UDP_BUF->srcport, uip_appdata, coap_serialize_message(message, uip_appdata));
 8005d60:	4b1b      	ldr	r3, [pc, #108]	; (8005dd0 <process_thread_coap_receiver+0x544>)
 8005d62:	8c6e      	ldrh	r6, [r5, #34]	; 0x22
 8005d64:	681d      	ldr	r5, [r3, #0]
 8005d66:	1c20      	adds	r0, r4, #0
 8005d68:	1c29      	adds	r1, r5, #0
 8005d6a:	f7ff fabd 	bl	80052e8 <coap_serialize_message>
 8005d6e:	1c31      	adds	r1, r6, #0
 8005d70:	b283      	uxth	r3, r0
 8005d72:	1c2a      	adds	r2, r5, #0
 8005d74:	4812      	ldr	r0, [pc, #72]	; (8005dc0 <process_thread_coap_receiver+0x534>)
 8005d76:	f7ff fd3d 	bl	80057f4 <coap_send_message>
 8005d7a:	e59e      	b.n	80058ba <process_thread_coap_receiver+0x2e>
  while(1) {
    PROCESS_YIELD();

    if(ev == tcpip_event) {
      coap_receive();
    } else if (ev == PROCESS_EVENT_TIMER) {
 8005d7c:	2988      	cmp	r1, #136	; 0x88
 8005d7e:	d000      	beq.n	8005d82 <process_thread_coap_receiver+0x4f6>
 8005d80:	e59b      	b.n	80058ba <process_thread_coap_receiver+0x2e>
      /* retransmissions are handled here */
      coap_check_transactions();
 8005d82:	f000 fb89 	bl	8006498 <coap_check_transactions>
 8005d86:	e598      	b.n	80058ba <process_thread_coap_receiver+0x2e>
    }
  } /* while (1) */

  PROCESS_END();
 8005d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	8013      	strh	r3, [r2, #0]
 8005d8e:	2003      	movs	r0, #3
}
 8005d90:	b015      	add	sp, #84	; 0x54
 8005d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d94:	0800b7e1 	.word	0x0800b7e1
 8005d98:	200011e0 	.word	0x200011e0
 8005d9c:	200011dc 	.word	0x200011dc
 8005da0:	2000130c 	.word	0x2000130c
 8005da4:	0800b829 	.word	0x0800b829
 8005da8:	0800b83a 	.word	0x0800b83a
 8005dac:	2000057c 	.word	0x2000057c
 8005db0:	00ffff00 	.word	0x00ffff00
 8005db4:	0800b84a 	.word	0x0800b84a
 8005db8:	0800b859 	.word	0x0800b859
 8005dbc:	0800b867 	.word	0x0800b867
 8005dc0:	20001596 	.word	0x20001596
 8005dc4:	20001274 	.word	0x20001274
 8005dc8:	0800b875 	.word	0x0800b875
 8005dcc:	0800b89e 	.word	0x0800b89e
 8005dd0:	20001784 	.word	0x20001784

08005dd4 <well_known_core_handler>:

/* The discover resource is automatically included for CoAP. */
RESOURCE(well_known_core, METHOD_GET, ".well-known/core", "ct=40");
void
well_known_core_handler(void* request, void* response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
 8005dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dd6:	b08f      	sub	sp, #60	; 0x3c
 8005dd8:	910a      	str	r1, [sp, #40]	; 0x28
    size_t tmplen = 0;
    resource_t* resource = NULL;

#if COAP_LINK_FORMAT_FILTERING
    /* For filtering. */
    const char *filter = NULL;
 8005dda:	2600      	movs	r6, #0
    const char *attrib = NULL;
    const char *found = NULL;
    const char *end = NULL;
    char *value = NULL;
    char lastchar = '\0';
    int len = coap_get_header_uri_query(request, &filter);
 8005ddc:	a90d      	add	r1, sp, #52	; 0x34

/* The discover resource is automatically included for CoAP. */
RESOURCE(well_known_core, METHOD_GET, ".well-known/core", "ct=40");
void
well_known_core_handler(void* request, void* response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
 8005dde:	9208      	str	r2, [sp, #32]
 8005de0:	9305      	str	r3, [sp, #20]
 8005de2:	9c14      	ldr	r4, [sp, #80]	; 0x50
    size_t tmplen = 0;
    resource_t* resource = NULL;

#if COAP_LINK_FORMAT_FILTERING
    /* For filtering. */
    const char *filter = NULL;
 8005de4:	960d      	str	r6, [sp, #52]	; 0x34
    const char *attrib = NULL;
    const char *found = NULL;
    const char *end = NULL;
    char *value = NULL;
    char lastchar = '\0';
    int len = coap_get_header_uri_query(request, &filter);
 8005de6:	f7fe fe04 	bl	80049f2 <coap_get_header_uri_query>
 8005dea:	9006      	str	r0, [sp, #24]

    if (len)
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d102      	bne.n	8005df6 <well_known_core_handler+0x22>
 8005df0:	9609      	str	r6, [sp, #36]	; 0x24
 8005df2:	9607      	str	r6, [sp, #28]
 8005df4:	e02b      	b.n	8005e4e <well_known_core_handler+0x7a>
    {
      value = strchr(filter, '=');
 8005df6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005df8:	213d      	movs	r1, #61	; 0x3d
 8005dfa:	f001 fa47 	bl	800728c <strchr>
      value[0] = '\0';
 8005dfe:	7006      	strb	r6, [r0, #0]
      ++value;
      len -= strlen(filter)+1;
 8005e00:	9e0d      	ldr	r6, [sp, #52]	; 0x34

    if (len)
    {
      value = strchr(filter, '=');
      value[0] = '\0';
      ++value;
 8005e02:	1c41      	adds	r1, r0, #1
    char lastchar = '\0';
    int len = coap_get_header_uri_query(request, &filter);

    if (len)
    {
      value = strchr(filter, '=');
 8005e04:	1c05      	adds	r5, r0, #0
      value[0] = '\0';
      ++value;
      len -= strlen(filter)+1;
 8005e06:	1c30      	adds	r0, r6, #0

    if (len)
    {
      value = strchr(filter, '=');
      value[0] = '\0';
      ++value;
 8005e08:	9107      	str	r1, [sp, #28]
      len -= strlen(filter)+1;
 8005e0a:	f001 fa57 	bl	80072bc <strlen>
 8005e0e:	9a06      	ldr	r2, [sp, #24]
 8005e10:	43c0      	mvns	r0, r0
 8005e12:	1882      	adds	r2, r0, r2

      PRINTF("Filter %s = %.*s\n", filter, len, value);
 8005e14:	1c31      	adds	r1, r6, #0
 8005e16:	48ae      	ldr	r0, [pc, #696]	; (80060d0 <well_known_core_handler+0x2fc>)
 8005e18:	9b07      	ldr	r3, [sp, #28]
    if (len)
    {
      value = strchr(filter, '=');
      value[0] = '\0';
      ++value;
      len -= strlen(filter)+1;
 8005e1a:	9206      	str	r2, [sp, #24]

      PRINTF("Filter %s = %.*s\n", filter, len, value);
 8005e1c:	f000 fda6 	bl	800696c <iprintf>

      if (strcmp(filter,"href")==0 && value[0]=='/')
 8005e20:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005e22:	49ac      	ldr	r1, [pc, #688]	; (80060d4 <well_known_core_handler+0x300>)
 8005e24:	f001 fa40 	bl	80072a8 <strcmp>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d108      	bne.n	8005e3e <well_known_core_handler+0x6a>
 8005e2c:	786b      	ldrb	r3, [r5, #1]
 8005e2e:	2b2f      	cmp	r3, #47	; 0x2f
 8005e30:	d105      	bne.n	8005e3e <well_known_core_handler+0x6a>
      {
        ++value;
 8005e32:	9b07      	ldr	r3, [sp, #28]
        --len;
 8005e34:	9906      	ldr	r1, [sp, #24]

      PRINTF("Filter %s = %.*s\n", filter, len, value);

      if (strcmp(filter,"href")==0 && value[0]=='/')
      {
        ++value;
 8005e36:	3301      	adds	r3, #1
        --len;
 8005e38:	3901      	subs	r1, #1

      PRINTF("Filter %s = %.*s\n", filter, len, value);

      if (strcmp(filter,"href")==0 && value[0]=='/')
      {
        ++value;
 8005e3a:	9307      	str	r3, [sp, #28]
        --len;
 8005e3c:	9106      	str	r1, [sp, #24]
      }

      lastchar = value[len-1];
 8005e3e:	9b06      	ldr	r3, [sp, #24]
 8005e40:	9a07      	ldr	r2, [sp, #28]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	18d3      	adds	r3, r2, r3
 8005e46:	7819      	ldrb	r1, [r3, #0]
      value[len-1] = '\0';
 8005e48:	2200      	movs	r2, #0
      {
        ++value;
        --len;
      }

      lastchar = value[len-1];
 8005e4a:	9109      	str	r1, [sp, #36]	; 0x24
      value[len-1] = '\0';
 8005e4c:	701a      	strb	r2, [r3, #0]
    }
#endif

    for (resource = (resource_t*)list_head(rest_get_resources()); resource; resource = resource->next)
 8005e4e:	f7fe fa1d 	bl	800428c <rest_get_resources>
 8005e52:	f7fe fb18 	bl	8004486 <list_head>
 8005e56:	2500      	movs	r5, #0
 8005e58:	1c06      	adds	r6, r0, #0
 8005e5a:	2700      	movs	r7, #0
 8005e5c:	e0f8      	b.n	8006050 <well_known_core_handler+0x27c>
    {
#if COAP_LINK_FORMAT_FILTERING
      /* Filtering */
      if (len)
 8005e5e:	9a06      	ldr	r2, [sp, #24]
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	d065      	beq.n	8005f30 <well_known_core_handler+0x15c>
      {
        if (strcmp(filter,"href")==0)
 8005e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e66:	499b      	ldr	r1, [pc, #620]	; (80060d4 <well_known_core_handler+0x300>)
 8005e68:	1c18      	adds	r0, r3, #0
 8005e6a:	9303      	str	r3, [sp, #12]
 8005e6c:	f001 fa1c 	bl	80072a8 <strcmp>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d119      	bne.n	8005ea8 <well_known_core_handler+0xd4>
        {
          attrib=strstr(resource->url, value);
 8005e74:	68b1      	ldr	r1, [r6, #8]
 8005e76:	910b      	str	r1, [sp, #44]	; 0x2c
 8005e78:	1c08      	adds	r0, r1, #0
 8005e7a:	9907      	ldr	r1, [sp, #28]
 8005e7c:	f001 fa3a 	bl	80072f4 <strstr>
 8005e80:	9003      	str	r0, [sp, #12]
 8005e82:	9004      	str	r0, [sp, #16]
          if (attrib==NULL || (value[-1]=='/' && attrib!=resource->url)) continue;
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d100      	bne.n	8005e8a <well_known_core_handler+0xb6>
 8005e88:	e0e1      	b.n	800604e <well_known_core_handler+0x27a>
 8005e8a:	9b07      	ldr	r3, [sp, #28]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b2f      	cmp	r3, #47	; 0x2f
 8005e92:	d103      	bne.n	8005e9c <well_known_core_handler+0xc8>
 8005e94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e96:	4290      	cmp	r0, r2
 8005e98:	d000      	beq.n	8005e9c <well_known_core_handler+0xc8>
 8005e9a:	e0d8      	b.n	800604e <well_known_core_handler+0x27a>
          end = attrib + strlen(attrib);
 8005e9c:	9803      	ldr	r0, [sp, #12]
 8005e9e:	f001 fa0d 	bl	80072bc <strlen>
 8005ea2:	9b03      	ldr	r3, [sp, #12]
 8005ea4:	1818      	adds	r0, r3, r0
 8005ea6:	e018      	b.n	8005eda <well_known_core_handler+0x106>
        }
        else
        {
          attrib=strstr(resource->attributes, filter);
 8005ea8:	68f0      	ldr	r0, [r6, #12]
 8005eaa:	9903      	ldr	r1, [sp, #12]
 8005eac:	f001 fa22 	bl	80072f4 <strstr>
 8005eb0:	9004      	str	r0, [sp, #16]
          if (attrib==NULL || (attrib[strlen(filter)]!='=' && attrib[strlen(filter)]!='"')) continue;
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	d100      	bne.n	8005eb8 <well_known_core_handler+0xe4>
 8005eb6:	e0ca      	b.n	800604e <well_known_core_handler+0x27a>
 8005eb8:	9803      	ldr	r0, [sp, #12]
 8005eba:	f001 f9ff 	bl	80072bc <strlen>
 8005ebe:	9904      	ldr	r1, [sp, #16]
 8005ec0:	5c0b      	ldrb	r3, [r1, r0]
 8005ec2:	2b3d      	cmp	r3, #61	; 0x3d
 8005ec4:	d002      	beq.n	8005ecc <well_known_core_handler+0xf8>
 8005ec6:	2b22      	cmp	r3, #34	; 0x22
 8005ec8:	d000      	beq.n	8005ecc <well_known_core_handler+0xf8>
 8005eca:	e0c0      	b.n	800604e <well_known_core_handler+0x27a>
          attrib += strlen(filter)+2;
 8005ecc:	9a04      	ldr	r2, [sp, #16]
 8005ece:	3002      	adds	r0, #2
 8005ed0:	1810      	adds	r0, r2, r0
          end = strchr(attrib, '"');
 8005ed2:	2122      	movs	r1, #34	; 0x22
        }
        else
        {
          attrib=strstr(resource->attributes, filter);
          if (attrib==NULL || (attrib[strlen(filter)]!='=' && attrib[strlen(filter)]!='"')) continue;
          attrib += strlen(filter)+2;
 8005ed4:	9004      	str	r0, [sp, #16]
          end = strchr(attrib, '"');
 8005ed6:	f001 f9d9 	bl	800728c <strchr>
 8005eda:	9003      	str	r0, [sp, #12]
        }

        PRINTF("Filter: res has attrib %s (%s)\n", attrib, value);
 8005edc:	9904      	ldr	r1, [sp, #16]
 8005ede:	487e      	ldr	r0, [pc, #504]	; (80060d8 <well_known_core_handler+0x304>)
 8005ee0:	9a07      	ldr	r2, [sp, #28]
 8005ee2:	f000 fd43 	bl	800696c <iprintf>
 8005ee6:	9804      	ldr	r0, [sp, #16]
        found = attrib;
        while ((found=strstr(found, value))!=NULL) {
 8005ee8:	e00f      	b.n	8005f0a <well_known_core_handler+0x136>
            if (found > end)
 8005eea:	9b03      	ldr	r3, [sp, #12]
 8005eec:	4298      	cmp	r0, r3
 8005eee:	d900      	bls.n	8005ef2 <well_known_core_handler+0x11e>
 8005ef0:	e0ad      	b.n	800604e <well_known_core_handler+0x27a>
            {
              found = NULL;
              break;
            }
            if (lastchar==found[len-1] || lastchar=='*')
 8005ef2:	9906      	ldr	r1, [sp, #24]
 8005ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ef6:	1843      	adds	r3, r0, r1
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d100      	bne.n	8005f02 <well_known_core_handler+0x12e>
 8005f00:	e0dc      	b.n	80060bc <well_known_core_handler+0x2e8>
 8005f02:	2a2a      	cmp	r2, #42	; 0x2a
 8005f04:	d100      	bne.n	8005f08 <well_known_core_handler+0x134>
 8005f06:	e0d9      	b.n	80060bc <well_known_core_handler+0x2e8>
            {
              break;
            }
            ++found;
 8005f08:	3001      	adds	r0, #1
          end = strchr(attrib, '"');
        }

        PRINTF("Filter: res has attrib %s (%s)\n", attrib, value);
        found = attrib;
        while ((found=strstr(found, value))!=NULL) {
 8005f0a:	9907      	ldr	r1, [sp, #28]
 8005f0c:	f001 f9f2 	bl	80072f4 <strstr>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d1ea      	bne.n	8005eea <well_known_core_handler+0x116>
 8005f14:	e09b      	b.n	800604e <well_known_core_handler+0x27a>
        if (found==NULL)
        {
          continue;
        }
        PRINTF("Filter: res has prefix %s\n", found);
        if (lastchar!='*' && (found[len]!='"' && found[len]!=' ' && found[len]!='\0')) continue;
 8005f16:	9903      	ldr	r1, [sp, #12]
 8005f18:	9a06      	ldr	r2, [sp, #24]
 8005f1a:	5c8b      	ldrb	r3, [r1, r2]
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d004      	beq.n	8005f2a <well_known_core_handler+0x156>
 8005f20:	2b22      	cmp	r3, #34	; 0x22
 8005f22:	d002      	beq.n	8005f2a <well_known_core_handler+0x156>
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d000      	beq.n	8005f2a <well_known_core_handler+0x156>
 8005f28:	e091      	b.n	800604e <well_known_core_handler+0x27a>
        PRINTF("Filter: res has match\n");
 8005f2a:	486c      	ldr	r0, [pc, #432]	; (80060dc <well_known_core_handler+0x308>)
 8005f2c:	f000 fd1e 	bl	800696c <iprintf>
      }
#endif

      PRINTF("res: /%s (%p)\npos: s%d, o%ld, b%d\n", resource->url, resource, strpos, *offset, bufpos);
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	9501      	str	r5, [sp, #4]
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	486a      	ldr	r0, [pc, #424]	; (80060e0 <well_known_core_handler+0x30c>)
 8005f38:	68b1      	ldr	r1, [r6, #8]
 8005f3a:	1c32      	adds	r2, r6, #0
 8005f3c:	1c3b      	adds	r3, r7, #0
 8005f3e:	f000 fd15 	bl	800696c <iprintf>

      if (strpos>0)
 8005f42:	2f00      	cmp	r7, #0
 8005f44:	d00a      	beq.n	8005f5c <well_known_core_handler+0x188>
      {
        if (strpos >= *offset && bufpos < preferred_size)
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	429f      	cmp	r7, r3
 8005f4a:	d306      	bcc.n	8005f5a <well_known_core_handler+0x186>
 8005f4c:	9b05      	ldr	r3, [sp, #20]
 8005f4e:	429d      	cmp	r5, r3
 8005f50:	d203      	bcs.n	8005f5a <well_known_core_handler+0x186>
        {
          buffer[bufpos++] = ',';
 8005f52:	9908      	ldr	r1, [sp, #32]
 8005f54:	232c      	movs	r3, #44	; 0x2c
 8005f56:	554b      	strb	r3, [r1, r5]
 8005f58:	3501      	adds	r5, #1
        }
        ++strpos;
 8005f5a:	3701      	adds	r7, #1
      }

      if (strpos >= *offset && bufpos < preferred_size)
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	429f      	cmp	r7, r3
 8005f60:	d306      	bcc.n	8005f70 <well_known_core_handler+0x19c>
 8005f62:	9a05      	ldr	r2, [sp, #20]
 8005f64:	4295      	cmp	r5, r2
 8005f66:	d203      	bcs.n	8005f70 <well_known_core_handler+0x19c>
      {
        buffer[bufpos++] = '<';
 8005f68:	9908      	ldr	r1, [sp, #32]
 8005f6a:	233c      	movs	r3, #60	; 0x3c
 8005f6c:	554b      	strb	r3, [r1, r5]
 8005f6e:	3501      	adds	r5, #1
      }
      ++strpos;

      if (strpos >= *offset && bufpos < preferred_size)
 8005f70:	6823      	ldr	r3, [r4, #0]

      if (strpos >= *offset && bufpos < preferred_size)
      {
        buffer[bufpos++] = '<';
      }
      ++strpos;
 8005f72:	3701      	adds	r7, #1

      if (strpos >= *offset && bufpos < preferred_size)
 8005f74:	429f      	cmp	r7, r3
 8005f76:	d306      	bcc.n	8005f86 <well_known_core_handler+0x1b2>
 8005f78:	9a05      	ldr	r2, [sp, #20]
 8005f7a:	4295      	cmp	r5, r2
 8005f7c:	d203      	bcs.n	8005f86 <well_known_core_handler+0x1b2>
      {
        buffer[bufpos++] = '/';
 8005f7e:	9908      	ldr	r1, [sp, #32]
 8005f80:	232f      	movs	r3, #47	; 0x2f
 8005f82:	554b      	strb	r3, [r1, r5]
 8005f84:	3501      	adds	r5, #1
      }
      ++strpos;

      tmplen = strlen(resource->url);
 8005f86:	68b2      	ldr	r2, [r6, #8]

      if (strpos >= *offset && bufpos < preferred_size)
      {
        buffer[bufpos++] = '/';
      }
      ++strpos;
 8005f88:	3701      	adds	r7, #1

      tmplen = strlen(resource->url);
 8005f8a:	1c10      	adds	r0, r2, #0
 8005f8c:	9204      	str	r2, [sp, #16]
 8005f8e:	f001 f995 	bl	80072bc <strlen>
      if (strpos+tmplen > *offset)
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	19c0      	adds	r0, r0, r7
 8005f96:	9003      	str	r0, [sp, #12]
 8005f98:	4298      	cmp	r0, r3
 8005f9a:	d910      	bls.n	8005fbe <well_known_core_handler+0x1ea>
      {
        bufpos += snprintf((char *) buffer + bufpos, preferred_size - bufpos + 1,
 8005f9c:	9908      	ldr	r1, [sp, #32]
 8005f9e:	1948      	adds	r0, r1, r5
 8005fa0:	9905      	ldr	r1, [sp, #20]
 8005fa2:	3101      	adds	r1, #1
 8005fa4:	1b49      	subs	r1, r1, r5
 8005fa6:	1bdb      	subs	r3, r3, r7
 8005fa8:	d500      	bpl.n	8005fac <well_known_core_handler+0x1d8>
 8005faa:	2300      	movs	r3, #0
 8005fac:	9a04      	ldr	r2, [sp, #16]
 8005fae:	18d3      	adds	r3, r2, r3
 8005fb0:	4a4c      	ldr	r2, [pc, #304]	; (80060e4 <well_known_core_handler+0x310>)
 8005fb2:	f001 f937 	bl	8007224 <snprintf>
                         "%s", resource->url + ((*offset-(int32_t)strpos > 0) ? (*offset-(int32_t)strpos) : 0));
                                                          /* minimal-net requires these casts */
        if (bufpos >= preferred_size)
 8005fb6:	9b05      	ldr	r3, [sp, #20]
      ++strpos;

      tmplen = strlen(resource->url);
      if (strpos+tmplen > *offset)
      {
        bufpos += snprintf((char *) buffer + bufpos, preferred_size - bufpos + 1,
 8005fb8:	182d      	adds	r5, r5, r0
                         "%s", resource->url + ((*offset-(int32_t)strpos > 0) ? (*offset-(int32_t)strpos) : 0));
                                                          /* minimal-net requires these casts */
        if (bufpos >= preferred_size)
 8005fba:	429d      	cmp	r5, r3
 8005fbc:	d24b      	bcs.n	8006056 <well_known_core_handler+0x282>
          break;
        }
      }
      strpos += tmplen;

      if (strpos >= *offset && bufpos < preferred_size)
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	9903      	ldr	r1, [sp, #12]
 8005fc2:	4299      	cmp	r1, r3
 8005fc4:	d306      	bcc.n	8005fd4 <well_known_core_handler+0x200>
 8005fc6:	9a05      	ldr	r2, [sp, #20]
 8005fc8:	4295      	cmp	r5, r2
 8005fca:	d203      	bcs.n	8005fd4 <well_known_core_handler+0x200>
      {
        buffer[bufpos++] = '>';
 8005fcc:	9908      	ldr	r1, [sp, #32]
 8005fce:	233e      	movs	r3, #62	; 0x3e
 8005fd0:	554b      	strb	r3, [r1, r5]
 8005fd2:	3501      	adds	r5, #1
      }
      ++strpos;

      if (resource->attributes[0])
 8005fd4:	68f3      	ldr	r3, [r6, #12]

      if (strpos >= *offset && bufpos < preferred_size)
      {
        buffer[bufpos++] = '>';
      }
      ++strpos;
 8005fd6:	9f03      	ldr	r7, [sp, #12]

      if (resource->attributes[0])
 8005fd8:	781b      	ldrb	r3, [r3, #0]

      if (strpos >= *offset && bufpos < preferred_size)
      {
        buffer[bufpos++] = '>';
      }
      ++strpos;
 8005fda:	3701      	adds	r7, #1

      if (resource->attributes[0])
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d029      	beq.n	8006034 <well_known_core_handler+0x260>
      {
        if (strpos >= *offset && bufpos < preferred_size)
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	429f      	cmp	r7, r3
 8005fe4:	d306      	bcc.n	8005ff4 <well_known_core_handler+0x220>
 8005fe6:	9a05      	ldr	r2, [sp, #20]
 8005fe8:	4295      	cmp	r5, r2
 8005fea:	d203      	bcs.n	8005ff4 <well_known_core_handler+0x220>
        {
          buffer[bufpos++] = ';';
 8005fec:	9908      	ldr	r1, [sp, #32]
 8005fee:	233b      	movs	r3, #59	; 0x3b
 8005ff0:	554b      	strb	r3, [r1, r5]
 8005ff2:	3501      	adds	r5, #1
        }
        ++strpos;

        tmplen = strlen(resource->attributes);
 8005ff4:	68f2      	ldr	r2, [r6, #12]
      {
        if (strpos >= *offset && bufpos < preferred_size)
        {
          buffer[bufpos++] = ';';
        }
        ++strpos;
 8005ff6:	3701      	adds	r7, #1

        tmplen = strlen(resource->attributes);
 8005ff8:	1c10      	adds	r0, r2, #0
      {
        if (strpos >= *offset && bufpos < preferred_size)
        {
          buffer[bufpos++] = ';';
        }
        ++strpos;
 8005ffa:	9703      	str	r7, [sp, #12]

        tmplen = strlen(resource->attributes);
 8005ffc:	9204      	str	r2, [sp, #16]
 8005ffe:	f001 f95d 	bl	80072bc <strlen>
        if (strpos+tmplen > *offset)
 8006002:	9f03      	ldr	r7, [sp, #12]
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	19c7      	adds	r7, r0, r7
 8006008:	429f      	cmp	r7, r3
 800600a:	d913      	bls.n	8006034 <well_known_core_handler+0x260>
        {
          bufpos += snprintf((char *) buffer + bufpos, preferred_size - bufpos + 1,
 800600c:	9908      	ldr	r1, [sp, #32]
 800600e:	9a03      	ldr	r2, [sp, #12]
 8006010:	1948      	adds	r0, r1, r5
 8006012:	9905      	ldr	r1, [sp, #20]
 8006014:	3101      	adds	r1, #1
 8006016:	1b49      	subs	r1, r1, r5
 8006018:	1a9b      	subs	r3, r3, r2
 800601a:	d500      	bpl.n	800601e <well_known_core_handler+0x24a>
 800601c:	2300      	movs	r3, #0
 800601e:	9a04      	ldr	r2, [sp, #16]
 8006020:	18d3      	adds	r3, r2, r3
 8006022:	4a30      	ldr	r2, [pc, #192]	; (80060e4 <well_known_core_handler+0x310>)
 8006024:	f001 f8fe 	bl	8007224 <snprintf>
                         "%s", resource->attributes + (*offset-(int32_t)strpos > 0 ? *offset-(int32_t)strpos : 0));
          if (bufpos >= preferred_size)
 8006028:	9b05      	ldr	r3, [sp, #20]
        ++strpos;

        tmplen = strlen(resource->attributes);
        if (strpos+tmplen > *offset)
        {
          bufpos += snprintf((char *) buffer + bufpos, preferred_size - bufpos + 1,
 800602a:	182d      	adds	r5, r5, r0
                         "%s", resource->attributes + (*offset-(int32_t)strpos > 0 ? *offset-(int32_t)strpos : 0));
          if (bufpos >= preferred_size)
 800602c:	429d      	cmp	r5, r3
 800602e:	d301      	bcc.n	8006034 <well_known_core_handler+0x260>
 8006030:	9f03      	ldr	r7, [sp, #12]
 8006032:	e010      	b.n	8006056 <well_known_core_handler+0x282>
        }
        strpos += tmplen;
      }

      /* buffer full, but resource not completed yet; or: do not break if resource exactly fills buffer. */
      if (bufpos >= preferred_size && strpos-bufpos > *offset)
 8006034:	9905      	ldr	r1, [sp, #20]
 8006036:	428d      	cmp	r5, r1
 8006038:	d309      	bcc.n	800604e <well_known_core_handler+0x27a>
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	1b7a      	subs	r2, r7, r5
 800603e:	429a      	cmp	r2, r3
 8006040:	d905      	bls.n	800604e <well_known_core_handler+0x27a>
      {
        PRINTF("res: BREAK at %s (%p)\n", resource->url, resource);
 8006042:	68b1      	ldr	r1, [r6, #8]
 8006044:	1c32      	adds	r2, r6, #0
 8006046:	4828      	ldr	r0, [pc, #160]	; (80060e8 <well_known_core_handler+0x314>)
 8006048:	f000 fc90 	bl	800696c <iprintf>
        break;
 800604c:	e003      	b.n	8006056 <well_known_core_handler+0x282>
      lastchar = value[len-1];
      value[len-1] = '\0';
    }
#endif

    for (resource = (resource_t*)list_head(rest_get_resources()); resource; resource = resource->next)
 800604e:	6836      	ldr	r6, [r6, #0]
 8006050:	2e00      	cmp	r6, #0
 8006052:	d000      	beq.n	8006056 <well_known_core_handler+0x282>
 8006054:	e703      	b.n	8005e5e <well_known_core_handler+0x8a>
        PRINTF("res: BREAK at %s (%p)\n", resource->url, resource);
        break;
      }
    }

    if (bufpos>0) {
 8006056:	2d00      	cmp	r5, #0
 8006058:	d00f      	beq.n	800607a <well_known_core_handler+0x2a6>
      PRINTF("BUF %d: %.*s\n", bufpos, bufpos, (char *) buffer);
 800605a:	1c29      	adds	r1, r5, #0
 800605c:	1c2a      	adds	r2, r5, #0
 800605e:	9b08      	ldr	r3, [sp, #32]
 8006060:	4822      	ldr	r0, [pc, #136]	; (80060ec <well_known_core_handler+0x318>)
 8006062:	f000 fc83 	bl	800696c <iprintf>

      coap_set_payload(response, buffer, bufpos );
 8006066:	9908      	ldr	r1, [sp, #32]
 8006068:	980a      	ldr	r0, [sp, #40]	; 0x28
 800606a:	1c2a      	adds	r2, r5, #0
 800606c:	f7fe fd33 	bl	8004ad6 <coap_set_payload>
      coap_set_header_content_type(response, APPLICATION_LINK_FORMAT);
 8006070:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006072:	2128      	movs	r1, #40	; 0x28
 8006074:	f7fe fc75 	bl	8004962 <coap_set_header_content_type>
 8006078:	e00d      	b.n	8006096 <well_known_core_handler+0x2c2>
    }
    else if (strpos>0)
 800607a:	2f00      	cmp	r7, #0
 800607c:	d00b      	beq.n	8006096 <well_known_core_handler+0x2c2>
    {
      PRINTF("well_known_core_handler(): bufpos<=0\n");
 800607e:	481c      	ldr	r0, [pc, #112]	; (80060f0 <well_known_core_handler+0x31c>)
 8006080:	f000 fc74 	bl	800696c <iprintf>

      coap_set_status_code(response, BAD_OPTION_4_02);
 8006084:	2182      	movs	r1, #130	; 0x82
 8006086:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006088:	f7fe fc5a 	bl	8004940 <coap_set_status_code>
      coap_set_payload(response, "BlockOutOfScope", 15);
 800608c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800608e:	4919      	ldr	r1, [pc, #100]	; (80060f4 <well_known_core_handler+0x320>)
 8006090:	220f      	movs	r2, #15
 8006092:	f7fe fd20 	bl	8004ad6 <coap_set_payload>
    }

    if (resource==NULL) {
 8006096:	2e00      	cmp	r6, #0
 8006098:	d105      	bne.n	80060a6 <well_known_core_handler+0x2d2>
      PRINTF("res: DONE\n");
 800609a:	4817      	ldr	r0, [pc, #92]	; (80060f8 <well_known_core_handler+0x324>)
 800609c:	f000 fc66 	bl	800696c <iprintf>
      *offset = -1;
 80060a0:	2301      	movs	r3, #1
 80060a2:	425b      	negs	r3, r3
 80060a4:	e007      	b.n	80060b6 <well_known_core_handler+0x2e2>
    }
    else
    {
      PRINTF("res: MORE at %s (%p)\n", resource->url, resource);
 80060a6:	1c32      	adds	r2, r6, #0
 80060a8:	4814      	ldr	r0, [pc, #80]	; (80060fc <well_known_core_handler+0x328>)
 80060aa:	68b1      	ldr	r1, [r6, #8]
 80060ac:	f000 fc5e 	bl	800696c <iprintf>
      *offset += preferred_size;
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	9a05      	ldr	r2, [sp, #20]
 80060b4:	189b      	adds	r3, r3, r2
    }
}
 80060b6:	b00f      	add	sp, #60	; 0x3c
      *offset = -1;
    }
    else
    {
      PRINTF("res: MORE at %s (%p)\n", resource->url, resource);
      *offset += preferred_size;
 80060b8:	6023      	str	r3, [r4, #0]
    }
}
 80060ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060bc:	9003      	str	r0, [sp, #12]
        }
        if (found==NULL)
        {
          continue;
        }
        PRINTF("Filter: res has prefix %s\n", found);
 80060be:	9903      	ldr	r1, [sp, #12]
 80060c0:	480f      	ldr	r0, [pc, #60]	; (8006100 <well_known_core_handler+0x32c>)
 80060c2:	f000 fc53 	bl	800696c <iprintf>
        if (lastchar!='*' && (found[len]!='"' && found[len]!=' ' && found[len]!='\0')) continue;
 80060c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c8:	2b2a      	cmp	r3, #42	; 0x2a
 80060ca:	d000      	beq.n	80060ce <well_known_core_handler+0x2fa>
 80060cc:	e723      	b.n	8005f16 <well_known_core_handler+0x142>
 80060ce:	e72c      	b.n	8005f2a <well_known_core_handler+0x156>
 80060d0:	0800b8ac 	.word	0x0800b8ac
 80060d4:	0800b8be 	.word	0x0800b8be
 80060d8:	0800b8c3 	.word	0x0800b8c3
 80060dc:	0800b8e3 	.word	0x0800b8e3
 80060e0:	0800b8fa 	.word	0x0800b8fa
 80060e4:	0800b91d 	.word	0x0800b91d
 80060e8:	0800b920 	.word	0x0800b920
 80060ec:	0800b937 	.word	0x0800b937
 80060f0:	0800b945 	.word	0x0800b945
 80060f4:	0800b7a2 	.word	0x0800b7a2
 80060f8:	0800b96b 	.word	0x0800b96b
 80060fc:	0800b976 	.word	0x0800b976
 8006100:	0800b98c 	.word	0x0800b98c

08006104 <coap_receiver_init>:
  return coap_error_code;
}
/*----------------------------------------------------------------------------*/
void
coap_receiver_init()
{
 8006104:	b508      	push	{r3, lr}
  process_start(&coap_receiver, NULL);
 8006106:	4802      	ldr	r0, [pc, #8]	; (8006110 <coap_receiver_init+0xc>)
 8006108:	2100      	movs	r1, #0
 800610a:	f7fd ffc3 	bl	8004094 <process_start>
}
 800610e:	bd08      	pop	{r3, pc}
 8006110:	20000580 	.word	0x20000580

08006114 <coap_notify_observers>:
  return removed;
}
/*-----------------------------------------------------------------------------------*/
void
coap_notify_observers(resource_t *resource, int32_t obs_counter, void *notification)
{
 8006114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006116:	b085      	sub	sp, #20
 8006118:	9102      	str	r1, [sp, #8]
 800611a:	1c15      	adds	r5, r2, #0
  coap_packet_t *const coap_res = (coap_packet_t *) notification;
  coap_observer_t* obs = NULL;
  uint8_t preferred_type = coap_res->type;
 800611c:	7952      	ldrb	r2, [r2, #5]
  return removed;
}
/*-----------------------------------------------------------------------------------*/
void
coap_notify_observers(resource_t *resource, int32_t obs_counter, void *notification)
{
 800611e:	1c07      	adds	r7, r0, #0
  uint8_t preferred_type = coap_res->type;

  PRINTF("Observing: Notification from %s\n", resource->url);

  /* Iterate over observers. */
  for (obs = (coap_observer_t*)list_head(observers_list); obs; obs = obs->next)
 8006120:	4822      	ldr	r0, [pc, #136]	; (80061ac <coap_notify_observers+0x98>)
void
coap_notify_observers(resource_t *resource, int32_t obs_counter, void *notification)
{
  coap_packet_t *const coap_res = (coap_packet_t *) notification;
  coap_observer_t* obs = NULL;
  uint8_t preferred_type = coap_res->type;
 8006122:	9203      	str	r2, [sp, #12]

  PRINTF("Observing: Notification from %s\n", resource->url);

  /* Iterate over observers. */
  for (obs = (coap_observer_t*)list_head(observers_list); obs; obs = obs->next)
 8006124:	f7fe f9af 	bl	8004486 <list_head>
 8006128:	1c04      	adds	r4, r0, #0
 800612a:	e03a      	b.n	80061a2 <coap_notify_observers+0x8e>
  {
    if (obs->url==resource->url) /* using RESOURCE url pointer as handle */
 800612c:	6862      	ldr	r2, [r4, #4]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	429a      	cmp	r2, r3
 8006132:	d135      	bne.n	80061a0 <coap_notify_observers+0x8c>
    {
      coap_transaction_t *transaction = NULL;

      /*TODO implement special transaction for CON, sharing the same buffer to allow for more observers. */

      if ( (transaction = coap_new_transaction(coap_get_mid(), &obs->addr, obs->port)) )
 8006134:	f7fe fbfc 	bl	8004930 <coap_get_mid>
 8006138:	1c21      	adds	r1, r4, #0
 800613a:	3108      	adds	r1, #8
 800613c:	89a2      	ldrh	r2, [r4, #12]
 800613e:	f000 f9c3 	bl	80064c8 <coap_new_transaction>
 8006142:	1c06      	adds	r6, r0, #0
 8006144:	2800      	cmp	r0, #0
 8006146:	d02b      	beq.n	80061a0 <coap_notify_observers+0x8c>
        PRINTF("           Observer ");
        PRINT6ADDR(&obs->addr);
        PRINTF(":%u\n", obs->port);

        /* Update last MID for RST matching. */
        obs->last_mid = transaction->mid;
 8006148:	8883      	ldrh	r3, [r0, #4]
 800614a:	8323      	strh	r3, [r4, #24]

        /* Prepare response */
        coap_res->mid = transaction->mid;
 800614c:	8883      	ldrh	r3, [r0, #4]
 800614e:	812b      	strh	r3, [r5, #8]
        if (obs_counter>=0) coap_set_header_observe(coap_res, obs_counter);
 8006150:	9b02      	ldr	r3, [sp, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	db03      	blt.n	800615e <coap_notify_observers+0x4a>
 8006156:	1c28      	adds	r0, r5, #0
 8006158:	1c19      	adds	r1, r3, #0
 800615a:	f7fe fc58 	bl	8004a0e <coap_set_header_observe>
        coap_set_header_token(coap_res, obs->token, obs->token_len);
 800615e:	1c21      	adds	r1, r4, #0
 8006160:	7ba2      	ldrb	r2, [r4, #14]
 8006162:	310f      	adds	r1, #15
 8006164:	1c28      	adds	r0, r5, #0
 8006166:	f7fe fd04 	bl	8004b72 <coap_set_header_token>

        /* Use CON to check whether client is still there/interested after COAP_OBSERVING_REFRESH_INTERVAL. */
        if (stimer_expired(&obs->refresh_timer))
 800616a:	1c22      	adds	r2, r4, #0
 800616c:	321c      	adds	r2, #28
 800616e:	1c10      	adds	r0, r2, #0
 8006170:	9201      	str	r2, [sp, #4]
 8006172:	f7fe fa2b 	bl	80045cc <stimer_expired>
 8006176:	2800      	cmp	r0, #0
 8006178:	d005      	beq.n	8006186 <coap_notify_observers+0x72>
        {
          PRINTF("           Refreshing with CON\n");
          coap_res->type = COAP_TYPE_CON;
 800617a:	2300      	movs	r3, #0
 800617c:	716b      	strb	r3, [r5, #5]
          stimer_restart(&obs->refresh_timer);
 800617e:	9801      	ldr	r0, [sp, #4]
 8006180:	f7fe fa18 	bl	80045b4 <stimer_restart>
 8006184:	e003      	b.n	800618e <coap_notify_observers+0x7a>
        }
        else
        {
          coap_res->type = preferred_type;
 8006186:	466b      	mov	r3, sp
 8006188:	220c      	movs	r2, #12
 800618a:	5cd3      	ldrb	r3, [r2, r3]
 800618c:	716b      	strb	r3, [r5, #5]
        }

        transaction->packet_len = coap_serialize_message(coap_res, transaction->packet);
 800618e:	1c31      	adds	r1, r6, #0
 8006190:	312a      	adds	r1, #42	; 0x2a
 8006192:	1c28      	adds	r0, r5, #0
 8006194:	f7ff f8a8 	bl	80052e8 <coap_serialize_message>
 8006198:	8530      	strh	r0, [r6, #40]	; 0x28

        coap_send_transaction(transaction);
 800619a:	1c30      	adds	r0, r6, #0
 800619c:	f000 f938 	bl	8006410 <coap_send_transaction>
  uint8_t preferred_type = coap_res->type;

  PRINTF("Observing: Notification from %s\n", resource->url);

  /* Iterate over observers. */
  for (obs = (coap_observer_t*)list_head(observers_list); obs; obs = obs->next)
 80061a0:	6824      	ldr	r4, [r4, #0]
 80061a2:	2c00      	cmp	r4, #0
 80061a4:	d1c2      	bne.n	800612c <coap_notify_observers+0x18>

        coap_send_transaction(transaction);
      }
    }
  }
}
 80061a6:	b005      	add	sp, #20
 80061a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061aa:	46c0      	nop			; (mov r8, r8)
 80061ac:	20001348 	.word	0x20001348

080061b0 <coap_remove_observer>:
  return o;
}
/*-----------------------------------------------------------------------------------*/
void
coap_remove_observer(coap_observer_t *o)
{
 80061b0:	b510      	push	{r4, lr}
 80061b2:	1c04      	adds	r4, r0, #0
  PRINTF("Removing observer for /%s [0x%02X%02X]\n", o->url, o->token[0], o->token[1]);

  memb_free(&observers_memb, o);
 80061b4:	1c21      	adds	r1, r4, #0
 80061b6:	4804      	ldr	r0, [pc, #16]	; (80061c8 <coap_remove_observer+0x18>)
 80061b8:	f7fe f9b6 	bl	8004528 <memb_free>
  list_remove(observers_list, o);
 80061bc:	4803      	ldr	r0, [pc, #12]	; (80061cc <coap_remove_observer+0x1c>)
 80061be:	1c21      	adds	r1, r4, #0
 80061c0:	f7fe f96e 	bl	80044a0 <list_remove>
}
 80061c4:	bd10      	pop	{r4, pc}
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	200005b4 	.word	0x200005b4
 80061cc:	20001348 	.word	0x20001348

080061d0 <coap_remove_observer_by_mid>:
  return removed;
}

int
coap_remove_observer_by_mid(uip_ipaddr_t *addr, uint16_t port, uint16_t mid)
{
 80061d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d2:	b083      	sub	sp, #12
 80061d4:	1c06      	adds	r6, r0, #0
  int removed = 0;
  coap_observer_t* obs = NULL;

  for (obs = (coap_observer_t*)list_head(observers_list); obs; obs = obs->next)
 80061d6:	4810      	ldr	r0, [pc, #64]	; (8006218 <coap_remove_observer_by_mid+0x48>)
  return removed;
}

int
coap_remove_observer_by_mid(uip_ipaddr_t *addr, uint16_t port, uint16_t mid)
{
 80061d8:	1c0f      	adds	r7, r1, #0
 80061da:	9201      	str	r2, [sp, #4]
  int removed = 0;
  coap_observer_t* obs = NULL;

  for (obs = (coap_observer_t*)list_head(observers_list); obs; obs = obs->next)
 80061dc:	f7fe f953 	bl	8004486 <list_head>
 80061e0:	2500      	movs	r5, #0
 80061e2:	1c04      	adds	r4, r0, #0
 80061e4:	e013      	b.n	800620e <coap_remove_observer_by_mid+0x3e>
  {
    PRINTF("Remove check MID %u\n", mid);
    if (uip_ipaddr_cmp(&obs->addr, addr) && obs->port==port && obs->last_mid==mid)
 80061e6:	8922      	ldrh	r2, [r4, #8]
 80061e8:	8833      	ldrh	r3, [r6, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d10e      	bne.n	800620c <coap_remove_observer_by_mid+0x3c>
 80061ee:	8962      	ldrh	r2, [r4, #10]
 80061f0:	8873      	ldrh	r3, [r6, #2]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d10a      	bne.n	800620c <coap_remove_observer_by_mid+0x3c>
 80061f6:	89a3      	ldrh	r3, [r4, #12]
 80061f8:	42bb      	cmp	r3, r7
 80061fa:	d107      	bne.n	800620c <coap_remove_observer_by_mid+0x3c>
 80061fc:	8b23      	ldrh	r3, [r4, #24]
 80061fe:	9a01      	ldr	r2, [sp, #4]
 8006200:	4293      	cmp	r3, r2
 8006202:	d103      	bne.n	800620c <coap_remove_observer_by_mid+0x3c>
    {
      coap_remove_observer(obs);
 8006204:	1c20      	adds	r0, r4, #0
 8006206:	f7ff ffd3 	bl	80061b0 <coap_remove_observer>
      removed++;
 800620a:	3501      	adds	r5, #1
coap_remove_observer_by_mid(uip_ipaddr_t *addr, uint16_t port, uint16_t mid)
{
  int removed = 0;
  coap_observer_t* obs = NULL;

  for (obs = (coap_observer_t*)list_head(observers_list); obs; obs = obs->next)
 800620c:	6824      	ldr	r4, [r4, #0]
 800620e:	2c00      	cmp	r4, #0
 8006210:	d1e9      	bne.n	80061e6 <coap_remove_observer_by_mid+0x16>
      coap_remove_observer(obs);
      removed++;
    }
  }
  return removed;
}
 8006212:	b003      	add	sp, #12
 8006214:	1c28      	adds	r0, r5, #0
 8006216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006218:	20001348 	.word	0x20001348

0800621c <coap_remove_observer_by_url>:
  return removed;
}

int
coap_remove_observer_by_url(uip_ipaddr_t *addr, uint16_t port, const char *url)
{
 800621c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800621e:	b083      	sub	sp, #12
 8006220:	1c06      	adds	r6, r0, #0
  int removed = 0;
  coap_observer_t* obs = NULL;

  for (obs = (coap_observer_t*)list_head(observers_list); obs; obs = obs->next)
 8006222:	4817      	ldr	r0, [pc, #92]	; (8006280 <coap_remove_observer_by_url+0x64>)
  return removed;
}

int
coap_remove_observer_by_url(uip_ipaddr_t *addr, uint16_t port, const char *url)
{
 8006224:	9101      	str	r1, [sp, #4]
 8006226:	9200      	str	r2, [sp, #0]
  int removed = 0;
  coap_observer_t* obs = NULL;

  for (obs = (coap_observer_t*)list_head(observers_list); obs; obs = obs->next)
 8006228:	f7fe f92d 	bl	8004486 <list_head>
 800622c:	2700      	movs	r7, #0
 800622e:	1c04      	adds	r4, r0, #0
 8006230:	e020      	b.n	8006274 <coap_remove_observer_by_url+0x58>
  {
    PRINTF("Remove check URL %p\n", url);
    if ((addr==NULL || (uip_ipaddr_cmp(&obs->addr, addr) && obs->port==port)) && (obs->url==url || memcmp(obs->url, url, strlen(obs->url))==0))
 8006232:	2e00      	cmp	r6, #0
 8006234:	d00b      	beq.n	800624e <coap_remove_observer_by_url+0x32>
 8006236:	8922      	ldrh	r2, [r4, #8]
 8006238:	8833      	ldrh	r3, [r6, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d119      	bne.n	8006272 <coap_remove_observer_by_url+0x56>
 800623e:	8962      	ldrh	r2, [r4, #10]
 8006240:	8873      	ldrh	r3, [r6, #2]
 8006242:	429a      	cmp	r2, r3
 8006244:	d115      	bne.n	8006272 <coap_remove_observer_by_url+0x56>
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	9a01      	ldr	r2, [sp, #4]
 800624a:	4293      	cmp	r3, r2
 800624c:	d111      	bne.n	8006272 <coap_remove_observer_by_url+0x56>
 800624e:	6865      	ldr	r5, [r4, #4]
 8006250:	9b00      	ldr	r3, [sp, #0]
 8006252:	429d      	cmp	r5, r3
 8006254:	d009      	beq.n	800626a <coap_remove_observer_by_url+0x4e>
 8006256:	1c28      	adds	r0, r5, #0
 8006258:	f001 f830 	bl	80072bc <strlen>
 800625c:	9900      	ldr	r1, [sp, #0]
 800625e:	1c02      	adds	r2, r0, #0
 8006260:	1c28      	adds	r0, r5, #0
 8006262:	f000 fdb1 	bl	8006dc8 <memcmp>
 8006266:	2800      	cmp	r0, #0
 8006268:	d103      	bne.n	8006272 <coap_remove_observer_by_url+0x56>
    {
      coap_remove_observer(obs);
 800626a:	1c20      	adds	r0, r4, #0
 800626c:	f7ff ffa0 	bl	80061b0 <coap_remove_observer>
      removed++;
 8006270:	3701      	adds	r7, #1
coap_remove_observer_by_url(uip_ipaddr_t *addr, uint16_t port, const char *url)
{
  int removed = 0;
  coap_observer_t* obs = NULL;

  for (obs = (coap_observer_t*)list_head(observers_list); obs; obs = obs->next)
 8006272:	6824      	ldr	r4, [r4, #0]
 8006274:	2c00      	cmp	r4, #0
 8006276:	d1dc      	bne.n	8006232 <coap_remove_observer_by_url+0x16>
      coap_remove_observer(obs);
      removed++;
    }
  }
  return removed;
}
 8006278:	b003      	add	sp, #12
 800627a:	1c38      	adds	r0, r7, #0
 800627c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	20001348 	.word	0x20001348

08006284 <coap_remove_observer_by_client>:
  list_remove(observers_list, o);
}

int
coap_remove_observer_by_client(uip_ipaddr_t *addr, uint16_t port)
{
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	1c06      	adds	r6, r0, #0
  int removed = 0;
  coap_observer_t* obs = NULL;

  for (obs = (coap_observer_t*)list_head(observers_list); obs; obs = obs->next)
 8006288:	480d      	ldr	r0, [pc, #52]	; (80062c0 <coap_remove_observer_by_client+0x3c>)
  list_remove(observers_list, o);
}

int
coap_remove_observer_by_client(uip_ipaddr_t *addr, uint16_t port)
{
 800628a:	1c0f      	adds	r7, r1, #0
  int removed = 0;
  coap_observer_t* obs = NULL;

  for (obs = (coap_observer_t*)list_head(observers_list); obs; obs = obs->next)
 800628c:	f7fe f8fb 	bl	8004486 <list_head>
 8006290:	2500      	movs	r5, #0
 8006292:	1c04      	adds	r4, r0, #0
 8006294:	e00f      	b.n	80062b6 <coap_remove_observer_by_client+0x32>
  {
    PRINTF("Remove check client ");
    PRINT6ADDR(addr);
    PRINTF(":%u\n", port);
    if (uip_ipaddr_cmp(&obs->addr, addr) && obs->port==port)
 8006296:	8922      	ldrh	r2, [r4, #8]
 8006298:	8833      	ldrh	r3, [r6, #0]
 800629a:	429a      	cmp	r2, r3
 800629c:	d10a      	bne.n	80062b4 <coap_remove_observer_by_client+0x30>
 800629e:	8962      	ldrh	r2, [r4, #10]
 80062a0:	8873      	ldrh	r3, [r6, #2]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d106      	bne.n	80062b4 <coap_remove_observer_by_client+0x30>
 80062a6:	89a3      	ldrh	r3, [r4, #12]
 80062a8:	42bb      	cmp	r3, r7
 80062aa:	d103      	bne.n	80062b4 <coap_remove_observer_by_client+0x30>
    {
      coap_remove_observer(obs);
 80062ac:	1c20      	adds	r0, r4, #0
 80062ae:	f7ff ff7f 	bl	80061b0 <coap_remove_observer>
      removed++;
 80062b2:	3501      	adds	r5, #1
coap_remove_observer_by_client(uip_ipaddr_t *addr, uint16_t port)
{
  int removed = 0;
  coap_observer_t* obs = NULL;

  for (obs = (coap_observer_t*)list_head(observers_list); obs; obs = obs->next)
 80062b4:	6824      	ldr	r4, [r4, #0]
 80062b6:	2c00      	cmp	r4, #0
 80062b8:	d1ed      	bne.n	8006296 <coap_remove_observer_by_client+0x12>
      coap_remove_observer(obs);
      removed++;
    }
  }
  return removed;
}
 80062ba:	1c28      	adds	r0, r5, #0
 80062bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	20001348 	.word	0x20001348

080062c4 <coap_add_observer>:
LIST(observers_list);

/*-----------------------------------------------------------------------------------*/
coap_observer_t *
coap_add_observer(uip_ipaddr_t *addr, uint16_t port, const uint8_t *token, size_t token_len, const char *url)
{
 80062c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062c6:	b083      	sub	sp, #12
 80062c8:	9201      	str	r2, [sp, #4]
  /* Remove existing observe relationship, if any. */
  coap_remove_observer_by_url(addr, port, url);
 80062ca:	9a08      	ldr	r2, [sp, #32]
LIST(observers_list);

/*-----------------------------------------------------------------------------------*/
coap_observer_t *
coap_add_observer(uip_ipaddr_t *addr, uint16_t port, const uint8_t *token, size_t token_len, const char *url)
{
 80062cc:	1c0e      	adds	r6, r1, #0
 80062ce:	1c1f      	adds	r7, r3, #0
 80062d0:	1c05      	adds	r5, r0, #0
  /* Remove existing observe relationship, if any. */
  coap_remove_observer_by_url(addr, port, url);
 80062d2:	f7ff ffa3 	bl	800621c <coap_remove_observer_by_url>

  coap_observer_t *o = memb_alloc(&observers_memb);
 80062d6:	4811      	ldr	r0, [pc, #68]	; (800631c <coap_add_observer+0x58>)
 80062d8:	f7fe f911 	bl	80044fe <memb_alloc>
 80062dc:	1c04      	adds	r4, r0, #0

  if (o)
 80062de:	2800      	cmp	r0, #0
 80062e0:	d019      	beq.n	8006316 <coap_add_observer+0x52>
  {
    o->url = url;
 80062e2:	9b08      	ldr	r3, [sp, #32]
    uip_ipaddr_copy(&o->addr, addr);
 80062e4:	1c29      	adds	r1, r5, #0

  coap_observer_t *o = memb_alloc(&observers_memb);

  if (o)
  {
    o->url = url;
 80062e6:	6043      	str	r3, [r0, #4]
    uip_ipaddr_copy(&o->addr, addr);
 80062e8:	2204      	movs	r2, #4
 80062ea:	3008      	adds	r0, #8
 80062ec:	f000 fd7b 	bl	8006de6 <memcpy>
    o->port = port;
    o->token_len = token_len;
 80062f0:	73a7      	strb	r7, [r4, #14]
    memcpy(o->token, token, token_len);
 80062f2:	1c20      	adds	r0, r4, #0
 80062f4:	9901      	ldr	r1, [sp, #4]
 80062f6:	1c3a      	adds	r2, r7, #0

  if (o)
  {
    o->url = url;
    uip_ipaddr_copy(&o->addr, addr);
    o->port = port;
 80062f8:	81a6      	strh	r6, [r4, #12]
    o->token_len = token_len;
    memcpy(o->token, token, token_len);
 80062fa:	300f      	adds	r0, #15
 80062fc:	f000 fd73 	bl	8006de6 <memcpy>
    o->last_mid = 0;
 8006300:	2300      	movs	r3, #0

    stimer_set(&o->refresh_timer, COAP_OBSERVING_REFRESH_INTERVAL);
 8006302:	1c20      	adds	r0, r4, #0
 8006304:	301c      	adds	r0, #28
 8006306:	213c      	movs	r1, #60	; 0x3c
    o->url = url;
    uip_ipaddr_copy(&o->addr, addr);
    o->port = port;
    o->token_len = token_len;
    memcpy(o->token, token, token_len);
    o->last_mid = 0;
 8006308:	8323      	strh	r3, [r4, #24]

    stimer_set(&o->refresh_timer, COAP_OBSERVING_REFRESH_INTERVAL);
 800630a:	f7fe f945 	bl	8004598 <stimer_set>

    PRINTF("Adding observer for /%s [0x%02X%02X]\n", o->url, o->token[0], o->token[1]);
    list_add(observers_list, o);
 800630e:	4804      	ldr	r0, [pc, #16]	; (8006320 <coap_add_observer+0x5c>)
 8006310:	1c21      	adds	r1, r4, #0
 8006312:	f7fe f8db 	bl	80044cc <list_add>
  }

  return o;
}
 8006316:	b003      	add	sp, #12
 8006318:	1c20      	adds	r0, r4, #0
 800631a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800631c:	200005b4 	.word	0x200005b4
 8006320:	20001348 	.word	0x20001348

08006324 <coap_observe_handler>:
  }
}
/*-----------------------------------------------------------------------------------*/
void
coap_observe_handler(resource_t *resource, void *request, void *response)
{
 8006324:	b5f0      	push	{r4, r5, r6, r7, lr}
  coap_packet_t *const coap_req = (coap_packet_t *) request;
  coap_packet_t *const coap_res = (coap_packet_t *) response;

  static char content[16];

  if (coap_req->code==COAP_GET && coap_res->code<128) /* GET request and response without error code */
 8006326:	798e      	ldrb	r6, [r1, #6]
  }
}
/*-----------------------------------------------------------------------------------*/
void
coap_observe_handler(resource_t *resource, void *request, void *response)
{
 8006328:	b083      	sub	sp, #12
 800632a:	1c05      	adds	r5, r0, #0
 800632c:	1c14      	adds	r4, r2, #0
  coap_packet_t *const coap_req = (coap_packet_t *) request;
  coap_packet_t *const coap_res = (coap_packet_t *) response;

  static char content[16];

  if (coap_req->code==COAP_GET && coap_res->code<128) /* GET request and response without error code */
 800632e:	2e01      	cmp	r6, #1
 8006330:	d133      	bne.n	800639a <coap_observe_handler+0x76>
 8006332:	2306      	movs	r3, #6
 8006334:	56d3      	ldrsb	r3, [r2, r3]
 8006336:	2b00      	cmp	r3, #0
 8006338:	db2f      	blt.n	800639a <coap_observe_handler+0x76>
  {
    if (IS_OPTION(coap_req, COAP_OPTION_OBSERVE))
 800633a:	7a8b      	ldrb	r3, [r1, #10]
 800633c:	4818      	ldr	r0, [pc, #96]	; (80063a0 <coap_observe_handler+0x7c>)
 800633e:	065a      	lsls	r2, r3, #25
 8006340:	d527      	bpl.n	8006392 <coap_observe_handler+0x6e>
    {

      if (coap_add_observer(&UIP_IP_BUF->srcipaddr, UIP_UDP_BUF->srcport, coap_req->token, coap_req->token_len, resource->url))
 8006342:	1c0a      	adds	r2, r1, #0
 8006344:	314e      	adds	r1, #78	; 0x4e
 8006346:	8907      	ldrh	r7, [r0, #8]
 8006348:	780b      	ldrb	r3, [r1, #0]
 800634a:	68a9      	ldr	r1, [r5, #8]
 800634c:	324f      	adds	r2, #79	; 0x4f
 800634e:	9100      	str	r1, [sp, #0]
 8006350:	1c39      	adds	r1, r7, #0
 8006352:	f7ff ffb7 	bl	80062c4 <coap_add_observer>
 8006356:	2800      	cmp	r0, #0
 8006358:	d012      	beq.n	8006380 <coap_observe_handler+0x5c>
      {
        coap_set_header_observe(coap_res, 0);
 800635a:	2100      	movs	r1, #0
 800635c:	1c20      	adds	r0, r4, #0
 800635e:	f7fe fb56 	bl	8004a0e <coap_set_header_observe>
        /*
         * For demonstration purposes only. A subscription should return the same representation as a normal GET.
         * TODO: Comment the following line for any real application.
         */
        coap_set_payload(coap_res, content, snprintf(content, sizeof(content), "Added %u/%u", list_length(observers_list), COAP_MAX_OBSERVERS));
 8006362:	4810      	ldr	r0, [pc, #64]	; (80063a4 <coap_observe_handler+0x80>)
 8006364:	f7fe f8c2 	bl	80044ec <list_length>
 8006368:	4d0f      	ldr	r5, [pc, #60]	; (80063a8 <coap_observe_handler+0x84>)
 800636a:	1c03      	adds	r3, r0, #0
 800636c:	2110      	movs	r1, #16
 800636e:	4a0f      	ldr	r2, [pc, #60]	; (80063ac <coap_observe_handler+0x88>)
 8006370:	1c28      	adds	r0, r5, #0
 8006372:	9600      	str	r6, [sp, #0]
 8006374:	f000 ff56 	bl	8007224 <snprintf>
 8006378:	1c29      	adds	r1, r5, #0
 800637a:	1c02      	adds	r2, r0, #0
 800637c:	1c20      	adds	r0, r4, #0
 800637e:	e005      	b.n	800638c <coap_observe_handler+0x68>
      }
      else
      {
        coap_res->code = SERVICE_UNAVAILABLE_5_03;
 8006380:	235d      	movs	r3, #93	; 0x5d
 8006382:	425b      	negs	r3, r3
        coap_set_payload(coap_res, "TooManyObservers", 16);
 8006384:	490a      	ldr	r1, [pc, #40]	; (80063b0 <coap_observe_handler+0x8c>)
         */
        coap_set_payload(coap_res, content, snprintf(content, sizeof(content), "Added %u/%u", list_length(observers_list), COAP_MAX_OBSERVERS));
      }
      else
      {
        coap_res->code = SERVICE_UNAVAILABLE_5_03;
 8006386:	71a3      	strb	r3, [r4, #6]
        coap_set_payload(coap_res, "TooManyObservers", 16);
 8006388:	1c20      	adds	r0, r4, #0
 800638a:	2210      	movs	r2, #16
 800638c:	f7fe fba3 	bl	8004ad6 <coap_set_payload>
 8006390:	e003      	b.n	800639a <coap_observe_handler+0x76>
      } /* if (added observer) */
    }
    else /* if (observe) */
    {
      /* Remove client if it is currently observing. */
      coap_remove_observer_by_url(&UIP_IP_BUF->srcipaddr, UIP_UDP_BUF->srcport, resource->url);
 8006392:	8901      	ldrh	r1, [r0, #8]
 8006394:	68aa      	ldr	r2, [r5, #8]
 8006396:	f7ff ff41 	bl	800621c <coap_remove_observer_by_url>
    } /* if (observe) */
  }
}
 800639a:	b003      	add	sp, #12
 800639c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800639e:	46c0      	nop			; (mov r8, r8)
 80063a0:	20001596 	.word	0x20001596
 80063a4:	20001348 	.word	0x20001348
 80063a8:	20001310 	.word	0x20001310
 80063ac:	0800b9d4 	.word	0x0800b9d4
 80063b0:	0800b9e0 	.word	0x0800b9e0

080063b4 <coap_register_as_transaction_handler>:
static struct process *transaction_handler_process = NULL;

void
coap_register_as_transaction_handler()
{
  transaction_handler_process = PROCESS_CURRENT();
 80063b4:	4b02      	ldr	r3, [pc, #8]	; (80063c0 <coap_register_as_transaction_handler+0xc>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	4b02      	ldr	r3, [pc, #8]	; (80063c4 <coap_register_as_transaction_handler+0x10>)
 80063ba:	601a      	str	r2, [r3, #0]
}
 80063bc:	4770      	bx	lr
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	2000103c 	.word	0x2000103c
 80063c4:	20001350 	.word	0x20001350

080063c8 <coap_get_transaction_by_mid>:
  }
}

coap_transaction_t *
coap_get_transaction_by_mid(uint16_t mid)
{
 80063c8:	b510      	push	{r4, lr}
 80063ca:	1c04      	adds	r4, r0, #0
  coap_transaction_t *t = NULL;

  for (t = (coap_transaction_t*)list_head(transactions_list); t; t = t->next)
 80063cc:	4805      	ldr	r0, [pc, #20]	; (80063e4 <coap_get_transaction_by_mid+0x1c>)
 80063ce:	f7fe f85a 	bl	8004486 <list_head>
 80063d2:	e003      	b.n	80063dc <coap_get_transaction_by_mid+0x14>
  {
    if (t->mid==mid)
 80063d4:	8883      	ldrh	r3, [r0, #4]
 80063d6:	42a3      	cmp	r3, r4
 80063d8:	d002      	beq.n	80063e0 <coap_get_transaction_by_mid+0x18>
coap_transaction_t *
coap_get_transaction_by_mid(uint16_t mid)
{
  coap_transaction_t *t = NULL;

  for (t = (coap_transaction_t*)list_head(transactions_list); t; t = t->next)
 80063da:	6800      	ldr	r0, [r0, #0]
 80063dc:	2800      	cmp	r0, #0
 80063de:	d1f9      	bne.n	80063d4 <coap_get_transaction_by_mid+0xc>
      PRINTF("Found transaction for MID %u: %p\n", t->mid, t);
      return t;
    }
  }
  return NULL;
}
 80063e0:	bd10      	pop	{r4, pc}
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	2000134c 	.word	0x2000134c

080063e8 <coap_clear_transaction>:
  }
}

void
coap_clear_transaction(coap_transaction_t *t)
{
 80063e8:	b510      	push	{r4, lr}
 80063ea:	1c04      	adds	r4, r0, #0
  if (t)
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d00a      	beq.n	8006406 <coap_clear_transaction+0x1e>
  {
    PRINTF("Freeing transaction %u: %p\n", t->mid, t);

    etimer_stop(&t->retrans_timer);
 80063f0:	3008      	adds	r0, #8
 80063f2:	f7fd fe99 	bl	8004128 <etimer_stop>
    list_remove(transactions_list, t);
 80063f6:	4804      	ldr	r0, [pc, #16]	; (8006408 <coap_clear_transaction+0x20>)
 80063f8:	1c21      	adds	r1, r4, #0
 80063fa:	f7fe f851 	bl	80044a0 <list_remove>
    memb_free(&transactions_memb, t);
 80063fe:	4803      	ldr	r0, [pc, #12]	; (800640c <coap_clear_transaction+0x24>)
 8006400:	1c21      	adds	r1, r4, #0
 8006402:	f7fe f891 	bl	8004528 <memb_free>
  }
}
 8006406:	bd10      	pop	{r4, pc}
 8006408:	2000134c 	.word	0x2000134c
 800640c:	200005c0 	.word	0x200005c0

08006410 <coap_send_transaction>:
  return t;
}

void
coap_send_transaction(coap_transaction_t *t)
{
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PRINTF("Sending transaction %u\n", t->mid);

  coap_send_message(&t->addr, t->port, t->packet, t->packet_len);
 8006412:	1c06      	adds	r6, r0, #0
 8006414:	1c05      	adds	r5, r0, #0
 8006416:	352a      	adds	r5, #42	; 0x2a
 8006418:	361a      	adds	r6, #26
 800641a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800641c:	8bc1      	ldrh	r1, [r0, #30]
  return t;
}

void
coap_send_transaction(coap_transaction_t *t)
{
 800641e:	1c04      	adds	r4, r0, #0
  PRINTF("Sending transaction %u\n", t->mid);

  coap_send_message(&t->addr, t->port, t->packet, t->packet_len);
 8006420:	1c2a      	adds	r2, r5, #0
 8006422:	1c30      	adds	r0, r6, #0
 8006424:	f7ff f9e6 	bl	80057f4 <coap_send_message>

  if (COAP_TYPE_CON==((COAP_HEADER_TYPE_MASK & t->packet[0])>>COAP_HEADER_TYPE_POSITION))
 8006428:	782b      	ldrb	r3, [r5, #0]
 800642a:	069b      	lsls	r3, r3, #26
 800642c:	0f9b      	lsrs	r3, r3, #30
 800642e:	2b00      	cmp	r3, #0
 8006430:	d129      	bne.n	8006486 <coap_send_transaction+0x76>
  {
    if (t->retrans_counter<COAP_MAX_RETRANSMIT)
 8006432:	7e23      	ldrb	r3, [r4, #24]
 8006434:	2b03      	cmp	r3, #3
 8006436:	d817      	bhi.n	8006468 <coap_send_transaction+0x58>
    {
      /* Not timed out yet. */
      PRINTF("Keeping transaction %u\n", t->mid);

      if (t->retrans_counter==0)
 8006438:	2b00      	cmp	r3, #0
 800643a:	d107      	bne.n	800644c <coap_send_transaction+0x3c>
      {
        t->retrans_timer.timer.interval = COAP_RESPONSE_TIMEOUT_TICKS + (random_rand() % (clock_time_t) COAP_RESPONSE_TIMEOUT_BACKOFF_MASK);
 800643c:	f7fe fa26 	bl	800488c <random_rand>
 8006440:	2121      	movs	r1, #33	; 0x21
 8006442:	f7f9 fe9b 	bl	800017c <__aeabi_uidivmod>
 8006446:	3140      	adds	r1, #64	; 0x40
 8006448:	60e1      	str	r1, [r4, #12]
 800644a:	e002      	b.n	8006452 <coap_send_transaction+0x42>
        PRINTF("Initial interval %f\n", (float)t->retrans_timer.timer.interval/CLOCK_SECOND);
      }
      else
      {
        t->retrans_timer.timer.interval <<= 1; /* double */
 800644c:	68e3      	ldr	r3, [r4, #12]
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	60e3      	str	r3, [r4, #12]
      /*FIXME
       * Hack: Setting timer for responsible process.
       * Maybe there is a better way, but avoid posting everything to the process.
       */
      struct process *process_actual = PROCESS_CURRENT();
      process_current = transaction_handler_process;
 8006452:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <coap_send_transaction+0x80>)

      /*FIXME
       * Hack: Setting timer for responsible process.
       * Maybe there is a better way, but avoid posting everything to the process.
       */
      struct process *process_actual = PROCESS_CURRENT();
 8006454:	4d0f      	ldr	r5, [pc, #60]	; (8006494 <coap_send_transaction+0x84>)
      process_current = transaction_handler_process;
 8006456:	681b      	ldr	r3, [r3, #0]

      /*FIXME
       * Hack: Setting timer for responsible process.
       * Maybe there is a better way, but avoid posting everything to the process.
       */
      struct process *process_actual = PROCESS_CURRENT();
 8006458:	682e      	ldr	r6, [r5, #0]
      process_current = transaction_handler_process;
      etimer_restart(&t->retrans_timer); /* interval updated above */
 800645a:	1c20      	adds	r0, r4, #0
      /*FIXME
       * Hack: Setting timer for responsible process.
       * Maybe there is a better way, but avoid posting everything to the process.
       */
      struct process *process_actual = PROCESS_CURRENT();
      process_current = transaction_handler_process;
 800645c:	602b      	str	r3, [r5, #0]
      etimer_restart(&t->retrans_timer); /* interval updated above */
 800645e:	3008      	adds	r0, #8
 8006460:	f7fd fefc 	bl	800425c <etimer_restart>
      process_current = process_actual;
 8006464:	602e      	str	r6, [r5, #0]
 8006466:	e011      	b.n	800648c <coap_send_transaction+0x7c>
    }
    else
    {
      /* Timed out. */
      PRINTF("Timeout\n");
      restful_response_handler callback = t->callback;
 8006468:	6a25      	ldr	r5, [r4, #32]
      void *callback_data = t->callback_data;

      /* handle observers */
      coap_remove_observer_by_client(&t->addr, t->port);
 800646a:	8be1      	ldrh	r1, [r4, #30]
 800646c:	1c30      	adds	r0, r6, #0
    else
    {
      /* Timed out. */
      PRINTF("Timeout\n");
      restful_response_handler callback = t->callback;
      void *callback_data = t->callback_data;
 800646e:	6a67      	ldr	r7, [r4, #36]	; 0x24

      /* handle observers */
      coap_remove_observer_by_client(&t->addr, t->port);
 8006470:	f7ff ff08 	bl	8006284 <coap_remove_observer_by_client>

      coap_clear_transaction(t);
 8006474:	1c20      	adds	r0, r4, #0
 8006476:	f7ff ffb7 	bl	80063e8 <coap_clear_transaction>

      if (callback) {
 800647a:	2d00      	cmp	r5, #0
 800647c:	d006      	beq.n	800648c <coap_send_transaction+0x7c>
        callback(callback_data, NULL);
 800647e:	1c38      	adds	r0, r7, #0
 8006480:	2100      	movs	r1, #0
 8006482:	47a8      	blx	r5
 8006484:	e002      	b.n	800648c <coap_send_transaction+0x7c>
      }
    }
  }
  else
  {
    coap_clear_transaction(t);
 8006486:	1c20      	adds	r0, r4, #0
 8006488:	f7ff ffae 	bl	80063e8 <coap_clear_transaction>
  }
}
 800648c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800648e:	46c0      	nop			; (mov r8, r8)
 8006490:	20001350 	.word	0x20001350
 8006494:	2000103c 	.word	0x2000103c

08006498 <coap_check_transactions>:
  return NULL;
}

void
coap_check_transactions()
{
 8006498:	b510      	push	{r4, lr}
  coap_transaction_t *t = NULL;

  for (t = (coap_transaction_t*)list_head(transactions_list); t; t = t->next)
 800649a:	480a      	ldr	r0, [pc, #40]	; (80064c4 <coap_check_transactions+0x2c>)
 800649c:	f7fd fff3 	bl	8004486 <list_head>
 80064a0:	1c04      	adds	r4, r0, #0
 80064a2:	e00c      	b.n	80064be <coap_check_transactions+0x26>
  {
    if (etimer_expired(&t->retrans_timer))
 80064a4:	1c20      	adds	r0, r4, #0
 80064a6:	3008      	adds	r0, #8
 80064a8:	f7fd fe32 	bl	8004110 <etimer_expired>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d005      	beq.n	80064bc <coap_check_transactions+0x24>
    {
      ++(t->retrans_counter);
 80064b0:	7e23      	ldrb	r3, [r4, #24]
      PRINTF("Retransmitting %u (%u)\n", t->mid, t->retrans_counter);
      coap_send_transaction(t);
 80064b2:	1c20      	adds	r0, r4, #0

  for (t = (coap_transaction_t*)list_head(transactions_list); t; t = t->next)
  {
    if (etimer_expired(&t->retrans_timer))
    {
      ++(t->retrans_counter);
 80064b4:	3301      	adds	r3, #1
 80064b6:	7623      	strb	r3, [r4, #24]
      PRINTF("Retransmitting %u (%u)\n", t->mid, t->retrans_counter);
      coap_send_transaction(t);
 80064b8:	f7ff ffaa 	bl	8006410 <coap_send_transaction>
void
coap_check_transactions()
{
  coap_transaction_t *t = NULL;

  for (t = (coap_transaction_t*)list_head(transactions_list); t; t = t->next)
 80064bc:	6824      	ldr	r4, [r4, #0]
 80064be:	2c00      	cmp	r4, #0
 80064c0:	d1f0      	bne.n	80064a4 <coap_check_transactions+0xc>
      ++(t->retrans_counter);
      PRINTF("Retransmitting %u (%u)\n", t->mid, t->retrans_counter);
      coap_send_transaction(t);
    }
  }
}
 80064c2:	bd10      	pop	{r4, pc}
 80064c4:	2000134c 	.word	0x2000134c

080064c8 <coap_new_transaction>:
  transaction_handler_process = PROCESS_CURRENT();
}

coap_transaction_t *
coap_new_transaction(uint16_t mid, uip_ipaddr_t *addr, uint16_t port)
{
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	1c05      	adds	r5, r0, #0
  coap_transaction_t *t = memb_alloc(&transactions_memb);
 80064cc:	480b      	ldr	r0, [pc, #44]	; (80064fc <coap_new_transaction+0x34>)
  transaction_handler_process = PROCESS_CURRENT();
}

coap_transaction_t *
coap_new_transaction(uint16_t mid, uip_ipaddr_t *addr, uint16_t port)
{
 80064ce:	1c0e      	adds	r6, r1, #0
 80064d0:	1c17      	adds	r7, r2, #0
  coap_transaction_t *t = memb_alloc(&transactions_memb);
 80064d2:	f7fe f814 	bl	80044fe <memb_alloc>
 80064d6:	1c04      	adds	r4, r0, #0

  if (t)
 80064d8:	2800      	cmp	r0, #0
 80064da:	d00c      	beq.n	80064f6 <coap_new_transaction+0x2e>
  {
    t->mid = mid;
    t->retrans_counter = 0;
 80064dc:	2300      	movs	r3, #0
{
  coap_transaction_t *t = memb_alloc(&transactions_memb);

  if (t)
  {
    t->mid = mid;
 80064de:	8085      	strh	r5, [r0, #4]
    t->retrans_counter = 0;
 80064e0:	7603      	strb	r3, [r0, #24]

    /* save client address */
    uip_ipaddr_copy(&t->addr, addr);
 80064e2:	1c31      	adds	r1, r6, #0
 80064e4:	301a      	adds	r0, #26
 80064e6:	2204      	movs	r2, #4
 80064e8:	f000 fc7d 	bl	8006de6 <memcpy>
    t->port = port;
 80064ec:	83e7      	strh	r7, [r4, #30]

    list_add(transactions_list, t); /* List itself makes sure same element is not added twice. */
 80064ee:	4804      	ldr	r0, [pc, #16]	; (8006500 <coap_new_transaction+0x38>)
 80064f0:	1c21      	adds	r1, r4, #0
 80064f2:	f7fd ffeb 	bl	80044cc <list_add>
  }

  return t;
}
 80064f6:	1c20      	adds	r0, r4, #0
 80064f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064fa:	46c0      	nop			; (mov r8, r8)
 80064fc:	200005c0 	.word	0x200005c0
 8006500:	2000134c 	.word	0x2000134c

08006504 <process_thread_rest_server_example>:

PROCESS(rest_server_example, "Erbium Example Server");
AUTOSTART_PROCESSES(&rest_server_example);

PROCESS_THREAD(rest_server_example, ev, data)
{
 8006504:	b510      	push	{r4, lr}
  PROCESS_BEGIN();
 8006506:	8802      	ldrh	r2, [r0, #0]

PROCESS(rest_server_example, "Erbium Example Server");
AUTOSTART_PROCESSES(&rest_server_example);

PROCESS_THREAD(rest_server_example, ev, data)
{
 8006508:	1c04      	adds	r4, r0, #0
  PROCESS_BEGIN();
 800650a:	2a00      	cmp	r2, #0
 800650c:	d004      	beq.n	8006518 <process_thread_rest_server_example+0x14>
 800650e:	23e8      	movs	r3, #232	; 0xe8
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	429a      	cmp	r2, r3
 8006514:	d110      	bne.n	8006538 <process_thread_rest_server_example+0x34>
 8006516:	e00a      	b.n	800652e <process_thread_rest_server_example+0x2a>
  PRINTF("LL header: %u\n", UIP_LLH_LEN);
  PRINTF("IP+UDP header: %u\n", UIP_IPUDPH_LEN);
  PRINTF("REST max chunk: %u\n", REST_MAX_CHUNK_SIZE);

  /* Initialize the REST engine. */
  rest_init_engine();
 8006518:	f7fd ff9a 	bl	8004450 <rest_init_engine>

  /* Activate the application-specific resources. */
#if REST_RES_HELLO
  rest_activate_resource(&resource_helloworld);
 800651c:	4808      	ldr	r0, [pc, #32]	; (8006540 <process_thread_rest_server_example+0x3c>)
 800651e:	f7fd ff7d 	bl	800441c <rest_activate_resource>
#if defined (PLATFORM_HAS_RADIO) && REST_RES_RADIO
  SENSORS_ACTIVATE(radio_sensor);
  rest_activate_resource(&resource_radio);
#endif
#if REST_RES_CPUID
  rest_activate_resource(&resource_cpuid);
 8006522:	4808      	ldr	r0, [pc, #32]	; (8006544 <process_thread_rest_server_example+0x40>)
 8006524:	f7fd ff7a 	bl	800441c <rest_activate_resource>
#endif
#if REST_RES_TEMPERATURE
  rest_activate_resource(&resource_temperature);
 8006528:	4807      	ldr	r0, [pc, #28]	; (8006548 <process_thread_rest_server_example+0x44>)
 800652a:	f7fd ff77 	bl	800441c <rest_activate_resource>
#endif

  /* Define application-specific events here. */
  while(1) {
    PROCESS_WAIT_EVENT();
 800652e:	23e8      	movs	r3, #232	; 0xe8
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	8023      	strh	r3, [r4, #0]
 8006534:	2001      	movs	r0, #1
 8006536:	e002      	b.n	800653e <process_thread_rest_server_example+0x3a>
#endif
    }
#endif /* PLATFORM_HAS_BUTTON */
  } /* while (1) */

  PROCESS_END();
 8006538:	2300      	movs	r3, #0
 800653a:	8003      	strh	r3, [r0, #0]
 800653c:	2003      	movs	r0, #3
}
 800653e:	bd10      	pop	{r4, pc}
 8006540:	20000614 	.word	0x20000614
 8006544:	200005f0 	.word	0x200005f0
 8006548:	200005cc 	.word	0x200005cc

0800654c <temperature_handler>:
#if REST_RES_TEMPERATURE
/* A simple getter example. Returns the reading from temperature sensor a simple etag */
RESOURCE(temperature, METHOD_GET, "sensors/temperature", "title=\"Chip internal temperature\";rt=\"Temperature\"");
void
temperature_handler(void* request, void* response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
 800654c:	b570      	push	{r4, r5, r6, lr}
  const uint16_t *accept = NULL;
  const char *format_string = "";

  int num = REST.get_header_accept(request, &accept);
 800654e:	4c1e      	ldr	r4, [pc, #120]	; (80065c8 <temperature_handler+0x7c>)
#if REST_RES_TEMPERATURE
/* A simple getter example. Returns the reading from temperature sensor a simple etag */
RESOURCE(temperature, METHOD_GET, "sensors/temperature", "title=\"Chip internal temperature\";rt=\"Temperature\"");
void
temperature_handler(void* request, void* response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
 8006550:	b082      	sub	sp, #8
  const uint16_t *accept = NULL;
 8006552:	2300      	movs	r3, #0
#if REST_RES_TEMPERATURE
/* A simple getter example. Returns the reading from temperature sensor a simple etag */
RESOURCE(temperature, METHOD_GET, "sensors/temperature", "title=\"Chip internal temperature\";rt=\"Temperature\"");
void
temperature_handler(void* request, void* response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
 8006554:	1c0d      	adds	r5, r1, #0
  const uint16_t *accept = NULL;
 8006556:	9301      	str	r3, [sp, #4]
  const char *format_string = "";

  int num = REST.get_header_accept(request, &accept);
 8006558:	a901      	add	r1, sp, #4
 800655a:	6a63      	ldr	r3, [r4, #36]	; 0x24
#if REST_RES_TEMPERATURE
/* A simple getter example. Returns the reading from temperature sensor a simple etag */
RESOURCE(temperature, METHOD_GET, "sensors/temperature", "title=\"Chip internal temperature\";rt=\"Temperature\"");
void
temperature_handler(void* request, void* response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
 800655c:	1c16      	adds	r6, r2, #0
  const uint16_t *accept = NULL;
  const char *format_string = "";

  int num = REST.get_header_accept(request, &accept);
 800655e:	4798      	blx	r3

  uint32_t temperature = -1;
  
  if ((num==0) || (num && accept[0]==REST.type.TEXT_PLAIN)) {
 8006560:	2800      	cmp	r0, #0
 8006562:	d006      	beq.n	8006572 <temperature_handler+0x26>
 8006564:	9b01      	ldr	r3, [sp, #4]
 8006566:	8819      	ldrh	r1, [r3, #0]
 8006568:	1c23      	adds	r3, r4, #0
 800656a:	33c0      	adds	r3, #192	; 0xc0
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4299      	cmp	r1, r3
 8006570:	d108      	bne.n	8006584 <temperature_handler+0x38>
    REST.set_header_content_type(response, REST.type.TEXT_PLAIN);
 8006572:	4b15      	ldr	r3, [pc, #84]	; (80065c8 <temperature_handler+0x7c>)
 8006574:	1c28      	adds	r0, r5, #0
 8006576:	1c1a      	adds	r2, r3, #0
 8006578:	32c0      	adds	r2, #192	; 0xc0
 800657a:	6811      	ldr	r1, [r2, #0]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	4798      	blx	r3
 8006580:	4a12      	ldr	r2, [pc, #72]	; (80065cc <temperature_handler+0x80>)

  int num = REST.get_header_accept(request, &accept);

  uint32_t temperature = -1;
  
  if ((num==0) || (num && accept[0]==REST.type.TEXT_PLAIN)) {
 8006582:	e010      	b.n	80065a6 <temperature_handler+0x5a>
    REST.set_header_content_type(response, REST.type.TEXT_PLAIN);
    format_string = "%d";
  } else if (num && (accept[0]==REST.type.APPLICATION_JSON)) {
 8006584:	1c23      	adds	r3, r4, #0
 8006586:	33fc      	adds	r3, #252	; 0xfc
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	4299      	cmp	r1, r3
 800658c:	d104      	bne.n	8006598 <temperature_handler+0x4c>
    REST.set_header_content_type(response, REST.type.APPLICATION_JSON);
 800658e:	6a23      	ldr	r3, [r4, #32]
 8006590:	1c28      	adds	r0, r5, #0
 8006592:	4798      	blx	r3
 8006594:	4a0e      	ldr	r2, [pc, #56]	; (80065d0 <temperature_handler+0x84>)
  uint32_t temperature = -1;
  
  if ((num==0) || (num && accept[0]==REST.type.TEXT_PLAIN)) {
    REST.set_header_content_type(response, REST.type.TEXT_PLAIN);
    format_string = "%d";
  } else if (num && (accept[0]==REST.type.APPLICATION_JSON)) {
 8006596:	e006      	b.n	80065a6 <temperature_handler+0x5a>
    REST.set_header_content_type(response, REST.type.APPLICATION_JSON);
    format_string = "{\"temperature\":\"%d\"}";
  } else {
    REST.set_response_status(response, REST.status.NOT_ACCEPTABLE);
 8006598:	1c22      	adds	r2, r4, #0
 800659a:	329c      	adds	r2, #156	; 0x9c
 800659c:	6811      	ldr	r1, [r2, #0]
 800659e:	69a3      	ldr	r3, [r4, #24]
 80065a0:	1c28      	adds	r0, r5, #0
 80065a2:	4798      	blx	r3
 80065a4:	4a0b      	ldr	r2, [pc, #44]	; (80065d4 <temperature_handler+0x88>)
    format_string = "Supporting content-types text/plain and application/json";
  }
  snprintf((char *)buffer, REST_MAX_CHUNK_SIZE, format_string, temperature);
 80065a6:	2301      	movs	r3, #1
 80065a8:	1c30      	adds	r0, r6, #0
 80065aa:	2180      	movs	r1, #128	; 0x80
 80065ac:	425b      	negs	r3, r3
 80065ae:	f000 fe39 	bl	8007224 <snprintf>
  REST.set_response_payload(response, (uint8_t *)buffer, strlen((char *)buffer));
 80065b2:	1c30      	adds	r0, r6, #0
 80065b4:	f000 fe82 	bl	80072bc <strlen>
 80065b8:	4b03      	ldr	r3, [pc, #12]	; (80065c8 <temperature_handler+0x7c>)
 80065ba:	1c02      	adds	r2, r0, #0
 80065bc:	1c31      	adds	r1, r6, #0
 80065be:	1c28      	adds	r0, r5, #0
 80065c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c2:	4798      	blx	r3
}
 80065c4:	b002      	add	sp, #8
 80065c6:	bd70      	pop	{r4, r5, r6, pc}
 80065c8:	0800b414 	.word	0x0800b414
 80065cc:	0800b9f1 	.word	0x0800b9f1
 80065d0:	0800b9f4 	.word	0x0800b9f4
 80065d4:	0800ba09 	.word	0x0800ba09

080065d8 <cpuid_handler>:
#if REST_RES_CPUID
/* A simple getter example. Returns the reading from CPU ID a simple etag */
RESOURCE(cpuid, METHOD_GET, "sensors/cpuid", "title=\"CPU-ID\";rt=\"CPU-ID\"");
void
cpuid_handler(void* request, void* response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
 80065d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  const uint16_t *accept = NULL;
  const char *format_string = "";
  uint32_t cpuid[3 /* XXX */];

  int num = REST.get_header_accept(request, &accept);
 80065da:	4c23      	ldr	r4, [pc, #140]	; (8006668 <cpuid_handler+0x90>)
#if REST_RES_CPUID
/* A simple getter example. Returns the reading from CPU ID a simple etag */
RESOURCE(cpuid, METHOD_GET, "sensors/cpuid", "title=\"CPU-ID\";rt=\"CPU-ID\"");
void
cpuid_handler(void* request, void* response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
 80065dc:	b087      	sub	sp, #28
  const uint16_t *accept = NULL;
 80065de:	2300      	movs	r3, #0
 80065e0:	9305      	str	r3, [sp, #20]
#if REST_RES_CPUID
/* A simple getter example. Returns the reading from CPU ID a simple etag */
RESOURCE(cpuid, METHOD_GET, "sensors/cpuid", "title=\"CPU-ID\";rt=\"CPU-ID\"");
void
cpuid_handler(void* request, void* response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
 80065e2:	1c0d      	adds	r5, r1, #0
  const uint16_t *accept = NULL;
  const char *format_string = "";
  uint32_t cpuid[3 /* XXX */];

  int num = REST.get_header_accept(request, &accept);
 80065e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065e6:	a905      	add	r1, sp, #20
#if REST_RES_CPUID
/* A simple getter example. Returns the reading from CPU ID a simple etag */
RESOURCE(cpuid, METHOD_GET, "sensors/cpuid", "title=\"CPU-ID\";rt=\"CPU-ID\"");
void
cpuid_handler(void* request, void* response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
 80065e8:	1c16      	adds	r6, r2, #0
  const uint16_t *accept = NULL;
  const char *format_string = "";
  uint32_t cpuid[3 /* XXX */];

  int num = REST.get_header_accept(request, &accept);
 80065ea:	4798      	blx	r3
/*
 * Return the STM32F0 chip unique id.
 */
inline void getStmUniqueId(unsigned char uid[3 * sizeof(uint32_t)]) {
    uint32_t *p = (uint32_t *)uid;
    p[0] = *(uint32_t *)(0x1FFFF7AC + 0x00);
 80065ec:	4b1f      	ldr	r3, [pc, #124]	; (800666c <cpuid_handler+0x94>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	9302      	str	r3, [sp, #8]
    p[1] = *(uint32_t *)(0x1FFFF7AC + 0x04);
 80065f2:	4b1f      	ldr	r3, [pc, #124]	; (8006670 <cpuid_handler+0x98>)
 80065f4:	681f      	ldr	r7, [r3, #0]
    p[2] = *(uint32_t *)(0x1FFFF7AC + 0x08);
 80065f6:	3304      	adds	r3, #4
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	9303      	str	r3, [sp, #12]

  getStmUniqueId(cpuid);
  
  if ((num==0) || (num && accept[0]==REST.type.TEXT_PLAIN)) {
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d006      	beq.n	800660e <cpuid_handler+0x36>
 8006600:	9b05      	ldr	r3, [sp, #20]
 8006602:	8819      	ldrh	r1, [r3, #0]
 8006604:	1c23      	adds	r3, r4, #0
 8006606:	33c0      	adds	r3, #192	; 0xc0
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4299      	cmp	r1, r3
 800660c:	d108      	bne.n	8006620 <cpuid_handler+0x48>
    REST.set_header_content_type(response, REST.type.TEXT_PLAIN);
 800660e:	4b16      	ldr	r3, [pc, #88]	; (8006668 <cpuid_handler+0x90>)
 8006610:	1c28      	adds	r0, r5, #0
 8006612:	1c1a      	adds	r2, r3, #0
 8006614:	32c0      	adds	r2, #192	; 0xc0
 8006616:	6811      	ldr	r1, [r2, #0]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	4798      	blx	r3
 800661c:	4a15      	ldr	r2, [pc, #84]	; (8006674 <cpuid_handler+0x9c>)

  int num = REST.get_header_accept(request, &accept);

  getStmUniqueId(cpuid);
  
  if ((num==0) || (num && accept[0]==REST.type.TEXT_PLAIN)) {
 800661e:	e010      	b.n	8006642 <cpuid_handler+0x6a>
    REST.set_header_content_type(response, REST.type.TEXT_PLAIN);
    format_string = "%08x-%08x-%08x";
  } else if (num && (accept[0]==REST.type.APPLICATION_JSON)) {
 8006620:	1c23      	adds	r3, r4, #0
 8006622:	33fc      	adds	r3, #252	; 0xfc
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	4299      	cmp	r1, r3
 8006628:	d104      	bne.n	8006634 <cpuid_handler+0x5c>
    REST.set_header_content_type(response, REST.type.APPLICATION_JSON);
 800662a:	6a23      	ldr	r3, [r4, #32]
 800662c:	1c28      	adds	r0, r5, #0
 800662e:	4798      	blx	r3
 8006630:	4a11      	ldr	r2, [pc, #68]	; (8006678 <cpuid_handler+0xa0>)
  getStmUniqueId(cpuid);
  
  if ((num==0) || (num && accept[0]==REST.type.TEXT_PLAIN)) {
    REST.set_header_content_type(response, REST.type.TEXT_PLAIN);
    format_string = "%08x-%08x-%08x";
  } else if (num && (accept[0]==REST.type.APPLICATION_JSON)) {
 8006632:	e006      	b.n	8006642 <cpuid_handler+0x6a>
    REST.set_header_content_type(response, REST.type.APPLICATION_JSON);
    format_string = "{\"cpu-id\":\"%08x-%08x-%08x\"}";
  } else {
    REST.set_response_status(response, REST.status.NOT_ACCEPTABLE);
 8006634:	1c22      	adds	r2, r4, #0
 8006636:	329c      	adds	r2, #156	; 0x9c
 8006638:	6811      	ldr	r1, [r2, #0]
 800663a:	69a3      	ldr	r3, [r4, #24]
 800663c:	1c28      	adds	r0, r5, #0
 800663e:	4798      	blx	r3
 8006640:	4a0e      	ldr	r2, [pc, #56]	; (800667c <cpuid_handler+0xa4>)
    format_string = "Supporting content-types text/plain and application/json";
  }
  snprintf((char *)buffer, REST_MAX_CHUNK_SIZE, format_string, cpuid[0], cpuid[1], cpuid[2]);
 8006642:	9b03      	ldr	r3, [sp, #12]
 8006644:	1c30      	adds	r0, r6, #0
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	2180      	movs	r1, #128	; 0x80
 800664a:	9b02      	ldr	r3, [sp, #8]
 800664c:	9700      	str	r7, [sp, #0]
 800664e:	f000 fde9 	bl	8007224 <snprintf>
  REST.set_response_payload(response, (uint8_t *)buffer, strlen((char *)buffer));
 8006652:	1c30      	adds	r0, r6, #0
 8006654:	f000 fe32 	bl	80072bc <strlen>
 8006658:	4b03      	ldr	r3, [pc, #12]	; (8006668 <cpuid_handler+0x90>)
 800665a:	1c02      	adds	r2, r0, #0
 800665c:	1c31      	adds	r1, r6, #0
 800665e:	1c28      	adds	r0, r5, #0
 8006660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006662:	4798      	blx	r3
}
 8006664:	b007      	add	sp, #28
 8006666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006668:	0800b414 	.word	0x0800b414
 800666c:	1ffff7ac 	.word	0x1ffff7ac
 8006670:	1ffff7b0 	.word	0x1ffff7b0
 8006674:	0800ba42 	.word	0x0800ba42
 8006678:	0800ba51 	.word	0x0800ba51
 800667c:	0800ba09 	.word	0x0800ba09

08006680 <helloworld_handler>:
 * preferred_size and offset, but must respect the REST_MAX_CHUNK_SIZE limit for the buffer.
 * If a smaller block size is requested for CoAP, the REST framework automatically splits the data.
 */
void
helloworld_handler(void* request, void* response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	b082      	sub	sp, #8
  const char *len = NULL;
  /* Some data that has the length up to REST_MAX_CHUNK_SIZE. For more, see the chunk resource. */
  char const * const message = "Hello World! ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy";
  int length = 12; /*           |<-------->| */
 8006684:	230c      	movs	r3, #12
 8006686:	9300      	str	r3, [sp, #0]

  /* The query string can be retrieved by rest_get_query() or parsed for its key-value pairs. */
  if (REST.get_query_variable(request, "len", &len)) {
 8006688:	4b17      	ldr	r3, [pc, #92]	; (80066e8 <helloworld_handler+0x68>)
 * If a smaller block size is requested for CoAP, the REST framework automatically splits the data.
 */
void
helloworld_handler(void* request, void* response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
  const char *len = NULL;
 800668a:	2400      	movs	r4, #0
 * preferred_size and offset, but must respect the REST_MAX_CHUNK_SIZE limit for the buffer.
 * If a smaller block size is requested for CoAP, the REST framework automatically splits the data.
 */
void
helloworld_handler(void* request, void* response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
 800668c:	1c0d      	adds	r5, r1, #0
 800668e:	1c16      	adds	r6, r2, #0
  const char *len = NULL;
 8006690:	9401      	str	r4, [sp, #4]
  /* Some data that has the length up to REST_MAX_CHUNK_SIZE. For more, see the chunk resource. */
  char const * const message = "Hello World! ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy";
  int length = 12; /*           |<-------->| */

  /* The query string can be retrieved by rest_get_query() or parsed for its key-value pairs. */
  if (REST.get_query_variable(request, "len", &len)) {
 8006692:	4916      	ldr	r1, [pc, #88]	; (80066ec <helloworld_handler+0x6c>)
 8006694:	aa01      	add	r2, sp, #4
 8006696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006698:	4798      	blx	r3
 800669a:	2800      	cmp	r0, #0
 800669c:	d00b      	beq.n	80066b6 <helloworld_handler+0x36>
    length = atoi(len);
 800669e:	9801      	ldr	r0, [sp, #4]
 80066a0:	f000 f93b 	bl	800691a <atoi>
 80066a4:	9000      	str	r0, [sp, #0]
    if (length<0) length = 0;
 80066a6:	2800      	cmp	r0, #0
 80066a8:	da00      	bge.n	80066ac <helloworld_handler+0x2c>
 80066aa:	9400      	str	r4, [sp, #0]
    if (length>REST_MAX_CHUNK_SIZE) length = REST_MAX_CHUNK_SIZE;
 80066ac:	9b00      	ldr	r3, [sp, #0]
 80066ae:	2b80      	cmp	r3, #128	; 0x80
 80066b0:	dd01      	ble.n	80066b6 <helloworld_handler+0x36>
 80066b2:	2380      	movs	r3, #128	; 0x80
 80066b4:	9300      	str	r3, [sp, #0]
    memcpy(buffer, message, length);
  } else {
    memcpy(buffer, message, length);
 80066b6:	1c30      	adds	r0, r6, #0
 80066b8:	9a00      	ldr	r2, [sp, #0]
 80066ba:	490d      	ldr	r1, [pc, #52]	; (80066f0 <helloworld_handler+0x70>)
 80066bc:	f000 fb93 	bl	8006de6 <memcpy>
  }

  REST.set_header_content_type(response, REST.type.TEXT_PLAIN); /* text/plain is the default, hence this option could be omitted. */
 80066c0:	4c09      	ldr	r4, [pc, #36]	; (80066e8 <helloworld_handler+0x68>)
 80066c2:	1c28      	adds	r0, r5, #0
 80066c4:	1c22      	adds	r2, r4, #0
 80066c6:	32c0      	adds	r2, #192	; 0xc0
 80066c8:	6a23      	ldr	r3, [r4, #32]
 80066ca:	6811      	ldr	r1, [r2, #0]
 80066cc:	4798      	blx	r3
  REST.set_header_etag(response, (uint8_t *) &length, 1);
 80066ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066d0:	1c28      	adds	r0, r5, #0
 80066d2:	4669      	mov	r1, sp
 80066d4:	2201      	movs	r2, #1
 80066d6:	4798      	blx	r3
  REST.set_response_payload(response, buffer, length);
 80066d8:	1c28      	adds	r0, r5, #0
 80066da:	1c31      	adds	r1, r6, #0
 80066dc:	9a00      	ldr	r2, [sp, #0]
 80066de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80066e0:	4798      	blx	r3
}
 80066e2:	b002      	add	sp, #8
 80066e4:	bd70      	pop	{r4, r5, r6, pc}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	0800b414 	.word	0x0800b414
 80066ec:	0800ba6d 	.word	0x0800ba6d
 80066f0:	0800ba71 	.word	0x0800ba71

080066f4 <setup>:

#include "Arduino.h"

void setup() {
 80066f4:	b508      	push	{r3, lr}

static inline
void pinModeOUTPUT(pin_t pin) {
    const uint32_t pin_number = stm32_pinDescription[pin].pin_number;
    /* Output mode */
    *(stm32_pinDescription[pin].pin_port_moder) |=  (GPIO_MODER_MODER0_0 << (pin_number * 2));
 80066f6:	4b1f      	ldr	r3, [pc, #124]	; (8006774 <setup+0x80>)
 80066f8:	2140      	movs	r1, #64	; 0x40
 80066fa:	33fc      	adds	r3, #252	; 0xfc
 80066fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066fe:	6810      	ldr	r0, [r2, #0]
 8006700:	4301      	orrs	r1, r0
 8006702:	6011      	str	r1, [r2, #0]
    *(stm32_pinDescription[pin].pin_port_moder) &= ~(GPIO_MODER_MODER0_1 << (pin_number * 2));
 8006704:	6811      	ldr	r1, [r2, #0]
 8006706:	2080      	movs	r0, #128	; 0x80
 8006708:	4381      	bics	r1, r0
 800670a:	6011      	str	r1, [r2, #0]

static inline
void pinModeOUTPUT(pin_t pin) {
    const uint32_t pin_number = stm32_pinDescription[pin].pin_number;
    /* Output mode */
    *(stm32_pinDescription[pin].pin_port_moder) |=  (GPIO_MODER_MODER0_0 << (pin_number * 2));
 800670c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800670e:	2180      	movs	r1, #128	; 0x80
 8006710:	6810      	ldr	r0, [r2, #0]
 8006712:	0049      	lsls	r1, r1, #1
 8006714:	4301      	orrs	r1, r0
 8006716:	6011      	str	r1, [r2, #0]
    *(stm32_pinDescription[pin].pin_port_moder) &= ~(GPIO_MODER_MODER0_1 << (pin_number * 2));
 8006718:	6810      	ldr	r0, [r2, #0]
 800671a:	4917      	ldr	r1, [pc, #92]	; (8006778 <setup+0x84>)
 800671c:	4001      	ands	r1, r0
 800671e:	6011      	str	r1, [r2, #0]
}

static inline
void  digitalWrite(pin_t pin, uint32_t val) {
    if (val)
        *(stm32_pinDescription[pin].pin_port_bsrr) = stm32_pinDescription[pin].pin_mask;
 8006720:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006722:	2108      	movs	r1, #8
 8006724:	6011      	str	r1, [r2, #0]
    else
        *(stm32_pinDescription[pin].pin_port_brr)  = stm32_pinDescription[pin].pin_mask;
 8006726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
extern void serialEventRun(void) __attribute__((weak));

inline
void HardwareSerial::begin(unsigned long baudRate) const {
    /* Change the GPIO pins to the USART mode */
    gpio_afr &= usart_afr_mask;
 8006728:	4914      	ldr	r1, [pc, #80]	; (800677c <setup+0x88>)
 800672a:	2210      	movs	r2, #16
 800672c:	801a      	strh	r2, [r3, #0]
 800672e:	688b      	ldr	r3, [r1, #8]
 8006730:	4a13      	ldr	r2, [pc, #76]	; (8006780 <setup+0x8c>)
 8006732:	6818      	ldr	r0, [r3, #0]
 8006734:	4002      	ands	r2, r0
 8006736:	601a      	str	r2, [r3, #0]
    gpio_afr |= usart_afr_value;
 8006738:	6818      	ldr	r0, [r3, #0]
 800673a:	2288      	movs	r2, #136	; 0x88
 800673c:	0552      	lsls	r2, r2, #21
 800673e:	4302      	orrs	r2, r0
 8006740:	601a      	str	r2, [r3, #0]

    gpio_moder &= usart_moder_mask;
 8006742:	68cb      	ldr	r3, [r1, #12]
 8006744:	4a0f      	ldr	r2, [pc, #60]	; (8006784 <setup+0x90>)
 8006746:	6819      	ldr	r1, [r3, #0]
 8006748:	400a      	ands	r2, r1
 800674a:	601a      	str	r2, [r3, #0]
    gpio_moder |= usart_moder_value;
 800674c:	6819      	ldr	r1, [r3, #0]
 800674e:	22a0      	movs	r2, #160	; 0xa0
 8006750:	0612      	lsls	r2, r2, #24
 8006752:	430a      	orrs	r2, r1
 8006754:	601a      	str	r2, [r3, #0]

    /* Set the baud rate -- use 16 bit oversampling */
    usart->BRR  = SystemCoreClock / baudRate;
 8006756:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <setup+0x94>)
 8006758:	21e1      	movs	r1, #225	; 0xe1
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	0209      	lsls	r1, r1, #8
 800675e:	f7f9 fcc9 	bl	80000f4 <__aeabi_uidiv>
 8006762:	4b0a      	ldr	r3, [pc, #40]	; (800678c <setup+0x98>)
 8006764:	b280      	uxth	r0, r0
 8006766:	8198      	strh	r0, [r3, #12]
        GPIOC->ODR   |=  GPIO_ODR_6;
    }
#endif

    /* Enable the transmitter and the USART */
    usart->CR1 |= USART_CR1_TE | USART_CR1_UE;
 8006768:	6819      	ldr	r1, [r3, #0]
 800676a:	2209      	movs	r2, #9
 800676c:	430a      	orrs	r2, r1
 800676e:	601a      	str	r2, [r3, #0]
    Serial.println(Serial.buffer->tail);
    Serial.flush();
    Serial.println(Serial.buffer->head);
    Serial.println(Serial.buffer->tail);
#endif
}
 8006770:	bd08      	pop	{r3, pc}
 8006772:	46c0      	nop			; (mov r8, r8)
 8006774:	0800bbac 	.word	0x0800bbac
 8006778:	fffffdff 	.word	0xfffffdff
 800677c:	0800bb7c 	.word	0x0800bb7c
 8006780:	00ffffff 	.word	0x00ffffff
 8006784:	afffffff 	.word	0xafffffff
 8006788:	20000504 	.word	0x20000504
 800678c:	40004400 	.word	0x40004400

08006790 <T.44>:
        yield();
    }
}

static inline
void delay(uint32_t ms) {
 8006790:	b510      	push	{r4, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8006792:	b672      	cpsid	i

static inline
uint32_t micros(void) {

    noInterrupts();
    const uint32_t pending_systicks = SysTick->VAL;
 8006794:	4b13      	ldr	r3, [pc, #76]	; (80067e4 <T.44+0x54>)
 8006796:	689a      	ldr	r2, [r3, #8]
    const uint32_t millseconds = millisecondCount;
 8006798:	4b13      	ldr	r3, [pc, #76]	; (80067e8 <T.44+0x58>)
 800679a:	681b      	ldr	r3, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 800679c:	b662      	cpsie	i
            : /* no outputs */ : "r" (cycles4) 
            );
        return;
    }

    uint32_t timo = micros() + us;
 800679e:	015c      	lsls	r4, r3, #5
 80067a0:	1ae4      	subs	r4, r4, r3
 80067a2:	00a4      	lsls	r4, r4, #2
 80067a4:	18e4      	adds	r4, r4, r3
 80067a6:	4b11      	ldr	r3, [pc, #68]	; (80067ec <T.44+0x5c>)
 80067a8:	00e4      	lsls	r4, r4, #3
 80067aa:	18e4      	adds	r4, r4, r3
 80067ac:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <T.44+0x60>)
 80067ae:	1a9a      	subs	r2, r3, r2
 80067b0:	0492      	lsls	r2, r2, #18
 80067b2:	0d12      	lsrs	r2, r2, #20
 80067b4:	18a4      	adds	r4, r4, r2
 80067b6:	e001      	b.n	80067bc <T.44+0x2c>

    while (micros() < timo) {
        yield();
 80067b8:	f7fb ffc8 	bl	800274c <yield>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80067bc:	b672      	cpsid	i

static inline
uint32_t micros(void) {

    noInterrupts();
    const uint32_t pending_systicks = SysTick->VAL;
 80067be:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <T.44+0x54>)
 80067c0:	689a      	ldr	r2, [r3, #8]
    const uint32_t millseconds = millisecondCount;
 80067c2:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <T.44+0x58>)
 80067c4:	681b      	ldr	r3, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80067c6:	b662      	cpsie	i
        return;
    }

    uint32_t timo = micros() + us;

    while (micros() < timo) {
 80067c8:	4909      	ldr	r1, [pc, #36]	; (80067f0 <T.44+0x60>)
 80067ca:	1a8a      	subs	r2, r1, r2
 80067cc:	0159      	lsls	r1, r3, #5
 80067ce:	1ac9      	subs	r1, r1, r3
 80067d0:	0089      	lsls	r1, r1, #2
 80067d2:	0492      	lsls	r2, r2, #18
 80067d4:	18cb      	adds	r3, r1, r3
 80067d6:	0d12      	lsrs	r2, r2, #20
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	18d3      	adds	r3, r2, r3
 80067dc:	42a3      	cmp	r3, r4
 80067de:	d3eb      	bcc.n	80067b8 <T.44+0x28>
}

static inline
void delay(uint32_t ms) {
    delayMicroseconds((ms + 1) * 1000); /* Ensure at least 1 ms delay */
}
 80067e0:	bd10      	pop	{r4, pc}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	e000e010 	.word	0xe000e010
 80067e8:	20000ed4 	.word	0x20000ed4
 80067ec:	000f4628 	.word	0x000f4628
 80067f0:	0000bb80 	.word	0x0000bb80

080067f4 <T.45>:
    }

    size_t println(unsigned char value, enum base base=DEC) const { return println(value, base, 1); }
    size_t println(unsigned int  value, enum base base=DEC) const { return println(value, base, 1); }

    size_t println(int           value, enum base base=DEC) const { return println(value, base, 0); }
 80067f4:	b538      	push	{r3, r4, r5, lr}
    size_t print(const char c)     const { return write(c); }
    size_t print(const char s[])   const { return write(s); }
    size_t print(const String &s)  const { return write(s); }

    size_t println(unsigned long value, enum base base=DEC, unsigned u = 1) const {
        return print(value, base, u) + println();
 80067f6:	4c07      	ldr	r4, [pc, #28]	; (8006814 <T.45+0x20>)
    }

    size_t println(unsigned char value, enum base base=DEC) const { return println(value, base, 1); }
    size_t println(unsigned int  value, enum base base=DEC) const { return println(value, base, 1); }

    size_t println(int           value, enum base base=DEC) const { return println(value, base, 0); }
 80067f8:	1c01      	adds	r1, r0, #0
    size_t print(const char c)     const { return write(c); }
    size_t print(const char s[])   const { return write(s); }
    size_t print(const String &s)  const { return write(s); }

    size_t println(unsigned long value, enum base base=DEC, unsigned u = 1) const {
        return print(value, base, u) + println();
 80067fa:	220a      	movs	r2, #10
 80067fc:	2300      	movs	r3, #0
 80067fe:	1c20      	adds	r0, r4, #0
 8006800:	f7fb fe3d 	bl	800247e <_ZNK14HardwareSerial5printEm4baseb>

    String readString() const { return readStringUntil(NOT_A_CHAR); }
    String readStringUntil(int terminator) const;

    /* Print functions */
    size_t println(void) const { return write("\r\n"); }
 8006804:	4904      	ldr	r1, [pc, #16]	; (8006818 <T.45+0x24>)
    size_t print(const char c)     const { return write(c); }
    size_t print(const char s[])   const { return write(s); }
    size_t print(const String &s)  const { return write(s); }

    size_t println(unsigned long value, enum base base=DEC, unsigned u = 1) const {
        return print(value, base, u) + println();
 8006806:	1c05      	adds	r5, r0, #0

    String readString() const { return readStringUntil(NOT_A_CHAR); }
    String readStringUntil(int terminator) const;

    /* Print functions */
    size_t println(void) const { return write("\r\n"); }
 8006808:	1c20      	adds	r0, r4, #0
 800680a:	f7fb fe2b 	bl	8002464 <_ZNK14HardwareSerial5writeEPKc>
 800680e:	1940      	adds	r0, r0, r5
    }

    size_t println(unsigned char value, enum base base=DEC) const { return println(value, base, 1); }
    size_t println(unsigned int  value, enum base base=DEC) const { return println(value, base, 1); }

    size_t println(int           value, enum base base=DEC) const { return println(value, base, 0); }
 8006810:	bd38      	pop	{r3, r4, r5, pc}
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	0800bb7c 	.word	0x0800bb7c
 8006818:	0800bb66 	.word	0x0800bb66

0800681c <loop>:

void loop() {
 800681c:	b5f0      	push	{r4, r5, r6, r7, lr}

    size_t print(int           value, enum base base=DEC) const { return print(value, base, 0); }
    size_t print(long          value, enum base base=DEC) const { return print(value, base, 0); }

    size_t print(const char c)     const { return write(c); }
    size_t print(const char s[])   const { return write(s); }
 800681e:	4d23      	ldr	r5, [pc, #140]	; (80068ac <loop+0x90>)
 8006820:	b095      	sub	sp, #84	; 0x54
 8006822:	1c28      	adds	r0, r5, #0
 8006824:	4922      	ldr	r1, [pc, #136]	; (80068b0 <loop+0x94>)
 8006826:	f7fb fe1d 	bl	8002464 <_ZNK14HardwareSerial5writeEPKc>
}

static inline
void  digitalWrite(pin_t pin, uint32_t val) {
    if (val)
        *(stm32_pinDescription[pin].pin_port_bsrr) = stm32_pinDescription[pin].pin_mask;
 800682a:	4c22      	ldr	r4, [pc, #136]	; (80068b4 <loop+0x98>)
 800682c:	2608      	movs	r6, #8
 800682e:	34fc      	adds	r4, #252	; 0xfc
 8006830:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006832:	2710      	movs	r7, #16
 8006834:	601e      	str	r6, [r3, #0]
 8006836:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006838:	491f      	ldr	r1, [pc, #124]	; (80068b8 <loop+0x9c>)
 800683a:	601f      	str	r7, [r3, #0]
 800683c:	1c28      	adds	r0, r5, #0
 800683e:	f7fb fe11 	bl	8002464 <_ZNK14HardwareSerial5writeEPKc>
    Serial.print("Hel");
    digitalWrite(13, 1);
    digitalWrite(12, 1);
    Serial.print("lo, ");
    delay(1000);
 8006842:	f7ff ffa5 	bl	8006790 <T.44>
    else
        *(stm32_pinDescription[pin].pin_port_brr)  = stm32_pinDescription[pin].pin_mask;
 8006846:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006848:	1c28      	adds	r0, r5, #0
 800684a:	801e      	strh	r6, [r3, #0]
 800684c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800684e:	491b      	ldr	r1, [pc, #108]	; (80068bc <loop+0xa0>)
 8006850:	801f      	strh	r7, [r3, #0]
 8006852:	f7fb fe07 	bl	8002464 <_ZNK14HardwareSerial5writeEPKc>

    String readString() const { return readStringUntil(NOT_A_CHAR); }
    String readStringUntil(int terminator) const;

    /* Print functions */
    size_t println(void) const { return write("\r\n"); }
 8006856:	491a      	ldr	r1, [pc, #104]	; (80068c0 <loop+0xa4>)
 8006858:	1c28      	adds	r0, r5, #0
 800685a:	f7fb fe03 	bl	8002464 <_ZNK14HardwareSerial5writeEPKc>
    digitalWrite(13, 0);
    digitalWrite(12, 0);
    Serial.println("World!");
    delay(1000);    
 800685e:	f7ff ff97 	bl	8006790 <T.44>
#if 1
    Serial.println(Serial.buffer->empty());
 8006862:	4c18      	ldr	r4, [pc, #96]	; (80068c4 <loop+0xa8>)
 8006864:	1c26      	adds	r6, r4, #0
 8006866:	1c25      	adds	r5, r4, #0
 8006868:	3640      	adds	r6, #64	; 0x40
 800686a:	3541      	adds	r5, #65	; 0x41
 800686c:	782b      	ldrb	r3, [r5, #0]
 800686e:	7830      	ldrb	r0, [r6, #0]
 8006870:	1ac0      	subs	r0, r0, r3
 8006872:	4243      	negs	r3, r0
 8006874:	4158      	adcs	r0, r3
 8006876:	f7ff ffbd 	bl	80067f4 <T.45>
    void flush(void) {
        head = tail = 0;
    }

    bool empty() const {
        return head == tail;
 800687a:	782b      	ldrb	r3, [r5, #0]
    bool full() const {
        return nextIndex(head) == tail;
    }

    int peek() const {
        return empty()? -1: buffer[tail];
 800687c:	7832      	ldrb	r2, [r6, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d102      	bne.n	8006888 <loop+0x6c>
 8006882:	2001      	movs	r0, #1
 8006884:	4240      	negs	r0, r0
 8006886:	e004      	b.n	8006892 <loop+0x76>
 8006888:	5ce0      	ldrb	r0, [r4, r3]
    }

    int get() {
        int c = peek();
        if (!empty()) {
            tail = nextIndex(tail);
 800688a:	223f      	movs	r2, #63	; 0x3f
 800688c:	3301      	adds	r3, #1
 800688e:	4013      	ands	r3, r2
 8006890:	702b      	strb	r3, [r5, #0]
    int c = Serial.buffer->get();
    Serial.println(c);
 8006892:	f7ff ffaf 	bl	80067f4 <T.45>
#endif
#if 1
    char buffer[80];
    int n = Serial.readBytesUntil('\n', buffer, sizeof(buffer));
 8006896:	466a      	mov	r2, sp
 8006898:	210a      	movs	r1, #10
 800689a:	2350      	movs	r3, #80	; 0x50
 800689c:	4803      	ldr	r0, [pc, #12]	; (80068ac <loop+0x90>)
 800689e:	f7fb fe25 	bl	80024ec <_ZNK14HardwareSerial14readBytesUntilEiPcj>
    Serial.println(n);
 80068a2:	f7ff ffa7 	bl	80067f4 <T.45>
#endif
}
 80068a6:	b015      	add	sp, #84	; 0x54
 80068a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	0800bb7c 	.word	0x0800bb7c
 80068b0:	0800bb69 	.word	0x0800bb69
 80068b4:	0800bbac 	.word	0x0800bbac
 80068b8:	0800bb6d 	.word	0x0800bb6d
 80068bc:	0800bb72 	.word	0x0800bb72
 80068c0:	0800bb66 	.word	0x0800bb66
 80068c4:	20000e90 	.word	0x20000e90

080068c8 <__isinfd>:
 80068c8:	4242      	negs	r2, r0
 80068ca:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <__isinfd+0x1c>)
 80068cc:	4302      	orrs	r2, r0
 80068ce:	0fd2      	lsrs	r2, r2, #31
 80068d0:	400b      	ands	r3, r1
 80068d2:	4313      	orrs	r3, r2
 80068d4:	4a04      	ldr	r2, [pc, #16]	; (80068e8 <__isinfd+0x20>)
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	4258      	negs	r0, r3
 80068da:	4303      	orrs	r3, r0
 80068dc:	17d8      	asrs	r0, r3, #31
 80068de:	3001      	adds	r0, #1
 80068e0:	4770      	bx	lr
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	7fffffff 	.word	0x7fffffff
 80068e8:	7ff00000 	.word	0x7ff00000

080068ec <__isnand>:
 80068ec:	4a05      	ldr	r2, [pc, #20]	; (8006904 <__isnand+0x18>)
 80068ee:	4243      	negs	r3, r0
 80068f0:	4303      	orrs	r3, r0
 80068f2:	1c10      	adds	r0, r2, #0
 80068f4:	0fdb      	lsrs	r3, r3, #31
 80068f6:	4008      	ands	r0, r1
 80068f8:	4318      	orrs	r0, r3
 80068fa:	4b03      	ldr	r3, [pc, #12]	; (8006908 <__isnand+0x1c>)
 80068fc:	1a18      	subs	r0, r3, r0
 80068fe:	0fc0      	lsrs	r0, r0, #31
 8006900:	4770      	bx	lr
 8006902:	46c0      	nop			; (mov r8, r8)
 8006904:	7fffffff 	.word	0x7fffffff
 8006908:	7ff00000 	.word	0x7ff00000

0800690c <abort>:
 800690c:	b508      	push	{r3, lr}
 800690e:	2006      	movs	r0, #6
 8006910:	f000 fc68 	bl	80071e4 <raise>
 8006914:	2001      	movs	r0, #1
 8006916:	f7fb ff11 	bl	800273c <_exit>

0800691a <atoi>:
 800691a:	b508      	push	{r3, lr}
 800691c:	2100      	movs	r1, #0
 800691e:	220a      	movs	r2, #10
 8006920:	f000 fd90 	bl	8007444 <strtol>
 8006924:	bd08      	pop	{r3, pc}
	...

08006928 <__libc_init_array>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	4c0c      	ldr	r4, [pc, #48]	; (800695c <__libc_init_array+0x34>)
 800692c:	4e0c      	ldr	r6, [pc, #48]	; (8006960 <__libc_init_array+0x38>)
 800692e:	2500      	movs	r5, #0
 8006930:	1b36      	subs	r6, r6, r4
 8006932:	10b6      	asrs	r6, r6, #2
 8006934:	e002      	b.n	800693c <__libc_init_array+0x14>
 8006936:	cc08      	ldmia	r4!, {r3}
 8006938:	4798      	blx	r3
 800693a:	3501      	adds	r5, #1
 800693c:	42b5      	cmp	r5, r6
 800693e:	d3fa      	bcc.n	8006936 <__libc_init_array+0xe>
 8006940:	f005 fd34 	bl	800c3ac <_init>
 8006944:	4c07      	ldr	r4, [pc, #28]	; (8006964 <__libc_init_array+0x3c>)
 8006946:	4e08      	ldr	r6, [pc, #32]	; (8006968 <__libc_init_array+0x40>)
 8006948:	2500      	movs	r5, #0
 800694a:	1b36      	subs	r6, r6, r4
 800694c:	10b6      	asrs	r6, r6, #2
 800694e:	e002      	b.n	8006956 <__libc_init_array+0x2e>
 8006950:	cc08      	ldmia	r4!, {r3}
 8006952:	4798      	blx	r3
 8006954:	3501      	adds	r5, #1
 8006956:	42b5      	cmp	r5, r6
 8006958:	d3fa      	bcc.n	8006950 <__libc_init_array+0x28>
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	0800c3b8 	.word	0x0800c3b8
 8006960:	0800c3b8 	.word	0x0800c3b8
 8006964:	0800c3b8 	.word	0x0800c3b8
 8006968:	0800c3c4 	.word	0x0800c3c4

0800696c <iprintf>:
 800696c:	b40f      	push	{r0, r1, r2, r3}
 800696e:	b500      	push	{lr}
 8006970:	4906      	ldr	r1, [pc, #24]	; (800698c <iprintf+0x20>)
 8006972:	b083      	sub	sp, #12
 8006974:	ab04      	add	r3, sp, #16
 8006976:	6809      	ldr	r1, [r1, #0]
 8006978:	cb04      	ldmia	r3!, {r2}
 800697a:	1c08      	adds	r0, r1, #0
 800697c:	6889      	ldr	r1, [r1, #8]
 800697e:	9301      	str	r3, [sp, #4]
 8006980:	f001 fd40 	bl	8008404 <_vfiprintf_r>
 8006984:	b003      	add	sp, #12
 8006986:	bc08      	pop	{r3}
 8006988:	b004      	add	sp, #16
 800698a:	4718      	bx	r3
 800698c:	20000e88 	.word	0x20000e88

08006990 <_malloc_r>:
 8006990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006992:	1c0e      	adds	r6, r1, #0
 8006994:	b087      	sub	sp, #28
 8006996:	360b      	adds	r6, #11
 8006998:	9003      	str	r0, [sp, #12]
 800699a:	2e16      	cmp	r6, #22
 800699c:	d801      	bhi.n	80069a2 <_malloc_r+0x12>
 800699e:	2610      	movs	r6, #16
 80069a0:	e003      	b.n	80069aa <_malloc_r+0x1a>
 80069a2:	2307      	movs	r3, #7
 80069a4:	439e      	bics	r6, r3
 80069a6:	2e00      	cmp	r6, #0
 80069a8:	db01      	blt.n	80069ae <_malloc_r+0x1e>
 80069aa:	428e      	cmp	r6, r1
 80069ac:	d203      	bcs.n	80069b6 <_malloc_r+0x26>
 80069ae:	9803      	ldr	r0, [sp, #12]
 80069b0:	230c      	movs	r3, #12
 80069b2:	6003      	str	r3, [r0, #0]
 80069b4:	e1df      	b.n	8006d76 <_malloc_r+0x3e6>
 80069b6:	9803      	ldr	r0, [sp, #12]
 80069b8:	f000 fa43 	bl	8006e42 <__malloc_lock>
 80069bc:	4bb4      	ldr	r3, [pc, #720]	; (8006c90 <_malloc_r+0x300>)
 80069be:	429e      	cmp	r6, r3
 80069c0:	d816      	bhi.n	80069f0 <_malloc_r+0x60>
 80069c2:	08f2      	lsrs	r2, r6, #3
 80069c4:	49b3      	ldr	r1, [pc, #716]	; (8006c94 <_malloc_r+0x304>)
 80069c6:	00d3      	lsls	r3, r2, #3
 80069c8:	18cb      	adds	r3, r1, r3
 80069ca:	68dc      	ldr	r4, [r3, #12]
 80069cc:	429c      	cmp	r4, r3
 80069ce:	d104      	bne.n	80069da <_malloc_r+0x4a>
 80069d0:	1c23      	adds	r3, r4, #0
 80069d2:	3308      	adds	r3, #8
 80069d4:	68dc      	ldr	r4, [r3, #12]
 80069d6:	429c      	cmp	r4, r3
 80069d8:	d008      	beq.n	80069ec <_malloc_r+0x5c>
 80069da:	6863      	ldr	r3, [r4, #4]
 80069dc:	2203      	movs	r2, #3
 80069de:	4393      	bics	r3, r2
 80069e0:	68a1      	ldr	r1, [r4, #8]
 80069e2:	68e2      	ldr	r2, [r4, #12]
 80069e4:	18e3      	adds	r3, r4, r3
 80069e6:	60ca      	str	r2, [r1, #12]
 80069e8:	6091      	str	r1, [r2, #8]
 80069ea:	e036      	b.n	8006a5a <_malloc_r+0xca>
 80069ec:	3202      	adds	r2, #2
 80069ee:	e03d      	b.n	8006a6c <_malloc_r+0xdc>
 80069f0:	0a72      	lsrs	r2, r6, #9
 80069f2:	2a00      	cmp	r2, #0
 80069f4:	d101      	bne.n	80069fa <_malloc_r+0x6a>
 80069f6:	08f2      	lsrs	r2, r6, #3
 80069f8:	e01b      	b.n	8006a32 <_malloc_r+0xa2>
 80069fa:	2a04      	cmp	r2, #4
 80069fc:	d802      	bhi.n	8006a04 <_malloc_r+0x74>
 80069fe:	09b2      	lsrs	r2, r6, #6
 8006a00:	3238      	adds	r2, #56	; 0x38
 8006a02:	e016      	b.n	8006a32 <_malloc_r+0xa2>
 8006a04:	2a14      	cmp	r2, #20
 8006a06:	d801      	bhi.n	8006a0c <_malloc_r+0x7c>
 8006a08:	325b      	adds	r2, #91	; 0x5b
 8006a0a:	e012      	b.n	8006a32 <_malloc_r+0xa2>
 8006a0c:	2a54      	cmp	r2, #84	; 0x54
 8006a0e:	d802      	bhi.n	8006a16 <_malloc_r+0x86>
 8006a10:	0b32      	lsrs	r2, r6, #12
 8006a12:	326e      	adds	r2, #110	; 0x6e
 8006a14:	e00d      	b.n	8006a32 <_malloc_r+0xa2>
 8006a16:	23aa      	movs	r3, #170	; 0xaa
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d802      	bhi.n	8006a24 <_malloc_r+0x94>
 8006a1e:	0bf2      	lsrs	r2, r6, #15
 8006a20:	3277      	adds	r2, #119	; 0x77
 8006a22:	e006      	b.n	8006a32 <_malloc_r+0xa2>
 8006a24:	4b9c      	ldr	r3, [pc, #624]	; (8006c98 <_malloc_r+0x308>)
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d901      	bls.n	8006a2e <_malloc_r+0x9e>
 8006a2a:	227e      	movs	r2, #126	; 0x7e
 8006a2c:	e001      	b.n	8006a32 <_malloc_r+0xa2>
 8006a2e:	0cb2      	lsrs	r2, r6, #18
 8006a30:	327c      	adds	r2, #124	; 0x7c
 8006a32:	4898      	ldr	r0, [pc, #608]	; (8006c94 <_malloc_r+0x304>)
 8006a34:	00d3      	lsls	r3, r2, #3
 8006a36:	18c0      	adds	r0, r0, r3
 8006a38:	68c4      	ldr	r4, [r0, #12]
 8006a3a:	e014      	b.n	8006a66 <_malloc_r+0xd6>
 8006a3c:	6861      	ldr	r1, [r4, #4]
 8006a3e:	2303      	movs	r3, #3
 8006a40:	4399      	bics	r1, r3
 8006a42:	1b8d      	subs	r5, r1, r6
 8006a44:	2d0f      	cmp	r5, #15
 8006a46:	dd01      	ble.n	8006a4c <_malloc_r+0xbc>
 8006a48:	3a01      	subs	r2, #1
 8006a4a:	e00e      	b.n	8006a6a <_malloc_r+0xda>
 8006a4c:	68e3      	ldr	r3, [r4, #12]
 8006a4e:	2d00      	cmp	r5, #0
 8006a50:	db08      	blt.n	8006a64 <_malloc_r+0xd4>
 8006a52:	68a2      	ldr	r2, [r4, #8]
 8006a54:	60d3      	str	r3, [r2, #12]
 8006a56:	609a      	str	r2, [r3, #8]
 8006a58:	1863      	adds	r3, r4, r1
 8006a5a:	6859      	ldr	r1, [r3, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]
 8006a62:	e024      	b.n	8006aae <_malloc_r+0x11e>
 8006a64:	1c1c      	adds	r4, r3, #0
 8006a66:	4284      	cmp	r4, r0
 8006a68:	d1e8      	bne.n	8006a3c <_malloc_r+0xac>
 8006a6a:	3201      	adds	r2, #1
 8006a6c:	4d89      	ldr	r5, [pc, #548]	; (8006c94 <_malloc_r+0x304>)
 8006a6e:	1c2b      	adds	r3, r5, #0
 8006a70:	3308      	adds	r3, #8
 8006a72:	689c      	ldr	r4, [r3, #8]
 8006a74:	429c      	cmp	r4, r3
 8006a76:	d06e      	beq.n	8006b56 <_malloc_r+0x1c6>
 8006a78:	6861      	ldr	r1, [r4, #4]
 8006a7a:	2003      	movs	r0, #3
 8006a7c:	4381      	bics	r1, r0
 8006a7e:	1b88      	subs	r0, r1, r6
 8006a80:	280f      	cmp	r0, #15
 8006a82:	dd0b      	ble.n	8006a9c <_malloc_r+0x10c>
 8006a84:	2101      	movs	r1, #1
 8006a86:	19a2      	adds	r2, r4, r6
 8006a88:	430e      	orrs	r6, r1
 8006a8a:	4301      	orrs	r1, r0
 8006a8c:	6066      	str	r6, [r4, #4]
 8006a8e:	60da      	str	r2, [r3, #12]
 8006a90:	609a      	str	r2, [r3, #8]
 8006a92:	60d3      	str	r3, [r2, #12]
 8006a94:	6093      	str	r3, [r2, #8]
 8006a96:	6051      	str	r1, [r2, #4]
 8006a98:	5010      	str	r0, [r2, r0]
 8006a9a:	e008      	b.n	8006aae <_malloc_r+0x11e>
 8006a9c:	60db      	str	r3, [r3, #12]
 8006a9e:	609b      	str	r3, [r3, #8]
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	db09      	blt.n	8006ab8 <_malloc_r+0x128>
 8006aa4:	1861      	adds	r1, r4, r1
 8006aa6:	684a      	ldr	r2, [r1, #4]
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	604b      	str	r3, [r1, #4]
 8006aae:	9803      	ldr	r0, [sp, #12]
 8006ab0:	f000 f9c8 	bl	8006e44 <__malloc_unlock>
 8006ab4:	1c20      	adds	r0, r4, #0
 8006ab6:	e16d      	b.n	8006d94 <_malloc_r+0x404>
 8006ab8:	4878      	ldr	r0, [pc, #480]	; (8006c9c <_malloc_r+0x30c>)
 8006aba:	4281      	cmp	r1, r0
 8006abc:	d80f      	bhi.n	8006ade <_malloc_r+0x14e>
 8006abe:	08c9      	lsrs	r1, r1, #3
 8006ac0:	1088      	asrs	r0, r1, #2
 8006ac2:	2701      	movs	r7, #1
 8006ac4:	4087      	lsls	r7, r0
 8006ac6:	1c38      	adds	r0, r7, #0
 8006ac8:	686f      	ldr	r7, [r5, #4]
 8006aca:	00c9      	lsls	r1, r1, #3
 8006acc:	4338      	orrs	r0, r7
 8006ace:	6068      	str	r0, [r5, #4]
 8006ad0:	186d      	adds	r5, r5, r1
 8006ad2:	68a9      	ldr	r1, [r5, #8]
 8006ad4:	60e5      	str	r5, [r4, #12]
 8006ad6:	60a1      	str	r1, [r4, #8]
 8006ad8:	60cc      	str	r4, [r1, #12]
 8006ada:	60ac      	str	r4, [r5, #8]
 8006adc:	e03b      	b.n	8006b56 <_malloc_r+0x1c6>
 8006ade:	0a4d      	lsrs	r5, r1, #9
 8006ae0:	2d04      	cmp	r5, #4
 8006ae2:	d802      	bhi.n	8006aea <_malloc_r+0x15a>
 8006ae4:	098d      	lsrs	r5, r1, #6
 8006ae6:	3538      	adds	r5, #56	; 0x38
 8006ae8:	e016      	b.n	8006b18 <_malloc_r+0x188>
 8006aea:	2d14      	cmp	r5, #20
 8006aec:	d801      	bhi.n	8006af2 <_malloc_r+0x162>
 8006aee:	355b      	adds	r5, #91	; 0x5b
 8006af0:	e012      	b.n	8006b18 <_malloc_r+0x188>
 8006af2:	2d54      	cmp	r5, #84	; 0x54
 8006af4:	d802      	bhi.n	8006afc <_malloc_r+0x16c>
 8006af6:	0b0d      	lsrs	r5, r1, #12
 8006af8:	356e      	adds	r5, #110	; 0x6e
 8006afa:	e00d      	b.n	8006b18 <_malloc_r+0x188>
 8006afc:	20aa      	movs	r0, #170	; 0xaa
 8006afe:	0040      	lsls	r0, r0, #1
 8006b00:	4285      	cmp	r5, r0
 8006b02:	d802      	bhi.n	8006b0a <_malloc_r+0x17a>
 8006b04:	0bcd      	lsrs	r5, r1, #15
 8006b06:	3577      	adds	r5, #119	; 0x77
 8006b08:	e006      	b.n	8006b18 <_malloc_r+0x188>
 8006b0a:	4863      	ldr	r0, [pc, #396]	; (8006c98 <_malloc_r+0x308>)
 8006b0c:	4285      	cmp	r5, r0
 8006b0e:	d901      	bls.n	8006b14 <_malloc_r+0x184>
 8006b10:	257e      	movs	r5, #126	; 0x7e
 8006b12:	e001      	b.n	8006b18 <_malloc_r+0x188>
 8006b14:	0c8d      	lsrs	r5, r1, #18
 8006b16:	357c      	adds	r5, #124	; 0x7c
 8006b18:	9502      	str	r5, [sp, #8]
 8006b1a:	9d02      	ldr	r5, [sp, #8]
 8006b1c:	4f5d      	ldr	r7, [pc, #372]	; (8006c94 <_malloc_r+0x304>)
 8006b1e:	00e8      	lsls	r0, r5, #3
 8006b20:	19c0      	adds	r0, r0, r7
 8006b22:	4684      	mov	ip, r0
 8006b24:	6880      	ldr	r0, [r0, #8]
 8006b26:	4560      	cmp	r0, ip
 8006b28:	d10b      	bne.n	8006b42 <_malloc_r+0x1b2>
 8006b2a:	10ad      	asrs	r5, r5, #2
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	40a9      	lsls	r1, r5
 8006b30:	1c0d      	adds	r5, r1, #0
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	430d      	orrs	r5, r1
 8006b36:	607d      	str	r5, [r7, #4]
 8006b38:	1c01      	adds	r1, r0, #0
 8006b3a:	e008      	b.n	8006b4e <_malloc_r+0x1be>
 8006b3c:	6880      	ldr	r0, [r0, #8]
 8006b3e:	4560      	cmp	r0, ip
 8006b40:	d004      	beq.n	8006b4c <_malloc_r+0x1bc>
 8006b42:	6845      	ldr	r5, [r0, #4]
 8006b44:	2703      	movs	r7, #3
 8006b46:	43bd      	bics	r5, r7
 8006b48:	42a9      	cmp	r1, r5
 8006b4a:	d3f7      	bcc.n	8006b3c <_malloc_r+0x1ac>
 8006b4c:	68c1      	ldr	r1, [r0, #12]
 8006b4e:	60e1      	str	r1, [r4, #12]
 8006b50:	60a0      	str	r0, [r4, #8]
 8006b52:	60c4      	str	r4, [r0, #12]
 8006b54:	608c      	str	r4, [r1, #8]
 8006b56:	1091      	asrs	r1, r2, #2
 8006b58:	2001      	movs	r0, #1
 8006b5a:	4c4e      	ldr	r4, [pc, #312]	; (8006c94 <_malloc_r+0x304>)
 8006b5c:	4088      	lsls	r0, r1
 8006b5e:	1c01      	adds	r1, r0, #0
 8006b60:	6860      	ldr	r0, [r4, #4]
 8006b62:	4281      	cmp	r1, r0
 8006b64:	d85b      	bhi.n	8006c1e <_malloc_r+0x28e>
 8006b66:	4201      	tst	r1, r0
 8006b68:	d105      	bne.n	8006b76 <_malloc_r+0x1e6>
 8006b6a:	2503      	movs	r5, #3
 8006b6c:	43aa      	bics	r2, r5
 8006b6e:	0049      	lsls	r1, r1, #1
 8006b70:	3204      	adds	r2, #4
 8006b72:	4201      	tst	r1, r0
 8006b74:	d0fb      	beq.n	8006b6e <_malloc_r+0x1de>
 8006b76:	00d0      	lsls	r0, r2, #3
 8006b78:	1820      	adds	r0, r4, r0
 8006b7a:	9004      	str	r0, [sp, #16]
 8006b7c:	1c07      	adds	r7, r0, #0
 8006b7e:	9202      	str	r2, [sp, #8]
 8006b80:	68fd      	ldr	r5, [r7, #12]
 8006b82:	9201      	str	r2, [sp, #4]
 8006b84:	e026      	b.n	8006bd4 <_malloc_r+0x244>
 8006b86:	686a      	ldr	r2, [r5, #4]
 8006b88:	2003      	movs	r0, #3
 8006b8a:	4382      	bics	r2, r0
 8006b8c:	1b90      	subs	r0, r2, r6
 8006b8e:	9205      	str	r2, [sp, #20]
 8006b90:	280f      	cmp	r0, #15
 8006b92:	dd0f      	ble.n	8006bb4 <_malloc_r+0x224>
 8006b94:	2101      	movs	r1, #1
 8006b96:	19aa      	adds	r2, r5, r6
 8006b98:	430e      	orrs	r6, r1
 8006b9a:	68ec      	ldr	r4, [r5, #12]
 8006b9c:	606e      	str	r6, [r5, #4]
 8006b9e:	68ae      	ldr	r6, [r5, #8]
 8006ba0:	4301      	orrs	r1, r0
 8006ba2:	60f4      	str	r4, [r6, #12]
 8006ba4:	60a6      	str	r6, [r4, #8]
 8006ba6:	60da      	str	r2, [r3, #12]
 8006ba8:	609a      	str	r2, [r3, #8]
 8006baa:	60d3      	str	r3, [r2, #12]
 8006bac:	6093      	str	r3, [r2, #8]
 8006bae:	6051      	str	r1, [r2, #4]
 8006bb0:	5010      	str	r0, [r2, r0]
 8006bb2:	e0eb      	b.n	8006d8c <_malloc_r+0x3fc>
 8006bb4:	68ea      	ldr	r2, [r5, #12]
 8006bb6:	4694      	mov	ip, r2
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	db0a      	blt.n	8006bd2 <_malloc_r+0x242>
 8006bbc:	9b05      	ldr	r3, [sp, #20]
 8006bbe:	18e8      	adds	r0, r5, r3
 8006bc0:	6842      	ldr	r2, [r0, #4]
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	6043      	str	r3, [r0, #4]
 8006bc8:	68ab      	ldr	r3, [r5, #8]
 8006bca:	4660      	mov	r0, ip
 8006bcc:	60d8      	str	r0, [r3, #12]
 8006bce:	6083      	str	r3, [r0, #8]
 8006bd0:	e0dc      	b.n	8006d8c <_malloc_r+0x3fc>
 8006bd2:	1c15      	adds	r5, r2, #0
 8006bd4:	42bd      	cmp	r5, r7
 8006bd6:	d1d6      	bne.n	8006b86 <_malloc_r+0x1f6>
 8006bd8:	9d02      	ldr	r5, [sp, #8]
 8006bda:	9a01      	ldr	r2, [sp, #4]
 8006bdc:	3501      	adds	r5, #1
 8006bde:	9502      	str	r5, [sp, #8]
 8006be0:	07ad      	lsls	r5, r5, #30
 8006be2:	d001      	beq.n	8006be8 <_malloc_r+0x258>
 8006be4:	3708      	adds	r7, #8
 8006be6:	e7cb      	b.n	8006b80 <_malloc_r+0x1f0>
 8006be8:	9804      	ldr	r0, [sp, #16]
 8006bea:	0795      	lsls	r5, r2, #30
 8006bec:	d103      	bne.n	8006bf6 <_malloc_r+0x266>
 8006bee:	6862      	ldr	r2, [r4, #4]
 8006bf0:	438a      	bics	r2, r1
 8006bf2:	6062      	str	r2, [r4, #4]
 8006bf4:	e006      	b.n	8006c04 <_malloc_r+0x274>
 8006bf6:	1c05      	adds	r5, r0, #0
 8006bf8:	3d08      	subs	r5, #8
 8006bfa:	68a8      	ldr	r0, [r5, #8]
 8006bfc:	42a8      	cmp	r0, r5
 8006bfe:	d101      	bne.n	8006c04 <_malloc_r+0x274>
 8006c00:	3a01      	subs	r2, #1
 8006c02:	e7f2      	b.n	8006bea <_malloc_r+0x25a>
 8006c04:	6860      	ldr	r0, [r4, #4]
 8006c06:	0049      	lsls	r1, r1, #1
 8006c08:	4281      	cmp	r1, r0
 8006c0a:	d808      	bhi.n	8006c1e <_malloc_r+0x28e>
 8006c0c:	2900      	cmp	r1, #0
 8006c0e:	d006      	beq.n	8006c1e <_malloc_r+0x28e>
 8006c10:	9a02      	ldr	r2, [sp, #8]
 8006c12:	e001      	b.n	8006c18 <_malloc_r+0x288>
 8006c14:	3204      	adds	r2, #4
 8006c16:	0049      	lsls	r1, r1, #1
 8006c18:	4201      	tst	r1, r0
 8006c1a:	d1ac      	bne.n	8006b76 <_malloc_r+0x1e6>
 8006c1c:	e7fa      	b.n	8006c14 <_malloc_r+0x284>
 8006c1e:	68a7      	ldr	r7, [r4, #8]
 8006c20:	2203      	movs	r2, #3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4393      	bics	r3, r2
 8006c26:	9304      	str	r3, [sp, #16]
 8006c28:	1b9b      	subs	r3, r3, r6
 8006c2a:	2b0f      	cmp	r3, #15
 8006c2c:	dd03      	ble.n	8006c36 <_malloc_r+0x2a6>
 8006c2e:	9804      	ldr	r0, [sp, #16]
 8006c30:	42b0      	cmp	r0, r6
 8006c32:	d300      	bcc.n	8006c36 <_malloc_r+0x2a6>
 8006c34:	e0a1      	b.n	8006d7a <_malloc_r+0x3ea>
 8006c36:	4b1a      	ldr	r3, [pc, #104]	; (8006ca0 <_malloc_r+0x310>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3310      	adds	r3, #16
 8006c3c:	199b      	adds	r3, r3, r6
 8006c3e:	9302      	str	r3, [sp, #8]
 8006c40:	4b18      	ldr	r3, [pc, #96]	; (8006ca4 <_malloc_r+0x314>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3301      	adds	r3, #1
 8006c46:	d005      	beq.n	8006c54 <_malloc_r+0x2c4>
 8006c48:	9902      	ldr	r1, [sp, #8]
 8006c4a:	4b17      	ldr	r3, [pc, #92]	; (8006ca8 <_malloc_r+0x318>)
 8006c4c:	18ca      	adds	r2, r1, r3
 8006c4e:	4b17      	ldr	r3, [pc, #92]	; (8006cac <_malloc_r+0x31c>)
 8006c50:	401a      	ands	r2, r3
 8006c52:	9202      	str	r2, [sp, #8]
 8006c54:	9803      	ldr	r0, [sp, #12]
 8006c56:	9902      	ldr	r1, [sp, #8]
 8006c58:	f000 fa86 	bl	8007168 <_sbrk_r>
 8006c5c:	1c05      	adds	r5, r0, #0
 8006c5e:	1c68      	adds	r0, r5, #1
 8006c60:	d100      	bne.n	8006c64 <_malloc_r+0x2d4>
 8006c62:	e07c      	b.n	8006d5e <_malloc_r+0x3ce>
 8006c64:	9a04      	ldr	r2, [sp, #16]
 8006c66:	18b9      	adds	r1, r7, r2
 8006c68:	428d      	cmp	r5, r1
 8006c6a:	d201      	bcs.n	8006c70 <_malloc_r+0x2e0>
 8006c6c:	42a7      	cmp	r7, r4
 8006c6e:	d176      	bne.n	8006d5e <_malloc_r+0x3ce>
 8006c70:	4b0f      	ldr	r3, [pc, #60]	; (8006cb0 <_malloc_r+0x320>)
 8006c72:	9a02      	ldr	r2, [sp, #8]
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	1810      	adds	r0, r2, r0
 8006c78:	6018      	str	r0, [r3, #0]
 8006c7a:	428d      	cmp	r5, r1
 8006c7c:	d11a      	bne.n	8006cb4 <_malloc_r+0x324>
 8006c7e:	052b      	lsls	r3, r5, #20
 8006c80:	d118      	bne.n	8006cb4 <_malloc_r+0x324>
 8006c82:	9d04      	ldr	r5, [sp, #16]
 8006c84:	68a3      	ldr	r3, [r4, #8]
 8006c86:	1951      	adds	r1, r2, r5
 8006c88:	2201      	movs	r2, #1
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	605a      	str	r2, [r3, #4]
 8006c8e:	e05a      	b.n	8006d46 <_malloc_r+0x3b6>
 8006c90:	000001f7 	.word	0x000001f7
 8006c94:	20000648 	.word	0x20000648
 8006c98:	00000554 	.word	0x00000554
 8006c9c:	000001ff 	.word	0x000001ff
 8006ca0:	20001540 	.word	0x20001540
 8006ca4:	20000a54 	.word	0x20000a54
 8006ca8:	00000fff 	.word	0x00000fff
 8006cac:	fffff000 	.word	0xfffff000
 8006cb0:	20001544 	.word	0x20001544
 8006cb4:	4b39      	ldr	r3, [pc, #228]	; (8006d9c <_malloc_r+0x40c>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	3201      	adds	r2, #1
 8006cba:	d101      	bne.n	8006cc0 <_malloc_r+0x330>
 8006cbc:	601d      	str	r5, [r3, #0]
 8006cbe:	e003      	b.n	8006cc8 <_malloc_r+0x338>
 8006cc0:	1940      	adds	r0, r0, r5
 8006cc2:	4b37      	ldr	r3, [pc, #220]	; (8006da0 <_malloc_r+0x410>)
 8006cc4:	1a41      	subs	r1, r0, r1
 8006cc6:	6019      	str	r1, [r3, #0]
 8006cc8:	2007      	movs	r0, #7
 8006cca:	4028      	ands	r0, r5
 8006ccc:	d101      	bne.n	8006cd2 <_malloc_r+0x342>
 8006cce:	2000      	movs	r0, #0
 8006cd0:	e002      	b.n	8006cd8 <_malloc_r+0x348>
 8006cd2:	2308      	movs	r3, #8
 8006cd4:	1a18      	subs	r0, r3, r0
 8006cd6:	182d      	adds	r5, r5, r0
 8006cd8:	9b02      	ldr	r3, [sp, #8]
 8006cda:	2180      	movs	r1, #128	; 0x80
 8006cdc:	18ea      	adds	r2, r5, r3
 8006cde:	4b31      	ldr	r3, [pc, #196]	; (8006da4 <_malloc_r+0x414>)
 8006ce0:	0149      	lsls	r1, r1, #5
 8006ce2:	1840      	adds	r0, r0, r1
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	1ac3      	subs	r3, r0, r3
 8006ce8:	1c19      	adds	r1, r3, #0
 8006cea:	9803      	ldr	r0, [sp, #12]
 8006cec:	9302      	str	r3, [sp, #8]
 8006cee:	f000 fa3b 	bl	8007168 <_sbrk_r>
 8006cf2:	1c41      	adds	r1, r0, #1
 8006cf4:	d102      	bne.n	8006cfc <_malloc_r+0x36c>
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	1c28      	adds	r0, r5, #0
 8006cfa:	9202      	str	r2, [sp, #8]
 8006cfc:	4b28      	ldr	r3, [pc, #160]	; (8006da0 <_malloc_r+0x410>)
 8006cfe:	9902      	ldr	r1, [sp, #8]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	1b40      	subs	r0, r0, r5
 8006d04:	188a      	adds	r2, r1, r2
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	1840      	adds	r0, r0, r1
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	4310      	orrs	r0, r2
 8006d0e:	60a5      	str	r5, [r4, #8]
 8006d10:	6068      	str	r0, [r5, #4]
 8006d12:	42a7      	cmp	r7, r4
 8006d14:	d017      	beq.n	8006d46 <_malloc_r+0x3b6>
 8006d16:	9b04      	ldr	r3, [sp, #16]
 8006d18:	2b0f      	cmp	r3, #15
 8006d1a:	d801      	bhi.n	8006d20 <_malloc_r+0x390>
 8006d1c:	606a      	str	r2, [r5, #4]
 8006d1e:	e01e      	b.n	8006d5e <_malloc_r+0x3ce>
 8006d20:	9b04      	ldr	r3, [sp, #16]
 8006d22:	2107      	movs	r1, #7
 8006d24:	3b0c      	subs	r3, #12
 8006d26:	438b      	bics	r3, r1
 8006d28:	18f9      	adds	r1, r7, r3
 8006d2a:	2005      	movs	r0, #5
 8006d2c:	6048      	str	r0, [r1, #4]
 8006d2e:	6088      	str	r0, [r1, #8]
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	400a      	ands	r2, r1
 8006d34:	431a      	orrs	r2, r3
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	2b0f      	cmp	r3, #15
 8006d3a:	d904      	bls.n	8006d46 <_malloc_r+0x3b6>
 8006d3c:	1c39      	adds	r1, r7, #0
 8006d3e:	3108      	adds	r1, #8
 8006d40:	9803      	ldr	r0, [sp, #12]
 8006d42:	f002 ff73 	bl	8009c2c <_free_r>
 8006d46:	4b16      	ldr	r3, [pc, #88]	; (8006da0 <_malloc_r+0x410>)
 8006d48:	4a17      	ldr	r2, [pc, #92]	; (8006da8 <_malloc_r+0x418>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6811      	ldr	r1, [r2, #0]
 8006d4e:	428b      	cmp	r3, r1
 8006d50:	d900      	bls.n	8006d54 <_malloc_r+0x3c4>
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	4a15      	ldr	r2, [pc, #84]	; (8006dac <_malloc_r+0x41c>)
 8006d56:	6811      	ldr	r1, [r2, #0]
 8006d58:	428b      	cmp	r3, r1
 8006d5a:	d900      	bls.n	8006d5e <_malloc_r+0x3ce>
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	68a3      	ldr	r3, [r4, #8]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	2303      	movs	r3, #3
 8006d64:	439a      	bics	r2, r3
 8006d66:	1b93      	subs	r3, r2, r6
 8006d68:	2b0f      	cmp	r3, #15
 8006d6a:	dd01      	ble.n	8006d70 <_malloc_r+0x3e0>
 8006d6c:	42b2      	cmp	r2, r6
 8006d6e:	d204      	bcs.n	8006d7a <_malloc_r+0x3ea>
 8006d70:	9803      	ldr	r0, [sp, #12]
 8006d72:	f000 f867 	bl	8006e44 <__malloc_unlock>
 8006d76:	2000      	movs	r0, #0
 8006d78:	e00d      	b.n	8006d96 <_malloc_r+0x406>
 8006d7a:	68a5      	ldr	r5, [r4, #8]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	1c31      	adds	r1, r6, #0
 8006d80:	4311      	orrs	r1, r2
 8006d82:	19ae      	adds	r6, r5, r6
 8006d84:	4313      	orrs	r3, r2
 8006d86:	6069      	str	r1, [r5, #4]
 8006d88:	60a6      	str	r6, [r4, #8]
 8006d8a:	6073      	str	r3, [r6, #4]
 8006d8c:	9803      	ldr	r0, [sp, #12]
 8006d8e:	f000 f859 	bl	8006e44 <__malloc_unlock>
 8006d92:	1c28      	adds	r0, r5, #0
 8006d94:	3008      	adds	r0, #8
 8006d96:	b007      	add	sp, #28
 8006d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	20000a54 	.word	0x20000a54
 8006da0:	20001544 	.word	0x20001544
 8006da4:	00000fff 	.word	0x00000fff
 8006da8:	2000153c 	.word	0x2000153c
 8006dac:	20001538 	.word	0x20001538

08006db0 <memchr>:
 8006db0:	b500      	push	{lr}
 8006db2:	b2c9      	uxtb	r1, r1
 8006db4:	e004      	b.n	8006dc0 <memchr+0x10>
 8006db6:	7803      	ldrb	r3, [r0, #0]
 8006db8:	3a01      	subs	r2, #1
 8006dba:	428b      	cmp	r3, r1
 8006dbc:	d003      	beq.n	8006dc6 <memchr+0x16>
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	2a00      	cmp	r2, #0
 8006dc2:	d1f8      	bne.n	8006db6 <memchr+0x6>
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	bd00      	pop	{pc}

08006dc8 <memcmp>:
 8006dc8:	b530      	push	{r4, r5, lr}
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e007      	b.n	8006dde <memcmp+0x16>
 8006dce:	5cc5      	ldrb	r5, [r0, r3]
 8006dd0:	5ccc      	ldrb	r4, [r1, r3]
 8006dd2:	3a01      	subs	r2, #1
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	42a5      	cmp	r5, r4
 8006dd8:	d001      	beq.n	8006dde <memcmp+0x16>
 8006dda:	1b28      	subs	r0, r5, r4
 8006ddc:	e002      	b.n	8006de4 <memcmp+0x1c>
 8006dde:	2a00      	cmp	r2, #0
 8006de0:	d1f5      	bne.n	8006dce <memcmp+0x6>
 8006de2:	2000      	movs	r0, #0
 8006de4:	bd30      	pop	{r4, r5, pc}

08006de6 <memcpy>:
 8006de6:	b510      	push	{r4, lr}
 8006de8:	1882      	adds	r2, r0, r2
 8006dea:	1c03      	adds	r3, r0, #0
 8006dec:	e003      	b.n	8006df6 <memcpy+0x10>
 8006dee:	780c      	ldrb	r4, [r1, #0]
 8006df0:	3101      	adds	r1, #1
 8006df2:	701c      	strb	r4, [r3, #0]
 8006df4:	3301      	adds	r3, #1
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d3f9      	bcc.n	8006dee <memcpy+0x8>
 8006dfa:	bd10      	pop	{r4, pc}

08006dfc <memmove>:
 8006dfc:	b530      	push	{r4, r5, lr}
 8006dfe:	4281      	cmp	r1, r0
 8006e00:	d211      	bcs.n	8006e26 <memmove+0x2a>
 8006e02:	188c      	adds	r4, r1, r2
 8006e04:	42a0      	cmp	r0, r4
 8006e06:	d20e      	bcs.n	8006e26 <memmove+0x2a>
 8006e08:	1881      	adds	r1, r0, r2
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e002      	b.n	8006e14 <memmove+0x18>
 8006e0e:	5ce5      	ldrb	r5, [r4, r3]
 8006e10:	3a01      	subs	r2, #1
 8006e12:	54cd      	strb	r5, [r1, r3]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	2a00      	cmp	r2, #0
 8006e18:	d1f9      	bne.n	8006e0e <memmove+0x12>
 8006e1a:	e007      	b.n	8006e2c <memmove+0x30>
 8006e1c:	5ccc      	ldrb	r4, [r1, r3]
 8006e1e:	3a01      	subs	r2, #1
 8006e20:	54c4      	strb	r4, [r0, r3]
 8006e22:	3301      	adds	r3, #1
 8006e24:	e000      	b.n	8006e28 <memmove+0x2c>
 8006e26:	2300      	movs	r3, #0
 8006e28:	2a00      	cmp	r2, #0
 8006e2a:	d1f7      	bne.n	8006e1c <memmove+0x20>
 8006e2c:	bd30      	pop	{r4, r5, pc}

08006e2e <memset>:
 8006e2e:	b500      	push	{lr}
 8006e30:	b2c9      	uxtb	r1, r1
 8006e32:	1882      	adds	r2, r0, r2
 8006e34:	1c03      	adds	r3, r0, #0
 8006e36:	e001      	b.n	8006e3c <memset+0xe>
 8006e38:	7019      	strb	r1, [r3, #0]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d3fb      	bcc.n	8006e38 <memset+0xa>
 8006e40:	bd00      	pop	{pc}

08006e42 <__malloc_lock>:
 8006e42:	4770      	bx	lr

08006e44 <__malloc_unlock>:
 8006e44:	4770      	bx	lr
	...

08006e48 <rand>:
 8006e48:	b510      	push	{r4, lr}
 8006e4a:	4b0b      	ldr	r3, [pc, #44]	; (8006e78 <rand+0x30>)
 8006e4c:	681c      	ldr	r4, [r3, #0]
 8006e4e:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <rand+0x2c>)
 8006e50:	4a07      	ldr	r2, [pc, #28]	; (8006e70 <rand+0x28>)
 8006e52:	34a8      	adds	r4, #168	; 0xa8
 8006e54:	6820      	ldr	r0, [r4, #0]
 8006e56:	6861      	ldr	r1, [r4, #4]
 8006e58:	f7fb f800 	bl	8001e5c <__aeabi_lmul>
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	2300      	movs	r3, #0
 8006e60:	1812      	adds	r2, r2, r0
 8006e62:	414b      	adcs	r3, r1
 8006e64:	4805      	ldr	r0, [pc, #20]	; (8006e7c <rand+0x34>)
 8006e66:	6022      	str	r2, [r4, #0]
 8006e68:	6063      	str	r3, [r4, #4]
 8006e6a:	4018      	ands	r0, r3
 8006e6c:	bd10      	pop	{r4, pc}
 8006e6e:	46c0      	nop			; (mov r8, r8)
 8006e70:	4c957f2d 	.word	0x4c957f2d
 8006e74:	5851f42d 	.word	0x5851f42d
 8006e78:	20000e88 	.word	0x20000e88
 8006e7c:	7fffffff 	.word	0x7fffffff

08006e80 <_realloc_r>:
 8006e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e82:	b089      	sub	sp, #36	; 0x24
 8006e84:	9005      	str	r0, [sp, #20]
 8006e86:	1c0e      	adds	r6, r1, #0
 8006e88:	9206      	str	r2, [sp, #24]
 8006e8a:	2900      	cmp	r1, #0
 8006e8c:	d104      	bne.n	8006e98 <_realloc_r+0x18>
 8006e8e:	1c11      	adds	r1, r2, #0
 8006e90:	f7ff fd7e 	bl	8006990 <_malloc_r>
 8006e94:	9003      	str	r0, [sp, #12]
 8006e96:	e161      	b.n	800715c <_realloc_r+0x2dc>
 8006e98:	9805      	ldr	r0, [sp, #20]
 8006e9a:	f7ff ffd2 	bl	8006e42 <__malloc_lock>
 8006e9e:	9f06      	ldr	r7, [sp, #24]
 8006ea0:	1c35      	adds	r5, r6, #0
 8006ea2:	3d08      	subs	r5, #8
 8006ea4:	370b      	adds	r7, #11
 8006ea6:	686c      	ldr	r4, [r5, #4]
 8006ea8:	2f16      	cmp	r7, #22
 8006eaa:	d801      	bhi.n	8006eb0 <_realloc_r+0x30>
 8006eac:	2710      	movs	r7, #16
 8006eae:	e003      	b.n	8006eb8 <_realloc_r+0x38>
 8006eb0:	2307      	movs	r3, #7
 8006eb2:	439f      	bics	r7, r3
 8006eb4:	2f00      	cmp	r7, #0
 8006eb6:	db02      	blt.n	8006ebe <_realloc_r+0x3e>
 8006eb8:	9806      	ldr	r0, [sp, #24]
 8006eba:	4287      	cmp	r7, r0
 8006ebc:	d205      	bcs.n	8006eca <_realloc_r+0x4a>
 8006ebe:	9905      	ldr	r1, [sp, #20]
 8006ec0:	230c      	movs	r3, #12
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	600b      	str	r3, [r1, #0]
 8006ec6:	9203      	str	r2, [sp, #12]
 8006ec8:	e148      	b.n	800715c <_realloc_r+0x2dc>
 8006eca:	2303      	movs	r3, #3
 8006ecc:	1c20      	adds	r0, r4, #0
 8006ece:	4398      	bics	r0, r3
 8006ed0:	9004      	str	r0, [sp, #16]
 8006ed2:	42b8      	cmp	r0, r7
 8006ed4:	db00      	blt.n	8006ed8 <_realloc_r+0x58>
 8006ed6:	e11a      	b.n	800710e <_realloc_r+0x28e>
 8006ed8:	49a2      	ldr	r1, [pc, #648]	; (8007164 <_realloc_r+0x2e4>)
 8006eda:	182b      	adds	r3, r5, r0
 8006edc:	6889      	ldr	r1, [r1, #8]
 8006ede:	468c      	mov	ip, r1
 8006ee0:	4563      	cmp	r3, ip
 8006ee2:	d006      	beq.n	8006ef2 <_realloc_r+0x72>
 8006ee4:	6859      	ldr	r1, [r3, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	4391      	bics	r1, r2
 8006eea:	1859      	adds	r1, r3, r1
 8006eec:	6849      	ldr	r1, [r1, #4]
 8006eee:	4211      	tst	r1, r2
 8006ef0:	d123      	bne.n	8006f3a <_realloc_r+0xba>
 8006ef2:	6859      	ldr	r1, [r3, #4]
 8006ef4:	2203      	movs	r2, #3
 8006ef6:	9804      	ldr	r0, [sp, #16]
 8006ef8:	4391      	bics	r1, r2
 8006efa:	1c0a      	adds	r2, r1, #0
 8006efc:	1809      	adds	r1, r1, r0
 8006efe:	4563      	cmp	r3, ip
 8006f00:	d113      	bne.n	8006f2a <_realloc_r+0xaa>
 8006f02:	1c38      	adds	r0, r7, #0
 8006f04:	3010      	adds	r0, #16
 8006f06:	4281      	cmp	r1, r0
 8006f08:	db19      	blt.n	8006f3e <_realloc_r+0xbe>
 8006f0a:	4b96      	ldr	r3, [pc, #600]	; (8007164 <_realloc_r+0x2e4>)
 8006f0c:	19ea      	adds	r2, r5, r7
 8006f0e:	609a      	str	r2, [r3, #8]
 8006f10:	1bc9      	subs	r1, r1, r7
 8006f12:	2301      	movs	r3, #1
 8006f14:	4319      	orrs	r1, r3
 8006f16:	6051      	str	r1, [r2, #4]
 8006f18:	686a      	ldr	r2, [r5, #4]
 8006f1a:	9805      	ldr	r0, [sp, #20]
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	431f      	orrs	r7, r3
 8006f20:	606f      	str	r7, [r5, #4]
 8006f22:	f7ff ff8f 	bl	8006e44 <__malloc_unlock>
 8006f26:	9603      	str	r6, [sp, #12]
 8006f28:	e118      	b.n	800715c <_realloc_r+0x2dc>
 8006f2a:	9103      	str	r1, [sp, #12]
 8006f2c:	42b9      	cmp	r1, r7
 8006f2e:	db06      	blt.n	8006f3e <_realloc_r+0xbe>
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	60da      	str	r2, [r3, #12]
 8006f36:	6093      	str	r3, [r2, #8]
 8006f38:	e0eb      	b.n	8007112 <_realloc_r+0x292>
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	07e0      	lsls	r0, r4, #31
 8006f40:	d500      	bpl.n	8006f44 <_realloc_r+0xc4>
 8006f42:	e096      	b.n	8007072 <_realloc_r+0x1f2>
 8006f44:	682c      	ldr	r4, [r5, #0]
 8006f46:	2103      	movs	r1, #3
 8006f48:	1b2c      	subs	r4, r5, r4
 8006f4a:	6860      	ldr	r0, [r4, #4]
 8006f4c:	4388      	bics	r0, r1
 8006f4e:	9001      	str	r0, [sp, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d057      	beq.n	8007004 <_realloc_r+0x184>
 8006f54:	9904      	ldr	r1, [sp, #16]
 8006f56:	1841      	adds	r1, r0, r1
 8006f58:	9103      	str	r1, [sp, #12]
 8006f5a:	4563      	cmp	r3, ip
 8006f5c:	d148      	bne.n	8006ff0 <_realloc_r+0x170>
 8006f5e:	1c3b      	adds	r3, r7, #0
 8006f60:	188a      	adds	r2, r1, r2
 8006f62:	3310      	adds	r3, #16
 8006f64:	9207      	str	r2, [sp, #28]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	db4c      	blt.n	8007004 <_realloc_r+0x184>
 8006f6a:	68a2      	ldr	r2, [r4, #8]
 8006f6c:	68e3      	ldr	r3, [r4, #12]
 8006f6e:	60d3      	str	r3, [r2, #12]
 8006f70:	609a      	str	r2, [r3, #8]
 8006f72:	1c22      	adds	r2, r4, #0
 8006f74:	3208      	adds	r2, #8
 8006f76:	9203      	str	r2, [sp, #12]
 8006f78:	9a04      	ldr	r2, [sp, #16]
 8006f7a:	3a04      	subs	r2, #4
 8006f7c:	2a24      	cmp	r2, #36	; 0x24
 8006f7e:	d826      	bhi.n	8006fce <_realloc_r+0x14e>
 8006f80:	9b03      	ldr	r3, [sp, #12]
 8006f82:	2a13      	cmp	r2, #19
 8006f84:	d91a      	bls.n	8006fbc <_realloc_r+0x13c>
 8006f86:	1c31      	adds	r1, r6, #0
 8006f88:	c908      	ldmia	r1!, {r3}
 8006f8a:	60a3      	str	r3, [r4, #8]
 8006f8c:	6873      	ldr	r3, [r6, #4]
 8006f8e:	1d0e      	adds	r6, r1, #4
 8006f90:	60e3      	str	r3, [r4, #12]
 8006f92:	1c23      	adds	r3, r4, #0
 8006f94:	3310      	adds	r3, #16
 8006f96:	2a1b      	cmp	r2, #27
 8006f98:	d910      	bls.n	8006fbc <_realloc_r+0x13c>
 8006f9a:	684b      	ldr	r3, [r1, #4]
 8006f9c:	1d31      	adds	r1, r6, #4
 8006f9e:	6123      	str	r3, [r4, #16]
 8006fa0:	6873      	ldr	r3, [r6, #4]
 8006fa2:	1d0e      	adds	r6, r1, #4
 8006fa4:	6163      	str	r3, [r4, #20]
 8006fa6:	1c23      	adds	r3, r4, #0
 8006fa8:	3318      	adds	r3, #24
 8006faa:	2a24      	cmp	r2, #36	; 0x24
 8006fac:	d106      	bne.n	8006fbc <_realloc_r+0x13c>
 8006fae:	684b      	ldr	r3, [r1, #4]
 8006fb0:	61a3      	str	r3, [r4, #24]
 8006fb2:	6873      	ldr	r3, [r6, #4]
 8006fb4:	3608      	adds	r6, #8
 8006fb6:	61e3      	str	r3, [r4, #28]
 8006fb8:	1c23      	adds	r3, r4, #0
 8006fba:	3320      	adds	r3, #32
 8006fbc:	1c31      	adds	r1, r6, #0
 8006fbe:	c901      	ldmia	r1!, {r0}
 8006fc0:	1c1a      	adds	r2, r3, #0
 8006fc2:	c201      	stmia	r2!, {r0}
 8006fc4:	6870      	ldr	r0, [r6, #4]
 8006fc6:	6058      	str	r0, [r3, #4]
 8006fc8:	684b      	ldr	r3, [r1, #4]
 8006fca:	6053      	str	r3, [r2, #4]
 8006fcc:	e003      	b.n	8006fd6 <_realloc_r+0x156>
 8006fce:	9803      	ldr	r0, [sp, #12]
 8006fd0:	1c31      	adds	r1, r6, #0
 8006fd2:	f7ff ff13 	bl	8006dfc <memmove>
 8006fd6:	4b63      	ldr	r3, [pc, #396]	; (8007164 <_realloc_r+0x2e4>)
 8006fd8:	9907      	ldr	r1, [sp, #28]
 8006fda:	19e0      	adds	r0, r4, r7
 8006fdc:	1bca      	subs	r2, r1, r7
 8006fde:	6098      	str	r0, [r3, #8]
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	6042      	str	r2, [r0, #4]
 8006fe6:	6862      	ldr	r2, [r4, #4]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	431f      	orrs	r7, r3
 8006fec:	6067      	str	r7, [r4, #4]
 8006fee:	e08a      	b.n	8007106 <_realloc_r+0x286>
 8006ff0:	9803      	ldr	r0, [sp, #12]
 8006ff2:	1882      	adds	r2, r0, r2
 8006ff4:	9203      	str	r2, [sp, #12]
 8006ff6:	42ba      	cmp	r2, r7
 8006ff8:	db04      	blt.n	8007004 <_realloc_r+0x184>
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	60da      	str	r2, [r3, #12]
 8007000:	6093      	str	r3, [r2, #8]
 8007002:	e005      	b.n	8007010 <_realloc_r+0x190>
 8007004:	9901      	ldr	r1, [sp, #4]
 8007006:	9a04      	ldr	r2, [sp, #16]
 8007008:	1889      	adds	r1, r1, r2
 800700a:	9103      	str	r1, [sp, #12]
 800700c:	42b9      	cmp	r1, r7
 800700e:	db30      	blt.n	8007072 <_realloc_r+0x1f2>
 8007010:	68a2      	ldr	r2, [r4, #8]
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	1c20      	adds	r0, r4, #0
 8007016:	60d3      	str	r3, [r2, #12]
 8007018:	609a      	str	r2, [r3, #8]
 800701a:	9a04      	ldr	r2, [sp, #16]
 800701c:	3008      	adds	r0, #8
 800701e:	3a04      	subs	r2, #4
 8007020:	2a24      	cmp	r2, #36	; 0x24
 8007022:	d822      	bhi.n	800706a <_realloc_r+0x1ea>
 8007024:	2a13      	cmp	r2, #19
 8007026:	d917      	bls.n	8007058 <_realloc_r+0x1d8>
 8007028:	1c33      	adds	r3, r6, #0
 800702a:	cb02      	ldmia	r3!, {r1}
 800702c:	3008      	adds	r0, #8
 800702e:	60a1      	str	r1, [r4, #8]
 8007030:	6871      	ldr	r1, [r6, #4]
 8007032:	1d1e      	adds	r6, r3, #4
 8007034:	60e1      	str	r1, [r4, #12]
 8007036:	2a1b      	cmp	r2, #27
 8007038:	d90e      	bls.n	8007058 <_realloc_r+0x1d8>
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	3008      	adds	r0, #8
 800703e:	6123      	str	r3, [r4, #16]
 8007040:	6871      	ldr	r1, [r6, #4]
 8007042:	1d33      	adds	r3, r6, #4
 8007044:	6161      	str	r1, [r4, #20]
 8007046:	1d1e      	adds	r6, r3, #4
 8007048:	2a24      	cmp	r2, #36	; 0x24
 800704a:	d105      	bne.n	8007058 <_realloc_r+0x1d8>
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	3008      	adds	r0, #8
 8007050:	61a3      	str	r3, [r4, #24]
 8007052:	6873      	ldr	r3, [r6, #4]
 8007054:	3608      	adds	r6, #8
 8007056:	61e3      	str	r3, [r4, #28]
 8007058:	1c32      	adds	r2, r6, #0
 800705a:	ca02      	ldmia	r2!, {r1}
 800705c:	1c03      	adds	r3, r0, #0
 800705e:	c302      	stmia	r3!, {r1}
 8007060:	6871      	ldr	r1, [r6, #4]
 8007062:	6041      	str	r1, [r0, #4]
 8007064:	6852      	ldr	r2, [r2, #4]
 8007066:	605a      	str	r2, [r3, #4]
 8007068:	e054      	b.n	8007114 <_realloc_r+0x294>
 800706a:	1c31      	adds	r1, r6, #0
 800706c:	f7ff fec6 	bl	8006dfc <memmove>
 8007070:	e050      	b.n	8007114 <_realloc_r+0x294>
 8007072:	9805      	ldr	r0, [sp, #20]
 8007074:	9906      	ldr	r1, [sp, #24]
 8007076:	f7ff fc8b 	bl	8006990 <_malloc_r>
 800707a:	9003      	str	r0, [sp, #12]
 800707c:	2800      	cmp	r0, #0
 800707e:	d042      	beq.n	8007106 <_realloc_r+0x286>
 8007080:	686a      	ldr	r2, [r5, #4]
 8007082:	9b03      	ldr	r3, [sp, #12]
 8007084:	2101      	movs	r1, #1
 8007086:	438a      	bics	r2, r1
 8007088:	3b08      	subs	r3, #8
 800708a:	18aa      	adds	r2, r5, r2
 800708c:	4293      	cmp	r3, r2
 800708e:	d106      	bne.n	800709e <_realloc_r+0x21e>
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2203      	movs	r2, #3
 8007094:	9804      	ldr	r0, [sp, #16]
 8007096:	4393      	bics	r3, r2
 8007098:	181b      	adds	r3, r3, r0
 800709a:	9303      	str	r3, [sp, #12]
 800709c:	e039      	b.n	8007112 <_realloc_r+0x292>
 800709e:	9a04      	ldr	r2, [sp, #16]
 80070a0:	3a04      	subs	r2, #4
 80070a2:	2a24      	cmp	r2, #36	; 0x24
 80070a4:	d827      	bhi.n	80070f6 <_realloc_r+0x276>
 80070a6:	1c31      	adds	r1, r6, #0
 80070a8:	9b03      	ldr	r3, [sp, #12]
 80070aa:	2a13      	cmp	r2, #19
 80070ac:	d91a      	bls.n	80070e4 <_realloc_r+0x264>
 80070ae:	1c34      	adds	r4, r6, #0
 80070b0:	cc08      	ldmia	r4!, {r3}
 80070b2:	9803      	ldr	r0, [sp, #12]
 80070b4:	9903      	ldr	r1, [sp, #12]
 80070b6:	c008      	stmia	r0!, {r3}
 80070b8:	6873      	ldr	r3, [r6, #4]
 80070ba:	604b      	str	r3, [r1, #4]
 80070bc:	1d03      	adds	r3, r0, #4
 80070be:	1d21      	adds	r1, r4, #4
 80070c0:	2a1b      	cmp	r2, #27
 80070c2:	d90f      	bls.n	80070e4 <_realloc_r+0x264>
 80070c4:	6864      	ldr	r4, [r4, #4]
 80070c6:	6044      	str	r4, [r0, #4]
 80070c8:	1d0c      	adds	r4, r1, #4
 80070ca:	6849      	ldr	r1, [r1, #4]
 80070cc:	1d18      	adds	r0, r3, #4
 80070ce:	6059      	str	r1, [r3, #4]
 80070d0:	1d03      	adds	r3, r0, #4
 80070d2:	1d21      	adds	r1, r4, #4
 80070d4:	2a24      	cmp	r2, #36	; 0x24
 80070d6:	d105      	bne.n	80070e4 <_realloc_r+0x264>
 80070d8:	6862      	ldr	r2, [r4, #4]
 80070da:	6042      	str	r2, [r0, #4]
 80070dc:	684a      	ldr	r2, [r1, #4]
 80070de:	3108      	adds	r1, #8
 80070e0:	605a      	str	r2, [r3, #4]
 80070e2:	3308      	adds	r3, #8
 80070e4:	1c08      	adds	r0, r1, #0
 80070e6:	c810      	ldmia	r0!, {r4}
 80070e8:	1c1a      	adds	r2, r3, #0
 80070ea:	c210      	stmia	r2!, {r4}
 80070ec:	6849      	ldr	r1, [r1, #4]
 80070ee:	6059      	str	r1, [r3, #4]
 80070f0:	6843      	ldr	r3, [r0, #4]
 80070f2:	6053      	str	r3, [r2, #4]
 80070f4:	e003      	b.n	80070fe <_realloc_r+0x27e>
 80070f6:	9803      	ldr	r0, [sp, #12]
 80070f8:	1c31      	adds	r1, r6, #0
 80070fa:	f7ff fe7f 	bl	8006dfc <memmove>
 80070fe:	9805      	ldr	r0, [sp, #20]
 8007100:	1c31      	adds	r1, r6, #0
 8007102:	f002 fd93 	bl	8009c2c <_free_r>
 8007106:	9805      	ldr	r0, [sp, #20]
 8007108:	f7ff fe9c 	bl	8006e44 <__malloc_unlock>
 800710c:	e026      	b.n	800715c <_realloc_r+0x2dc>
 800710e:	9a04      	ldr	r2, [sp, #16]
 8007110:	9203      	str	r2, [sp, #12]
 8007112:	1c2c      	adds	r4, r5, #0
 8007114:	9b03      	ldr	r3, [sp, #12]
 8007116:	6860      	ldr	r0, [r4, #4]
 8007118:	1bda      	subs	r2, r3, r7
 800711a:	2a0f      	cmp	r2, #15
 800711c:	d910      	bls.n	8007140 <_realloc_r+0x2c0>
 800711e:	2301      	movs	r3, #1
 8007120:	4018      	ands	r0, r3
 8007122:	19e1      	adds	r1, r4, r7
 8007124:	4307      	orrs	r7, r0
 8007126:	1c10      	adds	r0, r2, #0
 8007128:	4318      	orrs	r0, r3
 800712a:	6067      	str	r7, [r4, #4]
 800712c:	188a      	adds	r2, r1, r2
 800712e:	6048      	str	r0, [r1, #4]
 8007130:	6850      	ldr	r0, [r2, #4]
 8007132:	3108      	adds	r1, #8
 8007134:	4303      	orrs	r3, r0
 8007136:	6053      	str	r3, [r2, #4]
 8007138:	9805      	ldr	r0, [sp, #20]
 800713a:	f002 fd77 	bl	8009c2c <_free_r>
 800713e:	e008      	b.n	8007152 <_realloc_r+0x2d2>
 8007140:	9903      	ldr	r1, [sp, #12]
 8007142:	2201      	movs	r2, #1
 8007144:	4010      	ands	r0, r2
 8007146:	4308      	orrs	r0, r1
 8007148:	6060      	str	r0, [r4, #4]
 800714a:	1863      	adds	r3, r4, r1
 800714c:	6859      	ldr	r1, [r3, #4]
 800714e:	430a      	orrs	r2, r1
 8007150:	605a      	str	r2, [r3, #4]
 8007152:	9805      	ldr	r0, [sp, #20]
 8007154:	3408      	adds	r4, #8
 8007156:	f7ff fe75 	bl	8006e44 <__malloc_unlock>
 800715a:	9403      	str	r4, [sp, #12]
 800715c:	9803      	ldr	r0, [sp, #12]
 800715e:	b009      	add	sp, #36	; 0x24
 8007160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007162:	46c0      	nop			; (mov r8, r8)
 8007164:	20000648 	.word	0x20000648

08007168 <_sbrk_r>:
 8007168:	b538      	push	{r3, r4, r5, lr}
 800716a:	4c07      	ldr	r4, [pc, #28]	; (8007188 <_sbrk_r+0x20>)
 800716c:	2300      	movs	r3, #0
 800716e:	1c05      	adds	r5, r0, #0
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	1c08      	adds	r0, r1, #0
 8007174:	f7fb faa2 	bl	80026bc <_sbrk>
 8007178:	1c43      	adds	r3, r0, #1
 800717a:	d103      	bne.n	8007184 <_sbrk_r+0x1c>
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d000      	beq.n	8007184 <_sbrk_r+0x1c>
 8007182:	602b      	str	r3, [r5, #0]
 8007184:	bd38      	pop	{r3, r4, r5, pc}
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	200018b4 	.word	0x200018b4

0800718c <_raise_r>:
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	1c04      	adds	r4, r0, #0
 8007190:	1c0d      	adds	r5, r1, #0
 8007192:	291f      	cmp	r1, #31
 8007194:	d904      	bls.n	80071a0 <_raise_r+0x14>
 8007196:	2316      	movs	r3, #22
 8007198:	6003      	str	r3, [r0, #0]
 800719a:	2001      	movs	r0, #1
 800719c:	4240      	negs	r0, r0
 800719e:	e01f      	b.n	80071e0 <_raise_r+0x54>
 80071a0:	23b7      	movs	r3, #183	; 0xb7
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	58c3      	ldr	r3, [r0, r3]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <_raise_r+0x28>
 80071aa:	008a      	lsls	r2, r1, #2
 80071ac:	189a      	adds	r2, r3, r2
 80071ae:	6813      	ldr	r3, [r2, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d108      	bne.n	80071c6 <_raise_r+0x3a>
 80071b4:	1c20      	adds	r0, r4, #0
 80071b6:	f000 f81f 	bl	80071f8 <_getpid_r>
 80071ba:	1c2a      	adds	r2, r5, #0
 80071bc:	1c01      	adds	r1, r0, #0
 80071be:	1c20      	adds	r0, r4, #0
 80071c0:	f000 f81e 	bl	8007200 <_kill_r>
 80071c4:	e00c      	b.n	80071e0 <_raise_r+0x54>
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d009      	beq.n	80071de <_raise_r+0x52>
 80071ca:	1c59      	adds	r1, r3, #1
 80071cc:	d103      	bne.n	80071d6 <_raise_r+0x4a>
 80071ce:	2316      	movs	r3, #22
 80071d0:	6003      	str	r3, [r0, #0]
 80071d2:	2001      	movs	r0, #1
 80071d4:	e004      	b.n	80071e0 <_raise_r+0x54>
 80071d6:	2100      	movs	r1, #0
 80071d8:	6011      	str	r1, [r2, #0]
 80071da:	1c28      	adds	r0, r5, #0
 80071dc:	4798      	blx	r3
 80071de:	2000      	movs	r0, #0
 80071e0:	bd38      	pop	{r3, r4, r5, pc}
	...

080071e4 <raise>:
 80071e4:	b508      	push	{r3, lr}
 80071e6:	4b03      	ldr	r3, [pc, #12]	; (80071f4 <raise+0x10>)
 80071e8:	1c01      	adds	r1, r0, #0
 80071ea:	6818      	ldr	r0, [r3, #0]
 80071ec:	f7ff ffce 	bl	800718c <_raise_r>
 80071f0:	bd08      	pop	{r3, pc}
 80071f2:	46c0      	nop			; (mov r8, r8)
 80071f4:	20000e88 	.word	0x20000e88

080071f8 <_getpid_r>:
 80071f8:	b508      	push	{r3, lr}
 80071fa:	f7fb fa9c 	bl	8002736 <_getpid>
 80071fe:	bd08      	pop	{r3, pc}

08007200 <_kill_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	4c07      	ldr	r4, [pc, #28]	; (8007220 <_kill_r+0x20>)
 8007204:	2300      	movs	r3, #0
 8007206:	1c05      	adds	r5, r0, #0
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	1c08      	adds	r0, r1, #0
 800720c:	1c11      	adds	r1, r2, #0
 800720e:	f7fb fa91 	bl	8002734 <_kill>
 8007212:	1c43      	adds	r3, r0, #1
 8007214:	d103      	bne.n	800721e <_kill_r+0x1e>
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d000      	beq.n	800721e <_kill_r+0x1e>
 800721c:	602b      	str	r3, [r5, #0]
 800721e:	bd38      	pop	{r3, r4, r5, pc}
 8007220:	200018b4 	.word	0x200018b4

08007224 <snprintf>:
 8007224:	b40c      	push	{r2, r3}
 8007226:	b530      	push	{r4, r5, lr}
 8007228:	4b17      	ldr	r3, [pc, #92]	; (8007288 <snprintf+0x64>)
 800722a:	b09d      	sub	sp, #116	; 0x74
 800722c:	1c0d      	adds	r5, r1, #0
 800722e:	681c      	ldr	r4, [r3, #0]
 8007230:	2900      	cmp	r1, #0
 8007232:	da04      	bge.n	800723e <snprintf+0x1a>
 8007234:	238b      	movs	r3, #139	; 0x8b
 8007236:	2001      	movs	r0, #1
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	4240      	negs	r0, r0
 800723c:	e01e      	b.n	800727c <snprintf+0x58>
 800723e:	2900      	cmp	r1, #0
 8007240:	d101      	bne.n	8007246 <snprintf+0x22>
 8007242:	2300      	movs	r3, #0
 8007244:	e000      	b.n	8007248 <snprintf+0x24>
 8007246:	1e4b      	subs	r3, r1, #1
 8007248:	a901      	add	r1, sp, #4
 800724a:	2282      	movs	r2, #130	; 0x82
 800724c:	608b      	str	r3, [r1, #8]
 800724e:	614b      	str	r3, [r1, #20]
 8007250:	2301      	movs	r3, #1
 8007252:	0092      	lsls	r2, r2, #2
 8007254:	425b      	negs	r3, r3
 8007256:	818a      	strh	r2, [r1, #12]
 8007258:	9001      	str	r0, [sp, #4]
 800725a:	6108      	str	r0, [r1, #16]
 800725c:	81cb      	strh	r3, [r1, #14]
 800725e:	1c20      	adds	r0, r4, #0
 8007260:	ab21      	add	r3, sp, #132	; 0x84
 8007262:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007264:	931b      	str	r3, [sp, #108]	; 0x6c
 8007266:	f000 f983 	bl	8007570 <_svfprintf_r>
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	da01      	bge.n	8007272 <snprintf+0x4e>
 800726e:	238b      	movs	r3, #139	; 0x8b
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	2d00      	cmp	r5, #0
 8007274:	d002      	beq.n	800727c <snprintf+0x58>
 8007276:	9b01      	ldr	r3, [sp, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	701a      	strb	r2, [r3, #0]
 800727c:	b01d      	add	sp, #116	; 0x74
 800727e:	bc30      	pop	{r4, r5}
 8007280:	bc08      	pop	{r3}
 8007282:	b002      	add	sp, #8
 8007284:	4718      	bx	r3
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	20000e88 	.word	0x20000e88

0800728c <strchr>:
 800728c:	b500      	push	{lr}
 800728e:	b2c9      	uxtb	r1, r1
 8007290:	e000      	b.n	8007294 <strchr+0x8>
 8007292:	3001      	adds	r0, #1
 8007294:	7803      	ldrb	r3, [r0, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <strchr+0x14>
 800729a:	428b      	cmp	r3, r1
 800729c:	d1f9      	bne.n	8007292 <strchr+0x6>
 800729e:	e002      	b.n	80072a6 <strchr+0x1a>
 80072a0:	2900      	cmp	r1, #0
 80072a2:	d000      	beq.n	80072a6 <strchr+0x1a>
 80072a4:	2000      	movs	r0, #0
 80072a6:	bd00      	pop	{pc}

080072a8 <strcmp>:
 80072a8:	7802      	ldrb	r2, [r0, #0]
 80072aa:	780b      	ldrb	r3, [r1, #0]
 80072ac:	3001      	adds	r0, #1
 80072ae:	3101      	adds	r1, #1
 80072b0:	2a00      	cmp	r2, #0
 80072b2:	d001      	beq.n	80072b8 <strcmp+0x10>
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d0f7      	beq.n	80072a8 <strcmp>
 80072b8:	1ad0      	subs	r0, r2, r3
 80072ba:	4770      	bx	lr

080072bc <strlen>:
 80072bc:	2200      	movs	r2, #0
 80072be:	5c83      	ldrb	r3, [r0, r2]
 80072c0:	3201      	adds	r2, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1fb      	bne.n	80072be <strlen+0x2>
 80072c6:	1c10      	adds	r0, r2, #0
 80072c8:	3801      	subs	r0, #1
 80072ca:	4770      	bx	lr

080072cc <strncmp>:
 80072cc:	b510      	push	{r4, lr}
 80072ce:	2a00      	cmp	r2, #0
 80072d0:	d108      	bne.n	80072e4 <strncmp+0x18>
 80072d2:	2000      	movs	r0, #0
 80072d4:	e00d      	b.n	80072f2 <strncmp+0x26>
 80072d6:	3a01      	subs	r2, #1
 80072d8:	2a00      	cmp	r2, #0
 80072da:	d007      	beq.n	80072ec <strncmp+0x20>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d005      	beq.n	80072ec <strncmp+0x20>
 80072e0:	3001      	adds	r0, #1
 80072e2:	3101      	adds	r1, #1
 80072e4:	7804      	ldrb	r4, [r0, #0]
 80072e6:	780b      	ldrb	r3, [r1, #0]
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	d0f4      	beq.n	80072d6 <strncmp+0xa>
 80072ec:	7800      	ldrb	r0, [r0, #0]
 80072ee:	780b      	ldrb	r3, [r1, #0]
 80072f0:	1ac0      	subs	r0, r0, r3
 80072f2:	bd10      	pop	{r4, pc}

080072f4 <strstr>:
 80072f4:	b510      	push	{r4, lr}
 80072f6:	7803      	ldrb	r3, [r0, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10d      	bne.n	8007318 <strstr+0x24>
 80072fc:	780b      	ldrb	r3, [r1, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10d      	bne.n	800731e <strstr+0x2a>
 8007302:	e00d      	b.n	8007320 <strstr+0x2c>
 8007304:	2300      	movs	r3, #0
 8007306:	5cca      	ldrb	r2, [r1, r3]
 8007308:	2a00      	cmp	r2, #0
 800730a:	d009      	beq.n	8007320 <strstr+0x2c>
 800730c:	5cc4      	ldrb	r4, [r0, r3]
 800730e:	4294      	cmp	r4, r2
 8007310:	d101      	bne.n	8007316 <strstr+0x22>
 8007312:	3301      	adds	r3, #1
 8007314:	e7f7      	b.n	8007306 <strstr+0x12>
 8007316:	3001      	adds	r0, #1
 8007318:	7803      	ldrb	r3, [r0, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1f2      	bne.n	8007304 <strstr+0x10>
 800731e:	2000      	movs	r0, #0
 8007320:	bd10      	pop	{r4, pc}
	...

08007324 <_strtol_r>:
 8007324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007326:	1c1e      	adds	r6, r3, #0
 8007328:	4b44      	ldr	r3, [pc, #272]	; (800743c <_strtol_r+0x118>)
 800732a:	b087      	sub	sp, #28
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	9005      	str	r0, [sp, #20]
 8007330:	9101      	str	r1, [sp, #4]
 8007332:	9203      	str	r2, [sp, #12]
 8007334:	9302      	str	r3, [sp, #8]
 8007336:	1c0c      	adds	r4, r1, #0
 8007338:	7825      	ldrb	r5, [r4, #0]
 800733a:	9902      	ldr	r1, [sp, #8]
 800733c:	3401      	adds	r4, #1
 800733e:	186b      	adds	r3, r5, r1
 8007340:	785b      	ldrb	r3, [r3, #1]
 8007342:	071a      	lsls	r2, r3, #28
 8007344:	d4f8      	bmi.n	8007338 <_strtol_r+0x14>
 8007346:	2d2d      	cmp	r5, #45	; 0x2d
 8007348:	d104      	bne.n	8007354 <_strtol_r+0x30>
 800734a:	2301      	movs	r3, #1
 800734c:	7825      	ldrb	r5, [r4, #0]
 800734e:	3401      	adds	r4, #1
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	e008      	b.n	8007366 <_strtol_r+0x42>
 8007354:	2d2b      	cmp	r5, #43	; 0x2b
 8007356:	d002      	beq.n	800735e <_strtol_r+0x3a>
 8007358:	2700      	movs	r7, #0
 800735a:	9700      	str	r7, [sp, #0]
 800735c:	e003      	b.n	8007366 <_strtol_r+0x42>
 800735e:	2100      	movs	r1, #0
 8007360:	7825      	ldrb	r5, [r4, #0]
 8007362:	3401      	adds	r4, #1
 8007364:	9100      	str	r1, [sp, #0]
 8007366:	4273      	negs	r3, r6
 8007368:	4173      	adcs	r3, r6
 800736a:	2e10      	cmp	r6, #16
 800736c:	d001      	beq.n	8007372 <_strtol_r+0x4e>
 800736e:	2b00      	cmp	r3, #0
 8007370:	d011      	beq.n	8007396 <_strtol_r+0x72>
 8007372:	2d30      	cmp	r5, #48	; 0x30
 8007374:	d108      	bne.n	8007388 <_strtol_r+0x64>
 8007376:	7822      	ldrb	r2, [r4, #0]
 8007378:	2a58      	cmp	r2, #88	; 0x58
 800737a:	d001      	beq.n	8007380 <_strtol_r+0x5c>
 800737c:	2a78      	cmp	r2, #120	; 0x78
 800737e:	d103      	bne.n	8007388 <_strtol_r+0x64>
 8007380:	7865      	ldrb	r5, [r4, #1]
 8007382:	2610      	movs	r6, #16
 8007384:	3402      	adds	r4, #2
 8007386:	e006      	b.n	8007396 <_strtol_r+0x72>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d004      	beq.n	8007396 <_strtol_r+0x72>
 800738c:	2d30      	cmp	r5, #48	; 0x30
 800738e:	d001      	beq.n	8007394 <_strtol_r+0x70>
 8007390:	260a      	movs	r6, #10
 8007392:	e000      	b.n	8007396 <_strtol_r+0x72>
 8007394:	2608      	movs	r6, #8
 8007396:	9a00      	ldr	r2, [sp, #0]
 8007398:	2a00      	cmp	r2, #0
 800739a:	d101      	bne.n	80073a0 <_strtol_r+0x7c>
 800739c:	4f28      	ldr	r7, [pc, #160]	; (8007440 <_strtol_r+0x11c>)
 800739e:	e001      	b.n	80073a4 <_strtol_r+0x80>
 80073a0:	2780      	movs	r7, #128	; 0x80
 80073a2:	063f      	lsls	r7, r7, #24
 80073a4:	1c38      	adds	r0, r7, #0
 80073a6:	1c31      	adds	r1, r6, #0
 80073a8:	f7f8 fee8 	bl	800017c <__aeabi_uidivmod>
 80073ac:	1c38      	adds	r0, r7, #0
 80073ae:	9104      	str	r1, [sp, #16]
 80073b0:	1c31      	adds	r1, r6, #0
 80073b2:	f7f8 fe9f 	bl	80000f4 <__aeabi_uidiv>
 80073b6:	2300      	movs	r3, #0
 80073b8:	1c01      	adds	r1, r0, #0
 80073ba:	2000      	movs	r0, #0
 80073bc:	9f02      	ldr	r7, [sp, #8]
 80073be:	19ea      	adds	r2, r5, r7
 80073c0:	7852      	ldrb	r2, [r2, #1]
 80073c2:	0757      	lsls	r7, r2, #29
 80073c4:	d501      	bpl.n	80073ca <_strtol_r+0xa6>
 80073c6:	3d30      	subs	r5, #48	; 0x30
 80073c8:	e007      	b.n	80073da <_strtol_r+0xb6>
 80073ca:	0797      	lsls	r7, r2, #30
 80073cc:	d019      	beq.n	8007402 <_strtol_r+0xde>
 80073ce:	07d7      	lsls	r7, r2, #31
 80073d0:	d401      	bmi.n	80073d6 <_strtol_r+0xb2>
 80073d2:	2257      	movs	r2, #87	; 0x57
 80073d4:	e000      	b.n	80073d8 <_strtol_r+0xb4>
 80073d6:	2237      	movs	r2, #55	; 0x37
 80073d8:	1aad      	subs	r5, r5, r2
 80073da:	42b5      	cmp	r5, r6
 80073dc:	da11      	bge.n	8007402 <_strtol_r+0xde>
 80073de:	4288      	cmp	r0, r1
 80073e0:	d80a      	bhi.n	80073f8 <_strtol_r+0xd4>
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	db08      	blt.n	80073f8 <_strtol_r+0xd4>
 80073e6:	9a04      	ldr	r2, [sp, #16]
 80073e8:	4295      	cmp	r5, r2
 80073ea:	dd01      	ble.n	80073f0 <_strtol_r+0xcc>
 80073ec:	4288      	cmp	r0, r1
 80073ee:	d003      	beq.n	80073f8 <_strtol_r+0xd4>
 80073f0:	4370      	muls	r0, r6
 80073f2:	2301      	movs	r3, #1
 80073f4:	1828      	adds	r0, r5, r0
 80073f6:	e001      	b.n	80073fc <_strtol_r+0xd8>
 80073f8:	2301      	movs	r3, #1
 80073fa:	425b      	negs	r3, r3
 80073fc:	7825      	ldrb	r5, [r4, #0]
 80073fe:	3401      	adds	r4, #1
 8007400:	e7dc      	b.n	80073bc <_strtol_r+0x98>
 8007402:	1c5f      	adds	r7, r3, #1
 8007404:	d10a      	bne.n	800741c <_strtol_r+0xf8>
 8007406:	9900      	ldr	r1, [sp, #0]
 8007408:	2900      	cmp	r1, #0
 800740a:	d101      	bne.n	8007410 <_strtol_r+0xec>
 800740c:	480c      	ldr	r0, [pc, #48]	; (8007440 <_strtol_r+0x11c>)
 800740e:	e001      	b.n	8007414 <_strtol_r+0xf0>
 8007410:	2080      	movs	r0, #128	; 0x80
 8007412:	0600      	lsls	r0, r0, #24
 8007414:	9f05      	ldr	r7, [sp, #20]
 8007416:	2222      	movs	r2, #34	; 0x22
 8007418:	603a      	str	r2, [r7, #0]
 800741a:	e003      	b.n	8007424 <_strtol_r+0x100>
 800741c:	9900      	ldr	r1, [sp, #0]
 800741e:	2900      	cmp	r1, #0
 8007420:	d000      	beq.n	8007424 <_strtol_r+0x100>
 8007422:	4240      	negs	r0, r0
 8007424:	9a03      	ldr	r2, [sp, #12]
 8007426:	2a00      	cmp	r2, #0
 8007428:	d006      	beq.n	8007438 <_strtol_r+0x114>
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <_strtol_r+0x10e>
 800742e:	3c01      	subs	r4, #1
 8007430:	9401      	str	r4, [sp, #4]
 8007432:	9b01      	ldr	r3, [sp, #4]
 8007434:	9f03      	ldr	r7, [sp, #12]
 8007436:	603b      	str	r3, [r7, #0]
 8007438:	b007      	add	sp, #28
 800743a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800743c:	20000a58 	.word	0x20000a58
 8007440:	7fffffff 	.word	0x7fffffff

08007444 <strtol>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	1c13      	adds	r3, r2, #0
 8007448:	4a04      	ldr	r2, [pc, #16]	; (800745c <strtol+0x18>)
 800744a:	1c05      	adds	r5, r0, #0
 800744c:	1c0c      	adds	r4, r1, #0
 800744e:	6810      	ldr	r0, [r2, #0]
 8007450:	1c29      	adds	r1, r5, #0
 8007452:	1c22      	adds	r2, r4, #0
 8007454:	f7ff ff66 	bl	8007324 <_strtol_r>
 8007458:	bd38      	pop	{r3, r4, r5, pc}
 800745a:	46c0      	nop			; (mov r8, r8)
 800745c:	20000e88 	.word	0x20000e88

08007460 <__sprint_r>:
 8007460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007462:	b087      	sub	sp, #28
 8007464:	9002      	str	r0, [sp, #8]
 8007466:	6893      	ldr	r3, [r2, #8]
 8007468:	6810      	ldr	r0, [r2, #0]
 800746a:	1c0c      	adds	r4, r1, #0
 800746c:	1c15      	adds	r5, r2, #0
 800746e:	9004      	str	r0, [sp, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <__sprint_r+0x1c>
 8007474:	2100      	movs	r1, #0
 8007476:	9105      	str	r1, [sp, #20]
 8007478:	2600      	movs	r6, #0
 800747a:	e008      	b.n	800748e <__sprint_r+0x2e>
 800747c:	6053      	str	r3, [r2, #4]
 800747e:	e066      	b.n	800754e <__sprint_r+0xee>
 8007480:	9a04      	ldr	r2, [sp, #16]
 8007482:	9b04      	ldr	r3, [sp, #16]
 8007484:	6812      	ldr	r2, [r2, #0]
 8007486:	685e      	ldr	r6, [r3, #4]
 8007488:	3308      	adds	r3, #8
 800748a:	9205      	str	r2, [sp, #20]
 800748c:	9304      	str	r3, [sp, #16]
 800748e:	2e00      	cmp	r6, #0
 8007490:	d0f6      	beq.n	8007480 <__sprint_r+0x20>
 8007492:	68a7      	ldr	r7, [r4, #8]
 8007494:	42be      	cmp	r6, r7
 8007496:	d348      	bcc.n	800752a <__sprint_r+0xca>
 8007498:	2290      	movs	r2, #144	; 0x90
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	00d2      	lsls	r2, r2, #3
 800749e:	4213      	tst	r3, r2
 80074a0:	d041      	beq.n	8007526 <__sprint_r+0xc6>
 80074a2:	6921      	ldr	r1, [r4, #16]
 80074a4:	6822      	ldr	r2, [r4, #0]
 80074a6:	1a52      	subs	r2, r2, r1
 80074a8:	9203      	str	r2, [sp, #12]
 80074aa:	6962      	ldr	r2, [r4, #20]
 80074ac:	0050      	lsls	r0, r2, #1
 80074ae:	1882      	adds	r2, r0, r2
 80074b0:	0fd0      	lsrs	r0, r2, #31
 80074b2:	1882      	adds	r2, r0, r2
 80074b4:	1052      	asrs	r2, r2, #1
 80074b6:	9201      	str	r2, [sp, #4]
 80074b8:	9a03      	ldr	r2, [sp, #12]
 80074ba:	9801      	ldr	r0, [sp, #4]
 80074bc:	3201      	adds	r2, #1
 80074be:	1992      	adds	r2, r2, r6
 80074c0:	4290      	cmp	r0, r2
 80074c2:	d200      	bcs.n	80074c6 <__sprint_r+0x66>
 80074c4:	9201      	str	r2, [sp, #4]
 80074c6:	055a      	lsls	r2, r3, #21
 80074c8:	d515      	bpl.n	80074f6 <__sprint_r+0x96>
 80074ca:	9802      	ldr	r0, [sp, #8]
 80074cc:	9901      	ldr	r1, [sp, #4]
 80074ce:	f7ff fa5f 	bl	8006990 <_malloc_r>
 80074d2:	1c07      	adds	r7, r0, #0
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d103      	bne.n	80074e0 <__sprint_r+0x80>
 80074d8:	9802      	ldr	r0, [sp, #8]
 80074da:	230c      	movs	r3, #12
 80074dc:	6003      	str	r3, [r0, #0]
 80074de:	e038      	b.n	8007552 <__sprint_r+0xf2>
 80074e0:	9a03      	ldr	r2, [sp, #12]
 80074e2:	6921      	ldr	r1, [r4, #16]
 80074e4:	f7ff fc7f 	bl	8006de6 <memcpy>
 80074e8:	89a2      	ldrh	r2, [r4, #12]
 80074ea:	4b1f      	ldr	r3, [pc, #124]	; (8007568 <__sprint_r+0x108>)
 80074ec:	401a      	ands	r2, r3
 80074ee:	2380      	movs	r3, #128	; 0x80
 80074f0:	4313      	orrs	r3, r2
 80074f2:	81a3      	strh	r3, [r4, #12]
 80074f4:	e00e      	b.n	8007514 <__sprint_r+0xb4>
 80074f6:	9802      	ldr	r0, [sp, #8]
 80074f8:	9a01      	ldr	r2, [sp, #4]
 80074fa:	f7ff fcc1 	bl	8006e80 <_realloc_r>
 80074fe:	1c07      	adds	r7, r0, #0
 8007500:	2800      	cmp	r0, #0
 8007502:	d107      	bne.n	8007514 <__sprint_r+0xb4>
 8007504:	6921      	ldr	r1, [r4, #16]
 8007506:	9802      	ldr	r0, [sp, #8]
 8007508:	f002 fb90 	bl	8009c2c <_free_r>
 800750c:	9902      	ldr	r1, [sp, #8]
 800750e:	230c      	movs	r3, #12
 8007510:	600b      	str	r3, [r1, #0]
 8007512:	e01e      	b.n	8007552 <__sprint_r+0xf2>
 8007514:	9a03      	ldr	r2, [sp, #12]
 8007516:	9b01      	ldr	r3, [sp, #4]
 8007518:	6127      	str	r7, [r4, #16]
 800751a:	6163      	str	r3, [r4, #20]
 800751c:	18bf      	adds	r7, r7, r2
 800751e:	1a9b      	subs	r3, r3, r2
 8007520:	6027      	str	r7, [r4, #0]
 8007522:	60a3      	str	r3, [r4, #8]
 8007524:	1c37      	adds	r7, r6, #0
 8007526:	42be      	cmp	r6, r7
 8007528:	d200      	bcs.n	800752c <__sprint_r+0xcc>
 800752a:	1c37      	adds	r7, r6, #0
 800752c:	1c3a      	adds	r2, r7, #0
 800752e:	6820      	ldr	r0, [r4, #0]
 8007530:	9905      	ldr	r1, [sp, #20]
 8007532:	f7ff fc63 	bl	8006dfc <memmove>
 8007536:	68a3      	ldr	r3, [r4, #8]
 8007538:	1bdb      	subs	r3, r3, r7
 800753a:	60a3      	str	r3, [r4, #8]
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	19df      	adds	r7, r3, r7
 8007540:	68ab      	ldr	r3, [r5, #8]
 8007542:	6027      	str	r7, [r4, #0]
 8007544:	1b9e      	subs	r6, r3, r6
 8007546:	60ae      	str	r6, [r5, #8]
 8007548:	2e00      	cmp	r6, #0
 800754a:	d199      	bne.n	8007480 <__sprint_r+0x20>
 800754c:	606e      	str	r6, [r5, #4]
 800754e:	2000      	movs	r0, #0
 8007550:	e008      	b.n	8007564 <__sprint_r+0x104>
 8007552:	89a2      	ldrh	r2, [r4, #12]
 8007554:	2340      	movs	r3, #64	; 0x40
 8007556:	4313      	orrs	r3, r2
 8007558:	81a3      	strh	r3, [r4, #12]
 800755a:	2001      	movs	r0, #1
 800755c:	2300      	movs	r3, #0
 800755e:	60ab      	str	r3, [r5, #8]
 8007560:	606b      	str	r3, [r5, #4]
 8007562:	4240      	negs	r0, r0
 8007564:	b007      	add	sp, #28
 8007566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007568:	fffffb7f 	.word	0xfffffb7f
 800756c:	00000000 	.word	0x00000000

08007570 <_svfprintf_r>:
 8007570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007572:	b0c3      	sub	sp, #268	; 0x10c
 8007574:	1c0f      	adds	r7, r1, #0
 8007576:	1c1d      	adds	r5, r3, #0
 8007578:	900b      	str	r0, [sp, #44]	; 0x2c
 800757a:	1c16      	adds	r6, r2, #0
 800757c:	f002 fd9a 	bl	800a0b4 <_localeconv_r>
 8007580:	6800      	ldr	r0, [r0, #0]
 8007582:	9015      	str	r0, [sp, #84]	; 0x54
 8007584:	89bb      	ldrh	r3, [r7, #12]
 8007586:	0618      	lsls	r0, r3, #24
 8007588:	d514      	bpl.n	80075b4 <_svfprintf_r+0x44>
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d111      	bne.n	80075b4 <_svfprintf_r+0x44>
 8007590:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007592:	2140      	movs	r1, #64	; 0x40
 8007594:	f7ff f9fc 	bl	8006990 <_malloc_r>
 8007598:	6038      	str	r0, [r7, #0]
 800759a:	6138      	str	r0, [r7, #16]
 800759c:	2800      	cmp	r0, #0
 800759e:	d107      	bne.n	80075b0 <_svfprintf_r+0x40>
 80075a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075a2:	2201      	movs	r2, #1
 80075a4:	230c      	movs	r3, #12
 80075a6:	4252      	negs	r2, r2
 80075a8:	600b      	str	r3, [r1, #0]
 80075aa:	9211      	str	r2, [sp, #68]	; 0x44
 80075ac:	f000 ff10 	bl	80083d0 <_svfprintf_r+0xe60>
 80075b0:	2340      	movs	r3, #64	; 0x40
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	2200      	movs	r2, #0
 80075b6:	ab35      	add	r3, sp, #212	; 0xd4
 80075b8:	ac1b      	add	r4, sp, #108	; 0x6c
 80075ba:	9435      	str	r4, [sp, #212]	; 0xd4
 80075bc:	609a      	str	r2, [r3, #8]
 80075be:	605a      	str	r2, [r3, #4]
 80075c0:	9212      	str	r2, [sp, #72]	; 0x48
 80075c2:	9214      	str	r2, [sp, #80]	; 0x50
 80075c4:	960e      	str	r6, [sp, #56]	; 0x38
 80075c6:	920d      	str	r2, [sp, #52]	; 0x34
 80075c8:	9211      	str	r2, [sp, #68]	; 0x44
 80075ca:	9216      	str	r2, [sp, #88]	; 0x58
 80075cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80075ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80075d0:	e000      	b.n	80075d4 <_svfprintf_r+0x64>
 80075d2:	3601      	adds	r6, #1
 80075d4:	7833      	ldrb	r3, [r6, #0]
 80075d6:	2b25      	cmp	r3, #37	; 0x25
 80075d8:	d001      	beq.n	80075de <_svfprintf_r+0x6e>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f9      	bne.n	80075d2 <_svfprintf_r+0x62>
 80075de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075e0:	1af3      	subs	r3, r6, r3
 80075e2:	9308      	str	r3, [sp, #32]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01b      	beq.n	8007620 <_svfprintf_r+0xb0>
 80075e8:	6063      	str	r3, [r4, #4]
 80075ea:	aa35      	add	r2, sp, #212	; 0xd4
 80075ec:	6893      	ldr	r3, [r2, #8]
 80075ee:	9908      	ldr	r1, [sp, #32]
 80075f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80075f2:	18cb      	adds	r3, r1, r3
 80075f4:	6093      	str	r3, [r2, #8]
 80075f6:	6853      	ldr	r3, [r2, #4]
 80075f8:	6020      	str	r0, [r4, #0]
 80075fa:	3301      	adds	r3, #1
 80075fc:	6053      	str	r3, [r2, #4]
 80075fe:	2b07      	cmp	r3, #7
 8007600:	dc01      	bgt.n	8007606 <_svfprintf_r+0x96>
 8007602:	3408      	adds	r4, #8
 8007604:	e008      	b.n	8007618 <_svfprintf_r+0xa8>
 8007606:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007608:	1c39      	adds	r1, r7, #0
 800760a:	f7ff ff29 	bl	8007460 <__sprint_r>
 800760e:	2800      	cmp	r0, #0
 8007610:	d001      	beq.n	8007616 <_svfprintf_r+0xa6>
 8007612:	f000 fed7 	bl	80083c4 <_svfprintf_r+0xe54>
 8007616:	ac1b      	add	r4, sp, #108	; 0x6c
 8007618:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800761a:	9b08      	ldr	r3, [sp, #32]
 800761c:	18d2      	adds	r2, r2, r3
 800761e:	9211      	str	r2, [sp, #68]	; 0x44
 8007620:	7833      	ldrb	r3, [r6, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <_svfprintf_r+0xba>
 8007626:	f000 fec5 	bl	80083b4 <_svfprintf_r+0xe44>
 800762a:	466b      	mov	r3, sp
 800762c:	3601      	adds	r6, #1
 800762e:	3308      	adds	r3, #8
 8007630:	2001      	movs	r0, #1
 8007632:	2200      	movs	r2, #0
 8007634:	960e      	str	r6, [sp, #56]	; 0x38
 8007636:	33ff      	adds	r3, #255	; 0xff
 8007638:	4240      	negs	r0, r0
 800763a:	701a      	strb	r2, [r3, #0]
 800763c:	9213      	str	r2, [sp, #76]	; 0x4c
 800763e:	9008      	str	r0, [sp, #32]
 8007640:	2600      	movs	r6, #0
 8007642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007644:	1c02      	adds	r2, r0, #0
 8007646:	e001      	b.n	800764c <_svfprintf_r+0xdc>
 8007648:	1c29      	adds	r1, r5, #0
 800764a:	1c0d      	adds	r5, r1, #0
 800764c:	7819      	ldrb	r1, [r3, #0]
 800764e:	3301      	adds	r3, #1
 8007650:	910c      	str	r1, [sp, #48]	; 0x30
 8007652:	e002      	b.n	800765a <_svfprintf_r+0xea>
 8007654:	4662      	mov	r2, ip
 8007656:	910c      	str	r1, [sp, #48]	; 0x30
 8007658:	9013      	str	r0, [sp, #76]	; 0x4c
 800765a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800765c:	3820      	subs	r0, #32
 800765e:	2858      	cmp	r0, #88	; 0x58
 8007660:	d900      	bls.n	8007664 <_svfprintf_r+0xf4>
 8007662:	e317      	b.n	8007c94 <_svfprintf_r+0x724>
 8007664:	49b6      	ldr	r1, [pc, #728]	; (8007940 <_svfprintf_r+0x3d0>)
 8007666:	0080      	lsls	r0, r0, #2
 8007668:	5841      	ldr	r1, [r0, r1]
 800766a:	468f      	mov	pc, r1
 800766c:	9208      	str	r2, [sp, #32]
 800766e:	4ab5      	ldr	r2, [pc, #724]	; (8007944 <_svfprintf_r+0x3d4>)
 8007670:	930e      	str	r3, [sp, #56]	; 0x38
 8007672:	9216      	str	r2, [sp, #88]	; 0x58
 8007674:	e285      	b.n	8007b82 <_svfprintf_r+0x612>
 8007676:	1c29      	adds	r1, r5, #0
 8007678:	e010      	b.n	800769c <_svfprintf_r+0x12c>
 800767a:	4669      	mov	r1, sp
 800767c:	3108      	adds	r1, #8
 800767e:	31ff      	adds	r1, #255	; 0xff
 8007680:	7808      	ldrb	r0, [r1, #0]
 8007682:	2800      	cmp	r0, #0
 8007684:	d1e0      	bne.n	8007648 <_svfprintf_r+0xd8>
 8007686:	2020      	movs	r0, #32
 8007688:	e00f      	b.n	80076aa <_svfprintf_r+0x13a>
 800768a:	2101      	movs	r1, #1
 800768c:	e044      	b.n	8007718 <_svfprintf_r+0x1a8>
 800768e:	1d29      	adds	r1, r5, #4
 8007690:	682d      	ldr	r5, [r5, #0]
 8007692:	9513      	str	r5, [sp, #76]	; 0x4c
 8007694:	2d00      	cmp	r5, #0
 8007696:	dad8      	bge.n	800764a <_svfprintf_r+0xda>
 8007698:	4268      	negs	r0, r5
 800769a:	9013      	str	r0, [sp, #76]	; 0x4c
 800769c:	2004      	movs	r0, #4
 800769e:	4306      	orrs	r6, r0
 80076a0:	e7d3      	b.n	800764a <_svfprintf_r+0xda>
 80076a2:	4669      	mov	r1, sp
 80076a4:	3108      	adds	r1, #8
 80076a6:	202b      	movs	r0, #43	; 0x2b
 80076a8:	31ff      	adds	r1, #255	; 0xff
 80076aa:	7008      	strb	r0, [r1, #0]
 80076ac:	e7cc      	b.n	8007648 <_svfprintf_r+0xd8>
 80076ae:	7819      	ldrb	r1, [r3, #0]
 80076b0:	3301      	adds	r3, #1
 80076b2:	910c      	str	r1, [sp, #48]	; 0x30
 80076b4:	292a      	cmp	r1, #42	; 0x2a
 80076b6:	d001      	beq.n	80076bc <_svfprintf_r+0x14c>
 80076b8:	2200      	movs	r2, #0
 80076ba:	e00c      	b.n	80076d6 <_svfprintf_r+0x166>
 80076bc:	682a      	ldr	r2, [r5, #0]
 80076be:	1d29      	adds	r1, r5, #4
 80076c0:	2a00      	cmp	r2, #0
 80076c2:	dac2      	bge.n	800764a <_svfprintf_r+0xda>
 80076c4:	2201      	movs	r2, #1
 80076c6:	4252      	negs	r2, r2
 80076c8:	e7bf      	b.n	800764a <_svfprintf_r+0xda>
 80076ca:	0091      	lsls	r1, r2, #2
 80076cc:	188a      	adds	r2, r1, r2
 80076ce:	0052      	lsls	r2, r2, #1
 80076d0:	7819      	ldrb	r1, [r3, #0]
 80076d2:	1812      	adds	r2, r2, r0
 80076d4:	3301      	adds	r3, #1
 80076d6:	1c08      	adds	r0, r1, #0
 80076d8:	3830      	subs	r0, #48	; 0x30
 80076da:	2809      	cmp	r0, #9
 80076dc:	d9f5      	bls.n	80076ca <_svfprintf_r+0x15a>
 80076de:	910c      	str	r1, [sp, #48]	; 0x30
 80076e0:	2a00      	cmp	r2, #0
 80076e2:	daba      	bge.n	800765a <_svfprintf_r+0xea>
 80076e4:	2201      	movs	r2, #1
 80076e6:	4252      	negs	r2, r2
 80076e8:	e7b7      	b.n	800765a <_svfprintf_r+0xea>
 80076ea:	2180      	movs	r1, #128	; 0x80
 80076ec:	e014      	b.n	8007718 <_svfprintf_r+0x1a8>
 80076ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80076f0:	2000      	movs	r0, #0
 80076f2:	4694      	mov	ip, r2
 80076f4:	0082      	lsls	r2, r0, #2
 80076f6:	1812      	adds	r2, r2, r0
 80076f8:	1c08      	adds	r0, r1, #0
 80076fa:	7819      	ldrb	r1, [r3, #0]
 80076fc:	0052      	lsls	r2, r2, #1
 80076fe:	3830      	subs	r0, #48	; 0x30
 8007700:	1880      	adds	r0, r0, r2
 8007702:	1c0a      	adds	r2, r1, #0
 8007704:	3a30      	subs	r2, #48	; 0x30
 8007706:	3301      	adds	r3, #1
 8007708:	2a09      	cmp	r2, #9
 800770a:	d9f3      	bls.n	80076f4 <_svfprintf_r+0x184>
 800770c:	e7a2      	b.n	8007654 <_svfprintf_r+0xe4>
 800770e:	2108      	movs	r1, #8
 8007710:	e002      	b.n	8007718 <_svfprintf_r+0x1a8>
 8007712:	2140      	movs	r1, #64	; 0x40
 8007714:	e000      	b.n	8007718 <_svfprintf_r+0x1a8>
 8007716:	2110      	movs	r1, #16
 8007718:	430e      	orrs	r6, r1
 800771a:	e795      	b.n	8007648 <_svfprintf_r+0xd8>
 800771c:	682a      	ldr	r2, [r5, #0]
 800771e:	930e      	str	r3, [sp, #56]	; 0x38
 8007720:	ab2b      	add	r3, sp, #172	; 0xac
 8007722:	701a      	strb	r2, [r3, #0]
 8007724:	466a      	mov	r2, sp
 8007726:	3208      	adds	r2, #8
 8007728:	2100      	movs	r1, #0
 800772a:	32ff      	adds	r2, #255	; 0xff
 800772c:	7011      	strb	r1, [r2, #0]
 800772e:	3504      	adds	r5, #4
 8007730:	e2bc      	b.n	8007cac <_svfprintf_r+0x73c>
 8007732:	930e      	str	r3, [sp, #56]	; 0x38
 8007734:	2310      	movs	r3, #16
 8007736:	9208      	str	r2, [sp, #32]
 8007738:	431e      	orrs	r6, r3
 800773a:	e001      	b.n	8007740 <_svfprintf_r+0x1d0>
 800773c:	930e      	str	r3, [sp, #56]	; 0x38
 800773e:	9208      	str	r2, [sp, #32]
 8007740:	06f3      	lsls	r3, r6, #27
 8007742:	d503      	bpl.n	800774c <_svfprintf_r+0x1dc>
 8007744:	6828      	ldr	r0, [r5, #0]
 8007746:	3504      	adds	r5, #4
 8007748:	9009      	str	r0, [sp, #36]	; 0x24
 800774a:	e008      	b.n	800775e <_svfprintf_r+0x1ee>
 800774c:	1d2b      	adds	r3, r5, #4
 800774e:	682a      	ldr	r2, [r5, #0]
 8007750:	0671      	lsls	r1, r6, #25
 8007752:	d502      	bpl.n	800775a <_svfprintf_r+0x1ea>
 8007754:	b210      	sxth	r0, r2
 8007756:	9009      	str	r0, [sp, #36]	; 0x24
 8007758:	e000      	b.n	800775c <_svfprintf_r+0x1ec>
 800775a:	9209      	str	r2, [sp, #36]	; 0x24
 800775c:	1c1d      	adds	r5, r3, #0
 800775e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007760:	2900      	cmp	r1, #0
 8007762:	da07      	bge.n	8007774 <_svfprintf_r+0x204>
 8007764:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007766:	466b      	mov	r3, sp
 8007768:	4252      	negs	r2, r2
 800776a:	3308      	adds	r3, #8
 800776c:	9209      	str	r2, [sp, #36]	; 0x24
 800776e:	33ff      	adds	r3, #255	; 0xff
 8007770:	222d      	movs	r2, #45	; 0x2d
 8007772:	701a      	strb	r2, [r3, #0]
 8007774:	2301      	movs	r3, #1
 8007776:	e225      	b.n	8007bc4 <_svfprintf_r+0x654>
 8007778:	930e      	str	r3, [sp, #56]	; 0x38
 800777a:	9208      	str	r2, [sp, #32]
 800777c:	1deb      	adds	r3, r5, #7
 800777e:	0730      	lsls	r0, r6, #28
 8007780:	d506      	bpl.n	8007790 <_svfprintf_r+0x220>
 8007782:	2507      	movs	r5, #7
 8007784:	43ab      	bics	r3, r5
 8007786:	6819      	ldr	r1, [r3, #0]
 8007788:	1c1d      	adds	r5, r3, #0
 800778a:	3508      	adds	r5, #8
 800778c:	9112      	str	r1, [sp, #72]	; 0x48
 800778e:	e005      	b.n	800779c <_svfprintf_r+0x22c>
 8007790:	2507      	movs	r5, #7
 8007792:	43ab      	bics	r3, r5
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	1c1d      	adds	r5, r3, #0
 8007798:	3508      	adds	r5, #8
 800779a:	9212      	str	r2, [sp, #72]	; 0x48
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	9812      	ldr	r0, [sp, #72]	; 0x48
 80077a0:	9314      	str	r3, [sp, #80]	; 0x50
 80077a2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80077a4:	f7ff f890 	bl	80068c8 <__isinfd>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d019      	beq.n	80077e0 <_svfprintf_r+0x270>
 80077ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 80077ae:	9914      	ldr	r1, [sp, #80]	; 0x50
 80077b0:	4b62      	ldr	r3, [pc, #392]	; (800793c <_svfprintf_r+0x3cc>)
 80077b2:	4a61      	ldr	r2, [pc, #388]	; (8007938 <_svfprintf_r+0x3c8>)
 80077b4:	f7f8 fd64 	bl	8000280 <__aeabi_dcmplt>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d004      	beq.n	80077c6 <_svfprintf_r+0x256>
 80077bc:	466b      	mov	r3, sp
 80077be:	3308      	adds	r3, #8
 80077c0:	222d      	movs	r2, #45	; 0x2d
 80077c2:	33ff      	adds	r3, #255	; 0xff
 80077c4:	701a      	strb	r2, [r3, #0]
 80077c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077c8:	2b47      	cmp	r3, #71	; 0x47
 80077ca:	dc02      	bgt.n	80077d2 <_svfprintf_r+0x262>
 80077cc:	485e      	ldr	r0, [pc, #376]	; (8007948 <_svfprintf_r+0x3d8>)
 80077ce:	900a      	str	r0, [sp, #40]	; 0x28
 80077d0:	e001      	b.n	80077d6 <_svfprintf_r+0x266>
 80077d2:	495e      	ldr	r1, [pc, #376]	; (800794c <_svfprintf_r+0x3dc>)
 80077d4:	910a      	str	r1, [sp, #40]	; 0x28
 80077d6:	2380      	movs	r3, #128	; 0x80
 80077d8:	2203      	movs	r2, #3
 80077da:	439e      	bics	r6, r3
 80077dc:	9209      	str	r2, [sp, #36]	; 0x24
 80077de:	e1ad      	b.n	8007b3c <_svfprintf_r+0x5cc>
 80077e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80077e2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80077e4:	f7ff f882 	bl	80068ec <__isnand>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d00b      	beq.n	8007804 <_svfprintf_r+0x294>
 80077ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80077ee:	2847      	cmp	r0, #71	; 0x47
 80077f0:	dc02      	bgt.n	80077f8 <_svfprintf_r+0x288>
 80077f2:	4957      	ldr	r1, [pc, #348]	; (8007950 <_svfprintf_r+0x3e0>)
 80077f4:	910a      	str	r1, [sp, #40]	; 0x28
 80077f6:	e001      	b.n	80077fc <_svfprintf_r+0x28c>
 80077f8:	4a56      	ldr	r2, [pc, #344]	; (8007954 <_svfprintf_r+0x3e4>)
 80077fa:	920a      	str	r2, [sp, #40]	; 0x28
 80077fc:	2380      	movs	r3, #128	; 0x80
 80077fe:	439e      	bics	r6, r3
 8007800:	2303      	movs	r3, #3
 8007802:	e25a      	b.n	8007cba <_svfprintf_r+0x74a>
 8007804:	9908      	ldr	r1, [sp, #32]
 8007806:	3101      	adds	r1, #1
 8007808:	d102      	bne.n	8007810 <_svfprintf_r+0x2a0>
 800780a:	2206      	movs	r2, #6
 800780c:	9208      	str	r2, [sp, #32]
 800780e:	e009      	b.n	8007824 <_svfprintf_r+0x2b4>
 8007810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007812:	2b47      	cmp	r3, #71	; 0x47
 8007814:	d001      	beq.n	800781a <_svfprintf_r+0x2aa>
 8007816:	2b67      	cmp	r3, #103	; 0x67
 8007818:	d104      	bne.n	8007824 <_svfprintf_r+0x2b4>
 800781a:	9808      	ldr	r0, [sp, #32]
 800781c:	2800      	cmp	r0, #0
 800781e:	d101      	bne.n	8007824 <_svfprintf_r+0x2b4>
 8007820:	2101      	movs	r1, #1
 8007822:	9108      	str	r1, [sp, #32]
 8007824:	2380      	movs	r3, #128	; 0x80
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	431e      	orrs	r6, r3
 800782a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800782c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800782e:	9238      	str	r2, [sp, #224]	; 0xe0
 8007830:	9339      	str	r3, [sp, #228]	; 0xe4
 8007832:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8007834:	2b00      	cmp	r3, #0
 8007836:	db04      	blt.n	8007842 <_svfprintf_r+0x2d2>
 8007838:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800783a:	2300      	movs	r3, #0
 800783c:	920f      	str	r2, [sp, #60]	; 0x3c
 800783e:	9310      	str	r3, [sp, #64]	; 0x40
 8007840:	e006      	b.n	8007850 <_svfprintf_r+0x2e0>
 8007842:	2180      	movs	r1, #128	; 0x80
 8007844:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007846:	0609      	lsls	r1, r1, #24
 8007848:	1841      	adds	r1, r0, r1
 800784a:	222d      	movs	r2, #45	; 0x2d
 800784c:	910f      	str	r1, [sp, #60]	; 0x3c
 800784e:	9210      	str	r2, [sp, #64]	; 0x40
 8007850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007852:	3b46      	subs	r3, #70	; 0x46
 8007854:	4259      	negs	r1, r3
 8007856:	4159      	adcs	r1, r3
 8007858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800785a:	1c08      	adds	r0, r1, #0
 800785c:	3b66      	subs	r3, #102	; 0x66
 800785e:	425a      	negs	r2, r3
 8007860:	4153      	adcs	r3, r2
 8007862:	4318      	orrs	r0, r3
 8007864:	9018      	str	r0, [sp, #96]	; 0x60
 8007866:	d003      	beq.n	8007870 <_svfprintf_r+0x300>
 8007868:	9908      	ldr	r1, [sp, #32]
 800786a:	2303      	movs	r3, #3
 800786c:	9109      	str	r1, [sp, #36]	; 0x24
 800786e:	e00b      	b.n	8007888 <_svfprintf_r+0x318>
 8007870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007872:	2a45      	cmp	r2, #69	; 0x45
 8007874:	d004      	beq.n	8007880 <_svfprintf_r+0x310>
 8007876:	2a65      	cmp	r2, #101	; 0x65
 8007878:	d002      	beq.n	8007880 <_svfprintf_r+0x310>
 800787a:	9b08      	ldr	r3, [sp, #32]
 800787c:	9309      	str	r3, [sp, #36]	; 0x24
 800787e:	e002      	b.n	8007886 <_svfprintf_r+0x316>
 8007880:	9808      	ldr	r0, [sp, #32]
 8007882:	3001      	adds	r0, #1
 8007884:	9009      	str	r0, [sp, #36]	; 0x24
 8007886:	2302      	movs	r3, #2
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	ab40      	add	r3, sp, #256	; 0x100
 800788c:	9302      	str	r3, [sp, #8]
 800788e:	ab3f      	add	r3, sp, #252	; 0xfc
 8007890:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007892:	9303      	str	r3, [sp, #12]
 8007894:	ab3e      	add	r3, sp, #248	; 0xf8
 8007896:	9304      	str	r3, [sp, #16]
 8007898:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800789a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800789c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800789e:	9101      	str	r1, [sp, #4]
 80078a0:	f001 fab2 	bl	8008e08 <_dtoa_r>
 80078a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078a6:	900a      	str	r0, [sp, #40]	; 0x28
 80078a8:	2a47      	cmp	r2, #71	; 0x47
 80078aa:	d001      	beq.n	80078b0 <_svfprintf_r+0x340>
 80078ac:	2a67      	cmp	r2, #103	; 0x67
 80078ae:	d101      	bne.n	80078b4 <_svfprintf_r+0x344>
 80078b0:	07f3      	lsls	r3, r6, #31
 80078b2:	d52c      	bpl.n	800790e <_svfprintf_r+0x39e>
 80078b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80078ba:	1840      	adds	r0, r0, r1
 80078bc:	900d      	str	r0, [sp, #52]	; 0x34
 80078be:	2a00      	cmp	r2, #0
 80078c0:	d013      	beq.n	80078ea <_svfprintf_r+0x37a>
 80078c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078c4:	7803      	ldrb	r3, [r0, #0]
 80078c6:	2b30      	cmp	r3, #48	; 0x30
 80078c8:	d10b      	bne.n	80078e2 <_svfprintf_r+0x372>
 80078ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80078cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078ce:	4b1b      	ldr	r3, [pc, #108]	; (800793c <_svfprintf_r+0x3cc>)
 80078d0:	4a19      	ldr	r2, [pc, #100]	; (8007938 <_svfprintf_r+0x3c8>)
 80078d2:	f7f8 fccf 	bl	8000274 <__aeabi_dcmpeq>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d103      	bne.n	80078e2 <_svfprintf_r+0x372>
 80078da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078dc:	2301      	movs	r3, #1
 80078de:	1a5b      	subs	r3, r3, r1
 80078e0:	9340      	str	r3, [sp, #256]	; 0x100
 80078e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078e4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80078e6:	18d2      	adds	r2, r2, r3
 80078e8:	920d      	str	r2, [sp, #52]	; 0x34
 80078ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80078ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078ee:	4b13      	ldr	r3, [pc, #76]	; (800793c <_svfprintf_r+0x3cc>)
 80078f0:	4a11      	ldr	r2, [pc, #68]	; (8007938 <_svfprintf_r+0x3c8>)
 80078f2:	f7f8 fcbf 	bl	8000274 <__aeabi_dcmpeq>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d005      	beq.n	8007906 <_svfprintf_r+0x396>
 80078fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078fc:	e002      	b.n	8007904 <_svfprintf_r+0x394>
 80078fe:	2230      	movs	r2, #48	; 0x30
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	3301      	adds	r3, #1
 8007904:	933e      	str	r3, [sp, #248]	; 0xf8
 8007906:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8007908:	980d      	ldr	r0, [sp, #52]	; 0x34
 800790a:	4283      	cmp	r3, r0
 800790c:	d3f7      	bcc.n	80078fe <_svfprintf_r+0x38e>
 800790e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8007910:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007912:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007914:	1a5b      	subs	r3, r3, r1
 8007916:	930d      	str	r3, [sp, #52]	; 0x34
 8007918:	2a47      	cmp	r2, #71	; 0x47
 800791a:	d001      	beq.n	8007920 <_svfprintf_r+0x3b0>
 800791c:	2a67      	cmp	r2, #103	; 0x67
 800791e:	d11b      	bne.n	8007958 <_svfprintf_r+0x3e8>
 8007920:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007922:	1cd8      	adds	r0, r3, #3
 8007924:	db03      	blt.n	800792e <_svfprintf_r+0x3be>
 8007926:	9908      	ldr	r1, [sp, #32]
 8007928:	428b      	cmp	r3, r1
 800792a:	dc00      	bgt.n	800792e <_svfprintf_r+0x3be>
 800792c:	e085      	b.n	8007a3a <_svfprintf_r+0x4ca>
 800792e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007930:	3a02      	subs	r2, #2
 8007932:	920c      	str	r2, [sp, #48]	; 0x30
 8007934:	e013      	b.n	800795e <_svfprintf_r+0x3ee>
 8007936:	46c0      	nop			; (mov r8, r8)
	...
 8007940:	0800bf80 	.word	0x0800bf80
 8007944:	0800c0f4 	.word	0x0800c0f4
 8007948:	0800c105 	.word	0x0800c105
 800794c:	0800c109 	.word	0x0800c109
 8007950:	0800c10d 	.word	0x0800c10d
 8007954:	0800c111 	.word	0x0800c111
 8007958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800795a:	2b65      	cmp	r3, #101	; 0x65
 800795c:	dc4e      	bgt.n	80079fc <_svfprintf_r+0x48c>
 800795e:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007960:	a80c      	add	r0, sp, #48	; 0x30
 8007962:	3b01      	subs	r3, #1
 8007964:	9308      	str	r3, [sp, #32]
 8007966:	7800      	ldrb	r0, [r0, #0]
 8007968:	9908      	ldr	r1, [sp, #32]
 800796a:	9340      	str	r3, [sp, #256]	; 0x100
 800796c:	ab3c      	add	r3, sp, #240	; 0xf0
 800796e:	7018      	strb	r0, [r3, #0]
 8007970:	2900      	cmp	r1, #0
 8007972:	da03      	bge.n	800797c <_svfprintf_r+0x40c>
 8007974:	4249      	negs	r1, r1
 8007976:	9108      	str	r1, [sp, #32]
 8007978:	222d      	movs	r2, #45	; 0x2d
 800797a:	e000      	b.n	800797e <_svfprintf_r+0x40e>
 800797c:	222b      	movs	r2, #43	; 0x2b
 800797e:	705a      	strb	r2, [r3, #1]
 8007980:	9a08      	ldr	r2, [sp, #32]
 8007982:	2a09      	cmp	r2, #9
 8007984:	dd24      	ble.n	80079d0 <_svfprintf_r+0x460>
 8007986:	466b      	mov	r3, sp
 8007988:	33ef      	adds	r3, #239	; 0xef
 800798a:	9307      	str	r3, [sp, #28]
 800798c:	9309      	str	r3, [sp, #36]	; 0x24
 800798e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007990:	9808      	ldr	r0, [sp, #32]
 8007992:	3901      	subs	r1, #1
 8007994:	9109      	str	r1, [sp, #36]	; 0x24
 8007996:	210a      	movs	r1, #10
 8007998:	f7f8 fc50 	bl	800023c <__aeabi_idivmod>
 800799c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800799e:	3130      	adds	r1, #48	; 0x30
 80079a0:	7011      	strb	r1, [r2, #0]
 80079a2:	9808      	ldr	r0, [sp, #32]
 80079a4:	210a      	movs	r1, #10
 80079a6:	f7f8 fbf3 	bl	8000190 <__aeabi_idiv>
 80079aa:	9008      	str	r0, [sp, #32]
 80079ac:	2809      	cmp	r0, #9
 80079ae:	dcee      	bgt.n	800798e <_svfprintf_r+0x41e>
 80079b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079b2:	1c03      	adds	r3, r0, #0
 80079b4:	3330      	adds	r3, #48	; 0x30
 80079b6:	3a01      	subs	r2, #1
 80079b8:	7013      	strb	r3, [r2, #0]
 80079ba:	466b      	mov	r3, sp
 80079bc:	33f2      	adds	r3, #242	; 0xf2
 80079be:	e003      	b.n	80079c8 <_svfprintf_r+0x458>
 80079c0:	7811      	ldrb	r1, [r2, #0]
 80079c2:	3201      	adds	r2, #1
 80079c4:	7019      	strb	r1, [r3, #0]
 80079c6:	3301      	adds	r3, #1
 80079c8:	9807      	ldr	r0, [sp, #28]
 80079ca:	4282      	cmp	r2, r0
 80079cc:	d3f8      	bcc.n	80079c0 <_svfprintf_r+0x450>
 80079ce:	e006      	b.n	80079de <_svfprintf_r+0x46e>
 80079d0:	ab3c      	add	r3, sp, #240	; 0xf0
 80079d2:	2230      	movs	r2, #48	; 0x30
 80079d4:	709a      	strb	r2, [r3, #2]
 80079d6:	9a08      	ldr	r2, [sp, #32]
 80079d8:	3230      	adds	r2, #48	; 0x30
 80079da:	70da      	strb	r2, [r3, #3]
 80079dc:	ab3d      	add	r3, sp, #244	; 0xf4
 80079de:	aa3c      	add	r2, sp, #240	; 0xf0
 80079e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80079e2:	1a9a      	subs	r2, r3, r2
 80079e4:	1851      	adds	r1, r2, r1
 80079e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80079e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079ea:	9109      	str	r1, [sp, #36]	; 0x24
 80079ec:	2a01      	cmp	r2, #1
 80079ee:	dc01      	bgt.n	80079f4 <_svfprintf_r+0x484>
 80079f0:	07f3      	lsls	r3, r6, #31
 80079f2:	d53f      	bpl.n	8007a74 <_svfprintf_r+0x504>
 80079f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079f6:	3001      	adds	r0, #1
 80079f8:	9009      	str	r0, [sp, #36]	; 0x24
 80079fa:	e03b      	b.n	8007a74 <_svfprintf_r+0x504>
 80079fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80079fe:	2966      	cmp	r1, #102	; 0x66
 8007a00:	d11b      	bne.n	8007a3a <_svfprintf_r+0x4ca>
 8007a02:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8007a04:	9b08      	ldr	r3, [sp, #32]
 8007a06:	9209      	str	r2, [sp, #36]	; 0x24
 8007a08:	2a00      	cmp	r2, #0
 8007a0a:	dd0a      	ble.n	8007a22 <_svfprintf_r+0x4b2>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <_svfprintf_r+0x4a4>
 8007a10:	07f0      	lsls	r0, r6, #31
 8007a12:	d52f      	bpl.n	8007a74 <_svfprintf_r+0x504>
 8007a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a16:	9908      	ldr	r1, [sp, #32]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	185b      	adds	r3, r3, r1
 8007a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a1e:	2266      	movs	r2, #102	; 0x66
 8007a20:	e027      	b.n	8007a72 <_svfprintf_r+0x502>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d104      	bne.n	8007a30 <_svfprintf_r+0x4c0>
 8007a26:	07f0      	lsls	r0, r6, #31
 8007a28:	d402      	bmi.n	8007a30 <_svfprintf_r+0x4c0>
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	9109      	str	r1, [sp, #36]	; 0x24
 8007a2e:	e021      	b.n	8007a74 <_svfprintf_r+0x504>
 8007a30:	9a08      	ldr	r2, [sp, #32]
 8007a32:	2366      	movs	r3, #102	; 0x66
 8007a34:	3202      	adds	r2, #2
 8007a36:	9209      	str	r2, [sp, #36]	; 0x24
 8007a38:	e007      	b.n	8007a4a <_svfprintf_r+0x4da>
 8007a3a:	9840      	ldr	r0, [sp, #256]	; 0x100
 8007a3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a3e:	9009      	str	r0, [sp, #36]	; 0x24
 8007a40:	4288      	cmp	r0, r1
 8007a42:	db0a      	blt.n	8007a5a <_svfprintf_r+0x4ea>
 8007a44:	07f2      	lsls	r2, r6, #31
 8007a46:	d402      	bmi.n	8007a4e <_svfprintf_r+0x4de>
 8007a48:	2367      	movs	r3, #103	; 0x67
 8007a4a:	930c      	str	r3, [sp, #48]	; 0x30
 8007a4c:	e012      	b.n	8007a74 <_svfprintf_r+0x504>
 8007a4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a50:	2167      	movs	r1, #103	; 0x67
 8007a52:	3001      	adds	r0, #1
 8007a54:	9009      	str	r0, [sp, #36]	; 0x24
 8007a56:	910c      	str	r1, [sp, #48]	; 0x30
 8007a58:	e00c      	b.n	8007a74 <_svfprintf_r+0x504>
 8007a5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a5c:	2a00      	cmp	r2, #0
 8007a5e:	dd01      	ble.n	8007a64 <_svfprintf_r+0x4f4>
 8007a60:	2301      	movs	r3, #1
 8007a62:	e002      	b.n	8007a6a <_svfprintf_r+0x4fa>
 8007a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a66:	2302      	movs	r3, #2
 8007a68:	1a1b      	subs	r3, r3, r0
 8007a6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a6c:	2267      	movs	r2, #103	; 0x67
 8007a6e:	185b      	adds	r3, r3, r1
 8007a70:	9309      	str	r3, [sp, #36]	; 0x24
 8007a72:	920c      	str	r2, [sp, #48]	; 0x30
 8007a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d100      	bne.n	8007a7c <_svfprintf_r+0x50c>
 8007a7a:	e11f      	b.n	8007cbc <_svfprintf_r+0x74c>
 8007a7c:	466b      	mov	r3, sp
 8007a7e:	3308      	adds	r3, #8
 8007a80:	222d      	movs	r2, #45	; 0x2d
 8007a82:	33ff      	adds	r3, #255	; 0xff
 8007a84:	701a      	strb	r2, [r3, #0]
 8007a86:	2100      	movs	r1, #0
 8007a88:	e113      	b.n	8007cb2 <_svfprintf_r+0x742>
 8007a8a:	930e      	str	r3, [sp, #56]	; 0x38
 8007a8c:	06f2      	lsls	r2, r6, #27
 8007a8e:	d504      	bpl.n	8007a9a <_svfprintf_r+0x52a>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007a94:	3504      	adds	r5, #4
 8007a96:	6018      	str	r0, [r3, #0]
 8007a98:	e599      	b.n	80075ce <_svfprintf_r+0x5e>
 8007a9a:	1d2b      	adds	r3, r5, #4
 8007a9c:	0671      	lsls	r1, r6, #25
 8007a9e:	d504      	bpl.n	8007aaa <_svfprintf_r+0x53a>
 8007aa0:	a811      	add	r0, sp, #68	; 0x44
 8007aa2:	682a      	ldr	r2, [r5, #0]
 8007aa4:	8800      	ldrh	r0, [r0, #0]
 8007aa6:	8010      	strh	r0, [r2, #0]
 8007aa8:	e002      	b.n	8007ab0 <_svfprintf_r+0x540>
 8007aaa:	682a      	ldr	r2, [r5, #0]
 8007aac:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007aae:	6011      	str	r1, [r2, #0]
 8007ab0:	1c1d      	adds	r5, r3, #0
 8007ab2:	e58c      	b.n	80075ce <_svfprintf_r+0x5e>
 8007ab4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ab6:	2310      	movs	r3, #16
 8007ab8:	9208      	str	r2, [sp, #32]
 8007aba:	431e      	orrs	r6, r3
 8007abc:	e001      	b.n	8007ac2 <_svfprintf_r+0x552>
 8007abe:	930e      	str	r3, [sp, #56]	; 0x38
 8007ac0:	9208      	str	r2, [sp, #32]
 8007ac2:	06f2      	lsls	r2, r6, #27
 8007ac4:	d503      	bpl.n	8007ace <_svfprintf_r+0x55e>
 8007ac6:	682b      	ldr	r3, [r5, #0]
 8007ac8:	3504      	adds	r5, #4
 8007aca:	9309      	str	r3, [sp, #36]	; 0x24
 8007acc:	e006      	b.n	8007adc <_svfprintf_r+0x56c>
 8007ace:	1d2b      	adds	r3, r5, #4
 8007ad0:	682a      	ldr	r2, [r5, #0]
 8007ad2:	0670      	lsls	r0, r6, #25
 8007ad4:	d500      	bpl.n	8007ad8 <_svfprintf_r+0x568>
 8007ad6:	b292      	uxth	r2, r2
 8007ad8:	9209      	str	r2, [sp, #36]	; 0x24
 8007ada:	1c1d      	adds	r5, r3, #0
 8007adc:	2300      	movs	r3, #0
 8007ade:	e06c      	b.n	8007bba <_svfprintf_r+0x64a>
 8007ae0:	930e      	str	r3, [sp, #56]	; 0x38
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	9208      	str	r2, [sp, #32]
 8007ae6:	431e      	orrs	r6, r3
 8007ae8:	2230      	movs	r2, #48	; 0x30
 8007aea:	ab41      	add	r3, sp, #260	; 0x104
 8007aec:	6829      	ldr	r1, [r5, #0]
 8007aee:	701a      	strb	r2, [r3, #0]
 8007af0:	2278      	movs	r2, #120	; 0x78
 8007af2:	705a      	strb	r2, [r3, #1]
 8007af4:	920c      	str	r2, [sp, #48]	; 0x30
 8007af6:	4abc      	ldr	r2, [pc, #752]	; (8007de8 <_svfprintf_r+0x878>)
 8007af8:	9109      	str	r1, [sp, #36]	; 0x24
 8007afa:	3504      	adds	r5, #4
 8007afc:	9216      	str	r2, [sp, #88]	; 0x58
 8007afe:	e052      	b.n	8007ba6 <_svfprintf_r+0x636>
 8007b00:	930e      	str	r3, [sp, #56]	; 0x38
 8007b02:	466b      	mov	r3, sp
 8007b04:	3308      	adds	r3, #8
 8007b06:	9208      	str	r2, [sp, #32]
 8007b08:	33ff      	adds	r3, #255	; 0xff
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	701a      	strb	r2, [r3, #0]
 8007b0e:	9808      	ldr	r0, [sp, #32]
 8007b10:	1d2b      	adds	r3, r5, #4
 8007b12:	682d      	ldr	r5, [r5, #0]
 8007b14:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b16:	950a      	str	r5, [sp, #40]	; 0x28
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	db12      	blt.n	8007b42 <_svfprintf_r+0x5d2>
 8007b1c:	1c28      	adds	r0, r5, #0
 8007b1e:	2100      	movs	r1, #0
 8007b20:	9a08      	ldr	r2, [sp, #32]
 8007b22:	f7ff f945 	bl	8006db0 <memchr>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d100      	bne.n	8007b2c <_svfprintf_r+0x5bc>
 8007b2a:	e0c4      	b.n	8007cb6 <_svfprintf_r+0x746>
 8007b2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b2e:	9a08      	ldr	r2, [sp, #32]
 8007b30:	1a40      	subs	r0, r0, r1
 8007b32:	9009      	str	r0, [sp, #36]	; 0x24
 8007b34:	4290      	cmp	r0, r2
 8007b36:	dd00      	ble.n	8007b3a <_svfprintf_r+0x5ca>
 8007b38:	e0bd      	b.n	8007cb6 <_svfprintf_r+0x746>
 8007b3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9308      	str	r3, [sp, #32]
 8007b40:	e0be      	b.n	8007cc0 <_svfprintf_r+0x750>
 8007b42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b44:	f7ff fbba 	bl	80072bc <strlen>
 8007b48:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b4a:	9009      	str	r0, [sp, #36]	; 0x24
 8007b4c:	e0b6      	b.n	8007cbc <_svfprintf_r+0x74c>
 8007b4e:	930e      	str	r3, [sp, #56]	; 0x38
 8007b50:	2310      	movs	r3, #16
 8007b52:	9208      	str	r2, [sp, #32]
 8007b54:	431e      	orrs	r6, r3
 8007b56:	e001      	b.n	8007b5c <_svfprintf_r+0x5ec>
 8007b58:	930e      	str	r3, [sp, #56]	; 0x38
 8007b5a:	9208      	str	r2, [sp, #32]
 8007b5c:	06f1      	lsls	r1, r6, #27
 8007b5e:	d503      	bpl.n	8007b68 <_svfprintf_r+0x5f8>
 8007b60:	682a      	ldr	r2, [r5, #0]
 8007b62:	3504      	adds	r5, #4
 8007b64:	9209      	str	r2, [sp, #36]	; 0x24
 8007b66:	e006      	b.n	8007b76 <_svfprintf_r+0x606>
 8007b68:	1d2b      	adds	r3, r5, #4
 8007b6a:	682a      	ldr	r2, [r5, #0]
 8007b6c:	0670      	lsls	r0, r6, #25
 8007b6e:	d500      	bpl.n	8007b72 <_svfprintf_r+0x602>
 8007b70:	b292      	uxth	r2, r2
 8007b72:	9209      	str	r2, [sp, #36]	; 0x24
 8007b74:	1c1d      	adds	r5, r3, #0
 8007b76:	2301      	movs	r3, #1
 8007b78:	e01f      	b.n	8007bba <_svfprintf_r+0x64a>
 8007b7a:	499b      	ldr	r1, [pc, #620]	; (8007de8 <_svfprintf_r+0x878>)
 8007b7c:	930e      	str	r3, [sp, #56]	; 0x38
 8007b7e:	9208      	str	r2, [sp, #32]
 8007b80:	9116      	str	r1, [sp, #88]	; 0x58
 8007b82:	06f2      	lsls	r2, r6, #27
 8007b84:	d503      	bpl.n	8007b8e <_svfprintf_r+0x61e>
 8007b86:	682b      	ldr	r3, [r5, #0]
 8007b88:	3504      	adds	r5, #4
 8007b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b8c:	e006      	b.n	8007b9c <_svfprintf_r+0x62c>
 8007b8e:	1d2b      	adds	r3, r5, #4
 8007b90:	682a      	ldr	r2, [r5, #0]
 8007b92:	0670      	lsls	r0, r6, #25
 8007b94:	d500      	bpl.n	8007b98 <_svfprintf_r+0x628>
 8007b96:	b292      	uxth	r2, r2
 8007b98:	9209      	str	r2, [sp, #36]	; 0x24
 8007b9a:	1c1d      	adds	r5, r3, #0
 8007b9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b9e:	2900      	cmp	r1, #0
 8007ba0:	d001      	beq.n	8007ba6 <_svfprintf_r+0x636>
 8007ba2:	07f2      	lsls	r2, r6, #31
 8007ba4:	d401      	bmi.n	8007baa <_svfprintf_r+0x63a>
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	e007      	b.n	8007bba <_svfprintf_r+0x64a>
 8007baa:	a80c      	add	r0, sp, #48	; 0x30
 8007bac:	7800      	ldrb	r0, [r0, #0]
 8007bae:	ab41      	add	r3, sp, #260	; 0x104
 8007bb0:	2230      	movs	r2, #48	; 0x30
 8007bb2:	701a      	strb	r2, [r3, #0]
 8007bb4:	7058      	strb	r0, [r3, #1]
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	431e      	orrs	r6, r3
 8007bba:	466a      	mov	r2, sp
 8007bbc:	3208      	adds	r2, #8
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	32ff      	adds	r2, #255	; 0xff
 8007bc2:	7011      	strb	r1, [r2, #0]
 8007bc4:	9908      	ldr	r1, [sp, #32]
 8007bc6:	2900      	cmp	r1, #0
 8007bc8:	db01      	blt.n	8007bce <_svfprintf_r+0x65e>
 8007bca:	2280      	movs	r2, #128	; 0x80
 8007bcc:	4396      	bics	r6, r2
 8007bce:	466a      	mov	r2, sp
 8007bd0:	9808      	ldr	r0, [sp, #32]
 8007bd2:	32d4      	adds	r2, #212	; 0xd4
 8007bd4:	9206      	str	r2, [sp, #24]
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d102      	bne.n	8007be0 <_svfprintf_r+0x670>
 8007bda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bdc:	2900      	cmp	r1, #0
 8007bde:	d046      	beq.n	8007c6e <_svfprintf_r+0x6fe>
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d002      	beq.n	8007bea <_svfprintf_r+0x67a>
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d104      	bne.n	8007bf2 <_svfprintf_r+0x682>
 8007be8:	e031      	b.n	8007c4e <_svfprintf_r+0x6de>
 8007bea:	466a      	mov	r2, sp
 8007bec:	32d4      	adds	r2, #212	; 0xd4
 8007bee:	920a      	str	r2, [sp, #40]	; 0x28
 8007bf0:	e022      	b.n	8007c38 <_svfprintf_r+0x6c8>
 8007bf2:	466b      	mov	r3, sp
 8007bf4:	33d4      	adds	r3, #212	; 0xd4
 8007bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bf8:	930a      	str	r3, [sp, #40]	; 0x28
 8007bfa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007bfc:	2307      	movs	r3, #7
 8007bfe:	4013      	ands	r3, r2
 8007c00:	3801      	subs	r0, #1
 8007c02:	3330      	adds	r3, #48	; 0x30
 8007c04:	08d2      	lsrs	r2, r2, #3
 8007c06:	900a      	str	r0, [sp, #40]	; 0x28
 8007c08:	7003      	strb	r3, [r0, #0]
 8007c0a:	2a00      	cmp	r2, #0
 8007c0c:	d1f5      	bne.n	8007bfa <_svfprintf_r+0x68a>
 8007c0e:	07f1      	lsls	r1, r6, #31
 8007c10:	d53b      	bpl.n	8007c8a <_svfprintf_r+0x71a>
 8007c12:	2b30      	cmp	r3, #48	; 0x30
 8007c14:	d039      	beq.n	8007c8a <_svfprintf_r+0x71a>
 8007c16:	3801      	subs	r0, #1
 8007c18:	900a      	str	r0, [sp, #40]	; 0x28
 8007c1a:	2330      	movs	r3, #48	; 0x30
 8007c1c:	e030      	b.n	8007c80 <_svfprintf_r+0x710>
 8007c1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c20:	210a      	movs	r1, #10
 8007c22:	930a      	str	r3, [sp, #40]	; 0x28
 8007c24:	f7f8 faaa 	bl	800017c <__aeabi_uidivmod>
 8007c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c2a:	3130      	adds	r1, #48	; 0x30
 8007c2c:	7011      	strb	r1, [r2, #0]
 8007c2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c30:	210a      	movs	r1, #10
 8007c32:	f7f8 fa5f 	bl	80000f4 <__aeabi_uidiv>
 8007c36:	9009      	str	r0, [sp, #36]	; 0x24
 8007c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	2809      	cmp	r0, #9
 8007c40:	d8ed      	bhi.n	8007c1e <_svfprintf_r+0x6ae>
 8007c42:	930a      	str	r3, [sp, #40]	; 0x28
 8007c44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c46:	1c03      	adds	r3, r0, #0
 8007c48:	3330      	adds	r3, #48	; 0x30
 8007c4a:	700b      	strb	r3, [r1, #0]
 8007c4c:	e01d      	b.n	8007c8a <_svfprintf_r+0x71a>
 8007c4e:	466a      	mov	r2, sp
 8007c50:	32d4      	adds	r2, #212	; 0xd4
 8007c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c54:	920a      	str	r2, [sp, #40]	; 0x28
 8007c56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c58:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007c5a:	3801      	subs	r0, #1
 8007c5c:	220f      	movs	r2, #15
 8007c5e:	900a      	str	r0, [sp, #40]	; 0x28
 8007c60:	401a      	ands	r2, r3
 8007c62:	5c8a      	ldrb	r2, [r1, r2]
 8007c64:	091b      	lsrs	r3, r3, #4
 8007c66:	7002      	strb	r2, [r0, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1f4      	bne.n	8007c56 <_svfprintf_r+0x6e6>
 8007c6c:	e00d      	b.n	8007c8a <_svfprintf_r+0x71a>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d108      	bne.n	8007c84 <_svfprintf_r+0x714>
 8007c72:	07f2      	lsls	r2, r6, #31
 8007c74:	d506      	bpl.n	8007c84 <_svfprintf_r+0x714>
 8007c76:	466b      	mov	r3, sp
 8007c78:	33d3      	adds	r3, #211	; 0xd3
 8007c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c7e:	2330      	movs	r3, #48	; 0x30
 8007c80:	7003      	strb	r3, [r0, #0]
 8007c82:	e002      	b.n	8007c8a <_svfprintf_r+0x71a>
 8007c84:	4669      	mov	r1, sp
 8007c86:	31d4      	adds	r1, #212	; 0xd4
 8007c88:	910a      	str	r1, [sp, #40]	; 0x28
 8007c8a:	9a06      	ldr	r2, [sp, #24]
 8007c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c8e:	1ad2      	subs	r2, r2, r3
 8007c90:	9209      	str	r2, [sp, #36]	; 0x24
 8007c92:	e015      	b.n	8007cc0 <_svfprintf_r+0x750>
 8007c94:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c96:	930e      	str	r3, [sp, #56]	; 0x38
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d100      	bne.n	8007c9e <_svfprintf_r+0x72e>
 8007c9c:	e38a      	b.n	80083b4 <_svfprintf_r+0xe44>
 8007c9e:	466a      	mov	r2, sp
 8007ca0:	3208      	adds	r2, #8
 8007ca2:	ab2b      	add	r3, sp, #172	; 0xac
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	32ff      	adds	r2, #255	; 0xff
 8007ca8:	7018      	strb	r0, [r3, #0]
 8007caa:	7011      	strb	r1, [r2, #0]
 8007cac:	2201      	movs	r2, #1
 8007cae:	930a      	str	r3, [sp, #40]	; 0x28
 8007cb0:	9209      	str	r2, [sp, #36]	; 0x24
 8007cb2:	9108      	str	r1, [sp, #32]
 8007cb4:	e004      	b.n	8007cc0 <_svfprintf_r+0x750>
 8007cb6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007cb8:	9b08      	ldr	r3, [sp, #32]
 8007cba:	9309      	str	r3, [sp, #36]	; 0x24
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	9008      	str	r0, [sp, #32]
 8007cc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cc2:	9a08      	ldr	r2, [sp, #32]
 8007cc4:	910f      	str	r1, [sp, #60]	; 0x3c
 8007cc6:	4291      	cmp	r1, r2
 8007cc8:	da00      	bge.n	8007ccc <_svfprintf_r+0x75c>
 8007cca:	920f      	str	r2, [sp, #60]	; 0x3c
 8007ccc:	466b      	mov	r3, sp
 8007cce:	3308      	adds	r3, #8
 8007cd0:	33ff      	adds	r3, #255	; 0xff
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <_svfprintf_r+0x76e>
 8007cd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cda:	3301      	adds	r3, #1
 8007cdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cde:	2302      	movs	r3, #2
 8007ce0:	1c30      	adds	r0, r6, #0
 8007ce2:	4018      	ands	r0, r3
 8007ce4:	9019      	str	r0, [sp, #100]	; 0x64
 8007ce6:	d002      	beq.n	8007cee <_svfprintf_r+0x77e>
 8007ce8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007cea:	3102      	adds	r1, #2
 8007cec:	910f      	str	r1, [sp, #60]	; 0x3c
 8007cee:	2384      	movs	r3, #132	; 0x84
 8007cf0:	1c32      	adds	r2, r6, #0
 8007cf2:	401a      	ands	r2, r3
 8007cf4:	9218      	str	r2, [sp, #96]	; 0x60
 8007cf6:	d137      	bne.n	8007d68 <_svfprintf_r+0x7f8>
 8007cf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cfa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007cfc:	1a1b      	subs	r3, r3, r0
 8007cfe:	9310      	str	r3, [sp, #64]	; 0x40
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	dc18      	bgt.n	8007d36 <_svfprintf_r+0x7c6>
 8007d04:	e030      	b.n	8007d68 <_svfprintf_r+0x7f8>
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	2310      	movs	r3, #16
 8007d0a:	6063      	str	r3, [r4, #4]
 8007d0c:	6893      	ldr	r3, [r2, #8]
 8007d0e:	3310      	adds	r3, #16
 8007d10:	6093      	str	r3, [r2, #8]
 8007d12:	6853      	ldr	r3, [r2, #4]
 8007d14:	3301      	adds	r3, #1
 8007d16:	6053      	str	r3, [r2, #4]
 8007d18:	2b07      	cmp	r3, #7
 8007d1a:	dc01      	bgt.n	8007d20 <_svfprintf_r+0x7b0>
 8007d1c:	3408      	adds	r4, #8
 8007d1e:	e007      	b.n	8007d30 <_svfprintf_r+0x7c0>
 8007d20:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007d22:	1c39      	adds	r1, r7, #0
 8007d24:	f7ff fb9c 	bl	8007460 <__sprint_r>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d000      	beq.n	8007d2e <_svfprintf_r+0x7be>
 8007d2c:	e34a      	b.n	80083c4 <_svfprintf_r+0xe54>
 8007d2e:	ac1b      	add	r4, sp, #108	; 0x6c
 8007d30:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007d32:	3910      	subs	r1, #16
 8007d34:	9110      	str	r1, [sp, #64]	; 0x40
 8007d36:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007d38:	aa35      	add	r2, sp, #212	; 0xd4
 8007d3a:	4b2c      	ldr	r3, [pc, #176]	; (8007dec <_svfprintf_r+0x87c>)
 8007d3c:	2810      	cmp	r0, #16
 8007d3e:	dce2      	bgt.n	8007d06 <_svfprintf_r+0x796>
 8007d40:	6060      	str	r0, [r4, #4]
 8007d42:	6023      	str	r3, [r4, #0]
 8007d44:	6893      	ldr	r3, [r2, #8]
 8007d46:	18c3      	adds	r3, r0, r3
 8007d48:	6093      	str	r3, [r2, #8]
 8007d4a:	6853      	ldr	r3, [r2, #4]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	6053      	str	r3, [r2, #4]
 8007d50:	2b07      	cmp	r3, #7
 8007d52:	dc01      	bgt.n	8007d58 <_svfprintf_r+0x7e8>
 8007d54:	3408      	adds	r4, #8
 8007d56:	e007      	b.n	8007d68 <_svfprintf_r+0x7f8>
 8007d58:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007d5a:	1c39      	adds	r1, r7, #0
 8007d5c:	f7ff fb80 	bl	8007460 <__sprint_r>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d000      	beq.n	8007d66 <_svfprintf_r+0x7f6>
 8007d64:	e32e      	b.n	80083c4 <_svfprintf_r+0xe54>
 8007d66:	ac1b      	add	r4, sp, #108	; 0x6c
 8007d68:	466b      	mov	r3, sp
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	33ff      	adds	r3, #255	; 0xff
 8007d6e:	781a      	ldrb	r2, [r3, #0]
 8007d70:	2a00      	cmp	r2, #0
 8007d72:	d015      	beq.n	8007da0 <_svfprintf_r+0x830>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	2301      	movs	r3, #1
 8007d78:	6063      	str	r3, [r4, #4]
 8007d7a:	aa35      	add	r2, sp, #212	; 0xd4
 8007d7c:	6893      	ldr	r3, [r2, #8]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	6093      	str	r3, [r2, #8]
 8007d82:	6853      	ldr	r3, [r2, #4]
 8007d84:	3301      	adds	r3, #1
 8007d86:	6053      	str	r3, [r2, #4]
 8007d88:	2b07      	cmp	r3, #7
 8007d8a:	dc01      	bgt.n	8007d90 <_svfprintf_r+0x820>
 8007d8c:	3408      	adds	r4, #8
 8007d8e:	e007      	b.n	8007da0 <_svfprintf_r+0x830>
 8007d90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007d92:	1c39      	adds	r1, r7, #0
 8007d94:	f7ff fb64 	bl	8007460 <__sprint_r>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d000      	beq.n	8007d9e <_svfprintf_r+0x82e>
 8007d9c:	e312      	b.n	80083c4 <_svfprintf_r+0xe54>
 8007d9e:	ac1b      	add	r4, sp, #108	; 0x6c
 8007da0:	9919      	ldr	r1, [sp, #100]	; 0x64
 8007da2:	2900      	cmp	r1, #0
 8007da4:	d016      	beq.n	8007dd4 <_svfprintf_r+0x864>
 8007da6:	ab41      	add	r3, sp, #260	; 0x104
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	2302      	movs	r3, #2
 8007dac:	6063      	str	r3, [r4, #4]
 8007dae:	aa35      	add	r2, sp, #212	; 0xd4
 8007db0:	6893      	ldr	r3, [r2, #8]
 8007db2:	3302      	adds	r3, #2
 8007db4:	6093      	str	r3, [r2, #8]
 8007db6:	6853      	ldr	r3, [r2, #4]
 8007db8:	3301      	adds	r3, #1
 8007dba:	6053      	str	r3, [r2, #4]
 8007dbc:	2b07      	cmp	r3, #7
 8007dbe:	dc01      	bgt.n	8007dc4 <_svfprintf_r+0x854>
 8007dc0:	3408      	adds	r4, #8
 8007dc2:	e007      	b.n	8007dd4 <_svfprintf_r+0x864>
 8007dc4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007dc6:	1c39      	adds	r1, r7, #0
 8007dc8:	f7ff fb4a 	bl	8007460 <__sprint_r>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d000      	beq.n	8007dd2 <_svfprintf_r+0x862>
 8007dd0:	e2f8      	b.n	80083c4 <_svfprintf_r+0xe54>
 8007dd2:	ac1b      	add	r4, sp, #108	; 0x6c
 8007dd4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007dd6:	2a80      	cmp	r2, #128	; 0x80
 8007dd8:	d13b      	bne.n	8007e52 <_svfprintf_r+0x8e2>
 8007dda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ddc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007dde:	1a1b      	subs	r3, r3, r0
 8007de0:	9310      	str	r3, [sp, #64]	; 0x40
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	dc1c      	bgt.n	8007e20 <_svfprintf_r+0x8b0>
 8007de6:	e034      	b.n	8007e52 <_svfprintf_r+0x8e2>
 8007de8:	0800c115 	.word	0x0800c115
 8007dec:	0800c128 	.word	0x0800c128
 8007df0:	6023      	str	r3, [r4, #0]
 8007df2:	2310      	movs	r3, #16
 8007df4:	6063      	str	r3, [r4, #4]
 8007df6:	6893      	ldr	r3, [r2, #8]
 8007df8:	3310      	adds	r3, #16
 8007dfa:	6093      	str	r3, [r2, #8]
 8007dfc:	6853      	ldr	r3, [r2, #4]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	6053      	str	r3, [r2, #4]
 8007e02:	2b07      	cmp	r3, #7
 8007e04:	dc01      	bgt.n	8007e0a <_svfprintf_r+0x89a>
 8007e06:	3408      	adds	r4, #8
 8007e08:	e007      	b.n	8007e1a <_svfprintf_r+0x8aa>
 8007e0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007e0c:	1c39      	adds	r1, r7, #0
 8007e0e:	f7ff fb27 	bl	8007460 <__sprint_r>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d000      	beq.n	8007e18 <_svfprintf_r+0x8a8>
 8007e16:	e2d5      	b.n	80083c4 <_svfprintf_r+0xe54>
 8007e18:	ac1b      	add	r4, sp, #108	; 0x6c
 8007e1a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007e1c:	3910      	subs	r1, #16
 8007e1e:	9110      	str	r1, [sp, #64]	; 0x40
 8007e20:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007e22:	aa35      	add	r2, sp, #212	; 0xd4
 8007e24:	4bb8      	ldr	r3, [pc, #736]	; (8008108 <_svfprintf_r+0xb98>)
 8007e26:	2810      	cmp	r0, #16
 8007e28:	dce2      	bgt.n	8007df0 <_svfprintf_r+0x880>
 8007e2a:	6060      	str	r0, [r4, #4]
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	6893      	ldr	r3, [r2, #8]
 8007e30:	18c3      	adds	r3, r0, r3
 8007e32:	6093      	str	r3, [r2, #8]
 8007e34:	6853      	ldr	r3, [r2, #4]
 8007e36:	3301      	adds	r3, #1
 8007e38:	6053      	str	r3, [r2, #4]
 8007e3a:	2b07      	cmp	r3, #7
 8007e3c:	dc01      	bgt.n	8007e42 <_svfprintf_r+0x8d2>
 8007e3e:	3408      	adds	r4, #8
 8007e40:	e007      	b.n	8007e52 <_svfprintf_r+0x8e2>
 8007e42:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007e44:	1c39      	adds	r1, r7, #0
 8007e46:	f7ff fb0b 	bl	8007460 <__sprint_r>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d000      	beq.n	8007e50 <_svfprintf_r+0x8e0>
 8007e4e:	e2b9      	b.n	80083c4 <_svfprintf_r+0xe54>
 8007e50:	ac1b      	add	r4, sp, #108	; 0x6c
 8007e52:	9908      	ldr	r1, [sp, #32]
 8007e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e56:	1a89      	subs	r1, r1, r2
 8007e58:	9108      	str	r1, [sp, #32]
 8007e5a:	2900      	cmp	r1, #0
 8007e5c:	dc18      	bgt.n	8007e90 <_svfprintf_r+0x920>
 8007e5e:	e030      	b.n	8007ec2 <_svfprintf_r+0x952>
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	2310      	movs	r3, #16
 8007e64:	6063      	str	r3, [r4, #4]
 8007e66:	6893      	ldr	r3, [r2, #8]
 8007e68:	3310      	adds	r3, #16
 8007e6a:	6093      	str	r3, [r2, #8]
 8007e6c:	6853      	ldr	r3, [r2, #4]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	6053      	str	r3, [r2, #4]
 8007e72:	2b07      	cmp	r3, #7
 8007e74:	dc01      	bgt.n	8007e7a <_svfprintf_r+0x90a>
 8007e76:	3408      	adds	r4, #8
 8007e78:	e007      	b.n	8007e8a <_svfprintf_r+0x91a>
 8007e7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007e7c:	1c39      	adds	r1, r7, #0
 8007e7e:	f7ff faef 	bl	8007460 <__sprint_r>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d000      	beq.n	8007e88 <_svfprintf_r+0x918>
 8007e86:	e29d      	b.n	80083c4 <_svfprintf_r+0xe54>
 8007e88:	ac1b      	add	r4, sp, #108	; 0x6c
 8007e8a:	9b08      	ldr	r3, [sp, #32]
 8007e8c:	3b10      	subs	r3, #16
 8007e8e:	9308      	str	r3, [sp, #32]
 8007e90:	9808      	ldr	r0, [sp, #32]
 8007e92:	aa35      	add	r2, sp, #212	; 0xd4
 8007e94:	4b9c      	ldr	r3, [pc, #624]	; (8008108 <_svfprintf_r+0xb98>)
 8007e96:	2810      	cmp	r0, #16
 8007e98:	dce2      	bgt.n	8007e60 <_svfprintf_r+0x8f0>
 8007e9a:	6060      	str	r0, [r4, #4]
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	6893      	ldr	r3, [r2, #8]
 8007ea0:	18c3      	adds	r3, r0, r3
 8007ea2:	6093      	str	r3, [r2, #8]
 8007ea4:	6853      	ldr	r3, [r2, #4]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	6053      	str	r3, [r2, #4]
 8007eaa:	2b07      	cmp	r3, #7
 8007eac:	dc01      	bgt.n	8007eb2 <_svfprintf_r+0x942>
 8007eae:	3408      	adds	r4, #8
 8007eb0:	e007      	b.n	8007ec2 <_svfprintf_r+0x952>
 8007eb2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007eb4:	1c39      	adds	r1, r7, #0
 8007eb6:	f7ff fad3 	bl	8007460 <__sprint_r>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d000      	beq.n	8007ec0 <_svfprintf_r+0x950>
 8007ebe:	e281      	b.n	80083c4 <_svfprintf_r+0xe54>
 8007ec0:	ac1b      	add	r4, sp, #108	; 0x6c
 8007ec2:	05f1      	lsls	r1, r6, #23
 8007ec4:	d407      	bmi.n	8007ed6 <_svfprintf_r+0x966>
 8007ec6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eca:	6022      	str	r2, [r4, #0]
 8007ecc:	6063      	str	r3, [r4, #4]
 8007ece:	aa35      	add	r2, sp, #212	; 0xd4
 8007ed0:	6893      	ldr	r3, [r2, #8]
 8007ed2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ed4:	e215      	b.n	8008302 <_svfprintf_r+0xd92>
 8007ed6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ed8:	2965      	cmp	r1, #101	; 0x65
 8007eda:	dc00      	bgt.n	8007ede <_svfprintf_r+0x96e>
 8007edc:	e18a      	b.n	80081f4 <_svfprintf_r+0xc84>
 8007ede:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ee0:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007ee2:	4b88      	ldr	r3, [pc, #544]	; (8008104 <_svfprintf_r+0xb94>)
 8007ee4:	4a86      	ldr	r2, [pc, #536]	; (8008100 <_svfprintf_r+0xb90>)
 8007ee6:	f7f8 f9c5 	bl	8000274 <__aeabi_dcmpeq>
 8007eea:	2800      	cmp	r0, #0
 8007eec:	d05b      	beq.n	8007fa6 <_svfprintf_r+0xa36>
 8007eee:	4b87      	ldr	r3, [pc, #540]	; (800810c <_svfprintf_r+0xb9c>)
 8007ef0:	aa35      	add	r2, sp, #212	; 0xd4
 8007ef2:	6023      	str	r3, [r4, #0]
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	6063      	str	r3, [r4, #4]
 8007ef8:	6893      	ldr	r3, [r2, #8]
 8007efa:	3301      	adds	r3, #1
 8007efc:	6093      	str	r3, [r2, #8]
 8007efe:	6853      	ldr	r3, [r2, #4]
 8007f00:	3301      	adds	r3, #1
 8007f02:	6053      	str	r3, [r2, #4]
 8007f04:	2b07      	cmp	r3, #7
 8007f06:	dc01      	bgt.n	8007f0c <_svfprintf_r+0x99c>
 8007f08:	3408      	adds	r4, #8
 8007f0a:	e007      	b.n	8007f1c <_svfprintf_r+0x9ac>
 8007f0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007f0e:	1c39      	adds	r1, r7, #0
 8007f10:	f7ff faa6 	bl	8007460 <__sprint_r>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d000      	beq.n	8007f1a <_svfprintf_r+0x9aa>
 8007f18:	e254      	b.n	80083c4 <_svfprintf_r+0xe54>
 8007f1a:	ac1b      	add	r4, sp, #108	; 0x6c
 8007f1c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007f1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f20:	4293      	cmp	r3, r2
 8007f22:	db02      	blt.n	8007f2a <_svfprintf_r+0x9ba>
 8007f24:	07f3      	lsls	r3, r6, #31
 8007f26:	d400      	bmi.n	8007f2a <_svfprintf_r+0x9ba>
 8007f28:	e1fb      	b.n	8008322 <_svfprintf_r+0xdb2>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	6063      	str	r3, [r4, #4]
 8007f2e:	aa35      	add	r2, sp, #212	; 0xd4
 8007f30:	6893      	ldr	r3, [r2, #8]
 8007f32:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007f34:	3301      	adds	r3, #1
 8007f36:	6093      	str	r3, [r2, #8]
 8007f38:	6853      	ldr	r3, [r2, #4]
 8007f3a:	6020      	str	r0, [r4, #0]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	6053      	str	r3, [r2, #4]
 8007f40:	2b07      	cmp	r3, #7
 8007f42:	dc01      	bgt.n	8007f48 <_svfprintf_r+0x9d8>
 8007f44:	3408      	adds	r4, #8
 8007f46:	e007      	b.n	8007f58 <_svfprintf_r+0x9e8>
 8007f48:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007f4a:	1c39      	adds	r1, r7, #0
 8007f4c:	f7ff fa88 	bl	8007460 <__sprint_r>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d000      	beq.n	8007f56 <_svfprintf_r+0x9e6>
 8007f54:	e236      	b.n	80083c4 <_svfprintf_r+0xe54>
 8007f56:	ac1b      	add	r4, sp, #108	; 0x6c
 8007f58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f5a:	3901      	subs	r1, #1
 8007f5c:	9108      	str	r1, [sp, #32]
 8007f5e:	2900      	cmp	r1, #0
 8007f60:	dc18      	bgt.n	8007f94 <_svfprintf_r+0xa24>
 8007f62:	e1de      	b.n	8008322 <_svfprintf_r+0xdb2>
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	2310      	movs	r3, #16
 8007f68:	6063      	str	r3, [r4, #4]
 8007f6a:	6893      	ldr	r3, [r2, #8]
 8007f6c:	3310      	adds	r3, #16
 8007f6e:	6093      	str	r3, [r2, #8]
 8007f70:	6853      	ldr	r3, [r2, #4]
 8007f72:	3301      	adds	r3, #1
 8007f74:	6053      	str	r3, [r2, #4]
 8007f76:	2b07      	cmp	r3, #7
 8007f78:	dc01      	bgt.n	8007f7e <_svfprintf_r+0xa0e>
 8007f7a:	3408      	adds	r4, #8
 8007f7c:	e007      	b.n	8007f8e <_svfprintf_r+0xa1e>
 8007f7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007f80:	1c39      	adds	r1, r7, #0
 8007f82:	f7ff fa6d 	bl	8007460 <__sprint_r>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d000      	beq.n	8007f8c <_svfprintf_r+0xa1c>
 8007f8a:	e21b      	b.n	80083c4 <_svfprintf_r+0xe54>
 8007f8c:	ac1b      	add	r4, sp, #108	; 0x6c
 8007f8e:	9a08      	ldr	r2, [sp, #32]
 8007f90:	3a10      	subs	r2, #16
 8007f92:	9208      	str	r2, [sp, #32]
 8007f94:	9808      	ldr	r0, [sp, #32]
 8007f96:	aa35      	add	r2, sp, #212	; 0xd4
 8007f98:	4b5b      	ldr	r3, [pc, #364]	; (8008108 <_svfprintf_r+0xb98>)
 8007f9a:	2810      	cmp	r0, #16
 8007f9c:	dce2      	bgt.n	8007f64 <_svfprintf_r+0x9f4>
 8007f9e:	6060      	str	r0, [r4, #4]
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	6893      	ldr	r3, [r2, #8]
 8007fa4:	e1ad      	b.n	8008302 <_svfprintf_r+0xd92>
 8007fa6:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	dc7b      	bgt.n	80080a4 <_svfprintf_r+0xb34>
 8007fac:	4b57      	ldr	r3, [pc, #348]	; (800810c <_svfprintf_r+0xb9c>)
 8007fae:	aa35      	add	r2, sp, #212	; 0xd4
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	6063      	str	r3, [r4, #4]
 8007fb6:	6893      	ldr	r3, [r2, #8]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	6093      	str	r3, [r2, #8]
 8007fbc:	6853      	ldr	r3, [r2, #4]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	6053      	str	r3, [r2, #4]
 8007fc2:	2b07      	cmp	r3, #7
 8007fc4:	dc01      	bgt.n	8007fca <_svfprintf_r+0xa5a>
 8007fc6:	3408      	adds	r4, #8
 8007fc8:	e007      	b.n	8007fda <_svfprintf_r+0xa6a>
 8007fca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007fcc:	1c39      	adds	r1, r7, #0
 8007fce:	f7ff fa47 	bl	8007460 <__sprint_r>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d000      	beq.n	8007fd8 <_svfprintf_r+0xa68>
 8007fd6:	e1f5      	b.n	80083c4 <_svfprintf_r+0xe54>
 8007fd8:	ac1b      	add	r4, sp, #108	; 0x6c
 8007fda:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d105      	bne.n	8007fec <_svfprintf_r+0xa7c>
 8007fe0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007fe2:	2900      	cmp	r1, #0
 8007fe4:	d102      	bne.n	8007fec <_svfprintf_r+0xa7c>
 8007fe6:	07f2      	lsls	r2, r6, #31
 8007fe8:	d400      	bmi.n	8007fec <_svfprintf_r+0xa7c>
 8007fea:	e19a      	b.n	8008322 <_svfprintf_r+0xdb2>
 8007fec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fee:	aa35      	add	r2, sp, #212	; 0xd4
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	6063      	str	r3, [r4, #4]
 8007ff6:	6893      	ldr	r3, [r2, #8]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	6093      	str	r3, [r2, #8]
 8007ffc:	6853      	ldr	r3, [r2, #4]
 8007ffe:	3301      	adds	r3, #1
 8008000:	6053      	str	r3, [r2, #4]
 8008002:	2b07      	cmp	r3, #7
 8008004:	dc02      	bgt.n	800800c <_svfprintf_r+0xa9c>
 8008006:	1c21      	adds	r1, r4, #0
 8008008:	3108      	adds	r1, #8
 800800a:	e007      	b.n	800801c <_svfprintf_r+0xaac>
 800800c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800800e:	1c39      	adds	r1, r7, #0
 8008010:	f7ff fa26 	bl	8007460 <__sprint_r>
 8008014:	2800      	cmp	r0, #0
 8008016:	d000      	beq.n	800801a <_svfprintf_r+0xaaa>
 8008018:	e1d4      	b.n	80083c4 <_svfprintf_r+0xe54>
 800801a:	a91b      	add	r1, sp, #108	; 0x6c
 800801c:	9c40      	ldr	r4, [sp, #256]	; 0x100
 800801e:	4264      	negs	r4, r4
 8008020:	2c00      	cmp	r4, #0
 8008022:	dc16      	bgt.n	8008052 <_svfprintf_r+0xae2>
 8008024:	e02d      	b.n	8008082 <_svfprintf_r+0xb12>
 8008026:	600b      	str	r3, [r1, #0]
 8008028:	2310      	movs	r3, #16
 800802a:	604b      	str	r3, [r1, #4]
 800802c:	6893      	ldr	r3, [r2, #8]
 800802e:	3310      	adds	r3, #16
 8008030:	6093      	str	r3, [r2, #8]
 8008032:	6853      	ldr	r3, [r2, #4]
 8008034:	3301      	adds	r3, #1
 8008036:	6053      	str	r3, [r2, #4]
 8008038:	2b07      	cmp	r3, #7
 800803a:	dc01      	bgt.n	8008040 <_svfprintf_r+0xad0>
 800803c:	3108      	adds	r1, #8
 800803e:	e007      	b.n	8008050 <_svfprintf_r+0xae0>
 8008040:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008042:	1c39      	adds	r1, r7, #0
 8008044:	f7ff fa0c 	bl	8007460 <__sprint_r>
 8008048:	2800      	cmp	r0, #0
 800804a:	d000      	beq.n	800804e <_svfprintf_r+0xade>
 800804c:	e1ba      	b.n	80083c4 <_svfprintf_r+0xe54>
 800804e:	a91b      	add	r1, sp, #108	; 0x6c
 8008050:	3c10      	subs	r4, #16
 8008052:	aa35      	add	r2, sp, #212	; 0xd4
 8008054:	4b2c      	ldr	r3, [pc, #176]	; (8008108 <_svfprintf_r+0xb98>)
 8008056:	2c10      	cmp	r4, #16
 8008058:	dce5      	bgt.n	8008026 <_svfprintf_r+0xab6>
 800805a:	604c      	str	r4, [r1, #4]
 800805c:	600b      	str	r3, [r1, #0]
 800805e:	6893      	ldr	r3, [r2, #8]
 8008060:	18e4      	adds	r4, r4, r3
 8008062:	6853      	ldr	r3, [r2, #4]
 8008064:	6094      	str	r4, [r2, #8]
 8008066:	3301      	adds	r3, #1
 8008068:	6053      	str	r3, [r2, #4]
 800806a:	2b07      	cmp	r3, #7
 800806c:	dc01      	bgt.n	8008072 <_svfprintf_r+0xb02>
 800806e:	3108      	adds	r1, #8
 8008070:	e007      	b.n	8008082 <_svfprintf_r+0xb12>
 8008072:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008074:	1c39      	adds	r1, r7, #0
 8008076:	f7ff f9f3 	bl	8007460 <__sprint_r>
 800807a:	2800      	cmp	r0, #0
 800807c:	d000      	beq.n	8008080 <_svfprintf_r+0xb10>
 800807e:	e1a1      	b.n	80083c4 <_svfprintf_r+0xe54>
 8008080:	a91b      	add	r1, sp, #108	; 0x6c
 8008082:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008084:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008086:	604a      	str	r2, [r1, #4]
 8008088:	aa35      	add	r2, sp, #212	; 0xd4
 800808a:	6893      	ldr	r3, [r2, #8]
 800808c:	6008      	str	r0, [r1, #0]
 800808e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008090:	18c3      	adds	r3, r0, r3
 8008092:	6093      	str	r3, [r2, #8]
 8008094:	6853      	ldr	r3, [r2, #4]
 8008096:	3301      	adds	r3, #1
 8008098:	6053      	str	r3, [r2, #4]
 800809a:	2b07      	cmp	r3, #7
 800809c:	dd00      	ble.n	80080a0 <_svfprintf_r+0xb30>
 800809e:	e139      	b.n	8008314 <_svfprintf_r+0xda4>
 80080a0:	1c0c      	adds	r4, r1, #0
 80080a2:	e135      	b.n	8008310 <_svfprintf_r+0xda0>
 80080a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080a6:	aa35      	add	r2, sp, #212	; 0xd4
 80080a8:	428b      	cmp	r3, r1
 80080aa:	db60      	blt.n	800816e <_svfprintf_r+0xbfe>
 80080ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ae:	6061      	str	r1, [r4, #4]
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	6893      	ldr	r3, [r2, #8]
 80080b4:	18cb      	adds	r3, r1, r3
 80080b6:	6093      	str	r3, [r2, #8]
 80080b8:	6853      	ldr	r3, [r2, #4]
 80080ba:	3301      	adds	r3, #1
 80080bc:	6053      	str	r3, [r2, #4]
 80080be:	2b07      	cmp	r3, #7
 80080c0:	dc01      	bgt.n	80080c6 <_svfprintf_r+0xb56>
 80080c2:	3408      	adds	r4, #8
 80080c4:	e007      	b.n	80080d6 <_svfprintf_r+0xb66>
 80080c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80080c8:	1c39      	adds	r1, r7, #0
 80080ca:	f7ff f9c9 	bl	8007460 <__sprint_r>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d000      	beq.n	80080d4 <_svfprintf_r+0xb64>
 80080d2:	e177      	b.n	80083c4 <_svfprintf_r+0xe54>
 80080d4:	ac1b      	add	r4, sp, #108	; 0x6c
 80080d6:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80080d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80080da:	1a1b      	subs	r3, r3, r0
 80080dc:	9308      	str	r3, [sp, #32]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	dc21      	bgt.n	8008126 <_svfprintf_r+0xbb6>
 80080e2:	e039      	b.n	8008158 <_svfprintf_r+0xbe8>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	2310      	movs	r3, #16
 80080e8:	6063      	str	r3, [r4, #4]
 80080ea:	6893      	ldr	r3, [r2, #8]
 80080ec:	3310      	adds	r3, #16
 80080ee:	6093      	str	r3, [r2, #8]
 80080f0:	6853      	ldr	r3, [r2, #4]
 80080f2:	3301      	adds	r3, #1
 80080f4:	6053      	str	r3, [r2, #4]
 80080f6:	2b07      	cmp	r3, #7
 80080f8:	dc0a      	bgt.n	8008110 <_svfprintf_r+0xba0>
 80080fa:	3408      	adds	r4, #8
 80080fc:	e010      	b.n	8008120 <_svfprintf_r+0xbb0>
 80080fe:	46c0      	nop			; (mov r8, r8)
	...
 8008108:	0800c0e4 	.word	0x0800c0e4
 800810c:	0800b9ca 	.word	0x0800b9ca
 8008110:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008112:	1c39      	adds	r1, r7, #0
 8008114:	f7ff f9a4 	bl	8007460 <__sprint_r>
 8008118:	2800      	cmp	r0, #0
 800811a:	d000      	beq.n	800811e <_svfprintf_r+0xbae>
 800811c:	e152      	b.n	80083c4 <_svfprintf_r+0xe54>
 800811e:	ac1b      	add	r4, sp, #108	; 0x6c
 8008120:	9908      	ldr	r1, [sp, #32]
 8008122:	3910      	subs	r1, #16
 8008124:	9108      	str	r1, [sp, #32]
 8008126:	9808      	ldr	r0, [sp, #32]
 8008128:	aa35      	add	r2, sp, #212	; 0xd4
 800812a:	4bad      	ldr	r3, [pc, #692]	; (80083e0 <_svfprintf_r+0xe70>)
 800812c:	2810      	cmp	r0, #16
 800812e:	dcd9      	bgt.n	80080e4 <_svfprintf_r+0xb74>
 8008130:	6060      	str	r0, [r4, #4]
 8008132:	6023      	str	r3, [r4, #0]
 8008134:	6893      	ldr	r3, [r2, #8]
 8008136:	18c3      	adds	r3, r0, r3
 8008138:	6093      	str	r3, [r2, #8]
 800813a:	6853      	ldr	r3, [r2, #4]
 800813c:	3301      	adds	r3, #1
 800813e:	6053      	str	r3, [r2, #4]
 8008140:	2b07      	cmp	r3, #7
 8008142:	dc01      	bgt.n	8008148 <_svfprintf_r+0xbd8>
 8008144:	3408      	adds	r4, #8
 8008146:	e007      	b.n	8008158 <_svfprintf_r+0xbe8>
 8008148:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800814a:	1c39      	adds	r1, r7, #0
 800814c:	f7ff f988 	bl	8007460 <__sprint_r>
 8008150:	2800      	cmp	r0, #0
 8008152:	d000      	beq.n	8008156 <_svfprintf_r+0xbe6>
 8008154:	e136      	b.n	80083c4 <_svfprintf_r+0xe54>
 8008156:	ac1b      	add	r4, sp, #108	; 0x6c
 8008158:	2301      	movs	r3, #1
 800815a:	421e      	tst	r6, r3
 800815c:	d100      	bne.n	8008160 <_svfprintf_r+0xbf0>
 800815e:	e0e0      	b.n	8008322 <_svfprintf_r+0xdb2>
 8008160:	6063      	str	r3, [r4, #4]
 8008162:	aa35      	add	r2, sp, #212	; 0xd4
 8008164:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008166:	6893      	ldr	r3, [r2, #8]
 8008168:	6021      	str	r1, [r4, #0]
 800816a:	3301      	adds	r3, #1
 800816c:	e0ca      	b.n	8008304 <_svfprintf_r+0xd94>
 800816e:	6063      	str	r3, [r4, #4]
 8008170:	6891      	ldr	r1, [r2, #8]
 8008172:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008174:	185b      	adds	r3, r3, r1
 8008176:	6093      	str	r3, [r2, #8]
 8008178:	6853      	ldr	r3, [r2, #4]
 800817a:	6020      	str	r0, [r4, #0]
 800817c:	3301      	adds	r3, #1
 800817e:	6053      	str	r3, [r2, #4]
 8008180:	2b07      	cmp	r3, #7
 8008182:	dc02      	bgt.n	800818a <_svfprintf_r+0xc1a>
 8008184:	1c23      	adds	r3, r4, #0
 8008186:	3308      	adds	r3, #8
 8008188:	e007      	b.n	800819a <_svfprintf_r+0xc2a>
 800818a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800818c:	1c39      	adds	r1, r7, #0
 800818e:	f7ff f967 	bl	8007460 <__sprint_r>
 8008192:	2800      	cmp	r0, #0
 8008194:	d000      	beq.n	8008198 <_svfprintf_r+0xc28>
 8008196:	e115      	b.n	80083c4 <_svfprintf_r+0xe54>
 8008198:	ab1b      	add	r3, sp, #108	; 0x6c
 800819a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800819c:	2201      	movs	r2, #1
 800819e:	9c40      	ldr	r4, [sp, #256]	; 0x100
 80081a0:	605a      	str	r2, [r3, #4]
 80081a2:	aa35      	add	r2, sp, #212	; 0xd4
 80081a4:	6019      	str	r1, [r3, #0]
 80081a6:	6891      	ldr	r1, [r2, #8]
 80081a8:	3101      	adds	r1, #1
 80081aa:	6091      	str	r1, [r2, #8]
 80081ac:	6851      	ldr	r1, [r2, #4]
 80081ae:	3101      	adds	r1, #1
 80081b0:	6051      	str	r1, [r2, #4]
 80081b2:	2907      	cmp	r1, #7
 80081b4:	dc01      	bgt.n	80081ba <_svfprintf_r+0xc4a>
 80081b6:	3308      	adds	r3, #8
 80081b8:	e007      	b.n	80081ca <_svfprintf_r+0xc5a>
 80081ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80081bc:	1c39      	adds	r1, r7, #0
 80081be:	f7ff f94f 	bl	8007460 <__sprint_r>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d000      	beq.n	80081c8 <_svfprintf_r+0xc58>
 80081c6:	e0fd      	b.n	80083c4 <_svfprintf_r+0xe54>
 80081c8:	ab1b      	add	r3, sp, #108	; 0x6c
 80081ca:	9940      	ldr	r1, [sp, #256]	; 0x100
 80081cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80081d0:	1914      	adds	r4, r2, r4
 80081d2:	1a42      	subs	r2, r0, r1
 80081d4:	605a      	str	r2, [r3, #4]
 80081d6:	aa35      	add	r2, sp, #212	; 0xd4
 80081d8:	6890      	ldr	r0, [r2, #8]
 80081da:	601c      	str	r4, [r3, #0]
 80081dc:	1a41      	subs	r1, r0, r1
 80081de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80081e0:	1809      	adds	r1, r1, r0
 80081e2:	6091      	str	r1, [r2, #8]
 80081e4:	6851      	ldr	r1, [r2, #4]
 80081e6:	3101      	adds	r1, #1
 80081e8:	6051      	str	r1, [r2, #4]
 80081ea:	2907      	cmp	r1, #7
 80081ec:	dd00      	ble.n	80081f0 <_svfprintf_r+0xc80>
 80081ee:	e091      	b.n	8008314 <_svfprintf_r+0xda4>
 80081f0:	1c1c      	adds	r4, r3, #0
 80081f2:	e08d      	b.n	8008310 <_svfprintf_r+0xda0>
 80081f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80081f6:	2901      	cmp	r1, #1
 80081f8:	dc02      	bgt.n	8008200 <_svfprintf_r+0xc90>
 80081fa:	2301      	movs	r3, #1
 80081fc:	421e      	tst	r6, r3
 80081fe:	d064      	beq.n	80082ca <_svfprintf_r+0xd5a>
 8008200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008202:	2301      	movs	r3, #1
 8008204:	6063      	str	r3, [r4, #4]
 8008206:	6022      	str	r2, [r4, #0]
 8008208:	aa35      	add	r2, sp, #212	; 0xd4
 800820a:	6893      	ldr	r3, [r2, #8]
 800820c:	3301      	adds	r3, #1
 800820e:	6093      	str	r3, [r2, #8]
 8008210:	6853      	ldr	r3, [r2, #4]
 8008212:	3301      	adds	r3, #1
 8008214:	6053      	str	r3, [r2, #4]
 8008216:	2b07      	cmp	r3, #7
 8008218:	dc01      	bgt.n	800821e <_svfprintf_r+0xcae>
 800821a:	3408      	adds	r4, #8
 800821c:	e007      	b.n	800822e <_svfprintf_r+0xcbe>
 800821e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008220:	1c39      	adds	r1, r7, #0
 8008222:	f7ff f91d 	bl	8007460 <__sprint_r>
 8008226:	2800      	cmp	r0, #0
 8008228:	d000      	beq.n	800822c <_svfprintf_r+0xcbc>
 800822a:	e0cb      	b.n	80083c4 <_svfprintf_r+0xe54>
 800822c:	ac1b      	add	r4, sp, #108	; 0x6c
 800822e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008230:	aa35      	add	r2, sp, #212	; 0xd4
 8008232:	6023      	str	r3, [r4, #0]
 8008234:	2301      	movs	r3, #1
 8008236:	6063      	str	r3, [r4, #4]
 8008238:	6893      	ldr	r3, [r2, #8]
 800823a:	3301      	adds	r3, #1
 800823c:	6093      	str	r3, [r2, #8]
 800823e:	6853      	ldr	r3, [r2, #4]
 8008240:	3301      	adds	r3, #1
 8008242:	6053      	str	r3, [r2, #4]
 8008244:	2b07      	cmp	r3, #7
 8008246:	dc01      	bgt.n	800824c <_svfprintf_r+0xcdc>
 8008248:	3408      	adds	r4, #8
 800824a:	e007      	b.n	800825c <_svfprintf_r+0xcec>
 800824c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800824e:	1c39      	adds	r1, r7, #0
 8008250:	f7ff f906 	bl	8007460 <__sprint_r>
 8008254:	2800      	cmp	r0, #0
 8008256:	d000      	beq.n	800825a <_svfprintf_r+0xcea>
 8008258:	e0b4      	b.n	80083c4 <_svfprintf_r+0xe54>
 800825a:	ac1b      	add	r4, sp, #108	; 0x6c
 800825c:	4b5f      	ldr	r3, [pc, #380]	; (80083dc <_svfprintf_r+0xe6c>)
 800825e:	4a5e      	ldr	r2, [pc, #376]	; (80083d8 <_svfprintf_r+0xe68>)
 8008260:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008262:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008264:	f7f8 f806 	bl	8000274 <__aeabi_dcmpeq>
 8008268:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800826a:	3b01      	subs	r3, #1
 800826c:	2800      	cmp	r0, #0
 800826e:	d106      	bne.n	800827e <_svfprintf_r+0xd0e>
 8008270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008272:	6063      	str	r3, [r4, #4]
 8008274:	3201      	adds	r2, #1
 8008276:	6022      	str	r2, [r4, #0]
 8008278:	aa35      	add	r2, sp, #212	; 0xd4
 800827a:	6891      	ldr	r1, [r2, #8]
 800827c:	e023      	b.n	80082c6 <_svfprintf_r+0xd56>
 800827e:	2b00      	cmp	r3, #0
 8008280:	9308      	str	r3, [sp, #32]
 8008282:	dc18      	bgt.n	80082b6 <_svfprintf_r+0xd46>
 8008284:	e036      	b.n	80082f4 <_svfprintf_r+0xd84>
 8008286:	6023      	str	r3, [r4, #0]
 8008288:	2310      	movs	r3, #16
 800828a:	6063      	str	r3, [r4, #4]
 800828c:	6893      	ldr	r3, [r2, #8]
 800828e:	3310      	adds	r3, #16
 8008290:	6093      	str	r3, [r2, #8]
 8008292:	6853      	ldr	r3, [r2, #4]
 8008294:	3301      	adds	r3, #1
 8008296:	6053      	str	r3, [r2, #4]
 8008298:	2b07      	cmp	r3, #7
 800829a:	dc01      	bgt.n	80082a0 <_svfprintf_r+0xd30>
 800829c:	3408      	adds	r4, #8
 800829e:	e007      	b.n	80082b0 <_svfprintf_r+0xd40>
 80082a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80082a2:	1c39      	adds	r1, r7, #0
 80082a4:	f7ff f8dc 	bl	8007460 <__sprint_r>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d000      	beq.n	80082ae <_svfprintf_r+0xd3e>
 80082ac:	e08a      	b.n	80083c4 <_svfprintf_r+0xe54>
 80082ae:	ac1b      	add	r4, sp, #108	; 0x6c
 80082b0:	9808      	ldr	r0, [sp, #32]
 80082b2:	3810      	subs	r0, #16
 80082b4:	9008      	str	r0, [sp, #32]
 80082b6:	9908      	ldr	r1, [sp, #32]
 80082b8:	aa35      	add	r2, sp, #212	; 0xd4
 80082ba:	4b49      	ldr	r3, [pc, #292]	; (80083e0 <_svfprintf_r+0xe70>)
 80082bc:	2910      	cmp	r1, #16
 80082be:	dce2      	bgt.n	8008286 <_svfprintf_r+0xd16>
 80082c0:	6061      	str	r1, [r4, #4]
 80082c2:	6023      	str	r3, [r4, #0]
 80082c4:	6893      	ldr	r3, [r2, #8]
 80082c6:	18cb      	adds	r3, r1, r3
 80082c8:	e005      	b.n	80082d6 <_svfprintf_r+0xd66>
 80082ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082cc:	6063      	str	r3, [r4, #4]
 80082ce:	6022      	str	r2, [r4, #0]
 80082d0:	aa35      	add	r2, sp, #212	; 0xd4
 80082d2:	6893      	ldr	r3, [r2, #8]
 80082d4:	3301      	adds	r3, #1
 80082d6:	6093      	str	r3, [r2, #8]
 80082d8:	6853      	ldr	r3, [r2, #4]
 80082da:	3301      	adds	r3, #1
 80082dc:	6053      	str	r3, [r2, #4]
 80082de:	2b07      	cmp	r3, #7
 80082e0:	dc01      	bgt.n	80082e6 <_svfprintf_r+0xd76>
 80082e2:	3408      	adds	r4, #8
 80082e4:	e006      	b.n	80082f4 <_svfprintf_r+0xd84>
 80082e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80082e8:	1c39      	adds	r1, r7, #0
 80082ea:	f7ff f8b9 	bl	8007460 <__sprint_r>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d168      	bne.n	80083c4 <_svfprintf_r+0xe54>
 80082f2:	ac1b      	add	r4, sp, #108	; 0x6c
 80082f4:	ab3c      	add	r3, sp, #240	; 0xf0
 80082f6:	6023      	str	r3, [r4, #0]
 80082f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082fa:	aa35      	add	r2, sp, #212	; 0xd4
 80082fc:	6063      	str	r3, [r4, #4]
 80082fe:	6893      	ldr	r3, [r2, #8]
 8008300:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008302:	18c3      	adds	r3, r0, r3
 8008304:	6093      	str	r3, [r2, #8]
 8008306:	6853      	ldr	r3, [r2, #4]
 8008308:	3301      	adds	r3, #1
 800830a:	6053      	str	r3, [r2, #4]
 800830c:	2b07      	cmp	r3, #7
 800830e:	dc01      	bgt.n	8008314 <_svfprintf_r+0xda4>
 8008310:	3408      	adds	r4, #8
 8008312:	e006      	b.n	8008322 <_svfprintf_r+0xdb2>
 8008314:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008316:	1c39      	adds	r1, r7, #0
 8008318:	f7ff f8a2 	bl	8007460 <__sprint_r>
 800831c:	2800      	cmp	r0, #0
 800831e:	d151      	bne.n	80083c4 <_svfprintf_r+0xe54>
 8008320:	ac1b      	add	r4, sp, #108	; 0x6c
 8008322:	0771      	lsls	r1, r6, #29
 8008324:	d52e      	bpl.n	8008384 <_svfprintf_r+0xe14>
 8008326:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800832a:	1ad6      	subs	r6, r2, r3
 800832c:	2e00      	cmp	r6, #0
 800832e:	dc15      	bgt.n	800835c <_svfprintf_r+0xdec>
 8008330:	e028      	b.n	8008384 <_svfprintf_r+0xe14>
 8008332:	6023      	str	r3, [r4, #0]
 8008334:	2310      	movs	r3, #16
 8008336:	6063      	str	r3, [r4, #4]
 8008338:	6893      	ldr	r3, [r2, #8]
 800833a:	3310      	adds	r3, #16
 800833c:	6093      	str	r3, [r2, #8]
 800833e:	6853      	ldr	r3, [r2, #4]
 8008340:	3301      	adds	r3, #1
 8008342:	6053      	str	r3, [r2, #4]
 8008344:	2b07      	cmp	r3, #7
 8008346:	dc01      	bgt.n	800834c <_svfprintf_r+0xddc>
 8008348:	3408      	adds	r4, #8
 800834a:	e006      	b.n	800835a <_svfprintf_r+0xdea>
 800834c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800834e:	1c39      	adds	r1, r7, #0
 8008350:	f7ff f886 	bl	8007460 <__sprint_r>
 8008354:	2800      	cmp	r0, #0
 8008356:	d135      	bne.n	80083c4 <_svfprintf_r+0xe54>
 8008358:	ac1b      	add	r4, sp, #108	; 0x6c
 800835a:	3e10      	subs	r6, #16
 800835c:	aa35      	add	r2, sp, #212	; 0xd4
 800835e:	4b21      	ldr	r3, [pc, #132]	; (80083e4 <_svfprintf_r+0xe74>)
 8008360:	2e10      	cmp	r6, #16
 8008362:	dce6      	bgt.n	8008332 <_svfprintf_r+0xdc2>
 8008364:	6066      	str	r6, [r4, #4]
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	6893      	ldr	r3, [r2, #8]
 800836a:	18f6      	adds	r6, r6, r3
 800836c:	6853      	ldr	r3, [r2, #4]
 800836e:	6096      	str	r6, [r2, #8]
 8008370:	3301      	adds	r3, #1
 8008372:	6053      	str	r3, [r2, #4]
 8008374:	2b07      	cmp	r3, #7
 8008376:	dd05      	ble.n	8008384 <_svfprintf_r+0xe14>
 8008378:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800837a:	1c39      	adds	r1, r7, #0
 800837c:	f7ff f870 	bl	8007460 <__sprint_r>
 8008380:	2800      	cmp	r0, #0
 8008382:	d11f      	bne.n	80083c4 <_svfprintf_r+0xe54>
 8008384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008386:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008388:	4283      	cmp	r3, r0
 800838a:	da00      	bge.n	800838e <_svfprintf_r+0xe1e>
 800838c:	1c03      	adds	r3, r0, #0
 800838e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008390:	aa35      	add	r2, sp, #212	; 0xd4
 8008392:	18c9      	adds	r1, r1, r3
 8008394:	6893      	ldr	r3, [r2, #8]
 8008396:	9111      	str	r1, [sp, #68]	; 0x44
 8008398:	2b00      	cmp	r3, #0
 800839a:	d005      	beq.n	80083a8 <_svfprintf_r+0xe38>
 800839c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800839e:	1c39      	adds	r1, r7, #0
 80083a0:	f7ff f85e 	bl	8007460 <__sprint_r>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d10d      	bne.n	80083c4 <_svfprintf_r+0xe54>
 80083a8:	2200      	movs	r2, #0
 80083aa:	ab35      	add	r3, sp, #212	; 0xd4
 80083ac:	605a      	str	r2, [r3, #4]
 80083ae:	ac1b      	add	r4, sp, #108	; 0x6c
 80083b0:	f7ff f90d 	bl	80075ce <_svfprintf_r+0x5e>
 80083b4:	aa35      	add	r2, sp, #212	; 0xd4
 80083b6:	6893      	ldr	r3, [r2, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <_svfprintf_r+0xe54>
 80083bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80083be:	1c39      	adds	r1, r7, #0
 80083c0:	f7ff f84e 	bl	8007460 <__sprint_r>
 80083c4:	89bb      	ldrh	r3, [r7, #12]
 80083c6:	065a      	lsls	r2, r3, #25
 80083c8:	d502      	bpl.n	80083d0 <_svfprintf_r+0xe60>
 80083ca:	2301      	movs	r3, #1
 80083cc:	425b      	negs	r3, r3
 80083ce:	9311      	str	r3, [sp, #68]	; 0x44
 80083d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80083d2:	b043      	add	sp, #268	; 0x10c
 80083d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083d6:	46c0      	nop			; (mov r8, r8)
	...
 80083e0:	0800c0e4 	.word	0x0800c0e4
 80083e4:	0800c128 	.word	0x0800c128

080083e8 <__sprint_r>:
 80083e8:	b510      	push	{r4, lr}
 80083ea:	6893      	ldr	r3, [r2, #8]
 80083ec:	1c14      	adds	r4, r2, #0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d102      	bne.n	80083f8 <__sprint_r+0x10>
 80083f2:	6053      	str	r3, [r2, #4]
 80083f4:	2000      	movs	r0, #0
 80083f6:	e004      	b.n	8008402 <__sprint_r+0x1a>
 80083f8:	f001 fcce 	bl	8009d98 <__sfvwrite_r>
 80083fc:	2300      	movs	r3, #0
 80083fe:	60a3      	str	r3, [r4, #8]
 8008400:	6063      	str	r3, [r4, #4]
 8008402:	bd10      	pop	{r4, pc}

08008404 <_vfiprintf_r>:
 8008404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008406:	4cb6      	ldr	r4, [pc, #728]	; (80086e0 <_vfiprintf_r+0x2dc>)
 8008408:	1c0e      	adds	r6, r1, #0
 800840a:	44a5      	add	sp, r4
 800840c:	9005      	str	r0, [sp, #20]
 800840e:	1c17      	adds	r7, r2, #0
 8008410:	1c1c      	adds	r4, r3, #0
 8008412:	2800      	cmp	r0, #0
 8008414:	d004      	beq.n	8008420 <_vfiprintf_r+0x1c>
 8008416:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <_vfiprintf_r+0x1c>
 800841c:	f001 fb8c 	bl	8009b38 <__sinit>
 8008420:	2380      	movs	r3, #128	; 0x80
 8008422:	89b2      	ldrh	r2, [r6, #12]
 8008424:	019b      	lsls	r3, r3, #6
 8008426:	421a      	tst	r2, r3
 8008428:	d105      	bne.n	8008436 <_vfiprintf_r+0x32>
 800842a:	4313      	orrs	r3, r2
 800842c:	81b3      	strh	r3, [r6, #12]
 800842e:	6e72      	ldr	r2, [r6, #100]	; 0x64
 8008430:	4bac      	ldr	r3, [pc, #688]	; (80086e4 <_vfiprintf_r+0x2e0>)
 8008432:	4013      	ands	r3, r2
 8008434:	6673      	str	r3, [r6, #100]	; 0x64
 8008436:	89b3      	ldrh	r3, [r6, #12]
 8008438:	0718      	lsls	r0, r3, #28
 800843a:	d502      	bpl.n	8008442 <_vfiprintf_r+0x3e>
 800843c:	6933      	ldr	r3, [r6, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d106      	bne.n	8008450 <_vfiprintf_r+0x4c>
 8008442:	9805      	ldr	r0, [sp, #20]
 8008444:	1c31      	adds	r1, r6, #0
 8008446:	f000 fbdd 	bl	8008c04 <__swsetup_r>
 800844a:	2800      	cmp	r0, #0
 800844c:	d000      	beq.n	8008450 <_vfiprintf_r+0x4c>
 800844e:	e3cd      	b.n	8008bec <_vfiprintf_r+0x7e8>
 8008450:	89b3      	ldrh	r3, [r6, #12]
 8008452:	221a      	movs	r2, #26
 8008454:	401a      	ands	r2, r3
 8008456:	2a0a      	cmp	r2, #10
 8008458:	d132      	bne.n	80084c0 <_vfiprintf_r+0xbc>
 800845a:	210e      	movs	r1, #14
 800845c:	5e72      	ldrsh	r2, [r6, r1]
 800845e:	2a00      	cmp	r2, #0
 8008460:	db2e      	blt.n	80084c0 <_vfiprintf_r+0xbc>
 8008462:	2202      	movs	r2, #2
 8008464:	ad4e      	add	r5, sp, #312	; 0x138
 8008466:	4393      	bics	r3, r2
 8008468:	81ab      	strh	r3, [r5, #12]
 800846a:	89f3      	ldrh	r3, [r6, #14]
 800846c:	9805      	ldr	r0, [sp, #20]
 800846e:	81eb      	strh	r3, [r5, #14]
 8008470:	69f3      	ldr	r3, [r6, #28]
 8008472:	1c29      	adds	r1, r5, #0
 8008474:	61eb      	str	r3, [r5, #28]
 8008476:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008478:	1c3a      	adds	r2, r7, #0
 800847a:	626b      	str	r3, [r5, #36]	; 0x24
 800847c:	ab0e      	add	r3, sp, #56	; 0x38
 800847e:	934e      	str	r3, [sp, #312]	; 0x138
 8008480:	612b      	str	r3, [r5, #16]
 8008482:	2380      	movs	r3, #128	; 0x80
 8008484:	005b      	lsls	r3, r3, #1
 8008486:	60ab      	str	r3, [r5, #8]
 8008488:	616b      	str	r3, [r5, #20]
 800848a:	2300      	movs	r3, #0
 800848c:	61ab      	str	r3, [r5, #24]
 800848e:	1c23      	adds	r3, r4, #0
 8008490:	f7ff ffb8 	bl	8008404 <_vfiprintf_r>
 8008494:	9008      	str	r0, [sp, #32]
 8008496:	2800      	cmp	r0, #0
 8008498:	db08      	blt.n	80084ac <_vfiprintf_r+0xa8>
 800849a:	9805      	ldr	r0, [sp, #20]
 800849c:	1c29      	adds	r1, r5, #0
 800849e:	f001 fa97 	bl	80099d0 <_fflush_r>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d002      	beq.n	80084ac <_vfiprintf_r+0xa8>
 80084a6:	2201      	movs	r2, #1
 80084a8:	4252      	negs	r2, r2
 80084aa:	9208      	str	r2, [sp, #32]
 80084ac:	ab4e      	add	r3, sp, #312	; 0x138
 80084ae:	899b      	ldrh	r3, [r3, #12]
 80084b0:	0658      	lsls	r0, r3, #25
 80084b2:	d400      	bmi.n	80084b6 <_vfiprintf_r+0xb2>
 80084b4:	e39d      	b.n	8008bf2 <_vfiprintf_r+0x7ee>
 80084b6:	89b2      	ldrh	r2, [r6, #12]
 80084b8:	2340      	movs	r3, #64	; 0x40
 80084ba:	4313      	orrs	r3, r2
 80084bc:	81b3      	strh	r3, [r6, #12]
 80084be:	e398      	b.n	8008bf2 <_vfiprintf_r+0x7ee>
 80084c0:	2200      	movs	r2, #0
 80084c2:	ab82      	add	r3, sp, #520	; 0x208
 80084c4:	ad68      	add	r5, sp, #416	; 0x1a0
 80084c6:	9582      	str	r5, [sp, #520]	; 0x208
 80084c8:	609a      	str	r2, [r3, #8]
 80084ca:	605a      	str	r2, [r3, #4]
 80084cc:	9707      	str	r7, [sp, #28]
 80084ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80084d0:	9208      	str	r2, [sp, #32]
 80084d2:	9603      	str	r6, [sp, #12]
 80084d4:	9e07      	ldr	r6, [sp, #28]
 80084d6:	e000      	b.n	80084da <_vfiprintf_r+0xd6>
 80084d8:	3601      	adds	r6, #1
 80084da:	7833      	ldrb	r3, [r6, #0]
 80084dc:	2b25      	cmp	r3, #37	; 0x25
 80084de:	d001      	beq.n	80084e4 <_vfiprintf_r+0xe0>
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1f9      	bne.n	80084d8 <_vfiprintf_r+0xd4>
 80084e4:	9907      	ldr	r1, [sp, #28]
 80084e6:	1a77      	subs	r7, r6, r1
 80084e8:	2f00      	cmp	r7, #0
 80084ea:	d017      	beq.n	800851c <_vfiprintf_r+0x118>
 80084ec:	606f      	str	r7, [r5, #4]
 80084ee:	aa82      	add	r2, sp, #520	; 0x208
 80084f0:	6893      	ldr	r3, [r2, #8]
 80084f2:	6029      	str	r1, [r5, #0]
 80084f4:	18fb      	adds	r3, r7, r3
 80084f6:	6093      	str	r3, [r2, #8]
 80084f8:	6853      	ldr	r3, [r2, #4]
 80084fa:	3301      	adds	r3, #1
 80084fc:	6053      	str	r3, [r2, #4]
 80084fe:	2b07      	cmp	r3, #7
 8008500:	dc01      	bgt.n	8008506 <_vfiprintf_r+0x102>
 8008502:	3508      	adds	r5, #8
 8008504:	e007      	b.n	8008516 <_vfiprintf_r+0x112>
 8008506:	9805      	ldr	r0, [sp, #20]
 8008508:	9903      	ldr	r1, [sp, #12]
 800850a:	f7ff ff6d 	bl	80083e8 <__sprint_r>
 800850e:	2800      	cmp	r0, #0
 8008510:	d000      	beq.n	8008514 <_vfiprintf_r+0x110>
 8008512:	e367      	b.n	8008be4 <_vfiprintf_r+0x7e0>
 8008514:	ad68      	add	r5, sp, #416	; 0x1a0
 8008516:	9a08      	ldr	r2, [sp, #32]
 8008518:	19d2      	adds	r2, r2, r7
 800851a:	9208      	str	r2, [sp, #32]
 800851c:	7833      	ldrb	r3, [r6, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d100      	bne.n	8008524 <_vfiprintf_r+0x120>
 8008522:	e355      	b.n	8008bd0 <_vfiprintf_r+0x7cc>
 8008524:	4b70      	ldr	r3, [pc, #448]	; (80086e8 <_vfiprintf_r+0x2e4>)
 8008526:	2200      	movs	r2, #0
 8008528:	446b      	add	r3, sp
 800852a:	3601      	adds	r6, #1
 800852c:	701a      	strb	r2, [r3, #0]
 800852e:	2301      	movs	r3, #1
 8008530:	9607      	str	r6, [sp, #28]
 8008532:	425b      	negs	r3, r3
 8008534:	9206      	str	r2, [sp, #24]
 8008536:	9302      	str	r3, [sp, #8]
 8008538:	2600      	movs	r6, #0
 800853a:	9a07      	ldr	r2, [sp, #28]
 800853c:	1c19      	adds	r1, r3, #0
 800853e:	2000      	movs	r0, #0
 8008540:	e001      	b.n	8008546 <_vfiprintf_r+0x142>
 8008542:	1c23      	adds	r3, r4, #0
 8008544:	1c1c      	adds	r4, r3, #0
 8008546:	7813      	ldrb	r3, [r2, #0]
 8008548:	3201      	adds	r2, #1
 800854a:	2b63      	cmp	r3, #99	; 0x63
 800854c:	d100      	bne.n	8008550 <_vfiprintf_r+0x14c>
 800854e:	e0ad      	b.n	80086ac <_vfiprintf_r+0x2a8>
 8008550:	2b63      	cmp	r3, #99	; 0x63
 8008552:	dc2c      	bgt.n	80085ae <_vfiprintf_r+0x1aa>
 8008554:	2b39      	cmp	r3, #57	; 0x39
 8008556:	dc17      	bgt.n	8008588 <_vfiprintf_r+0x184>
 8008558:	2b31      	cmp	r3, #49	; 0x31
 800855a:	db00      	blt.n	800855e <_vfiprintf_r+0x15a>
 800855c:	e093      	b.n	8008686 <_vfiprintf_r+0x282>
 800855e:	2b2b      	cmp	r3, #43	; 0x2b
 8008560:	d06d      	beq.n	800863e <_vfiprintf_r+0x23a>
 8008562:	2b2b      	cmp	r3, #43	; 0x2b
 8008564:	dc07      	bgt.n	8008576 <_vfiprintf_r+0x172>
 8008566:	2b23      	cmp	r3, #35	; 0x23
 8008568:	d05f      	beq.n	800862a <_vfiprintf_r+0x226>
 800856a:	2b2a      	cmp	r3, #42	; 0x2a
 800856c:	d05f      	beq.n	800862e <_vfiprintf_r+0x22a>
 800856e:	2b20      	cmp	r3, #32
 8008570:	d000      	beq.n	8008574 <_vfiprintf_r+0x170>
 8008572:	e1bc      	b.n	80088ee <_vfiprintf_r+0x4ea>
 8008574:	e04f      	b.n	8008616 <_vfiprintf_r+0x212>
 8008576:	2b2e      	cmp	r3, #46	; 0x2e
 8008578:	d065      	beq.n	8008646 <_vfiprintf_r+0x242>
 800857a:	2b30      	cmp	r3, #48	; 0x30
 800857c:	d100      	bne.n	8008580 <_vfiprintf_r+0x17c>
 800857e:	e080      	b.n	8008682 <_vfiprintf_r+0x27e>
 8008580:	2b2d      	cmp	r3, #45	; 0x2d
 8008582:	d000      	beq.n	8008586 <_vfiprintf_r+0x182>
 8008584:	e1b3      	b.n	80088ee <_vfiprintf_r+0x4ea>
 8008586:	e044      	b.n	8008612 <_vfiprintf_r+0x20e>
 8008588:	9207      	str	r2, [sp, #28]
 800858a:	9102      	str	r1, [sp, #8]
 800858c:	9006      	str	r0, [sp, #24]
 800858e:	2b4f      	cmp	r3, #79	; 0x4f
 8008590:	d100      	bne.n	8008594 <_vfiprintf_r+0x190>
 8008592:	e0d1      	b.n	8008738 <_vfiprintf_r+0x334>
 8008594:	2b4f      	cmp	r3, #79	; 0x4f
 8008596:	dc03      	bgt.n	80085a0 <_vfiprintf_r+0x19c>
 8008598:	2b44      	cmp	r3, #68	; 0x44
 800859a:	d000      	beq.n	800859e <_vfiprintf_r+0x19a>
 800859c:	e1a9      	b.n	80088f2 <_vfiprintf_r+0x4ee>
 800859e:	e093      	b.n	80086c8 <_vfiprintf_r+0x2c4>
 80085a0:	2b55      	cmp	r3, #85	; 0x55
 80085a2:	d100      	bne.n	80085a6 <_vfiprintf_r+0x1a2>
 80085a4:	e111      	b.n	80087ca <_vfiprintf_r+0x3c6>
 80085a6:	2b58      	cmp	r3, #88	; 0x58
 80085a8:	d000      	beq.n	80085ac <_vfiprintf_r+0x1a8>
 80085aa:	e1a2      	b.n	80088f2 <_vfiprintf_r+0x4ee>
 80085ac:	e02e      	b.n	800860c <_vfiprintf_r+0x208>
 80085ae:	2b6f      	cmp	r3, #111	; 0x6f
 80085b0:	d100      	bne.n	80085b4 <_vfiprintf_r+0x1b0>
 80085b2:	e0c4      	b.n	800873e <_vfiprintf_r+0x33a>
 80085b4:	2b6f      	cmp	r3, #111	; 0x6f
 80085b6:	dc13      	bgt.n	80085e0 <_vfiprintf_r+0x1dc>
 80085b8:	2b69      	cmp	r3, #105	; 0x69
 80085ba:	d100      	bne.n	80085be <_vfiprintf_r+0x1ba>
 80085bc:	e087      	b.n	80086ce <_vfiprintf_r+0x2ca>
 80085be:	2b69      	cmp	r3, #105	; 0x69
 80085c0:	dc06      	bgt.n	80085d0 <_vfiprintf_r+0x1cc>
 80085c2:	2b64      	cmp	r3, #100	; 0x64
 80085c4:	d100      	bne.n	80085c8 <_vfiprintf_r+0x1c4>
 80085c6:	e082      	b.n	80086ce <_vfiprintf_r+0x2ca>
 80085c8:	2b68      	cmp	r3, #104	; 0x68
 80085ca:	d000      	beq.n	80085ce <_vfiprintf_r+0x1ca>
 80085cc:	e18f      	b.n	80088ee <_vfiprintf_r+0x4ea>
 80085ce:	e068      	b.n	80086a2 <_vfiprintf_r+0x29e>
 80085d0:	2b6c      	cmp	r3, #108	; 0x6c
 80085d2:	d068      	beq.n	80086a6 <_vfiprintf_r+0x2a2>
 80085d4:	9207      	str	r2, [sp, #28]
 80085d6:	9006      	str	r0, [sp, #24]
 80085d8:	2b6e      	cmp	r3, #110	; 0x6e
 80085da:	d000      	beq.n	80085de <_vfiprintf_r+0x1da>
 80085dc:	e189      	b.n	80088f2 <_vfiprintf_r+0x4ee>
 80085de:	e096      	b.n	800870e <_vfiprintf_r+0x30a>
 80085e0:	2b73      	cmp	r3, #115	; 0x73
 80085e2:	d100      	bne.n	80085e6 <_vfiprintf_r+0x1e2>
 80085e4:	e0ca      	b.n	800877c <_vfiprintf_r+0x378>
 80085e6:	2b73      	cmp	r3, #115	; 0x73
 80085e8:	dc06      	bgt.n	80085f8 <_vfiprintf_r+0x1f4>
 80085ea:	2b70      	cmp	r3, #112	; 0x70
 80085ec:	d100      	bne.n	80085f0 <_vfiprintf_r+0x1ec>
 80085ee:	e0b6      	b.n	800875e <_vfiprintf_r+0x35a>
 80085f0:	2b71      	cmp	r3, #113	; 0x71
 80085f2:	d000      	beq.n	80085f6 <_vfiprintf_r+0x1f2>
 80085f4:	e17b      	b.n	80088ee <_vfiprintf_r+0x4ea>
 80085f6:	e056      	b.n	80086a6 <_vfiprintf_r+0x2a2>
 80085f8:	9207      	str	r2, [sp, #28]
 80085fa:	9102      	str	r1, [sp, #8]
 80085fc:	9006      	str	r0, [sp, #24]
 80085fe:	2b75      	cmp	r3, #117	; 0x75
 8008600:	d100      	bne.n	8008604 <_vfiprintf_r+0x200>
 8008602:	e0e4      	b.n	80087ce <_vfiprintf_r+0x3ca>
 8008604:	2b78      	cmp	r3, #120	; 0x78
 8008606:	d000      	beq.n	800860a <_vfiprintf_r+0x206>
 8008608:	e173      	b.n	80088f2 <_vfiprintf_r+0x4ee>
 800860a:	e0ed      	b.n	80087e8 <_vfiprintf_r+0x3e4>
 800860c:	4837      	ldr	r0, [pc, #220]	; (80086ec <_vfiprintf_r+0x2e8>)
 800860e:	900b      	str	r0, [sp, #44]	; 0x2c
 8008610:	e0ec      	b.n	80087ec <_vfiprintf_r+0x3e8>
 8008612:	1c23      	adds	r3, r4, #0
 8008614:	e010      	b.n	8008638 <_vfiprintf_r+0x234>
 8008616:	4b34      	ldr	r3, [pc, #208]	; (80086e8 <_vfiprintf_r+0x2e4>)
 8008618:	446b      	add	r3, sp
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d190      	bne.n	8008542 <_vfiprintf_r+0x13e>
 8008620:	4b31      	ldr	r3, [pc, #196]	; (80086e8 <_vfiprintf_r+0x2e4>)
 8008622:	2720      	movs	r7, #32
 8008624:	446b      	add	r3, sp
 8008626:	701f      	strb	r7, [r3, #0]
 8008628:	e78b      	b.n	8008542 <_vfiprintf_r+0x13e>
 800862a:	2301      	movs	r3, #1
 800862c:	e03c      	b.n	80086a8 <_vfiprintf_r+0x2a4>
 800862e:	6820      	ldr	r0, [r4, #0]
 8008630:	1d23      	adds	r3, r4, #4
 8008632:	2800      	cmp	r0, #0
 8008634:	da86      	bge.n	8008544 <_vfiprintf_r+0x140>
 8008636:	4240      	negs	r0, r0
 8008638:	2404      	movs	r4, #4
 800863a:	4326      	orrs	r6, r4
 800863c:	e782      	b.n	8008544 <_vfiprintf_r+0x140>
 800863e:	4f2a      	ldr	r7, [pc, #168]	; (80086e8 <_vfiprintf_r+0x2e4>)
 8008640:	446f      	add	r7, sp
 8008642:	703b      	strb	r3, [r7, #0]
 8008644:	e77d      	b.n	8008542 <_vfiprintf_r+0x13e>
 8008646:	7813      	ldrb	r3, [r2, #0]
 8008648:	3201      	adds	r2, #1
 800864a:	2b2a      	cmp	r3, #42	; 0x2a
 800864c:	d001      	beq.n	8008652 <_vfiprintf_r+0x24e>
 800864e:	2100      	movs	r1, #0
 8008650:	e00d      	b.n	800866e <_vfiprintf_r+0x26a>
 8008652:	6821      	ldr	r1, [r4, #0]
 8008654:	1d23      	adds	r3, r4, #4
 8008656:	2900      	cmp	r1, #0
 8008658:	db00      	blt.n	800865c <_vfiprintf_r+0x258>
 800865a:	e773      	b.n	8008544 <_vfiprintf_r+0x140>
 800865c:	2101      	movs	r1, #1
 800865e:	4249      	negs	r1, r1
 8008660:	e770      	b.n	8008544 <_vfiprintf_r+0x140>
 8008662:	008b      	lsls	r3, r1, #2
 8008664:	1859      	adds	r1, r3, r1
 8008666:	0049      	lsls	r1, r1, #1
 8008668:	7813      	ldrb	r3, [r2, #0]
 800866a:	19c9      	adds	r1, r1, r7
 800866c:	3201      	adds	r2, #1
 800866e:	1c1f      	adds	r7, r3, #0
 8008670:	3f30      	subs	r7, #48	; 0x30
 8008672:	2f09      	cmp	r7, #9
 8008674:	d9f5      	bls.n	8008662 <_vfiprintf_r+0x25e>
 8008676:	2900      	cmp	r1, #0
 8008678:	db00      	blt.n	800867c <_vfiprintf_r+0x278>
 800867a:	e766      	b.n	800854a <_vfiprintf_r+0x146>
 800867c:	2101      	movs	r1, #1
 800867e:	4249      	negs	r1, r1
 8008680:	e763      	b.n	800854a <_vfiprintf_r+0x146>
 8008682:	2380      	movs	r3, #128	; 0x80
 8008684:	e010      	b.n	80086a8 <_vfiprintf_r+0x2a4>
 8008686:	2000      	movs	r0, #0
 8008688:	0087      	lsls	r7, r0, #2
 800868a:	183f      	adds	r7, r7, r0
 800868c:	1c18      	adds	r0, r3, #0
 800868e:	7813      	ldrb	r3, [r2, #0]
 8008690:	007f      	lsls	r7, r7, #1
 8008692:	3830      	subs	r0, #48	; 0x30
 8008694:	19c0      	adds	r0, r0, r7
 8008696:	1c1f      	adds	r7, r3, #0
 8008698:	3f30      	subs	r7, #48	; 0x30
 800869a:	3201      	adds	r2, #1
 800869c:	2f09      	cmp	r7, #9
 800869e:	d9f3      	bls.n	8008688 <_vfiprintf_r+0x284>
 80086a0:	e753      	b.n	800854a <_vfiprintf_r+0x146>
 80086a2:	2340      	movs	r3, #64	; 0x40
 80086a4:	e000      	b.n	80086a8 <_vfiprintf_r+0x2a4>
 80086a6:	2310      	movs	r3, #16
 80086a8:	431e      	orrs	r6, r3
 80086aa:	e74a      	b.n	8008542 <_vfiprintf_r+0x13e>
 80086ac:	9207      	str	r2, [sp, #28]
 80086ae:	6822      	ldr	r2, [r4, #0]
 80086b0:	ab78      	add	r3, sp, #480	; 0x1e0
 80086b2:	701a      	strb	r2, [r3, #0]
 80086b4:	4a0c      	ldr	r2, [pc, #48]	; (80086e8 <_vfiprintf_r+0x2e4>)
 80086b6:	2100      	movs	r1, #0
 80086b8:	446a      	add	r2, sp
 80086ba:	9006      	str	r0, [sp, #24]
 80086bc:	7011      	strb	r1, [r2, #0]
 80086be:	3404      	adds	r4, #4
 80086c0:	2701      	movs	r7, #1
 80086c2:	9102      	str	r1, [sp, #8]
 80086c4:	9304      	str	r3, [sp, #16]
 80086c6:	e125      	b.n	8008914 <_vfiprintf_r+0x510>
 80086c8:	2310      	movs	r3, #16
 80086ca:	431e      	orrs	r6, r3
 80086cc:	e002      	b.n	80086d4 <_vfiprintf_r+0x2d0>
 80086ce:	9207      	str	r2, [sp, #28]
 80086d0:	9102      	str	r1, [sp, #8]
 80086d2:	9006      	str	r0, [sp, #24]
 80086d4:	06f1      	lsls	r1, r6, #27
 80086d6:	d50b      	bpl.n	80086f0 <_vfiprintf_r+0x2ec>
 80086d8:	6827      	ldr	r7, [r4, #0]
 80086da:	3404      	adds	r4, #4
 80086dc:	e00e      	b.n	80086fc <_vfiprintf_r+0x2f8>
 80086de:	46c0      	nop			; (mov r8, r8)
 80086e0:	fffffde4 	.word	0xfffffde4
 80086e4:	ffffdfff 	.word	0xffffdfff
 80086e8:	00000217 	.word	0x00000217
 80086ec:	0800c0f4 	.word	0x0800c0f4
 80086f0:	1d22      	adds	r2, r4, #4
 80086f2:	6827      	ldr	r7, [r4, #0]
 80086f4:	0673      	lsls	r3, r6, #25
 80086f6:	d500      	bpl.n	80086fa <_vfiprintf_r+0x2f6>
 80086f8:	b23f      	sxth	r7, r7
 80086fa:	1c14      	adds	r4, r2, #0
 80086fc:	2f00      	cmp	r7, #0
 80086fe:	da04      	bge.n	800870a <_vfiprintf_r+0x306>
 8008700:	4bb7      	ldr	r3, [pc, #732]	; (80089e0 <_vfiprintf_r+0x5dc>)
 8008702:	222d      	movs	r2, #45	; 0x2d
 8008704:	446b      	add	r3, sp
 8008706:	427f      	negs	r7, r7
 8008708:	701a      	strb	r2, [r3, #0]
 800870a:	2301      	movs	r3, #1
 800870c:	e089      	b.n	8008822 <_vfiprintf_r+0x41e>
 800870e:	06f0      	lsls	r0, r6, #27
 8008710:	d504      	bpl.n	800871c <_vfiprintf_r+0x318>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	9908      	ldr	r1, [sp, #32]
 8008716:	3404      	adds	r4, #4
 8008718:	6019      	str	r1, [r3, #0]
 800871a:	e6db      	b.n	80084d4 <_vfiprintf_r+0xd0>
 800871c:	1d22      	adds	r2, r4, #4
 800871e:	0673      	lsls	r3, r6, #25
 8008720:	d505      	bpl.n	800872e <_vfiprintf_r+0x32a>
 8008722:	4668      	mov	r0, sp
 8008724:	2120      	movs	r1, #32
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	5a08      	ldrh	r0, [r1, r0]
 800872a:	8018      	strh	r0, [r3, #0]
 800872c:	e002      	b.n	8008734 <_vfiprintf_r+0x330>
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	9908      	ldr	r1, [sp, #32]
 8008732:	6019      	str	r1, [r3, #0]
 8008734:	1c14      	adds	r4, r2, #0
 8008736:	e6cd      	b.n	80084d4 <_vfiprintf_r+0xd0>
 8008738:	2310      	movs	r3, #16
 800873a:	431e      	orrs	r6, r3
 800873c:	e002      	b.n	8008744 <_vfiprintf_r+0x340>
 800873e:	9207      	str	r2, [sp, #28]
 8008740:	9102      	str	r1, [sp, #8]
 8008742:	9006      	str	r0, [sp, #24]
 8008744:	06f2      	lsls	r2, r6, #27
 8008746:	d502      	bpl.n	800874e <_vfiprintf_r+0x34a>
 8008748:	6827      	ldr	r7, [r4, #0]
 800874a:	3404      	adds	r4, #4
 800874c:	e005      	b.n	800875a <_vfiprintf_r+0x356>
 800874e:	1d22      	adds	r2, r4, #4
 8008750:	6827      	ldr	r7, [r4, #0]
 8008752:	0673      	lsls	r3, r6, #25
 8008754:	d500      	bpl.n	8008758 <_vfiprintf_r+0x354>
 8008756:	b2bf      	uxth	r7, r7
 8008758:	1c14      	adds	r4, r2, #0
 800875a:	2300      	movs	r3, #0
 800875c:	e05d      	b.n	800881a <_vfiprintf_r+0x416>
 800875e:	2302      	movs	r3, #2
 8008760:	9207      	str	r2, [sp, #28]
 8008762:	9006      	str	r0, [sp, #24]
 8008764:	2230      	movs	r2, #48	; 0x30
 8008766:	431e      	orrs	r6, r3
 8008768:	489e      	ldr	r0, [pc, #632]	; (80089e4 <_vfiprintf_r+0x5e0>)
 800876a:	ab85      	add	r3, sp, #532	; 0x214
 800876c:	6827      	ldr	r7, [r4, #0]
 800876e:	701a      	strb	r2, [r3, #0]
 8008770:	2278      	movs	r2, #120	; 0x78
 8008772:	9102      	str	r1, [sp, #8]
 8008774:	705a      	strb	r2, [r3, #1]
 8008776:	3404      	adds	r4, #4
 8008778:	900b      	str	r0, [sp, #44]	; 0x2c
 800877a:	e046      	b.n	800880a <_vfiprintf_r+0x406>
 800877c:	4b98      	ldr	r3, [pc, #608]	; (80089e0 <_vfiprintf_r+0x5dc>)
 800877e:	9207      	str	r2, [sp, #28]
 8008780:	446b      	add	r3, sp
 8008782:	2200      	movs	r2, #0
 8008784:	9102      	str	r1, [sp, #8]
 8008786:	701a      	strb	r2, [r3, #0]
 8008788:	1d21      	adds	r1, r4, #4
 800878a:	9a02      	ldr	r2, [sp, #8]
 800878c:	6824      	ldr	r4, [r4, #0]
 800878e:	9006      	str	r0, [sp, #24]
 8008790:	9109      	str	r1, [sp, #36]	; 0x24
 8008792:	9404      	str	r4, [sp, #16]
 8008794:	2a00      	cmp	r2, #0
 8008796:	db10      	blt.n	80087ba <_vfiprintf_r+0x3b6>
 8008798:	1c20      	adds	r0, r4, #0
 800879a:	2100      	movs	r1, #0
 800879c:	f7fe fb08 	bl	8006db0 <memchr>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d100      	bne.n	80087a6 <_vfiprintf_r+0x3a2>
 80087a4:	e0b2      	b.n	800890c <_vfiprintf_r+0x508>
 80087a6:	9b04      	ldr	r3, [sp, #16]
 80087a8:	1ac7      	subs	r7, r0, r3
 80087aa:	9802      	ldr	r0, [sp, #8]
 80087ac:	4287      	cmp	r7, r0
 80087ae:	dd00      	ble.n	80087b2 <_vfiprintf_r+0x3ae>
 80087b0:	e0ac      	b.n	800890c <_vfiprintf_r+0x508>
 80087b2:	2100      	movs	r1, #0
 80087b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80087b6:	9102      	str	r1, [sp, #8]
 80087b8:	e0ac      	b.n	8008914 <_vfiprintf_r+0x510>
 80087ba:	9804      	ldr	r0, [sp, #16]
 80087bc:	f7fe fd7e 	bl	80072bc <strlen>
 80087c0:	2200      	movs	r2, #0
 80087c2:	1c07      	adds	r7, r0, #0
 80087c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80087c6:	9202      	str	r2, [sp, #8]
 80087c8:	e0a4      	b.n	8008914 <_vfiprintf_r+0x510>
 80087ca:	2310      	movs	r3, #16
 80087cc:	431e      	orrs	r6, r3
 80087ce:	06f3      	lsls	r3, r6, #27
 80087d0:	d502      	bpl.n	80087d8 <_vfiprintf_r+0x3d4>
 80087d2:	6827      	ldr	r7, [r4, #0]
 80087d4:	3404      	adds	r4, #4
 80087d6:	e005      	b.n	80087e4 <_vfiprintf_r+0x3e0>
 80087d8:	1d22      	adds	r2, r4, #4
 80087da:	6827      	ldr	r7, [r4, #0]
 80087dc:	0670      	lsls	r0, r6, #25
 80087de:	d500      	bpl.n	80087e2 <_vfiprintf_r+0x3de>
 80087e0:	b2bf      	uxth	r7, r7
 80087e2:	1c14      	adds	r4, r2, #0
 80087e4:	2301      	movs	r3, #1
 80087e6:	e018      	b.n	800881a <_vfiprintf_r+0x416>
 80087e8:	497e      	ldr	r1, [pc, #504]	; (80089e4 <_vfiprintf_r+0x5e0>)
 80087ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80087ec:	06f2      	lsls	r2, r6, #27
 80087ee:	d502      	bpl.n	80087f6 <_vfiprintf_r+0x3f2>
 80087f0:	6827      	ldr	r7, [r4, #0]
 80087f2:	3404      	adds	r4, #4
 80087f4:	e005      	b.n	8008802 <_vfiprintf_r+0x3fe>
 80087f6:	1d22      	adds	r2, r4, #4
 80087f8:	6827      	ldr	r7, [r4, #0]
 80087fa:	0670      	lsls	r0, r6, #25
 80087fc:	d500      	bpl.n	8008800 <_vfiprintf_r+0x3fc>
 80087fe:	b2bf      	uxth	r7, r7
 8008800:	1c14      	adds	r4, r2, #0
 8008802:	2f00      	cmp	r7, #0
 8008804:	d001      	beq.n	800880a <_vfiprintf_r+0x406>
 8008806:	07f1      	lsls	r1, r6, #31
 8008808:	d401      	bmi.n	800880e <_vfiprintf_r+0x40a>
 800880a:	2302      	movs	r3, #2
 800880c:	e005      	b.n	800881a <_vfiprintf_r+0x416>
 800880e:	aa85      	add	r2, sp, #532	; 0x214
 8008810:	2130      	movs	r1, #48	; 0x30
 8008812:	7053      	strb	r3, [r2, #1]
 8008814:	2302      	movs	r3, #2
 8008816:	7011      	strb	r1, [r2, #0]
 8008818:	431e      	orrs	r6, r3
 800881a:	4a71      	ldr	r2, [pc, #452]	; (80089e0 <_vfiprintf_r+0x5dc>)
 800881c:	2100      	movs	r1, #0
 800881e:	446a      	add	r2, sp
 8008820:	7011      	strb	r1, [r2, #0]
 8008822:	9a02      	ldr	r2, [sp, #8]
 8008824:	2a00      	cmp	r2, #0
 8008826:	db01      	blt.n	800882c <_vfiprintf_r+0x428>
 8008828:	2280      	movs	r2, #128	; 0x80
 800882a:	4396      	bics	r6, r2
 800882c:	2082      	movs	r0, #130	; 0x82
 800882e:	0080      	lsls	r0, r0, #2
 8008830:	9902      	ldr	r1, [sp, #8]
 8008832:	4468      	add	r0, sp
 8008834:	9001      	str	r0, [sp, #4]
 8008836:	2900      	cmp	r1, #0
 8008838:	d101      	bne.n	800883e <_vfiprintf_r+0x43a>
 800883a:	2f00      	cmp	r7, #0
 800883c:	d044      	beq.n	80088c8 <_vfiprintf_r+0x4c4>
 800883e:	2b01      	cmp	r3, #1
 8008840:	d002      	beq.n	8008848 <_vfiprintf_r+0x444>
 8008842:	2b02      	cmp	r3, #2
 8008844:	d105      	bne.n	8008852 <_vfiprintf_r+0x44e>
 8008846:	e02f      	b.n	80088a8 <_vfiprintf_r+0x4a4>
 8008848:	2282      	movs	r2, #130	; 0x82
 800884a:	0092      	lsls	r2, r2, #2
 800884c:	446a      	add	r2, sp
 800884e:	9204      	str	r2, [sp, #16]
 8008850:	e022      	b.n	8008898 <_vfiprintf_r+0x494>
 8008852:	2382      	movs	r3, #130	; 0x82
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	446b      	add	r3, sp
 8008858:	9304      	str	r3, [sp, #16]
 800885a:	9804      	ldr	r0, [sp, #16]
 800885c:	2307      	movs	r3, #7
 800885e:	403b      	ands	r3, r7
 8008860:	3801      	subs	r0, #1
 8008862:	3330      	adds	r3, #48	; 0x30
 8008864:	08ff      	lsrs	r7, r7, #3
 8008866:	9004      	str	r0, [sp, #16]
 8008868:	7003      	strb	r3, [r0, #0]
 800886a:	2f00      	cmp	r7, #0
 800886c:	d1f5      	bne.n	800885a <_vfiprintf_r+0x456>
 800886e:	07f1      	lsls	r1, r6, #31
 8008870:	d539      	bpl.n	80088e6 <_vfiprintf_r+0x4e2>
 8008872:	2b30      	cmp	r3, #48	; 0x30
 8008874:	d037      	beq.n	80088e6 <_vfiprintf_r+0x4e2>
 8008876:	3801      	subs	r0, #1
 8008878:	9004      	str	r0, [sp, #16]
 800887a:	2330      	movs	r3, #48	; 0x30
 800887c:	e02d      	b.n	80088da <_vfiprintf_r+0x4d6>
 800887e:	1c38      	adds	r0, r7, #0
 8008880:	210a      	movs	r1, #10
 8008882:	9304      	str	r3, [sp, #16]
 8008884:	f7f7 fc7a 	bl	800017c <__aeabi_uidivmod>
 8008888:	9a04      	ldr	r2, [sp, #16]
 800888a:	3130      	adds	r1, #48	; 0x30
 800888c:	7011      	strb	r1, [r2, #0]
 800888e:	1c38      	adds	r0, r7, #0
 8008890:	210a      	movs	r1, #10
 8008892:	f7f7 fc2f 	bl	80000f4 <__aeabi_uidiv>
 8008896:	1c07      	adds	r7, r0, #0
 8008898:	9b04      	ldr	r3, [sp, #16]
 800889a:	3b01      	subs	r3, #1
 800889c:	2f09      	cmp	r7, #9
 800889e:	d8ee      	bhi.n	800887e <_vfiprintf_r+0x47a>
 80088a0:	3730      	adds	r7, #48	; 0x30
 80088a2:	9304      	str	r3, [sp, #16]
 80088a4:	701f      	strb	r7, [r3, #0]
 80088a6:	e01e      	b.n	80088e6 <_vfiprintf_r+0x4e2>
 80088a8:	2382      	movs	r3, #130	; 0x82
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	446b      	add	r3, sp
 80088ae:	9304      	str	r3, [sp, #16]
 80088b0:	9804      	ldr	r0, [sp, #16]
 80088b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088b4:	3801      	subs	r0, #1
 80088b6:	230f      	movs	r3, #15
 80088b8:	9004      	str	r0, [sp, #16]
 80088ba:	403b      	ands	r3, r7
 80088bc:	5ccb      	ldrb	r3, [r1, r3]
 80088be:	093f      	lsrs	r7, r7, #4
 80088c0:	7003      	strb	r3, [r0, #0]
 80088c2:	2f00      	cmp	r7, #0
 80088c4:	d1f4      	bne.n	80088b0 <_vfiprintf_r+0x4ac>
 80088c6:	e00e      	b.n	80088e6 <_vfiprintf_r+0x4e2>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d108      	bne.n	80088de <_vfiprintf_r+0x4da>
 80088cc:	07f2      	lsls	r2, r6, #31
 80088ce:	d506      	bpl.n	80088de <_vfiprintf_r+0x4da>
 80088d0:	4b45      	ldr	r3, [pc, #276]	; (80089e8 <_vfiprintf_r+0x5e4>)
 80088d2:	446b      	add	r3, sp
 80088d4:	9304      	str	r3, [sp, #16]
 80088d6:	9804      	ldr	r0, [sp, #16]
 80088d8:	2330      	movs	r3, #48	; 0x30
 80088da:	7003      	strb	r3, [r0, #0]
 80088dc:	e003      	b.n	80088e6 <_vfiprintf_r+0x4e2>
 80088de:	2182      	movs	r1, #130	; 0x82
 80088e0:	0089      	lsls	r1, r1, #2
 80088e2:	4469      	add	r1, sp
 80088e4:	9104      	str	r1, [sp, #16]
 80088e6:	9a01      	ldr	r2, [sp, #4]
 80088e8:	9b04      	ldr	r3, [sp, #16]
 80088ea:	1ad7      	subs	r7, r2, r3
 80088ec:	e012      	b.n	8008914 <_vfiprintf_r+0x510>
 80088ee:	9207      	str	r2, [sp, #28]
 80088f0:	9006      	str	r0, [sp, #24]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d100      	bne.n	80088f8 <_vfiprintf_r+0x4f4>
 80088f6:	e16b      	b.n	8008bd0 <_vfiprintf_r+0x7cc>
 80088f8:	aa78      	add	r2, sp, #480	; 0x1e0
 80088fa:	7013      	strb	r3, [r2, #0]
 80088fc:	4b38      	ldr	r3, [pc, #224]	; (80089e0 <_vfiprintf_r+0x5dc>)
 80088fe:	2100      	movs	r1, #0
 8008900:	446b      	add	r3, sp
 8008902:	7019      	strb	r1, [r3, #0]
 8008904:	2701      	movs	r7, #1
 8008906:	9102      	str	r1, [sp, #8]
 8008908:	9204      	str	r2, [sp, #16]
 800890a:	e003      	b.n	8008914 <_vfiprintf_r+0x510>
 800890c:	2000      	movs	r0, #0
 800890e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008910:	9f02      	ldr	r7, [sp, #8]
 8008912:	9002      	str	r0, [sp, #8]
 8008914:	9902      	ldr	r1, [sp, #8]
 8008916:	9709      	str	r7, [sp, #36]	; 0x24
 8008918:	428f      	cmp	r7, r1
 800891a:	da00      	bge.n	800891e <_vfiprintf_r+0x51a>
 800891c:	9109      	str	r1, [sp, #36]	; 0x24
 800891e:	4b30      	ldr	r3, [pc, #192]	; (80089e0 <_vfiprintf_r+0x5dc>)
 8008920:	446b      	add	r3, sp
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <_vfiprintf_r+0x52a>
 8008928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800892a:	3201      	adds	r2, #1
 800892c:	9209      	str	r2, [sp, #36]	; 0x24
 800892e:	2302      	movs	r3, #2
 8008930:	1c30      	adds	r0, r6, #0
 8008932:	4018      	ands	r0, r3
 8008934:	900d      	str	r0, [sp, #52]	; 0x34
 8008936:	d002      	beq.n	800893e <_vfiprintf_r+0x53a>
 8008938:	9909      	ldr	r1, [sp, #36]	; 0x24
 800893a:	3102      	adds	r1, #2
 800893c:	9109      	str	r1, [sp, #36]	; 0x24
 800893e:	2384      	movs	r3, #132	; 0x84
 8008940:	1c32      	adds	r2, r6, #0
 8008942:	401a      	ands	r2, r3
 8008944:	920c      	str	r2, [sp, #48]	; 0x30
 8008946:	d137      	bne.n	80089b8 <_vfiprintf_r+0x5b4>
 8008948:	9b06      	ldr	r3, [sp, #24]
 800894a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800894c:	1a1b      	subs	r3, r3, r0
 800894e:	930a      	str	r3, [sp, #40]	; 0x28
 8008950:	2b00      	cmp	r3, #0
 8008952:	dc18      	bgt.n	8008986 <_vfiprintf_r+0x582>
 8008954:	e030      	b.n	80089b8 <_vfiprintf_r+0x5b4>
 8008956:	602b      	str	r3, [r5, #0]
 8008958:	2310      	movs	r3, #16
 800895a:	606b      	str	r3, [r5, #4]
 800895c:	6893      	ldr	r3, [r2, #8]
 800895e:	3310      	adds	r3, #16
 8008960:	6093      	str	r3, [r2, #8]
 8008962:	6853      	ldr	r3, [r2, #4]
 8008964:	3301      	adds	r3, #1
 8008966:	6053      	str	r3, [r2, #4]
 8008968:	2b07      	cmp	r3, #7
 800896a:	dc01      	bgt.n	8008970 <_vfiprintf_r+0x56c>
 800896c:	3508      	adds	r5, #8
 800896e:	e007      	b.n	8008980 <_vfiprintf_r+0x57c>
 8008970:	9805      	ldr	r0, [sp, #20]
 8008972:	9903      	ldr	r1, [sp, #12]
 8008974:	f7ff fd38 	bl	80083e8 <__sprint_r>
 8008978:	2800      	cmp	r0, #0
 800897a:	d000      	beq.n	800897e <_vfiprintf_r+0x57a>
 800897c:	e132      	b.n	8008be4 <_vfiprintf_r+0x7e0>
 800897e:	ad68      	add	r5, sp, #416	; 0x1a0
 8008980:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008982:	3910      	subs	r1, #16
 8008984:	910a      	str	r1, [sp, #40]	; 0x28
 8008986:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008988:	aa82      	add	r2, sp, #520	; 0x208
 800898a:	4b18      	ldr	r3, [pc, #96]	; (80089ec <_vfiprintf_r+0x5e8>)
 800898c:	2810      	cmp	r0, #16
 800898e:	dce2      	bgt.n	8008956 <_vfiprintf_r+0x552>
 8008990:	6068      	str	r0, [r5, #4]
 8008992:	602b      	str	r3, [r5, #0]
 8008994:	6893      	ldr	r3, [r2, #8]
 8008996:	18c3      	adds	r3, r0, r3
 8008998:	6093      	str	r3, [r2, #8]
 800899a:	6853      	ldr	r3, [r2, #4]
 800899c:	3301      	adds	r3, #1
 800899e:	6053      	str	r3, [r2, #4]
 80089a0:	2b07      	cmp	r3, #7
 80089a2:	dc01      	bgt.n	80089a8 <_vfiprintf_r+0x5a4>
 80089a4:	3508      	adds	r5, #8
 80089a6:	e007      	b.n	80089b8 <_vfiprintf_r+0x5b4>
 80089a8:	9805      	ldr	r0, [sp, #20]
 80089aa:	9903      	ldr	r1, [sp, #12]
 80089ac:	f7ff fd1c 	bl	80083e8 <__sprint_r>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d000      	beq.n	80089b6 <_vfiprintf_r+0x5b2>
 80089b4:	e116      	b.n	8008be4 <_vfiprintf_r+0x7e0>
 80089b6:	ad68      	add	r5, sp, #416	; 0x1a0
 80089b8:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <_vfiprintf_r+0x5dc>)
 80089ba:	446b      	add	r3, sp
 80089bc:	781a      	ldrb	r2, [r3, #0]
 80089be:	2a00      	cmp	r2, #0
 80089c0:	d01e      	beq.n	8008a00 <_vfiprintf_r+0x5fc>
 80089c2:	602b      	str	r3, [r5, #0]
 80089c4:	2301      	movs	r3, #1
 80089c6:	606b      	str	r3, [r5, #4]
 80089c8:	aa82      	add	r2, sp, #520	; 0x208
 80089ca:	6893      	ldr	r3, [r2, #8]
 80089cc:	3301      	adds	r3, #1
 80089ce:	6093      	str	r3, [r2, #8]
 80089d0:	6853      	ldr	r3, [r2, #4]
 80089d2:	3301      	adds	r3, #1
 80089d4:	6053      	str	r3, [r2, #4]
 80089d6:	2b07      	cmp	r3, #7
 80089d8:	dc0a      	bgt.n	80089f0 <_vfiprintf_r+0x5ec>
 80089da:	3508      	adds	r5, #8
 80089dc:	e010      	b.n	8008a00 <_vfiprintf_r+0x5fc>
 80089de:	46c0      	nop			; (mov r8, r8)
 80089e0:	00000217 	.word	0x00000217
 80089e4:	0800c115 	.word	0x0800c115
 80089e8:	00000207 	.word	0x00000207
 80089ec:	0800c138 	.word	0x0800c138
 80089f0:	9805      	ldr	r0, [sp, #20]
 80089f2:	9903      	ldr	r1, [sp, #12]
 80089f4:	f7ff fcf8 	bl	80083e8 <__sprint_r>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d000      	beq.n	80089fe <_vfiprintf_r+0x5fa>
 80089fc:	e0f2      	b.n	8008be4 <_vfiprintf_r+0x7e0>
 80089fe:	ad68      	add	r5, sp, #416	; 0x1a0
 8008a00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008a02:	2900      	cmp	r1, #0
 8008a04:	d016      	beq.n	8008a34 <_vfiprintf_r+0x630>
 8008a06:	ab85      	add	r3, sp, #532	; 0x214
 8008a08:	602b      	str	r3, [r5, #0]
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	606b      	str	r3, [r5, #4]
 8008a0e:	aa82      	add	r2, sp, #520	; 0x208
 8008a10:	6893      	ldr	r3, [r2, #8]
 8008a12:	3302      	adds	r3, #2
 8008a14:	6093      	str	r3, [r2, #8]
 8008a16:	6853      	ldr	r3, [r2, #4]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	6053      	str	r3, [r2, #4]
 8008a1c:	2b07      	cmp	r3, #7
 8008a1e:	dc01      	bgt.n	8008a24 <_vfiprintf_r+0x620>
 8008a20:	3508      	adds	r5, #8
 8008a22:	e007      	b.n	8008a34 <_vfiprintf_r+0x630>
 8008a24:	9805      	ldr	r0, [sp, #20]
 8008a26:	9903      	ldr	r1, [sp, #12]
 8008a28:	f7ff fcde 	bl	80083e8 <__sprint_r>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d000      	beq.n	8008a32 <_vfiprintf_r+0x62e>
 8008a30:	e0d8      	b.n	8008be4 <_vfiprintf_r+0x7e0>
 8008a32:	ad68      	add	r5, sp, #416	; 0x1a0
 8008a34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a36:	2a80      	cmp	r2, #128	; 0x80
 8008a38:	d137      	bne.n	8008aaa <_vfiprintf_r+0x6a6>
 8008a3a:	9b06      	ldr	r3, [sp, #24]
 8008a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a3e:	1a1b      	subs	r3, r3, r0
 8008a40:	930a      	str	r3, [sp, #40]	; 0x28
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	dc18      	bgt.n	8008a78 <_vfiprintf_r+0x674>
 8008a46:	e030      	b.n	8008aaa <_vfiprintf_r+0x6a6>
 8008a48:	602b      	str	r3, [r5, #0]
 8008a4a:	2310      	movs	r3, #16
 8008a4c:	606b      	str	r3, [r5, #4]
 8008a4e:	6893      	ldr	r3, [r2, #8]
 8008a50:	3310      	adds	r3, #16
 8008a52:	6093      	str	r3, [r2, #8]
 8008a54:	6853      	ldr	r3, [r2, #4]
 8008a56:	3301      	adds	r3, #1
 8008a58:	6053      	str	r3, [r2, #4]
 8008a5a:	2b07      	cmp	r3, #7
 8008a5c:	dc01      	bgt.n	8008a62 <_vfiprintf_r+0x65e>
 8008a5e:	3508      	adds	r5, #8
 8008a60:	e007      	b.n	8008a72 <_vfiprintf_r+0x66e>
 8008a62:	9805      	ldr	r0, [sp, #20]
 8008a64:	9903      	ldr	r1, [sp, #12]
 8008a66:	f7ff fcbf 	bl	80083e8 <__sprint_r>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d000      	beq.n	8008a70 <_vfiprintf_r+0x66c>
 8008a6e:	e0b9      	b.n	8008be4 <_vfiprintf_r+0x7e0>
 8008a70:	ad68      	add	r5, sp, #416	; 0x1a0
 8008a72:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a74:	3910      	subs	r1, #16
 8008a76:	910a      	str	r1, [sp, #40]	; 0x28
 8008a78:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008a7a:	aa82      	add	r2, sp, #520	; 0x208
 8008a7c:	4b5f      	ldr	r3, [pc, #380]	; (8008bfc <_vfiprintf_r+0x7f8>)
 8008a7e:	2810      	cmp	r0, #16
 8008a80:	dce2      	bgt.n	8008a48 <_vfiprintf_r+0x644>
 8008a82:	6068      	str	r0, [r5, #4]
 8008a84:	602b      	str	r3, [r5, #0]
 8008a86:	6893      	ldr	r3, [r2, #8]
 8008a88:	18c3      	adds	r3, r0, r3
 8008a8a:	6093      	str	r3, [r2, #8]
 8008a8c:	6853      	ldr	r3, [r2, #4]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	6053      	str	r3, [r2, #4]
 8008a92:	2b07      	cmp	r3, #7
 8008a94:	dc01      	bgt.n	8008a9a <_vfiprintf_r+0x696>
 8008a96:	3508      	adds	r5, #8
 8008a98:	e007      	b.n	8008aaa <_vfiprintf_r+0x6a6>
 8008a9a:	9805      	ldr	r0, [sp, #20]
 8008a9c:	9903      	ldr	r1, [sp, #12]
 8008a9e:	f7ff fca3 	bl	80083e8 <__sprint_r>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d000      	beq.n	8008aa8 <_vfiprintf_r+0x6a4>
 8008aa6:	e09d      	b.n	8008be4 <_vfiprintf_r+0x7e0>
 8008aa8:	ad68      	add	r5, sp, #416	; 0x1a0
 8008aaa:	9902      	ldr	r1, [sp, #8]
 8008aac:	1bc9      	subs	r1, r1, r7
 8008aae:	9102      	str	r1, [sp, #8]
 8008ab0:	2900      	cmp	r1, #0
 8008ab2:	dc18      	bgt.n	8008ae6 <_vfiprintf_r+0x6e2>
 8008ab4:	e02f      	b.n	8008b16 <_vfiprintf_r+0x712>
 8008ab6:	602b      	str	r3, [r5, #0]
 8008ab8:	2310      	movs	r3, #16
 8008aba:	606b      	str	r3, [r5, #4]
 8008abc:	6893      	ldr	r3, [r2, #8]
 8008abe:	3310      	adds	r3, #16
 8008ac0:	6093      	str	r3, [r2, #8]
 8008ac2:	6853      	ldr	r3, [r2, #4]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	6053      	str	r3, [r2, #4]
 8008ac8:	2b07      	cmp	r3, #7
 8008aca:	dc01      	bgt.n	8008ad0 <_vfiprintf_r+0x6cc>
 8008acc:	3508      	adds	r5, #8
 8008ace:	e007      	b.n	8008ae0 <_vfiprintf_r+0x6dc>
 8008ad0:	9805      	ldr	r0, [sp, #20]
 8008ad2:	9903      	ldr	r1, [sp, #12]
 8008ad4:	f7ff fc88 	bl	80083e8 <__sprint_r>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d000      	beq.n	8008ade <_vfiprintf_r+0x6da>
 8008adc:	e082      	b.n	8008be4 <_vfiprintf_r+0x7e0>
 8008ade:	ad68      	add	r5, sp, #416	; 0x1a0
 8008ae0:	9a02      	ldr	r2, [sp, #8]
 8008ae2:	3a10      	subs	r2, #16
 8008ae4:	9202      	str	r2, [sp, #8]
 8008ae6:	9802      	ldr	r0, [sp, #8]
 8008ae8:	aa82      	add	r2, sp, #520	; 0x208
 8008aea:	4b44      	ldr	r3, [pc, #272]	; (8008bfc <_vfiprintf_r+0x7f8>)
 8008aec:	2810      	cmp	r0, #16
 8008aee:	dce2      	bgt.n	8008ab6 <_vfiprintf_r+0x6b2>
 8008af0:	6068      	str	r0, [r5, #4]
 8008af2:	602b      	str	r3, [r5, #0]
 8008af4:	6893      	ldr	r3, [r2, #8]
 8008af6:	18c3      	adds	r3, r0, r3
 8008af8:	6093      	str	r3, [r2, #8]
 8008afa:	6853      	ldr	r3, [r2, #4]
 8008afc:	3301      	adds	r3, #1
 8008afe:	6053      	str	r3, [r2, #4]
 8008b00:	2b07      	cmp	r3, #7
 8008b02:	dc01      	bgt.n	8008b08 <_vfiprintf_r+0x704>
 8008b04:	3508      	adds	r5, #8
 8008b06:	e006      	b.n	8008b16 <_vfiprintf_r+0x712>
 8008b08:	9805      	ldr	r0, [sp, #20]
 8008b0a:	9903      	ldr	r1, [sp, #12]
 8008b0c:	f7ff fc6c 	bl	80083e8 <__sprint_r>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d167      	bne.n	8008be4 <_vfiprintf_r+0x7e0>
 8008b14:	ad68      	add	r5, sp, #416	; 0x1a0
 8008b16:	606f      	str	r7, [r5, #4]
 8008b18:	aa82      	add	r2, sp, #520	; 0x208
 8008b1a:	6893      	ldr	r3, [r2, #8]
 8008b1c:	9904      	ldr	r1, [sp, #16]
 8008b1e:	18ff      	adds	r7, r7, r3
 8008b20:	6853      	ldr	r3, [r2, #4]
 8008b22:	6029      	str	r1, [r5, #0]
 8008b24:	3301      	adds	r3, #1
 8008b26:	6097      	str	r7, [r2, #8]
 8008b28:	6053      	str	r3, [r2, #4]
 8008b2a:	2b07      	cmp	r3, #7
 8008b2c:	dc01      	bgt.n	8008b32 <_vfiprintf_r+0x72e>
 8008b2e:	3508      	adds	r5, #8
 8008b30:	e006      	b.n	8008b40 <_vfiprintf_r+0x73c>
 8008b32:	9805      	ldr	r0, [sp, #20]
 8008b34:	9903      	ldr	r1, [sp, #12]
 8008b36:	f7ff fc57 	bl	80083e8 <__sprint_r>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d152      	bne.n	8008be4 <_vfiprintf_r+0x7e0>
 8008b3e:	ad68      	add	r5, sp, #416	; 0x1a0
 8008b40:	0772      	lsls	r2, r6, #29
 8008b42:	d52e      	bpl.n	8008ba2 <_vfiprintf_r+0x79e>
 8008b44:	9b06      	ldr	r3, [sp, #24]
 8008b46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b48:	1a1e      	subs	r6, r3, r0
 8008b4a:	2e00      	cmp	r6, #0
 8008b4c:	dc15      	bgt.n	8008b7a <_vfiprintf_r+0x776>
 8008b4e:	e028      	b.n	8008ba2 <_vfiprintf_r+0x79e>
 8008b50:	602b      	str	r3, [r5, #0]
 8008b52:	2310      	movs	r3, #16
 8008b54:	606b      	str	r3, [r5, #4]
 8008b56:	6893      	ldr	r3, [r2, #8]
 8008b58:	3310      	adds	r3, #16
 8008b5a:	6093      	str	r3, [r2, #8]
 8008b5c:	6853      	ldr	r3, [r2, #4]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	6053      	str	r3, [r2, #4]
 8008b62:	2b07      	cmp	r3, #7
 8008b64:	dc01      	bgt.n	8008b6a <_vfiprintf_r+0x766>
 8008b66:	3508      	adds	r5, #8
 8008b68:	e006      	b.n	8008b78 <_vfiprintf_r+0x774>
 8008b6a:	9805      	ldr	r0, [sp, #20]
 8008b6c:	9903      	ldr	r1, [sp, #12]
 8008b6e:	f7ff fc3b 	bl	80083e8 <__sprint_r>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d136      	bne.n	8008be4 <_vfiprintf_r+0x7e0>
 8008b76:	ad68      	add	r5, sp, #416	; 0x1a0
 8008b78:	3e10      	subs	r6, #16
 8008b7a:	aa82      	add	r2, sp, #520	; 0x208
 8008b7c:	4b20      	ldr	r3, [pc, #128]	; (8008c00 <_vfiprintf_r+0x7fc>)
 8008b7e:	2e10      	cmp	r6, #16
 8008b80:	dce6      	bgt.n	8008b50 <_vfiprintf_r+0x74c>
 8008b82:	606e      	str	r6, [r5, #4]
 8008b84:	602b      	str	r3, [r5, #0]
 8008b86:	6893      	ldr	r3, [r2, #8]
 8008b88:	18f6      	adds	r6, r6, r3
 8008b8a:	6853      	ldr	r3, [r2, #4]
 8008b8c:	6096      	str	r6, [r2, #8]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	6053      	str	r3, [r2, #4]
 8008b92:	2b07      	cmp	r3, #7
 8008b94:	dd05      	ble.n	8008ba2 <_vfiprintf_r+0x79e>
 8008b96:	9805      	ldr	r0, [sp, #20]
 8008b98:	9903      	ldr	r1, [sp, #12]
 8008b9a:	f7ff fc25 	bl	80083e8 <__sprint_r>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d120      	bne.n	8008be4 <_vfiprintf_r+0x7e0>
 8008ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba4:	9906      	ldr	r1, [sp, #24]
 8008ba6:	428b      	cmp	r3, r1
 8008ba8:	da00      	bge.n	8008bac <_vfiprintf_r+0x7a8>
 8008baa:	1c0b      	adds	r3, r1, #0
 8008bac:	9a08      	ldr	r2, [sp, #32]
 8008bae:	18d2      	adds	r2, r2, r3
 8008bb0:	9208      	str	r2, [sp, #32]
 8008bb2:	aa82      	add	r2, sp, #520	; 0x208
 8008bb4:	6893      	ldr	r3, [r2, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d005      	beq.n	8008bc6 <_vfiprintf_r+0x7c2>
 8008bba:	9805      	ldr	r0, [sp, #20]
 8008bbc:	9903      	ldr	r1, [sp, #12]
 8008bbe:	f7ff fc13 	bl	80083e8 <__sprint_r>
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d10e      	bne.n	8008be4 <_vfiprintf_r+0x7e0>
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	ab82      	add	r3, sp, #520	; 0x208
 8008bca:	605a      	str	r2, [r3, #4]
 8008bcc:	ad68      	add	r5, sp, #416	; 0x1a0
 8008bce:	e481      	b.n	80084d4 <_vfiprintf_r+0xd0>
 8008bd0:	aa82      	add	r2, sp, #520	; 0x208
 8008bd2:	6893      	ldr	r3, [r2, #8]
 8008bd4:	9e03      	ldr	r6, [sp, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d005      	beq.n	8008be6 <_vfiprintf_r+0x7e2>
 8008bda:	9805      	ldr	r0, [sp, #20]
 8008bdc:	1c31      	adds	r1, r6, #0
 8008bde:	f7ff fc03 	bl	80083e8 <__sprint_r>
 8008be2:	e000      	b.n	8008be6 <_vfiprintf_r+0x7e2>
 8008be4:	9e03      	ldr	r6, [sp, #12]
 8008be6:	89b3      	ldrh	r3, [r6, #12]
 8008be8:	0658      	lsls	r0, r3, #25
 8008bea:	d502      	bpl.n	8008bf2 <_vfiprintf_r+0x7ee>
 8008bec:	2101      	movs	r1, #1
 8008bee:	4249      	negs	r1, r1
 8008bf0:	9108      	str	r1, [sp, #32]
 8008bf2:	2387      	movs	r3, #135	; 0x87
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	9808      	ldr	r0, [sp, #32]
 8008bf8:	449d      	add	sp, r3
 8008bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bfc:	0800c148 	.word	0x0800c148
 8008c00:	0800c138 	.word	0x0800c138

08008c04 <__swsetup_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	4b29      	ldr	r3, [pc, #164]	; (8008cac <__swsetup_r+0xa8>)
 8008c08:	1c05      	adds	r5, r0, #0
 8008c0a:	6818      	ldr	r0, [r3, #0]
 8008c0c:	1c0c      	adds	r4, r1, #0
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d004      	beq.n	8008c1c <__swsetup_r+0x18>
 8008c12:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <__swsetup_r+0x18>
 8008c18:	f000 ff8e 	bl	8009b38 <__sinit>
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	071a      	lsls	r2, r3, #28
 8008c20:	d41b      	bmi.n	8008c5a <__swsetup_r+0x56>
 8008c22:	06da      	lsls	r2, r3, #27
 8008c24:	d53d      	bpl.n	8008ca2 <__swsetup_r+0x9e>
 8008c26:	075a      	lsls	r2, r3, #29
 8008c28:	d513      	bpl.n	8008c52 <__swsetup_r+0x4e>
 8008c2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008c2c:	2900      	cmp	r1, #0
 8008c2e:	d008      	beq.n	8008c42 <__swsetup_r+0x3e>
 8008c30:	1c23      	adds	r3, r4, #0
 8008c32:	3340      	adds	r3, #64	; 0x40
 8008c34:	4299      	cmp	r1, r3
 8008c36:	d002      	beq.n	8008c3e <__swsetup_r+0x3a>
 8008c38:	1c28      	adds	r0, r5, #0
 8008c3a:	f000 fff7 	bl	8009c2c <_free_r>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	6323      	str	r3, [r4, #48]	; 0x30
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	2224      	movs	r2, #36	; 0x24
 8008c46:	4393      	bics	r3, r2
 8008c48:	81a3      	strh	r3, [r4, #12]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	6063      	str	r3, [r4, #4]
 8008c4e:	6923      	ldr	r3, [r4, #16]
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	89a2      	ldrh	r2, [r4, #12]
 8008c54:	2308      	movs	r3, #8
 8008c56:	4313      	orrs	r3, r2
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	6923      	ldr	r3, [r4, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10b      	bne.n	8008c78 <__swsetup_r+0x74>
 8008c60:	89a2      	ldrh	r2, [r4, #12]
 8008c62:	23a0      	movs	r3, #160	; 0xa0
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	401a      	ands	r2, r3
 8008c68:	2380      	movs	r3, #128	; 0x80
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d003      	beq.n	8008c78 <__swsetup_r+0x74>
 8008c70:	1c28      	adds	r0, r5, #0
 8008c72:	1c21      	adds	r1, r4, #0
 8008c74:	f001 fa22 	bl	800a0bc <__smakebuf_r>
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	07da      	lsls	r2, r3, #31
 8008c7c:	d505      	bpl.n	8008c8a <__swsetup_r+0x86>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60a3      	str	r3, [r4, #8]
 8008c82:	6963      	ldr	r3, [r4, #20]
 8008c84:	425b      	negs	r3, r3
 8008c86:	61a3      	str	r3, [r4, #24]
 8008c88:	e005      	b.n	8008c96 <__swsetup_r+0x92>
 8008c8a:	079a      	lsls	r2, r3, #30
 8008c8c:	d501      	bpl.n	8008c92 <__swsetup_r+0x8e>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e000      	b.n	8008c94 <__swsetup_r+0x90>
 8008c92:	6963      	ldr	r3, [r4, #20]
 8008c94:	60a3      	str	r3, [r4, #8]
 8008c96:	6923      	ldr	r3, [r4, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d105      	bne.n	8008ca8 <__swsetup_r+0xa4>
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	061a      	lsls	r2, r3, #24
 8008ca0:	d502      	bpl.n	8008ca8 <__swsetup_r+0xa4>
 8008ca2:	2001      	movs	r0, #1
 8008ca4:	4240      	negs	r0, r0
 8008ca6:	e000      	b.n	8008caa <__swsetup_r+0xa6>
 8008ca8:	2000      	movs	r0, #0
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	20000e88 	.word	0x20000e88

08008cb0 <quorem>:
 8008cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cb2:	690b      	ldr	r3, [r1, #16]
 8008cb4:	6902      	ldr	r2, [r0, #16]
 8008cb6:	b08b      	sub	sp, #44	; 0x2c
 8008cb8:	1c04      	adds	r4, r0, #0
 8008cba:	9103      	str	r1, [sp, #12]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	da01      	bge.n	8008cc4 <quorem+0x14>
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	e09b      	b.n	8008dfc <quorem+0x14c>
 8008cc4:	9803      	ldr	r0, [sp, #12]
 8008cc6:	1e5d      	subs	r5, r3, #1
 8008cc8:	3303      	adds	r3, #3
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	18c2      	adds	r2, r0, r3
 8008cce:	1d11      	adds	r1, r2, #4
 8008cd0:	9108      	str	r1, [sp, #32]
 8008cd2:	6851      	ldr	r1, [r2, #4]
 8008cd4:	18e3      	adds	r3, r4, r3
 8008cd6:	1c26      	adds	r6, r4, #0
 8008cd8:	3614      	adds	r6, #20
 8008cda:	3101      	adds	r1, #1
 8008cdc:	6858      	ldr	r0, [r3, #4]
 8008cde:	9606      	str	r6, [sp, #24]
 8008ce0:	1d1e      	adds	r6, r3, #4
 8008ce2:	f7f7 fa07 	bl	80000f4 <__aeabi_uidiv>
 8008ce6:	9f03      	ldr	r7, [sp, #12]
 8008ce8:	9004      	str	r0, [sp, #16]
 8008cea:	3714      	adds	r7, #20
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d04e      	beq.n	8008d8e <quorem+0xde>
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	9a06      	ldr	r2, [sp, #24]
 8008cf4:	1c39      	adds	r1, r7, #0
 8008cf6:	9009      	str	r0, [sp, #36]	; 0x24
 8008cf8:	9007      	str	r0, [sp, #28]
 8008cfa:	9400      	str	r4, [sp, #0]
 8008cfc:	c908      	ldmia	r1!, {r3}
 8008cfe:	9804      	ldr	r0, [sp, #16]
 8008d00:	469c      	mov	ip, r3
 8008d02:	4b3f      	ldr	r3, [pc, #252]	; (8008e00 <quorem+0x150>)
 8008d04:	4664      	mov	r4, ip
 8008d06:	401c      	ands	r4, r3
 8008d08:	4344      	muls	r4, r0
 8008d0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d0c:	1904      	adds	r4, r0, r4
 8008d0e:	9401      	str	r4, [sp, #4]
 8008d10:	0c24      	lsrs	r4, r4, #16
 8008d12:	9405      	str	r4, [sp, #20]
 8008d14:	4660      	mov	r0, ip
 8008d16:	9c04      	ldr	r4, [sp, #16]
 8008d18:	0c00      	lsrs	r0, r0, #16
 8008d1a:	4360      	muls	r0, r4
 8008d1c:	4684      	mov	ip, r0
 8008d1e:	9805      	ldr	r0, [sp, #20]
 8008d20:	1c04      	adds	r4, r0, #0
 8008d22:	4464      	add	r4, ip
 8008d24:	0c20      	lsrs	r0, r4, #16
 8008d26:	9405      	str	r4, [sp, #20]
 8008d28:	6814      	ldr	r4, [r2, #0]
 8008d2a:	9009      	str	r0, [sp, #36]	; 0x24
 8008d2c:	401c      	ands	r4, r3
 8008d2e:	9807      	ldr	r0, [sp, #28]
 8008d30:	46a4      	mov	ip, r4
 8008d32:	4484      	add	ip, r0
 8008d34:	9801      	ldr	r0, [sp, #4]
 8008d36:	4664      	mov	r4, ip
 8008d38:	4018      	ands	r0, r3
 8008d3a:	1a24      	subs	r4, r4, r0
 8008d3c:	9401      	str	r4, [sp, #4]
 8008d3e:	6810      	ldr	r0, [r2, #0]
 8008d40:	9c05      	ldr	r4, [sp, #20]
 8008d42:	0c00      	lsrs	r0, r0, #16
 8008d44:	401c      	ands	r4, r3
 8008d46:	1b04      	subs	r4, r0, r4
 8008d48:	9801      	ldr	r0, [sp, #4]
 8008d4a:	1400      	asrs	r0, r0, #16
 8008d4c:	4684      	mov	ip, r0
 8008d4e:	44a4      	add	ip, r4
 8008d50:	4660      	mov	r0, ip
 8008d52:	0400      	lsls	r0, r0, #16
 8008d54:	4664      	mov	r4, ip
 8008d56:	4684      	mov	ip, r0
 8008d58:	9801      	ldr	r0, [sp, #4]
 8008d5a:	1424      	asrs	r4, r4, #16
 8008d5c:	4018      	ands	r0, r3
 8008d5e:	9407      	str	r4, [sp, #28]
 8008d60:	4663      	mov	r3, ip
 8008d62:	9c08      	ldr	r4, [sp, #32]
 8008d64:	4318      	orrs	r0, r3
 8008d66:	c201      	stmia	r2!, {r0}
 8008d68:	42a1      	cmp	r1, r4
 8008d6a:	d9c7      	bls.n	8008cfc <quorem+0x4c>
 8008d6c:	9c00      	ldr	r4, [sp, #0]
 8008d6e:	1d2b      	adds	r3, r5, #4
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	191b      	adds	r3, r3, r4
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <quorem+0xce>
 8008d7a:	e008      	b.n	8008d8e <quorem+0xde>
 8008d7c:	3d01      	subs	r5, #1
 8008d7e:	9806      	ldr	r0, [sp, #24]
 8008d80:	3e04      	subs	r6, #4
 8008d82:	4286      	cmp	r6, r0
 8008d84:	d902      	bls.n	8008d8c <quorem+0xdc>
 8008d86:	6833      	ldr	r3, [r6, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0f7      	beq.n	8008d7c <quorem+0xcc>
 8008d8c:	6125      	str	r5, [r4, #16]
 8008d8e:	1c20      	adds	r0, r4, #0
 8008d90:	9903      	ldr	r1, [sp, #12]
 8008d92:	f001 fa62 	bl	800a25a <__mcmp>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	db2f      	blt.n	8008dfa <quorem+0x14a>
 8008d9a:	9904      	ldr	r1, [sp, #16]
 8008d9c:	9b06      	ldr	r3, [sp, #24]
 8008d9e:	3101      	adds	r1, #1
 8008da0:	9104      	str	r1, [sp, #16]
 8008da2:	2100      	movs	r1, #0
 8008da4:	cf04      	ldmia	r7!, {r2}
 8008da6:	681e      	ldr	r6, [r3, #0]
 8008da8:	9205      	str	r2, [sp, #20]
 8008daa:	9805      	ldr	r0, [sp, #20]
 8008dac:	4a14      	ldr	r2, [pc, #80]	; (8008e00 <quorem+0x150>)
 8008dae:	4010      	ands	r0, r2
 8008db0:	4016      	ands	r6, r2
 8008db2:	1a36      	subs	r6, r6, r0
 8008db4:	1876      	adds	r6, r6, r1
 8008db6:	6819      	ldr	r1, [r3, #0]
 8008db8:	0c09      	lsrs	r1, r1, #16
 8008dba:	468c      	mov	ip, r1
 8008dbc:	9905      	ldr	r1, [sp, #20]
 8008dbe:	0c08      	lsrs	r0, r1, #16
 8008dc0:	4661      	mov	r1, ip
 8008dc2:	1a08      	subs	r0, r1, r0
 8008dc4:	1431      	asrs	r1, r6, #16
 8008dc6:	1840      	adds	r0, r0, r1
 8008dc8:	4016      	ands	r6, r2
 8008dca:	1401      	asrs	r1, r0, #16
 8008dcc:	9a08      	ldr	r2, [sp, #32]
 8008dce:	0400      	lsls	r0, r0, #16
 8008dd0:	4330      	orrs	r0, r6
 8008dd2:	c301      	stmia	r3!, {r0}
 8008dd4:	4297      	cmp	r7, r2
 8008dd6:	d9e5      	bls.n	8008da4 <quorem+0xf4>
 8008dd8:	1d2a      	adds	r2, r5, #4
 8008dda:	0092      	lsls	r2, r2, #2
 8008ddc:	18a2      	adds	r2, r4, r2
 8008dde:	1d13      	adds	r3, r2, #4
 8008de0:	6852      	ldr	r2, [r2, #4]
 8008de2:	2a00      	cmp	r2, #0
 8008de4:	d001      	beq.n	8008dea <quorem+0x13a>
 8008de6:	e008      	b.n	8008dfa <quorem+0x14a>
 8008de8:	3d01      	subs	r5, #1
 8008dea:	9e06      	ldr	r6, [sp, #24]
 8008dec:	3b04      	subs	r3, #4
 8008dee:	42b3      	cmp	r3, r6
 8008df0:	d902      	bls.n	8008df8 <quorem+0x148>
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	2a00      	cmp	r2, #0
 8008df6:	d0f7      	beq.n	8008de8 <quorem+0x138>
 8008df8:	6125      	str	r5, [r4, #16]
 8008dfa:	9804      	ldr	r0, [sp, #16]
 8008dfc:	b00b      	add	sp, #44	; 0x2c
 8008dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e00:	0000ffff 	.word	0x0000ffff
 8008e04:	00000000 	.word	0x00000000

08008e08 <_dtoa_r>:
 8008e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e0a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008e0c:	b09d      	sub	sp, #116	; 0x74
 8008e0e:	1c05      	adds	r5, r0, #0
 8008e10:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008e12:	9202      	str	r2, [sp, #8]
 8008e14:	9303      	str	r3, [sp, #12]
 8008e16:	2900      	cmp	r1, #0
 8008e18:	d009      	beq.n	8008e2e <_dtoa_r+0x26>
 8008e1a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	604b      	str	r3, [r1, #4]
 8008e20:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008e22:	409a      	lsls	r2, r3
 8008e24:	608a      	str	r2, [r1, #8]
 8008e26:	f001 f9b7 	bl	800a198 <_Bfree>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	642b      	str	r3, [r5, #64]	; 0x40
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	da05      	bge.n	8008e40 <_dtoa_r+0x38>
 8008e34:	2201      	movs	r2, #1
 8008e36:	6022      	str	r2, [r4, #0]
 8008e38:	4ac3      	ldr	r2, [pc, #780]	; (8009148 <_dtoa_r+0x340>)
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	9303      	str	r3, [sp, #12]
 8008e3e:	e001      	b.n	8008e44 <_dtoa_r+0x3c>
 8008e40:	2300      	movs	r3, #0
 8008e42:	6023      	str	r3, [r4, #0]
 8008e44:	9e03      	ldr	r6, [sp, #12]
 8008e46:	4bc1      	ldr	r3, [pc, #772]	; (800914c <_dtoa_r+0x344>)
 8008e48:	1c32      	adds	r2, r6, #0
 8008e4a:	401a      	ands	r2, r3
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d118      	bne.n	8008e82 <_dtoa_r+0x7a>
 8008e50:	4bbf      	ldr	r3, [pc, #764]	; (8009150 <_dtoa_r+0x348>)
 8008e52:	9824      	ldr	r0, [sp, #144]	; 0x90
 8008e54:	9902      	ldr	r1, [sp, #8]
 8008e56:	6003      	str	r3, [r0, #0]
 8008e58:	2900      	cmp	r1, #0
 8008e5a:	d103      	bne.n	8008e64 <_dtoa_r+0x5c>
 8008e5c:	0332      	lsls	r2, r6, #12
 8008e5e:	d101      	bne.n	8008e64 <_dtoa_r+0x5c>
 8008e60:	48bc      	ldr	r0, [pc, #752]	; (8009154 <_dtoa_r+0x34c>)
 8008e62:	e000      	b.n	8008e66 <_dtoa_r+0x5e>
 8008e64:	48bc      	ldr	r0, [pc, #752]	; (8009158 <_dtoa_r+0x350>)
 8008e66:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <_dtoa_r+0x68>
 8008e6c:	f000 fdab 	bl	80099c6 <_dtoa_r+0xbbe>
 8008e70:	78c2      	ldrb	r2, [r0, #3]
 8008e72:	1cc3      	adds	r3, r0, #3
 8008e74:	2a00      	cmp	r2, #0
 8008e76:	d000      	beq.n	8008e7a <_dtoa_r+0x72>
 8008e78:	3305      	adds	r3, #5
 8008e7a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	f000 fda2 	bl	80099c6 <_dtoa_r+0xbbe>
 8008e82:	9802      	ldr	r0, [sp, #8]
 8008e84:	9903      	ldr	r1, [sp, #12]
 8008e86:	4ba7      	ldr	r3, [pc, #668]	; (8009124 <_dtoa_r+0x31c>)
 8008e88:	4aa5      	ldr	r2, [pc, #660]	; (8009120 <_dtoa_r+0x318>)
 8008e8a:	9012      	str	r0, [sp, #72]	; 0x48
 8008e8c:	9113      	str	r1, [sp, #76]	; 0x4c
 8008e8e:	f7f7 f9f1 	bl	8000274 <__aeabi_dcmpeq>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d00e      	beq.n	8008eb4 <_dtoa_r+0xac>
 8008e96:	9924      	ldr	r1, [sp, #144]	; 0x90
 8008e98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	600b      	str	r3, [r1, #0]
 8008e9e:	2a00      	cmp	r2, #0
 8008ea0:	d102      	bne.n	8008ea8 <_dtoa_r+0xa0>
 8008ea2:	48ae      	ldr	r0, [pc, #696]	; (800915c <_dtoa_r+0x354>)
 8008ea4:	f000 fd8f 	bl	80099c6 <_dtoa_r+0xbbe>
 8008ea8:	48ad      	ldr	r0, [pc, #692]	; (8009160 <_dtoa_r+0x358>)
 8008eaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008eac:	6018      	str	r0, [r3, #0]
 8008eae:	3801      	subs	r0, #1
 8008eb0:	f000 fd89 	bl	80099c6 <_dtoa_r+0xbbe>
 8008eb4:	ab1a      	add	r3, sp, #104	; 0x68
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	ab1b      	add	r3, sp, #108	; 0x6c
 8008eba:	9301      	str	r3, [sp, #4]
 8008ebc:	1c28      	adds	r0, r5, #0
 8008ebe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ec2:	f001 fa0d 	bl	800a2e0 <__d2b>
 8008ec6:	0074      	lsls	r4, r6, #1
 8008ec8:	0d64      	lsrs	r4, r4, #21
 8008eca:	900a      	str	r0, [sp, #40]	; 0x28
 8008ecc:	2c00      	cmp	r4, #0
 8008ece:	d00a      	beq.n	8008ee6 <_dtoa_r+0xde>
 8008ed0:	4aa4      	ldr	r2, [pc, #656]	; (8009164 <_dtoa_r+0x35c>)
 8008ed2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008ed4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008ed6:	4ba4      	ldr	r3, [pc, #656]	; (8009168 <_dtoa_r+0x360>)
 8008ed8:	400a      	ands	r2, r1
 8008eda:	4ea4      	ldr	r6, [pc, #656]	; (800916c <_dtoa_r+0x364>)
 8008edc:	1c11      	adds	r1, r2, #0
 8008ede:	4319      	orrs	r1, r3
 8008ee0:	19a4      	adds	r4, r4, r6
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	e01b      	b.n	8008f1e <_dtoa_r+0x116>
 8008ee6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008ee8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008eea:	48a1      	ldr	r0, [pc, #644]	; (8009170 <_dtoa_r+0x368>)
 8008eec:	18d3      	adds	r3, r2, r3
 8008eee:	181c      	adds	r4, r3, r0
 8008ef0:	2c20      	cmp	r4, #32
 8008ef2:	dd08      	ble.n	8008f06 <_dtoa_r+0xfe>
 8008ef4:	499f      	ldr	r1, [pc, #636]	; (8009174 <_dtoa_r+0x36c>)
 8008ef6:	9802      	ldr	r0, [sp, #8]
 8008ef8:	185b      	adds	r3, r3, r1
 8008efa:	40d8      	lsrs	r0, r3
 8008efc:	2340      	movs	r3, #64	; 0x40
 8008efe:	1b1b      	subs	r3, r3, r4
 8008f00:	409e      	lsls	r6, r3
 8008f02:	4330      	orrs	r0, r6
 8008f04:	e004      	b.n	8008f10 <_dtoa_r+0x108>
 8008f06:	2020      	movs	r0, #32
 8008f08:	9a02      	ldr	r2, [sp, #8]
 8008f0a:	1b00      	subs	r0, r0, r4
 8008f0c:	4082      	lsls	r2, r0
 8008f0e:	1c10      	adds	r0, r2, #0
 8008f10:	f7f8 ffea 	bl	8001ee8 <__aeabi_ui2d>
 8008f14:	4e98      	ldr	r6, [pc, #608]	; (8009178 <_dtoa_r+0x370>)
 8008f16:	4b99      	ldr	r3, [pc, #612]	; (800917c <_dtoa_r+0x374>)
 8008f18:	19a4      	adds	r4, r4, r6
 8008f1a:	18c9      	adds	r1, r1, r3
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	9219      	str	r2, [sp, #100]	; 0x64
 8008f20:	4a81      	ldr	r2, [pc, #516]	; (8009128 <_dtoa_r+0x320>)
 8008f22:	4b82      	ldr	r3, [pc, #520]	; (800912c <_dtoa_r+0x324>)
 8008f24:	f7f8 fb60 	bl	80015e8 <__aeabi_dsub>
 8008f28:	4a81      	ldr	r2, [pc, #516]	; (8009130 <_dtoa_r+0x328>)
 8008f2a:	4b82      	ldr	r3, [pc, #520]	; (8009134 <_dtoa_r+0x32c>)
 8008f2c:	f7f8 f92e 	bl	800118c <__aeabi_dmul>
 8008f30:	4a81      	ldr	r2, [pc, #516]	; (8009138 <_dtoa_r+0x330>)
 8008f32:	4b82      	ldr	r3, [pc, #520]	; (800913c <_dtoa_r+0x334>)
 8008f34:	f7f7 f9cc 	bl	80002d0 <__aeabi_dadd>
 8008f38:	1c06      	adds	r6, r0, #0
 8008f3a:	1c20      	adds	r0, r4, #0
 8008f3c:	1c0f      	adds	r7, r1, #0
 8008f3e:	f7f8 ff25 	bl	8001d8c <__aeabi_i2d>
 8008f42:	4a7f      	ldr	r2, [pc, #508]	; (8009140 <_dtoa_r+0x338>)
 8008f44:	4b7f      	ldr	r3, [pc, #508]	; (8009144 <_dtoa_r+0x33c>)
 8008f46:	f7f8 f921 	bl	800118c <__aeabi_dmul>
 8008f4a:	1c02      	adds	r2, r0, #0
 8008f4c:	1c0b      	adds	r3, r1, #0
 8008f4e:	1c30      	adds	r0, r6, #0
 8008f50:	1c39      	adds	r1, r7, #0
 8008f52:	f7f7 f9bd 	bl	80002d0 <__aeabi_dadd>
 8008f56:	9004      	str	r0, [sp, #16]
 8008f58:	9105      	str	r1, [sp, #20]
 8008f5a:	f7f8 fee3 	bl	8001d24 <__aeabi_d2iz>
 8008f5e:	4b71      	ldr	r3, [pc, #452]	; (8009124 <_dtoa_r+0x31c>)
 8008f60:	4a6f      	ldr	r2, [pc, #444]	; (8009120 <_dtoa_r+0x318>)
 8008f62:	1c07      	adds	r7, r0, #0
 8008f64:	9804      	ldr	r0, [sp, #16]
 8008f66:	9905      	ldr	r1, [sp, #20]
 8008f68:	f7f7 f98a 	bl	8000280 <__aeabi_dcmplt>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	d00b      	beq.n	8008f88 <_dtoa_r+0x180>
 8008f70:	1c38      	adds	r0, r7, #0
 8008f72:	f7f8 ff0b 	bl	8001d8c <__aeabi_i2d>
 8008f76:	1c02      	adds	r2, r0, #0
 8008f78:	1c0b      	adds	r3, r1, #0
 8008f7a:	9804      	ldr	r0, [sp, #16]
 8008f7c:	9905      	ldr	r1, [sp, #20]
 8008f7e:	f7f7 f979 	bl	8000274 <__aeabi_dcmpeq>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d100      	bne.n	8008f88 <_dtoa_r+0x180>
 8008f86:	3f01      	subs	r7, #1
 8008f88:	2f16      	cmp	r7, #22
 8008f8a:	d902      	bls.n	8008f92 <_dtoa_r+0x18a>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f90:	e010      	b.n	8008fb4 <_dtoa_r+0x1ac>
 8008f92:	4b7b      	ldr	r3, [pc, #492]	; (8009180 <_dtoa_r+0x378>)
 8008f94:	00fa      	lsls	r2, r7, #3
 8008f96:	18d3      	adds	r3, r2, r3
 8008f98:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008f9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f7f7 f96e 	bl	8000280 <__aeabi_dcmplt>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d102      	bne.n	8008fae <_dtoa_r+0x1a6>
 8008fa8:	2600      	movs	r6, #0
 8008faa:	9617      	str	r6, [sp, #92]	; 0x5c
 8008fac:	e002      	b.n	8008fb4 <_dtoa_r+0x1ac>
 8008fae:	2000      	movs	r0, #0
 8008fb0:	3f01      	subs	r7, #1
 8008fb2:	9017      	str	r0, [sp, #92]	; 0x5c
 8008fb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	1b1c      	subs	r4, r3, r4
 8008fba:	d402      	bmi.n	8008fc2 <_dtoa_r+0x1ba>
 8008fbc:	9408      	str	r4, [sp, #32]
 8008fbe:	2400      	movs	r4, #0
 8008fc0:	e002      	b.n	8008fc8 <_dtoa_r+0x1c0>
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4264      	negs	r4, r4
 8008fc6:	9108      	str	r1, [sp, #32]
 8008fc8:	2f00      	cmp	r7, #0
 8008fca:	db06      	blt.n	8008fda <_dtoa_r+0x1d2>
 8008fcc:	9a08      	ldr	r2, [sp, #32]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	19d2      	adds	r2, r2, r7
 8008fd2:	9208      	str	r2, [sp, #32]
 8008fd4:	9715      	str	r7, [sp, #84]	; 0x54
 8008fd6:	9307      	str	r3, [sp, #28]
 8008fd8:	e004      	b.n	8008fe4 <_dtoa_r+0x1dc>
 8008fda:	427e      	negs	r6, r7
 8008fdc:	2000      	movs	r0, #0
 8008fde:	1be4      	subs	r4, r4, r7
 8008fe0:	9607      	str	r6, [sp, #28]
 8008fe2:	9015      	str	r0, [sp, #84]	; 0x54
 8008fe4:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008fe6:	2909      	cmp	r1, #9
 8008fe8:	d819      	bhi.n	800901e <_dtoa_r+0x216>
 8008fea:	2905      	cmp	r1, #5
 8008fec:	dc01      	bgt.n	8008ff2 <_dtoa_r+0x1ea>
 8008fee:	2601      	movs	r6, #1
 8008ff0:	e003      	b.n	8008ffa <_dtoa_r+0x1f2>
 8008ff2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008ff4:	2600      	movs	r6, #0
 8008ff6:	3a04      	subs	r2, #4
 8008ff8:	9222      	str	r2, [sp, #136]	; 0x88
 8008ffa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d02a      	beq.n	8009056 <_dtoa_r+0x24e>
 8009000:	2b03      	cmp	r3, #3
 8009002:	dc02      	bgt.n	800900a <_dtoa_r+0x202>
 8009004:	2b02      	cmp	r3, #2
 8009006:	d10d      	bne.n	8009024 <_dtoa_r+0x21c>
 8009008:	e015      	b.n	8009036 <_dtoa_r+0x22e>
 800900a:	9822      	ldr	r0, [sp, #136]	; 0x88
 800900c:	2804      	cmp	r0, #4
 800900e:	d004      	beq.n	800901a <_dtoa_r+0x212>
 8009010:	2805      	cmp	r0, #5
 8009012:	d107      	bne.n	8009024 <_dtoa_r+0x21c>
 8009014:	2101      	movs	r1, #1
 8009016:	9111      	str	r1, [sp, #68]	; 0x44
 8009018:	e01f      	b.n	800905a <_dtoa_r+0x252>
 800901a:	2201      	movs	r2, #1
 800901c:	e00c      	b.n	8009038 <_dtoa_r+0x230>
 800901e:	2300      	movs	r3, #0
 8009020:	2601      	movs	r6, #1
 8009022:	9322      	str	r3, [sp, #136]	; 0x88
 8009024:	2001      	movs	r0, #1
 8009026:	9011      	str	r0, [sp, #68]	; 0x44
 8009028:	2100      	movs	r1, #0
 800902a:	4240      	negs	r0, r0
 800902c:	900b      	str	r0, [sp, #44]	; 0x2c
 800902e:	900c      	str	r0, [sp, #48]	; 0x30
 8009030:	2312      	movs	r3, #18
 8009032:	9123      	str	r1, [sp, #140]	; 0x8c
 8009034:	e019      	b.n	800906a <_dtoa_r+0x262>
 8009036:	2200      	movs	r2, #0
 8009038:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800903a:	9211      	str	r2, [sp, #68]	; 0x44
 800903c:	2b00      	cmp	r3, #0
 800903e:	dc05      	bgt.n	800904c <_dtoa_r+0x244>
 8009040:	2001      	movs	r0, #1
 8009042:	2301      	movs	r3, #1
 8009044:	900b      	str	r0, [sp, #44]	; 0x2c
 8009046:	900c      	str	r0, [sp, #48]	; 0x30
 8009048:	9323      	str	r3, [sp, #140]	; 0x8c
 800904a:	e00e      	b.n	800906a <_dtoa_r+0x262>
 800904c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800904e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009050:	910c      	str	r1, [sp, #48]	; 0x30
 8009052:	1c0b      	adds	r3, r1, #0
 8009054:	e009      	b.n	800906a <_dtoa_r+0x262>
 8009056:	2200      	movs	r2, #0
 8009058:	9211      	str	r2, [sp, #68]	; 0x44
 800905a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800905c:	18fb      	adds	r3, r7, r3
 800905e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009060:	3301      	adds	r3, #1
 8009062:	930c      	str	r3, [sp, #48]	; 0x30
 8009064:	2b00      	cmp	r3, #0
 8009066:	dc00      	bgt.n	800906a <_dtoa_r+0x262>
 8009068:	2301      	movs	r3, #1
 800906a:	2200      	movs	r2, #0
 800906c:	646a      	str	r2, [r5, #68]	; 0x44
 800906e:	2204      	movs	r2, #4
 8009070:	e003      	b.n	800907a <_dtoa_r+0x272>
 8009072:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8009074:	0052      	lsls	r2, r2, #1
 8009076:	3101      	adds	r1, #1
 8009078:	6469      	str	r1, [r5, #68]	; 0x44
 800907a:	1c11      	adds	r1, r2, #0
 800907c:	3114      	adds	r1, #20
 800907e:	4299      	cmp	r1, r3
 8009080:	d9f7      	bls.n	8009072 <_dtoa_r+0x26a>
 8009082:	1c28      	adds	r0, r5, #0
 8009084:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8009086:	f001 f905 	bl	800a294 <_Balloc>
 800908a:	900d      	str	r0, [sp, #52]	; 0x34
 800908c:	6428      	str	r0, [r5, #64]	; 0x40
 800908e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009090:	280e      	cmp	r0, #14
 8009092:	d900      	bls.n	8009096 <_dtoa_r+0x28e>
 8009094:	e1ad      	b.n	80093f2 <_dtoa_r+0x5ea>
 8009096:	2e00      	cmp	r6, #0
 8009098:	d100      	bne.n	800909c <_dtoa_r+0x294>
 800909a:	e1aa      	b.n	80093f2 <_dtoa_r+0x5ea>
 800909c:	2f00      	cmp	r7, #0
 800909e:	dd73      	ble.n	8009188 <_dtoa_r+0x380>
 80090a0:	230f      	movs	r3, #15
 80090a2:	1c39      	adds	r1, r7, #0
 80090a4:	4019      	ands	r1, r3
 80090a6:	4a36      	ldr	r2, [pc, #216]	; (8009180 <_dtoa_r+0x378>)
 80090a8:	00c9      	lsls	r1, r1, #3
 80090aa:	188a      	adds	r2, r1, r2
 80090ac:	6810      	ldr	r0, [r2, #0]
 80090ae:	6851      	ldr	r1, [r2, #4]
 80090b0:	900e      	str	r0, [sp, #56]	; 0x38
 80090b2:	910f      	str	r1, [sp, #60]	; 0x3c
 80090b4:	1139      	asrs	r1, r7, #4
 80090b6:	9104      	str	r1, [sp, #16]
 80090b8:	06c9      	lsls	r1, r1, #27
 80090ba:	d401      	bmi.n	80090c0 <_dtoa_r+0x2b8>
 80090bc:	2602      	movs	r6, #2
 80090be:	e00c      	b.n	80090da <_dtoa_r+0x2d2>
 80090c0:	9a04      	ldr	r2, [sp, #16]
 80090c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80090c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80090c6:	401a      	ands	r2, r3
 80090c8:	4b2e      	ldr	r3, [pc, #184]	; (8009184 <_dtoa_r+0x37c>)
 80090ca:	9204      	str	r2, [sp, #16]
 80090cc:	6a1a      	ldr	r2, [r3, #32]
 80090ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d0:	f7f7 fc6c 	bl	80009ac <__aeabi_ddiv>
 80090d4:	9002      	str	r0, [sp, #8]
 80090d6:	9103      	str	r1, [sp, #12]
 80090d8:	2603      	movs	r6, #3
 80090da:	4b2a      	ldr	r3, [pc, #168]	; (8009184 <_dtoa_r+0x37c>)
 80090dc:	9416      	str	r4, [sp, #88]	; 0x58
 80090de:	9309      	str	r3, [sp, #36]	; 0x24
 80090e0:	e012      	b.n	8009108 <_dtoa_r+0x300>
 80090e2:	9c04      	ldr	r4, [sp, #16]
 80090e4:	07e4      	lsls	r4, r4, #31
 80090e6:	d509      	bpl.n	80090fc <_dtoa_r+0x2f4>
 80090e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80090ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 80090ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80090ee:	6822      	ldr	r2, [r4, #0]
 80090f0:	6863      	ldr	r3, [r4, #4]
 80090f2:	f7f8 f84b 	bl	800118c <__aeabi_dmul>
 80090f6:	900e      	str	r0, [sp, #56]	; 0x38
 80090f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80090fa:	3601      	adds	r6, #1
 80090fc:	9804      	ldr	r0, [sp, #16]
 80090fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009100:	1040      	asrs	r0, r0, #1
 8009102:	3108      	adds	r1, #8
 8009104:	9004      	str	r0, [sp, #16]
 8009106:	9109      	str	r1, [sp, #36]	; 0x24
 8009108:	9a04      	ldr	r2, [sp, #16]
 800910a:	2a00      	cmp	r2, #0
 800910c:	d1e9      	bne.n	80090e2 <_dtoa_r+0x2da>
 800910e:	9802      	ldr	r0, [sp, #8]
 8009110:	9903      	ldr	r1, [sp, #12]
 8009112:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009116:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8009118:	f7f7 fc48 	bl	80009ac <__aeabi_ddiv>
 800911c:	e05e      	b.n	80091dc <_dtoa_r+0x3d4>
 800911e:	46c0      	nop			; (mov r8, r8)
	...
 800912c:	3ff80000 	.word	0x3ff80000
 8009130:	636f4361 	.word	0x636f4361
 8009134:	3fd287a7 	.word	0x3fd287a7
 8009138:	8b60c8b3 	.word	0x8b60c8b3
 800913c:	3fc68a28 	.word	0x3fc68a28
 8009140:	509f79fb 	.word	0x509f79fb
 8009144:	3fd34413 	.word	0x3fd34413
 8009148:	7fffffff 	.word	0x7fffffff
 800914c:	7ff00000 	.word	0x7ff00000
 8009150:	0000270f 	.word	0x0000270f
 8009154:	0800c25c 	.word	0x0800c25c
 8009158:	0800c265 	.word	0x0800c265
 800915c:	0800b9ca 	.word	0x0800b9ca
 8009160:	0800b9cb 	.word	0x0800b9cb
 8009164:	000fffff 	.word	0x000fffff
 8009168:	3ff00000 	.word	0x3ff00000
 800916c:	fffffc01 	.word	0xfffffc01
 8009170:	00000432 	.word	0x00000432
 8009174:	00000412 	.word	0x00000412
 8009178:	fffffbcd 	.word	0xfffffbcd
 800917c:	fe100000 	.word	0xfe100000
 8009180:	0800c2b0 	.word	0x0800c2b0
 8009184:	0800c378 	.word	0x0800c378
 8009188:	427e      	negs	r6, r7
 800918a:	2e00      	cmp	r6, #0
 800918c:	d101      	bne.n	8009192 <_dtoa_r+0x38a>
 800918e:	2602      	movs	r6, #2
 8009190:	e026      	b.n	80091e0 <_dtoa_r+0x3d8>
 8009192:	230f      	movs	r3, #15
 8009194:	4033      	ands	r3, r6
 8009196:	4ab6      	ldr	r2, [pc, #728]	; (8009470 <_dtoa_r+0x668>)
 8009198:	00db      	lsls	r3, r3, #3
 800919a:	189b      	adds	r3, r3, r2
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80091a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80091a4:	f7f7 fff2 	bl	800118c <__aeabi_dmul>
 80091a8:	4bb2      	ldr	r3, [pc, #712]	; (8009474 <_dtoa_r+0x66c>)
 80091aa:	1136      	asrs	r6, r6, #4
 80091ac:	9602      	str	r6, [sp, #8]
 80091ae:	9304      	str	r3, [sp, #16]
 80091b0:	2602      	movs	r6, #2
 80091b2:	9409      	str	r4, [sp, #36]	; 0x24
 80091b4:	e00e      	b.n	80091d4 <_dtoa_r+0x3cc>
 80091b6:	9c02      	ldr	r4, [sp, #8]
 80091b8:	07e4      	lsls	r4, r4, #31
 80091ba:	d505      	bpl.n	80091c8 <_dtoa_r+0x3c0>
 80091bc:	9c04      	ldr	r4, [sp, #16]
 80091be:	3601      	adds	r6, #1
 80091c0:	6822      	ldr	r2, [r4, #0]
 80091c2:	6863      	ldr	r3, [r4, #4]
 80091c4:	f7f7 ffe2 	bl	800118c <__aeabi_dmul>
 80091c8:	9a02      	ldr	r2, [sp, #8]
 80091ca:	9b04      	ldr	r3, [sp, #16]
 80091cc:	1052      	asrs	r2, r2, #1
 80091ce:	3308      	adds	r3, #8
 80091d0:	9202      	str	r2, [sp, #8]
 80091d2:	9304      	str	r3, [sp, #16]
 80091d4:	9c02      	ldr	r4, [sp, #8]
 80091d6:	2c00      	cmp	r4, #0
 80091d8:	d1ed      	bne.n	80091b6 <_dtoa_r+0x3ae>
 80091da:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80091dc:	9002      	str	r0, [sp, #8]
 80091de:	9103      	str	r1, [sp, #12]
 80091e0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80091e2:	2800      	cmp	r0, #0
 80091e4:	d020      	beq.n	8009228 <_dtoa_r+0x420>
 80091e6:	9902      	ldr	r1, [sp, #8]
 80091e8:	9a03      	ldr	r2, [sp, #12]
 80091ea:	9104      	str	r1, [sp, #16]
 80091ec:	9205      	str	r2, [sp, #20]
 80091ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091f0:	2a00      	cmp	r2, #0
 80091f2:	dd19      	ble.n	8009228 <_dtoa_r+0x420>
 80091f4:	9804      	ldr	r0, [sp, #16]
 80091f6:	9905      	ldr	r1, [sp, #20]
 80091f8:	4b94      	ldr	r3, [pc, #592]	; (800944c <_dtoa_r+0x644>)
 80091fa:	4a93      	ldr	r2, [pc, #588]	; (8009448 <_dtoa_r+0x640>)
 80091fc:	f7f7 f840 	bl	8000280 <__aeabi_dcmplt>
 8009200:	2800      	cmp	r0, #0
 8009202:	d011      	beq.n	8009228 <_dtoa_r+0x420>
 8009204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009206:	2b00      	cmp	r3, #0
 8009208:	dc00      	bgt.n	800920c <_dtoa_r+0x404>
 800920a:	e0ee      	b.n	80093ea <_dtoa_r+0x5e2>
 800920c:	1e78      	subs	r0, r7, #1
 800920e:	9009      	str	r0, [sp, #36]	; 0x24
 8009210:	4a8f      	ldr	r2, [pc, #572]	; (8009450 <_dtoa_r+0x648>)
 8009212:	4b90      	ldr	r3, [pc, #576]	; (8009454 <_dtoa_r+0x64c>)
 8009214:	9804      	ldr	r0, [sp, #16]
 8009216:	9905      	ldr	r1, [sp, #20]
 8009218:	f7f7 ffb8 	bl	800118c <__aeabi_dmul>
 800921c:	9002      	str	r0, [sp, #8]
 800921e:	9103      	str	r1, [sp, #12]
 8009220:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009222:	3601      	adds	r6, #1
 8009224:	9104      	str	r1, [sp, #16]
 8009226:	e002      	b.n	800922e <_dtoa_r+0x426>
 8009228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800922a:	9709      	str	r7, [sp, #36]	; 0x24
 800922c:	9204      	str	r2, [sp, #16]
 800922e:	1c30      	adds	r0, r6, #0
 8009230:	f7f8 fdac 	bl	8001d8c <__aeabi_i2d>
 8009234:	9a02      	ldr	r2, [sp, #8]
 8009236:	9b03      	ldr	r3, [sp, #12]
 8009238:	f7f7 ffa8 	bl	800118c <__aeabi_dmul>
 800923c:	4a86      	ldr	r2, [pc, #536]	; (8009458 <_dtoa_r+0x650>)
 800923e:	4b87      	ldr	r3, [pc, #540]	; (800945c <_dtoa_r+0x654>)
 8009240:	f7f7 f846 	bl	80002d0 <__aeabi_dadd>
 8009244:	900e      	str	r0, [sp, #56]	; 0x38
 8009246:	910f      	str	r1, [sp, #60]	; 0x3c
 8009248:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800924a:	4a8b      	ldr	r2, [pc, #556]	; (8009478 <_dtoa_r+0x670>)
 800924c:	9b04      	ldr	r3, [sp, #16]
 800924e:	188a      	adds	r2, r1, r2
 8009250:	9216      	str	r2, [sp, #88]	; 0x58
 8009252:	920f      	str	r2, [sp, #60]	; 0x3c
 8009254:	2b00      	cmp	r3, #0
 8009256:	d11f      	bne.n	8009298 <_dtoa_r+0x490>
 8009258:	4a81      	ldr	r2, [pc, #516]	; (8009460 <_dtoa_r+0x658>)
 800925a:	4b82      	ldr	r3, [pc, #520]	; (8009464 <_dtoa_r+0x65c>)
 800925c:	9802      	ldr	r0, [sp, #8]
 800925e:	9903      	ldr	r1, [sp, #12]
 8009260:	f7f8 f9c2 	bl	80015e8 <__aeabi_dsub>
 8009264:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009266:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009268:	9002      	str	r0, [sp, #8]
 800926a:	9103      	str	r1, [sp, #12]
 800926c:	f7f7 f81c 	bl	80002a8 <__aeabi_dcmpgt>
 8009270:	2800      	cmp	r0, #0
 8009272:	d000      	beq.n	8009276 <_dtoa_r+0x46e>
 8009274:	e269      	b.n	800974a <_dtoa_r+0x942>
 8009276:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009278:	2380      	movs	r3, #128	; 0x80
 800927a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800927c:	061b      	lsls	r3, r3, #24
 800927e:	18d3      	adds	r3, r2, r3
 8009280:	9802      	ldr	r0, [sp, #8]
 8009282:	9903      	ldr	r1, [sp, #12]
 8009284:	9602      	str	r6, [sp, #8]
 8009286:	9303      	str	r3, [sp, #12]
 8009288:	9a02      	ldr	r2, [sp, #8]
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	f7f6 fff8 	bl	8000280 <__aeabi_dcmplt>
 8009290:	2800      	cmp	r0, #0
 8009292:	d000      	beq.n	8009296 <_dtoa_r+0x48e>
 8009294:	e24f      	b.n	8009736 <_dtoa_r+0x92e>
 8009296:	e0a8      	b.n	80093ea <_dtoa_r+0x5e2>
 8009298:	9b04      	ldr	r3, [sp, #16]
 800929a:	4a75      	ldr	r2, [pc, #468]	; (8009470 <_dtoa_r+0x668>)
 800929c:	3b01      	subs	r3, #1
 800929e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80092a0:	00db      	lsls	r3, r3, #3
 80092a2:	189b      	adds	r3, r3, r2
 80092a4:	2e00      	cmp	r6, #0
 80092a6:	d04e      	beq.n	8009346 <_dtoa_r+0x53e>
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	486e      	ldr	r0, [pc, #440]	; (8009468 <_dtoa_r+0x660>)
 80092ae:	496f      	ldr	r1, [pc, #444]	; (800946c <_dtoa_r+0x664>)
 80092b0:	f7f7 fb7c 	bl	80009ac <__aeabi_ddiv>
 80092b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092b8:	f7f8 f996 	bl	80015e8 <__aeabi_dsub>
 80092bc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80092be:	900e      	str	r0, [sp, #56]	; 0x38
 80092c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80092c2:	2000      	movs	r0, #0
 80092c4:	9016      	str	r0, [sp, #88]	; 0x58
 80092c6:	9802      	ldr	r0, [sp, #8]
 80092c8:	9903      	ldr	r1, [sp, #12]
 80092ca:	f7f8 fd2b 	bl	8001d24 <__aeabi_d2iz>
 80092ce:	9018      	str	r0, [sp, #96]	; 0x60
 80092d0:	f7f8 fd5c 	bl	8001d8c <__aeabi_i2d>
 80092d4:	1c02      	adds	r2, r0, #0
 80092d6:	1c0b      	adds	r3, r1, #0
 80092d8:	9802      	ldr	r0, [sp, #8]
 80092da:	9903      	ldr	r1, [sp, #12]
 80092dc:	f7f8 f984 	bl	80015e8 <__aeabi_dsub>
 80092e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80092e2:	9002      	str	r0, [sp, #8]
 80092e4:	9103      	str	r1, [sp, #12]
 80092e6:	3330      	adds	r3, #48	; 0x30
 80092e8:	7033      	strb	r3, [r6, #0]
 80092ea:	9802      	ldr	r0, [sp, #8]
 80092ec:	9903      	ldr	r1, [sp, #12]
 80092ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092f2:	3601      	adds	r6, #1
 80092f4:	f7f6 ffc4 	bl	8000280 <__aeabi_dcmplt>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d000      	beq.n	80092fe <_dtoa_r+0x4f6>
 80092fc:	e353      	b.n	80099a6 <_dtoa_r+0xb9e>
 80092fe:	9a02      	ldr	r2, [sp, #8]
 8009300:	9b03      	ldr	r3, [sp, #12]
 8009302:	4952      	ldr	r1, [pc, #328]	; (800944c <_dtoa_r+0x644>)
 8009304:	4850      	ldr	r0, [pc, #320]	; (8009448 <_dtoa_r+0x640>)
 8009306:	f7f8 f96f 	bl	80015e8 <__aeabi_dsub>
 800930a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800930c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800930e:	f7f6 ffb7 	bl	8000280 <__aeabi_dcmplt>
 8009312:	2800      	cmp	r0, #0
 8009314:	d000      	beq.n	8009318 <_dtoa_r+0x510>
 8009316:	e0f3      	b.n	8009500 <_dtoa_r+0x6f8>
 8009318:	9916      	ldr	r1, [sp, #88]	; 0x58
 800931a:	9a04      	ldr	r2, [sp, #16]
 800931c:	3101      	adds	r1, #1
 800931e:	9116      	str	r1, [sp, #88]	; 0x58
 8009320:	4291      	cmp	r1, r2
 8009322:	da62      	bge.n	80093ea <_dtoa_r+0x5e2>
 8009324:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009326:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009328:	4a49      	ldr	r2, [pc, #292]	; (8009450 <_dtoa_r+0x648>)
 800932a:	4b4a      	ldr	r3, [pc, #296]	; (8009454 <_dtoa_r+0x64c>)
 800932c:	f7f7 ff2e 	bl	800118c <__aeabi_dmul>
 8009330:	4a47      	ldr	r2, [pc, #284]	; (8009450 <_dtoa_r+0x648>)
 8009332:	4b48      	ldr	r3, [pc, #288]	; (8009454 <_dtoa_r+0x64c>)
 8009334:	900e      	str	r0, [sp, #56]	; 0x38
 8009336:	910f      	str	r1, [sp, #60]	; 0x3c
 8009338:	9802      	ldr	r0, [sp, #8]
 800933a:	9903      	ldr	r1, [sp, #12]
 800933c:	f7f7 ff26 	bl	800118c <__aeabi_dmul>
 8009340:	9002      	str	r0, [sp, #8]
 8009342:	9103      	str	r1, [sp, #12]
 8009344:	e7bf      	b.n	80092c6 <_dtoa_r+0x4be>
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	6859      	ldr	r1, [r3, #4]
 800934a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800934c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800934e:	f7f7 ff1d 	bl	800118c <__aeabi_dmul>
 8009352:	9b04      	ldr	r3, [sp, #16]
 8009354:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8009356:	900e      	str	r0, [sp, #56]	; 0x38
 8009358:	910f      	str	r1, [sp, #60]	; 0x3c
 800935a:	199b      	adds	r3, r3, r6
 800935c:	9318      	str	r3, [sp, #96]	; 0x60
 800935e:	9802      	ldr	r0, [sp, #8]
 8009360:	9903      	ldr	r1, [sp, #12]
 8009362:	f7f8 fcdf 	bl	8001d24 <__aeabi_d2iz>
 8009366:	9016      	str	r0, [sp, #88]	; 0x58
 8009368:	f7f8 fd10 	bl	8001d8c <__aeabi_i2d>
 800936c:	1c0b      	adds	r3, r1, #0
 800936e:	1c02      	adds	r2, r0, #0
 8009370:	9802      	ldr	r0, [sp, #8]
 8009372:	9903      	ldr	r1, [sp, #12]
 8009374:	f7f8 f938 	bl	80015e8 <__aeabi_dsub>
 8009378:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800937a:	9002      	str	r0, [sp, #8]
 800937c:	9103      	str	r1, [sp, #12]
 800937e:	3330      	adds	r3, #48	; 0x30
 8009380:	7033      	strb	r3, [r6, #0]
 8009382:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009384:	3601      	adds	r6, #1
 8009386:	4286      	cmp	r6, r0
 8009388:	d126      	bne.n	80093d8 <_dtoa_r+0x5d0>
 800938a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800938c:	9a04      	ldr	r2, [sp, #16]
 800938e:	188e      	adds	r6, r1, r2
 8009390:	4a35      	ldr	r2, [pc, #212]	; (8009468 <_dtoa_r+0x660>)
 8009392:	4b36      	ldr	r3, [pc, #216]	; (800946c <_dtoa_r+0x664>)
 8009394:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009396:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009398:	f7f6 ff9a 	bl	80002d0 <__aeabi_dadd>
 800939c:	1c02      	adds	r2, r0, #0
 800939e:	1c0b      	adds	r3, r1, #0
 80093a0:	9802      	ldr	r0, [sp, #8]
 80093a2:	9903      	ldr	r1, [sp, #12]
 80093a4:	f7f6 ff80 	bl	80002a8 <__aeabi_dcmpgt>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d000      	beq.n	80093ae <_dtoa_r+0x5a6>
 80093ac:	e0a8      	b.n	8009500 <_dtoa_r+0x6f8>
 80093ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093b2:	482d      	ldr	r0, [pc, #180]	; (8009468 <_dtoa_r+0x660>)
 80093b4:	492d      	ldr	r1, [pc, #180]	; (800946c <_dtoa_r+0x664>)
 80093b6:	f7f8 f917 	bl	80015e8 <__aeabi_dsub>
 80093ba:	1c02      	adds	r2, r0, #0
 80093bc:	1c0b      	adds	r3, r1, #0
 80093be:	9802      	ldr	r0, [sp, #8]
 80093c0:	9903      	ldr	r1, [sp, #12]
 80093c2:	f7f6 ff5d 	bl	8000280 <__aeabi_dcmplt>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d00f      	beq.n	80093ea <_dtoa_r+0x5e2>
 80093ca:	1e73      	subs	r3, r6, #1
 80093cc:	781a      	ldrb	r2, [r3, #0]
 80093ce:	2a30      	cmp	r2, #48	; 0x30
 80093d0:	d000      	beq.n	80093d4 <_dtoa_r+0x5cc>
 80093d2:	e2e8      	b.n	80099a6 <_dtoa_r+0xb9e>
 80093d4:	1c1e      	adds	r6, r3, #0
 80093d6:	e7f8      	b.n	80093ca <_dtoa_r+0x5c2>
 80093d8:	9802      	ldr	r0, [sp, #8]
 80093da:	9903      	ldr	r1, [sp, #12]
 80093dc:	4a1c      	ldr	r2, [pc, #112]	; (8009450 <_dtoa_r+0x648>)
 80093de:	4b1d      	ldr	r3, [pc, #116]	; (8009454 <_dtoa_r+0x64c>)
 80093e0:	f7f7 fed4 	bl	800118c <__aeabi_dmul>
 80093e4:	9002      	str	r0, [sp, #8]
 80093e6:	9103      	str	r1, [sp, #12]
 80093e8:	e7b9      	b.n	800935e <_dtoa_r+0x556>
 80093ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80093ec:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80093ee:	9002      	str	r0, [sp, #8]
 80093f0:	9103      	str	r1, [sp, #12]
 80093f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80093f4:	2f0e      	cmp	r7, #14
 80093f6:	dd00      	ble.n	80093fa <_dtoa_r+0x5f2>
 80093f8:	e09a      	b.n	8009530 <_dtoa_r+0x728>
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	da00      	bge.n	8009400 <_dtoa_r+0x5f8>
 80093fe:	e097      	b.n	8009530 <_dtoa_r+0x728>
 8009400:	4b1b      	ldr	r3, [pc, #108]	; (8009470 <_dtoa_r+0x668>)
 8009402:	00fa      	lsls	r2, r7, #3
 8009404:	18d3      	adds	r3, r2, r3
 8009406:	6819      	ldr	r1, [r3, #0]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	9104      	str	r1, [sp, #16]
 800940c:	9205      	str	r2, [sp, #20]
 800940e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009410:	2a00      	cmp	r2, #0
 8009412:	dc33      	bgt.n	800947c <_dtoa_r+0x674>
 8009414:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009416:	2b00      	cmp	r3, #0
 8009418:	da30      	bge.n	800947c <_dtoa_r+0x674>
 800941a:	2a00      	cmp	r2, #0
 800941c:	d000      	beq.n	8009420 <_dtoa_r+0x618>
 800941e:	e18a      	b.n	8009736 <_dtoa_r+0x92e>
 8009420:	4a0f      	ldr	r2, [pc, #60]	; (8009460 <_dtoa_r+0x658>)
 8009422:	4b10      	ldr	r3, [pc, #64]	; (8009464 <_dtoa_r+0x65c>)
 8009424:	9804      	ldr	r0, [sp, #16]
 8009426:	9905      	ldr	r1, [sp, #20]
 8009428:	f7f7 feb0 	bl	800118c <__aeabi_dmul>
 800942c:	9a02      	ldr	r2, [sp, #8]
 800942e:	9b03      	ldr	r3, [sp, #12]
 8009430:	f7f6 ff44 	bl	80002bc <__aeabi_dcmpge>
 8009434:	2800      	cmp	r0, #0
 8009436:	d000      	beq.n	800943a <_dtoa_r+0x632>
 8009438:	e17d      	b.n	8009736 <_dtoa_r+0x92e>
 800943a:	2400      	movs	r4, #0
 800943c:	9407      	str	r4, [sp, #28]
 800943e:	9404      	str	r4, [sp, #16]
 8009440:	e187      	b.n	8009752 <_dtoa_r+0x94a>
 8009442:	46c0      	nop			; (mov r8, r8)
 8009444:	46c0      	nop			; (mov r8, r8)
 8009446:	46c0      	nop			; (mov r8, r8)
 8009448:	00000000 	.word	0x00000000
 800944c:	3ff00000 	.word	0x3ff00000
 8009450:	00000000 	.word	0x00000000
 8009454:	40240000 	.word	0x40240000
 8009458:	00000000 	.word	0x00000000
 800945c:	401c0000 	.word	0x401c0000
 8009460:	00000000 	.word	0x00000000
 8009464:	40140000 	.word	0x40140000
 8009468:	00000000 	.word	0x00000000
 800946c:	3fe00000 	.word	0x3fe00000
 8009470:	0800c2b0 	.word	0x0800c2b0
 8009474:	0800c378 	.word	0x0800c378
 8009478:	fcc00000 	.word	0xfcc00000
 800947c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800947e:	2401      	movs	r4, #1
 8009480:	9a04      	ldr	r2, [sp, #16]
 8009482:	9b05      	ldr	r3, [sp, #20]
 8009484:	9802      	ldr	r0, [sp, #8]
 8009486:	9903      	ldr	r1, [sp, #12]
 8009488:	f7f7 fa90 	bl	80009ac <__aeabi_ddiv>
 800948c:	f7f8 fc4a 	bl	8001d24 <__aeabi_d2iz>
 8009490:	9007      	str	r0, [sp, #28]
 8009492:	f7f8 fc7b 	bl	8001d8c <__aeabi_i2d>
 8009496:	9a04      	ldr	r2, [sp, #16]
 8009498:	9b05      	ldr	r3, [sp, #20]
 800949a:	f7f7 fe77 	bl	800118c <__aeabi_dmul>
 800949e:	1c02      	adds	r2, r0, #0
 80094a0:	1c0b      	adds	r3, r1, #0
 80094a2:	9802      	ldr	r0, [sp, #8]
 80094a4:	9903      	ldr	r1, [sp, #12]
 80094a6:	f7f8 f89f 	bl	80015e8 <__aeabi_dsub>
 80094aa:	9b07      	ldr	r3, [sp, #28]
 80094ac:	3330      	adds	r3, #48	; 0x30
 80094ae:	7033      	strb	r3, [r6, #0]
 80094b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094b2:	3601      	adds	r6, #1
 80094b4:	4294      	cmp	r4, r2
 80094b6:	d12c      	bne.n	8009512 <_dtoa_r+0x70a>
 80094b8:	1c02      	adds	r2, r0, #0
 80094ba:	1c0b      	adds	r3, r1, #0
 80094bc:	f7f6 ff08 	bl	80002d0 <__aeabi_dadd>
 80094c0:	9a04      	ldr	r2, [sp, #16]
 80094c2:	9b05      	ldr	r3, [sp, #20]
 80094c4:	9002      	str	r0, [sp, #8]
 80094c6:	9103      	str	r1, [sp, #12]
 80094c8:	f7f6 feee 	bl	80002a8 <__aeabi_dcmpgt>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d118      	bne.n	8009502 <_dtoa_r+0x6fa>
 80094d0:	9802      	ldr	r0, [sp, #8]
 80094d2:	9903      	ldr	r1, [sp, #12]
 80094d4:	9a04      	ldr	r2, [sp, #16]
 80094d6:	9b05      	ldr	r3, [sp, #20]
 80094d8:	f7f6 fecc 	bl	8000274 <__aeabi_dcmpeq>
 80094dc:	2800      	cmp	r0, #0
 80094de:	d100      	bne.n	80094e2 <_dtoa_r+0x6da>
 80094e0:	e260      	b.n	80099a4 <_dtoa_r+0xb9c>
 80094e2:	9b07      	ldr	r3, [sp, #28]
 80094e4:	07db      	lsls	r3, r3, #31
 80094e6:	d40c      	bmi.n	8009502 <_dtoa_r+0x6fa>
 80094e8:	e25c      	b.n	80099a4 <_dtoa_r+0xb9c>
 80094ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80094ec:	42a3      	cmp	r3, r4
 80094ee:	d001      	beq.n	80094f4 <_dtoa_r+0x6ec>
 80094f0:	1c1e      	adds	r6, r3, #0
 80094f2:	e006      	b.n	8009502 <_dtoa_r+0x6fa>
 80094f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80094f6:	2330      	movs	r3, #48	; 0x30
 80094f8:	7003      	strb	r3, [r0, #0]
 80094fa:	3701      	adds	r7, #1
 80094fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094fe:	e004      	b.n	800950a <_dtoa_r+0x702>
 8009500:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009502:	1e73      	subs	r3, r6, #1
 8009504:	781a      	ldrb	r2, [r3, #0]
 8009506:	2a39      	cmp	r2, #57	; 0x39
 8009508:	d0ef      	beq.n	80094ea <_dtoa_r+0x6e2>
 800950a:	781a      	ldrb	r2, [r3, #0]
 800950c:	3201      	adds	r2, #1
 800950e:	701a      	strb	r2, [r3, #0]
 8009510:	e248      	b.n	80099a4 <_dtoa_r+0xb9c>
 8009512:	4bb8      	ldr	r3, [pc, #736]	; (80097f4 <_dtoa_r+0x9ec>)
 8009514:	4ab6      	ldr	r2, [pc, #728]	; (80097f0 <_dtoa_r+0x9e8>)
 8009516:	f7f7 fe39 	bl	800118c <__aeabi_dmul>
 800951a:	4ab7      	ldr	r2, [pc, #732]	; (80097f8 <_dtoa_r+0x9f0>)
 800951c:	4bb7      	ldr	r3, [pc, #732]	; (80097fc <_dtoa_r+0x9f4>)
 800951e:	9002      	str	r0, [sp, #8]
 8009520:	9103      	str	r1, [sp, #12]
 8009522:	f7f6 fea7 	bl	8000274 <__aeabi_dcmpeq>
 8009526:	2800      	cmp	r0, #0
 8009528:	d000      	beq.n	800952c <_dtoa_r+0x724>
 800952a:	e23b      	b.n	80099a4 <_dtoa_r+0xb9c>
 800952c:	3401      	adds	r4, #1
 800952e:	e7a7      	b.n	8009480 <_dtoa_r+0x678>
 8009530:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009532:	2900      	cmp	r1, #0
 8009534:	d105      	bne.n	8009542 <_dtoa_r+0x73a>
 8009536:	9a07      	ldr	r2, [sp, #28]
 8009538:	2300      	movs	r3, #0
 800953a:	9209      	str	r2, [sp, #36]	; 0x24
 800953c:	1c26      	adds	r6, r4, #0
 800953e:	9304      	str	r3, [sp, #16]
 8009540:	e034      	b.n	80095ac <_dtoa_r+0x7a4>
 8009542:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009544:	2e01      	cmp	r6, #1
 8009546:	dc0e      	bgt.n	8009566 <_dtoa_r+0x75e>
 8009548:	9819      	ldr	r0, [sp, #100]	; 0x64
 800954a:	2800      	cmp	r0, #0
 800954c:	d004      	beq.n	8009558 <_dtoa_r+0x750>
 800954e:	49ac      	ldr	r1, [pc, #688]	; (8009800 <_dtoa_r+0x9f8>)
 8009550:	9a07      	ldr	r2, [sp, #28]
 8009552:	185b      	adds	r3, r3, r1
 8009554:	9209      	str	r2, [sp, #36]	; 0x24
 8009556:	e004      	b.n	8009562 <_dtoa_r+0x75a>
 8009558:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800955a:	9e07      	ldr	r6, [sp, #28]
 800955c:	2336      	movs	r3, #54	; 0x36
 800955e:	1a9b      	subs	r3, r3, r2
 8009560:	9609      	str	r6, [sp, #36]	; 0x24
 8009562:	1c26      	adds	r6, r4, #0
 8009564:	e019      	b.n	800959a <_dtoa_r+0x792>
 8009566:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009568:	9807      	ldr	r0, [sp, #28]
 800956a:	3a01      	subs	r2, #1
 800956c:	4290      	cmp	r0, r2
 800956e:	db02      	blt.n	8009576 <_dtoa_r+0x76e>
 8009570:	1a82      	subs	r2, r0, r2
 8009572:	9209      	str	r2, [sp, #36]	; 0x24
 8009574:	e008      	b.n	8009588 <_dtoa_r+0x780>
 8009576:	9907      	ldr	r1, [sp, #28]
 8009578:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800957a:	1a52      	subs	r2, r2, r1
 800957c:	189b      	adds	r3, r3, r2
 800957e:	1889      	adds	r1, r1, r2
 8009580:	2600      	movs	r6, #0
 8009582:	9315      	str	r3, [sp, #84]	; 0x54
 8009584:	9107      	str	r1, [sp, #28]
 8009586:	9609      	str	r6, [sp, #36]	; 0x24
 8009588:	980c      	ldr	r0, [sp, #48]	; 0x30
 800958a:	2800      	cmp	r0, #0
 800958c:	db02      	blt.n	8009594 <_dtoa_r+0x78c>
 800958e:	1c26      	adds	r6, r4, #0
 8009590:	1c03      	adds	r3, r0, #0
 8009592:	e002      	b.n	800959a <_dtoa_r+0x792>
 8009594:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009596:	2300      	movs	r3, #0
 8009598:	1a66      	subs	r6, r4, r1
 800959a:	9a08      	ldr	r2, [sp, #32]
 800959c:	1c28      	adds	r0, r5, #0
 800959e:	18d2      	adds	r2, r2, r3
 80095a0:	2101      	movs	r1, #1
 80095a2:	18e4      	adds	r4, r4, r3
 80095a4:	9208      	str	r2, [sp, #32]
 80095a6:	f001 f851 	bl	800a64c <__i2b>
 80095aa:	9004      	str	r0, [sp, #16]
 80095ac:	9b08      	ldr	r3, [sp, #32]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	dd09      	ble.n	80095c6 <_dtoa_r+0x7be>
 80095b2:	2e00      	cmp	r6, #0
 80095b4:	dd07      	ble.n	80095c6 <_dtoa_r+0x7be>
 80095b6:	42b3      	cmp	r3, r6
 80095b8:	dd00      	ble.n	80095bc <_dtoa_r+0x7b4>
 80095ba:	1c33      	adds	r3, r6, #0
 80095bc:	9808      	ldr	r0, [sp, #32]
 80095be:	1ae4      	subs	r4, r4, r3
 80095c0:	1ac0      	subs	r0, r0, r3
 80095c2:	1af6      	subs	r6, r6, r3
 80095c4:	9008      	str	r0, [sp, #32]
 80095c6:	9907      	ldr	r1, [sp, #28]
 80095c8:	2900      	cmp	r1, #0
 80095ca:	dd25      	ble.n	8009618 <_dtoa_r+0x810>
 80095cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80095ce:	2a00      	cmp	r2, #0
 80095d0:	d01c      	beq.n	800960c <_dtoa_r+0x804>
 80095d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	dd11      	ble.n	80095fc <_dtoa_r+0x7f4>
 80095d8:	1c1a      	adds	r2, r3, #0
 80095da:	9904      	ldr	r1, [sp, #16]
 80095dc:	1c28      	adds	r0, r5, #0
 80095de:	f001 f881 	bl	800a6e4 <__pow5mult>
 80095e2:	9004      	str	r0, [sp, #16]
 80095e4:	9904      	ldr	r1, [sp, #16]
 80095e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095e8:	1c28      	adds	r0, r5, #0
 80095ea:	f000 ff99 	bl	800a520 <__multiply>
 80095ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095f0:	9012      	str	r0, [sp, #72]	; 0x48
 80095f2:	1c28      	adds	r0, r5, #0
 80095f4:	f000 fdd0 	bl	800a198 <_Bfree>
 80095f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80095fa:	900a      	str	r0, [sp, #40]	; 0x28
 80095fc:	9907      	ldr	r1, [sp, #28]
 80095fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009600:	1aca      	subs	r2, r1, r3
 8009602:	2a00      	cmp	r2, #0
 8009604:	d008      	beq.n	8009618 <_dtoa_r+0x810>
 8009606:	1c28      	adds	r0, r5, #0
 8009608:	990a      	ldr	r1, [sp, #40]	; 0x28
 800960a:	e002      	b.n	8009612 <_dtoa_r+0x80a>
 800960c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800960e:	9a07      	ldr	r2, [sp, #28]
 8009610:	1c28      	adds	r0, r5, #0
 8009612:	f001 f867 	bl	800a6e4 <__pow5mult>
 8009616:	900a      	str	r0, [sp, #40]	; 0x28
 8009618:	1c28      	adds	r0, r5, #0
 800961a:	2101      	movs	r1, #1
 800961c:	f001 f816 	bl	800a64c <__i2b>
 8009620:	9007      	str	r0, [sp, #28]
 8009622:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009624:	2800      	cmp	r0, #0
 8009626:	dd05      	ble.n	8009634 <_dtoa_r+0x82c>
 8009628:	1c28      	adds	r0, r5, #0
 800962a:	9907      	ldr	r1, [sp, #28]
 800962c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800962e:	f001 f859 	bl	800a6e4 <__pow5mult>
 8009632:	9007      	str	r0, [sp, #28]
 8009634:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009636:	2901      	cmp	r1, #1
 8009638:	dc0f      	bgt.n	800965a <_dtoa_r+0x852>
 800963a:	9a02      	ldr	r2, [sp, #8]
 800963c:	2a00      	cmp	r2, #0
 800963e:	d10c      	bne.n	800965a <_dtoa_r+0x852>
 8009640:	9a03      	ldr	r2, [sp, #12]
 8009642:	0313      	lsls	r3, r2, #12
 8009644:	d109      	bne.n	800965a <_dtoa_r+0x852>
 8009646:	4b6f      	ldr	r3, [pc, #444]	; (8009804 <_dtoa_r+0x9fc>)
 8009648:	421a      	tst	r2, r3
 800964a:	d006      	beq.n	800965a <_dtoa_r+0x852>
 800964c:	9808      	ldr	r0, [sp, #32]
 800964e:	2101      	movs	r1, #1
 8009650:	3001      	adds	r0, #1
 8009652:	3401      	adds	r4, #1
 8009654:	9008      	str	r0, [sp, #32]
 8009656:	9109      	str	r1, [sp, #36]	; 0x24
 8009658:	e001      	b.n	800965e <_dtoa_r+0x856>
 800965a:	2200      	movs	r2, #0
 800965c:	9209      	str	r2, [sp, #36]	; 0x24
 800965e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <_dtoa_r+0x860>
 8009664:	2301      	movs	r3, #1
 8009666:	e009      	b.n	800967c <_dtoa_r+0x874>
 8009668:	9807      	ldr	r0, [sp, #28]
 800966a:	6903      	ldr	r3, [r0, #16]
 800966c:	3303      	adds	r3, #3
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	181b      	adds	r3, r3, r0
 8009672:	6858      	ldr	r0, [r3, #4]
 8009674:	f000 fd9a 	bl	800a1ac <__hi0bits>
 8009678:	2320      	movs	r3, #32
 800967a:	1a1b      	subs	r3, r3, r0
 800967c:	9908      	ldr	r1, [sp, #32]
 800967e:	185a      	adds	r2, r3, r1
 8009680:	231f      	movs	r3, #31
 8009682:	4013      	ands	r3, r2
 8009684:	d00b      	beq.n	800969e <_dtoa_r+0x896>
 8009686:	2220      	movs	r2, #32
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	2b04      	cmp	r3, #4
 800968c:	dd05      	ble.n	800969a <_dtoa_r+0x892>
 800968e:	3b04      	subs	r3, #4
 8009690:	18c9      	adds	r1, r1, r3
 8009692:	18e4      	adds	r4, r4, r3
 8009694:	18f6      	adds	r6, r6, r3
 8009696:	9108      	str	r1, [sp, #32]
 8009698:	e007      	b.n	80096aa <_dtoa_r+0x8a2>
 800969a:	2b04      	cmp	r3, #4
 800969c:	d005      	beq.n	80096aa <_dtoa_r+0x8a2>
 800969e:	9a08      	ldr	r2, [sp, #32]
 80096a0:	331c      	adds	r3, #28
 80096a2:	18d2      	adds	r2, r2, r3
 80096a4:	18e4      	adds	r4, r4, r3
 80096a6:	18f6      	adds	r6, r6, r3
 80096a8:	9208      	str	r2, [sp, #32]
 80096aa:	2c00      	cmp	r4, #0
 80096ac:	dd05      	ble.n	80096ba <_dtoa_r+0x8b2>
 80096ae:	1c28      	adds	r0, r5, #0
 80096b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096b2:	1c22      	adds	r2, r4, #0
 80096b4:	f000 fee8 	bl	800a488 <__lshift>
 80096b8:	900a      	str	r0, [sp, #40]	; 0x28
 80096ba:	9b08      	ldr	r3, [sp, #32]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	dd05      	ble.n	80096cc <_dtoa_r+0x8c4>
 80096c0:	1c28      	adds	r0, r5, #0
 80096c2:	9907      	ldr	r1, [sp, #28]
 80096c4:	1c1a      	adds	r2, r3, #0
 80096c6:	f000 fedf 	bl	800a488 <__lshift>
 80096ca:	9007      	str	r0, [sp, #28]
 80096cc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80096ce:	2c00      	cmp	r4, #0
 80096d0:	d01c      	beq.n	800970c <_dtoa_r+0x904>
 80096d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80096d4:	9907      	ldr	r1, [sp, #28]
 80096d6:	f000 fdc0 	bl	800a25a <__mcmp>
 80096da:	2800      	cmp	r0, #0
 80096dc:	da16      	bge.n	800970c <_dtoa_r+0x904>
 80096de:	1c28      	adds	r0, r5, #0
 80096e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096e2:	220a      	movs	r2, #10
 80096e4:	2300      	movs	r3, #0
 80096e6:	f000 ffbb 	bl	800a660 <__multadd>
 80096ea:	900a      	str	r0, [sp, #40]	; 0x28
 80096ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 80096ee:	3f01      	subs	r7, #1
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d102      	bne.n	80096fa <_dtoa_r+0x8f2>
 80096f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096f6:	910c      	str	r1, [sp, #48]	; 0x30
 80096f8:	e008      	b.n	800970c <_dtoa_r+0x904>
 80096fa:	220a      	movs	r2, #10
 80096fc:	1c28      	adds	r0, r5, #0
 80096fe:	9904      	ldr	r1, [sp, #16]
 8009700:	2300      	movs	r3, #0
 8009702:	f000 ffad 	bl	800a660 <__multadd>
 8009706:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009708:	9004      	str	r0, [sp, #16]
 800970a:	920c      	str	r2, [sp, #48]	; 0x30
 800970c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800970e:	2b00      	cmp	r3, #0
 8009710:	dc29      	bgt.n	8009766 <_dtoa_r+0x95e>
 8009712:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8009714:	2c02      	cmp	r4, #2
 8009716:	dd26      	ble.n	8009766 <_dtoa_r+0x95e>
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10f      	bne.n	800973c <_dtoa_r+0x934>
 800971c:	9907      	ldr	r1, [sp, #28]
 800971e:	1c28      	adds	r0, r5, #0
 8009720:	2205      	movs	r2, #5
 8009722:	f000 ff9d 	bl	800a660 <__multadd>
 8009726:	9007      	str	r0, [sp, #28]
 8009728:	9907      	ldr	r1, [sp, #28]
 800972a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800972c:	f000 fd95 	bl	800a25a <__mcmp>
 8009730:	2800      	cmp	r0, #0
 8009732:	dc0e      	bgt.n	8009752 <_dtoa_r+0x94a>
 8009734:	e002      	b.n	800973c <_dtoa_r+0x934>
 8009736:	2600      	movs	r6, #0
 8009738:	9607      	str	r6, [sp, #28]
 800973a:	9604      	str	r6, [sp, #16]
 800973c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800973e:	2100      	movs	r1, #0
 8009740:	43c0      	mvns	r0, r0
 8009742:	9009      	str	r0, [sp, #36]	; 0x24
 8009744:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8009746:	910b      	str	r1, [sp, #44]	; 0x2c
 8009748:	e117      	b.n	800997a <_dtoa_r+0xb72>
 800974a:	2200      	movs	r2, #0
 800974c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800974e:	9207      	str	r2, [sp, #28]
 8009750:	9204      	str	r2, [sp, #16]
 8009752:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009754:	2331      	movs	r3, #49	; 0x31
 8009756:	1c26      	adds	r6, r4, #0
 8009758:	3701      	adds	r7, #1
 800975a:	2000      	movs	r0, #0
 800975c:	7023      	strb	r3, [r4, #0]
 800975e:	3601      	adds	r6, #1
 8009760:	9709      	str	r7, [sp, #36]	; 0x24
 8009762:	900b      	str	r0, [sp, #44]	; 0x2c
 8009764:	e109      	b.n	800997a <_dtoa_r+0xb72>
 8009766:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009768:	2900      	cmp	r1, #0
 800976a:	d100      	bne.n	800976e <_dtoa_r+0x966>
 800976c:	e0c4      	b.n	80098f8 <_dtoa_r+0xaf0>
 800976e:	2e00      	cmp	r6, #0
 8009770:	dd05      	ble.n	800977e <_dtoa_r+0x976>
 8009772:	1c28      	adds	r0, r5, #0
 8009774:	9904      	ldr	r1, [sp, #16]
 8009776:	1c32      	adds	r2, r6, #0
 8009778:	f000 fe86 	bl	800a488 <__lshift>
 800977c:	9004      	str	r0, [sp, #16]
 800977e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009780:	2a00      	cmp	r2, #0
 8009782:	d101      	bne.n	8009788 <_dtoa_r+0x980>
 8009784:	9804      	ldr	r0, [sp, #16]
 8009786:	e013      	b.n	80097b0 <_dtoa_r+0x9a8>
 8009788:	9b04      	ldr	r3, [sp, #16]
 800978a:	1c28      	adds	r0, r5, #0
 800978c:	6859      	ldr	r1, [r3, #4]
 800978e:	f000 fd81 	bl	800a294 <_Balloc>
 8009792:	9e04      	ldr	r6, [sp, #16]
 8009794:	9904      	ldr	r1, [sp, #16]
 8009796:	6932      	ldr	r2, [r6, #16]
 8009798:	1c04      	adds	r4, r0, #0
 800979a:	3202      	adds	r2, #2
 800979c:	310c      	adds	r1, #12
 800979e:	0092      	lsls	r2, r2, #2
 80097a0:	300c      	adds	r0, #12
 80097a2:	f7fd fb20 	bl	8006de6 <memcpy>
 80097a6:	1c28      	adds	r0, r5, #0
 80097a8:	1c21      	adds	r1, r4, #0
 80097aa:	2201      	movs	r2, #1
 80097ac:	f000 fe6c 	bl	800a488 <__lshift>
 80097b0:	9902      	ldr	r1, [sp, #8]
 80097b2:	2301      	movs	r3, #1
 80097b4:	9a04      	ldr	r2, [sp, #16]
 80097b6:	4019      	ands	r1, r3
 80097b8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80097ba:	9102      	str	r1, [sp, #8]
 80097bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80097be:	9004      	str	r0, [sp, #16]
 80097c0:	9907      	ldr	r1, [sp, #28]
 80097c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80097c4:	f7ff fa74 	bl	8008cb0 <quorem>
 80097c8:	3030      	adds	r0, #48	; 0x30
 80097ca:	9008      	str	r0, [sp, #32]
 80097cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80097d0:	f000 fd43 	bl	800a25a <__mcmp>
 80097d4:	9907      	ldr	r1, [sp, #28]
 80097d6:	9009      	str	r0, [sp, #36]	; 0x24
 80097d8:	9a04      	ldr	r2, [sp, #16]
 80097da:	1c28      	adds	r0, r5, #0
 80097dc:	f000 fde2 	bl	800a3a4 <__mdiff>
 80097e0:	68c3      	ldr	r3, [r0, #12]
 80097e2:	9011      	str	r0, [sp, #68]	; 0x44
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00f      	beq.n	8009808 <_dtoa_r+0xa00>
 80097e8:	2401      	movs	r4, #1
 80097ea:	e012      	b.n	8009812 <_dtoa_r+0xa0a>
 80097ec:	46c0      	nop			; (mov r8, r8)
 80097ee:	46c0      	nop			; (mov r8, r8)
 80097f0:	00000000 	.word	0x00000000
 80097f4:	40240000 	.word	0x40240000
	...
 8009800:	00000433 	.word	0x00000433
 8009804:	7ff00000 	.word	0x7ff00000
 8009808:	980a      	ldr	r0, [sp, #40]	; 0x28
 800980a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800980c:	f000 fd25 	bl	800a25a <__mcmp>
 8009810:	1c04      	adds	r4, r0, #0
 8009812:	1c28      	adds	r0, r5, #0
 8009814:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009816:	f000 fcbf 	bl	800a198 <_Bfree>
 800981a:	2c00      	cmp	r4, #0
 800981c:	d110      	bne.n	8009840 <_dtoa_r+0xa38>
 800981e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10d      	bne.n	8009840 <_dtoa_r+0xa38>
 8009824:	9802      	ldr	r0, [sp, #8]
 8009826:	2800      	cmp	r0, #0
 8009828:	d10a      	bne.n	8009840 <_dtoa_r+0xa38>
 800982a:	9908      	ldr	r1, [sp, #32]
 800982c:	2939      	cmp	r1, #57	; 0x39
 800982e:	d033      	beq.n	8009898 <_dtoa_r+0xa90>
 8009830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009832:	2a00      	cmp	r2, #0
 8009834:	dd01      	ble.n	800983a <_dtoa_r+0xa32>
 8009836:	3101      	adds	r1, #1
 8009838:	9108      	str	r1, [sp, #32]
 800983a:	ab08      	add	r3, sp, #32
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	e031      	b.n	80098a4 <_dtoa_r+0xa9c>
 8009840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009842:	2800      	cmp	r0, #0
 8009844:	db07      	blt.n	8009856 <_dtoa_r+0xa4e>
 8009846:	2800      	cmp	r0, #0
 8009848:	d121      	bne.n	800988e <_dtoa_r+0xa86>
 800984a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800984c:	2900      	cmp	r1, #0
 800984e:	d11e      	bne.n	800988e <_dtoa_r+0xa86>
 8009850:	9a02      	ldr	r2, [sp, #8]
 8009852:	2a00      	cmp	r2, #0
 8009854:	d11b      	bne.n	800988e <_dtoa_r+0xa86>
 8009856:	2c00      	cmp	r4, #0
 8009858:	dd14      	ble.n	8009884 <_dtoa_r+0xa7c>
 800985a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800985c:	1c28      	adds	r0, r5, #0
 800985e:	2201      	movs	r2, #1
 8009860:	f000 fe12 	bl	800a488 <__lshift>
 8009864:	9907      	ldr	r1, [sp, #28]
 8009866:	900a      	str	r0, [sp, #40]	; 0x28
 8009868:	f000 fcf7 	bl	800a25a <__mcmp>
 800986c:	2800      	cmp	r0, #0
 800986e:	dc04      	bgt.n	800987a <_dtoa_r+0xa72>
 8009870:	2800      	cmp	r0, #0
 8009872:	d107      	bne.n	8009884 <_dtoa_r+0xa7c>
 8009874:	9b08      	ldr	r3, [sp, #32]
 8009876:	07db      	lsls	r3, r3, #31
 8009878:	d504      	bpl.n	8009884 <_dtoa_r+0xa7c>
 800987a:	9c08      	ldr	r4, [sp, #32]
 800987c:	2c39      	cmp	r4, #57	; 0x39
 800987e:	d00b      	beq.n	8009898 <_dtoa_r+0xa90>
 8009880:	3401      	adds	r4, #1
 8009882:	9408      	str	r4, [sp, #32]
 8009884:	a808      	add	r0, sp, #32
 8009886:	7800      	ldrb	r0, [r0, #0]
 8009888:	7030      	strb	r0, [r6, #0]
 800988a:	3601      	adds	r6, #1
 800988c:	e074      	b.n	8009978 <_dtoa_r+0xb70>
 800988e:	2c00      	cmp	r4, #0
 8009890:	dd0a      	ble.n	80098a8 <_dtoa_r+0xaa0>
 8009892:	9908      	ldr	r1, [sp, #32]
 8009894:	2939      	cmp	r1, #57	; 0x39
 8009896:	d103      	bne.n	80098a0 <_dtoa_r+0xa98>
 8009898:	2339      	movs	r3, #57	; 0x39
 800989a:	7033      	strb	r3, [r6, #0]
 800989c:	3601      	adds	r6, #1
 800989e:	e05f      	b.n	8009960 <_dtoa_r+0xb58>
 80098a0:	9b08      	ldr	r3, [sp, #32]
 80098a2:	3301      	adds	r3, #1
 80098a4:	7033      	strb	r3, [r6, #0]
 80098a6:	e7f0      	b.n	800988a <_dtoa_r+0xa82>
 80098a8:	aa08      	add	r2, sp, #32
 80098aa:	7812      	ldrb	r2, [r2, #0]
 80098ac:	7032      	strb	r2, [r6, #0]
 80098ae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80098b0:	3601      	adds	r6, #1
 80098b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80098b4:	1b33      	subs	r3, r6, r4
 80098b6:	4283      	cmp	r3, r0
 80098b8:	d036      	beq.n	8009928 <_dtoa_r+0xb20>
 80098ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80098bc:	220a      	movs	r2, #10
 80098be:	1c28      	adds	r0, r5, #0
 80098c0:	2300      	movs	r3, #0
 80098c2:	f000 fecd 	bl	800a660 <__multadd>
 80098c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098c8:	9a04      	ldr	r2, [sp, #16]
 80098ca:	900a      	str	r0, [sp, #40]	; 0x28
 80098cc:	1c28      	adds	r0, r5, #0
 80098ce:	4291      	cmp	r1, r2
 80098d0:	d105      	bne.n	80098de <_dtoa_r+0xad6>
 80098d2:	220a      	movs	r2, #10
 80098d4:	2300      	movs	r3, #0
 80098d6:	f000 fec3 	bl	800a660 <__multadd>
 80098da:	900b      	str	r0, [sp, #44]	; 0x2c
 80098dc:	e76f      	b.n	80097be <_dtoa_r+0x9b6>
 80098de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098e0:	220a      	movs	r2, #10
 80098e2:	2300      	movs	r3, #0
 80098e4:	f000 febc 	bl	800a660 <__multadd>
 80098e8:	9904      	ldr	r1, [sp, #16]
 80098ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80098ec:	220a      	movs	r2, #10
 80098ee:	1c28      	adds	r0, r5, #0
 80098f0:	2300      	movs	r3, #0
 80098f2:	f000 feb5 	bl	800a660 <__multadd>
 80098f6:	e762      	b.n	80097be <_dtoa_r+0x9b6>
 80098f8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80098fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80098fc:	9907      	ldr	r1, [sp, #28]
 80098fe:	f7ff f9d7 	bl	8008cb0 <quorem>
 8009902:	3030      	adds	r0, #48	; 0x30
 8009904:	9008      	str	r0, [sp, #32]
 8009906:	7030      	strb	r0, [r6, #0]
 8009908:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800990a:	3601      	adds	r6, #1
 800990c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800990e:	1b33      	subs	r3, r6, r4
 8009910:	4283      	cmp	r3, r0
 8009912:	da07      	bge.n	8009924 <_dtoa_r+0xb1c>
 8009914:	1c28      	adds	r0, r5, #0
 8009916:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009918:	220a      	movs	r2, #10
 800991a:	2300      	movs	r3, #0
 800991c:	f000 fea0 	bl	800a660 <__multadd>
 8009920:	900a      	str	r0, [sp, #40]	; 0x28
 8009922:	e7ea      	b.n	80098fa <_dtoa_r+0xaf2>
 8009924:	2100      	movs	r1, #0
 8009926:	910b      	str	r1, [sp, #44]	; 0x2c
 8009928:	990a      	ldr	r1, [sp, #40]	; 0x28
 800992a:	1c28      	adds	r0, r5, #0
 800992c:	2201      	movs	r2, #1
 800992e:	f000 fdab 	bl	800a488 <__lshift>
 8009932:	9907      	ldr	r1, [sp, #28]
 8009934:	900a      	str	r0, [sp, #40]	; 0x28
 8009936:	f000 fc90 	bl	800a25a <__mcmp>
 800993a:	2800      	cmp	r0, #0
 800993c:	dc10      	bgt.n	8009960 <_dtoa_r+0xb58>
 800993e:	2800      	cmp	r0, #0
 8009940:	d116      	bne.n	8009970 <_dtoa_r+0xb68>
 8009942:	9a08      	ldr	r2, [sp, #32]
 8009944:	07d2      	lsls	r2, r2, #31
 8009946:	d40b      	bmi.n	8009960 <_dtoa_r+0xb58>
 8009948:	e012      	b.n	8009970 <_dtoa_r+0xb68>
 800994a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800994c:	42a3      	cmp	r3, r4
 800994e:	d001      	beq.n	8009954 <_dtoa_r+0xb4c>
 8009950:	1c1e      	adds	r6, r3, #0
 8009952:	e005      	b.n	8009960 <_dtoa_r+0xb58>
 8009954:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009956:	3701      	adds	r7, #1
 8009958:	2331      	movs	r3, #49	; 0x31
 800995a:	9709      	str	r7, [sp, #36]	; 0x24
 800995c:	7003      	strb	r3, [r0, #0]
 800995e:	e00c      	b.n	800997a <_dtoa_r+0xb72>
 8009960:	1e73      	subs	r3, r6, #1
 8009962:	781a      	ldrb	r2, [r3, #0]
 8009964:	2a39      	cmp	r2, #57	; 0x39
 8009966:	d0f0      	beq.n	800994a <_dtoa_r+0xb42>
 8009968:	3201      	adds	r2, #1
 800996a:	701a      	strb	r2, [r3, #0]
 800996c:	e004      	b.n	8009978 <_dtoa_r+0xb70>
 800996e:	1c1e      	adds	r6, r3, #0
 8009970:	1e73      	subs	r3, r6, #1
 8009972:	781a      	ldrb	r2, [r3, #0]
 8009974:	2a30      	cmp	r2, #48	; 0x30
 8009976:	d0fa      	beq.n	800996e <_dtoa_r+0xb66>
 8009978:	9709      	str	r7, [sp, #36]	; 0x24
 800997a:	9907      	ldr	r1, [sp, #28]
 800997c:	1c28      	adds	r0, r5, #0
 800997e:	f000 fc0b 	bl	800a198 <_Bfree>
 8009982:	9904      	ldr	r1, [sp, #16]
 8009984:	2900      	cmp	r1, #0
 8009986:	d00e      	beq.n	80099a6 <_dtoa_r+0xb9e>
 8009988:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800998a:	428a      	cmp	r2, r1
 800998c:	d005      	beq.n	800999a <_dtoa_r+0xb92>
 800998e:	2a00      	cmp	r2, #0
 8009990:	d003      	beq.n	800999a <_dtoa_r+0xb92>
 8009992:	1c28      	adds	r0, r5, #0
 8009994:	1c11      	adds	r1, r2, #0
 8009996:	f000 fbff 	bl	800a198 <_Bfree>
 800999a:	1c28      	adds	r0, r5, #0
 800999c:	9904      	ldr	r1, [sp, #16]
 800999e:	f000 fbfb 	bl	800a198 <_Bfree>
 80099a2:	e000      	b.n	80099a6 <_dtoa_r+0xb9e>
 80099a4:	9709      	str	r7, [sp, #36]	; 0x24
 80099a6:	1c28      	adds	r0, r5, #0
 80099a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80099aa:	f000 fbf5 	bl	800a198 <_Bfree>
 80099ae:	2300      	movs	r3, #0
 80099b0:	7033      	strb	r3, [r6, #0]
 80099b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b4:	9c24      	ldr	r4, [sp, #144]	; 0x90
 80099b6:	9826      	ldr	r0, [sp, #152]	; 0x98
 80099b8:	3301      	adds	r3, #1
 80099ba:	6023      	str	r3, [r4, #0]
 80099bc:	2800      	cmp	r0, #0
 80099be:	d001      	beq.n	80099c4 <_dtoa_r+0xbbc>
 80099c0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80099c2:	600e      	str	r6, [r1, #0]
 80099c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80099c6:	b01d      	add	sp, #116	; 0x74
 80099c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ca:	46c0      	nop			; (mov r8, r8)
 80099cc:	46c0      	nop			; (mov r8, r8)
 80099ce:	46c0      	nop			; (mov r8, r8)

080099d0 <_fflush_r>:
 80099d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d2:	b083      	sub	sp, #12
 80099d4:	1c07      	adds	r7, r0, #0
 80099d6:	1c0d      	adds	r5, r1, #0
 80099d8:	2800      	cmp	r0, #0
 80099da:	d004      	beq.n	80099e6 <_fflush_r+0x16>
 80099dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d101      	bne.n	80099e6 <_fflush_r+0x16>
 80099e2:	f000 f8a9 	bl	8009b38 <__sinit>
 80099e6:	89a9      	ldrh	r1, [r5, #12]
 80099e8:	b20a      	sxth	r2, r1
 80099ea:	0713      	lsls	r3, r2, #28
 80099ec:	d44c      	bmi.n	8009a88 <_fflush_r+0xb8>
 80099ee:	2380      	movs	r3, #128	; 0x80
 80099f0:	011b      	lsls	r3, r3, #4
 80099f2:	686a      	ldr	r2, [r5, #4]
 80099f4:	430b      	orrs	r3, r1
 80099f6:	81ab      	strh	r3, [r5, #12]
 80099f8:	2a00      	cmp	r2, #0
 80099fa:	dc02      	bgt.n	8009a02 <_fflush_r+0x32>
 80099fc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	dd66      	ble.n	8009ad0 <_fflush_r+0x100>
 8009a02:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8009a04:	2c00      	cmp	r4, #0
 8009a06:	d063      	beq.n	8009ad0 <_fflush_r+0x100>
 8009a08:	04da      	lsls	r2, r3, #19
 8009a0a:	d501      	bpl.n	8009a10 <_fflush_r+0x40>
 8009a0c:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 8009a0e:	e00f      	b.n	8009a30 <_fflush_r+0x60>
 8009a10:	1c38      	adds	r0, r7, #0
 8009a12:	69e9      	ldr	r1, [r5, #28]
 8009a14:	2200      	movs	r2, #0
 8009a16:	2301      	movs	r3, #1
 8009a18:	47a0      	blx	r4
 8009a1a:	1c06      	adds	r6, r0, #0
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d107      	bne.n	8009a30 <_fflush_r+0x60>
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b1d      	cmp	r3, #29
 8009a24:	d054      	beq.n	8009ad0 <_fflush_r+0x100>
 8009a26:	89aa      	ldrh	r2, [r5, #12]
 8009a28:	2340      	movs	r3, #64	; 0x40
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	81ab      	strh	r3, [r5, #12]
 8009a2e:	e050      	b.n	8009ad2 <_fflush_r+0x102>
 8009a30:	89ab      	ldrh	r3, [r5, #12]
 8009a32:	075a      	lsls	r2, r3, #29
 8009a34:	d506      	bpl.n	8009a44 <_fflush_r+0x74>
 8009a36:	686b      	ldr	r3, [r5, #4]
 8009a38:	1af6      	subs	r6, r6, r3
 8009a3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <_fflush_r+0x74>
 8009a40:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009a42:	1af6      	subs	r6, r6, r3
 8009a44:	2300      	movs	r3, #0
 8009a46:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8009a48:	1c38      	adds	r0, r7, #0
 8009a4a:	69e9      	ldr	r1, [r5, #28]
 8009a4c:	1c32      	adds	r2, r6, #0
 8009a4e:	47a0      	blx	r4
 8009a50:	89ab      	ldrh	r3, [r5, #12]
 8009a52:	42b0      	cmp	r0, r6
 8009a54:	d116      	bne.n	8009a84 <_fflush_r+0xb4>
 8009a56:	4a20      	ldr	r2, [pc, #128]	; (8009ad8 <_fflush_r+0x108>)
 8009a58:	4013      	ands	r3, r2
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	606a      	str	r2, [r5, #4]
 8009a5e:	692a      	ldr	r2, [r5, #16]
 8009a60:	81ab      	strh	r3, [r5, #12]
 8009a62:	602a      	str	r2, [r5, #0]
 8009a64:	04da      	lsls	r2, r3, #19
 8009a66:	d500      	bpl.n	8009a6a <_fflush_r+0x9a>
 8009a68:	652e      	str	r6, [r5, #80]	; 0x50
 8009a6a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	d02f      	beq.n	8009ad0 <_fflush_r+0x100>
 8009a70:	1c2b      	adds	r3, r5, #0
 8009a72:	3340      	adds	r3, #64	; 0x40
 8009a74:	4299      	cmp	r1, r3
 8009a76:	d002      	beq.n	8009a7e <_fflush_r+0xae>
 8009a78:	1c38      	adds	r0, r7, #0
 8009a7a:	f000 f8d7 	bl	8009c2c <_free_r>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	632b      	str	r3, [r5, #48]	; 0x30
 8009a82:	e025      	b.n	8009ad0 <_fflush_r+0x100>
 8009a84:	2240      	movs	r2, #64	; 0x40
 8009a86:	e017      	b.n	8009ab8 <_fflush_r+0xe8>
 8009a88:	692e      	ldr	r6, [r5, #16]
 8009a8a:	2e00      	cmp	r6, #0
 8009a8c:	d020      	beq.n	8009ad0 <_fflush_r+0x100>
 8009a8e:	6829      	ldr	r1, [r5, #0]
 8009a90:	602e      	str	r6, [r5, #0]
 8009a92:	0793      	lsls	r3, r2, #30
 8009a94:	d001      	beq.n	8009a9a <_fflush_r+0xca>
 8009a96:	2300      	movs	r3, #0
 8009a98:	e000      	b.n	8009a9c <_fflush_r+0xcc>
 8009a9a:	696b      	ldr	r3, [r5, #20]
 8009a9c:	1b89      	subs	r1, r1, r6
 8009a9e:	9101      	str	r1, [sp, #4]
 8009aa0:	60ab      	str	r3, [r5, #8]
 8009aa2:	e012      	b.n	8009aca <_fflush_r+0xfa>
 8009aa4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8009aa6:	1c38      	adds	r0, r7, #0
 8009aa8:	69e9      	ldr	r1, [r5, #28]
 8009aaa:	1c32      	adds	r2, r6, #0
 8009aac:	9b01      	ldr	r3, [sp, #4]
 8009aae:	47a0      	blx	r4
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	dc06      	bgt.n	8009ac2 <_fflush_r+0xf2>
 8009ab4:	89aa      	ldrh	r2, [r5, #12]
 8009ab6:	2340      	movs	r3, #64	; 0x40
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	2001      	movs	r0, #1
 8009abc:	81ab      	strh	r3, [r5, #12]
 8009abe:	4240      	negs	r0, r0
 8009ac0:	e007      	b.n	8009ad2 <_fflush_r+0x102>
 8009ac2:	9a01      	ldr	r2, [sp, #4]
 8009ac4:	1836      	adds	r6, r6, r0
 8009ac6:	1a12      	subs	r2, r2, r0
 8009ac8:	9201      	str	r2, [sp, #4]
 8009aca:	9b01      	ldr	r3, [sp, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	dce9      	bgt.n	8009aa4 <_fflush_r+0xd4>
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	b003      	add	sp, #12
 8009ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ad6:	46c0      	nop			; (mov r8, r8)
 8009ad8:	0000f7ff 	.word	0x0000f7ff

08009adc <__sfp_lock_acquire>:
 8009adc:	4770      	bx	lr

08009ade <__sfp_lock_release>:
 8009ade:	4770      	bx	lr

08009ae0 <_cleanup_r>:
 8009ae0:	b508      	push	{r3, lr}
 8009ae2:	4902      	ldr	r1, [pc, #8]	; (8009aec <_cleanup_r+0xc>)
 8009ae4:	f000 fac0 	bl	800a068 <_fwalk>
 8009ae8:	bd08      	pop	{r3, pc}
 8009aea:	46c0      	nop			; (mov r8, r8)
 8009aec:	0800a93d 	.word	0x0800a93d

08009af0 <std>:
 8009af0:	b510      	push	{r4, lr}
 8009af2:	2300      	movs	r3, #0
 8009af4:	1c04      	adds	r4, r0, #0
 8009af6:	6003      	str	r3, [r0, #0]
 8009af8:	6043      	str	r3, [r0, #4]
 8009afa:	6083      	str	r3, [r0, #8]
 8009afc:	8181      	strh	r1, [r0, #12]
 8009afe:	6643      	str	r3, [r0, #100]	; 0x64
 8009b00:	81c2      	strh	r2, [r0, #14]
 8009b02:	6103      	str	r3, [r0, #16]
 8009b04:	6143      	str	r3, [r0, #20]
 8009b06:	6183      	str	r3, [r0, #24]
 8009b08:	2100      	movs	r1, #0
 8009b0a:	2208      	movs	r2, #8
 8009b0c:	305c      	adds	r0, #92	; 0x5c
 8009b0e:	f7fd f98e 	bl	8006e2e <memset>
 8009b12:	4b05      	ldr	r3, [pc, #20]	; (8009b28 <std+0x38>)
 8009b14:	61e4      	str	r4, [r4, #28]
 8009b16:	6223      	str	r3, [r4, #32]
 8009b18:	4b04      	ldr	r3, [pc, #16]	; (8009b2c <std+0x3c>)
 8009b1a:	6263      	str	r3, [r4, #36]	; 0x24
 8009b1c:	4b04      	ldr	r3, [pc, #16]	; (8009b30 <std+0x40>)
 8009b1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b20:	4b04      	ldr	r3, [pc, #16]	; (8009b34 <std+0x44>)
 8009b22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b24:	bd10      	pop	{r4, pc}
 8009b26:	46c0      	nop			; (mov r8, r8)
 8009b28:	0800a7e1 	.word	0x0800a7e1
 8009b2c:	0800a7a9 	.word	0x0800a7a9
 8009b30:	0800a77d 	.word	0x0800a77d
 8009b34:	0800a771 	.word	0x0800a771

08009b38 <__sinit>:
 8009b38:	b510      	push	{r4, lr}
 8009b3a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8009b3c:	1c04      	adds	r4, r0, #0
 8009b3e:	2a00      	cmp	r2, #0
 8009b40:	d122      	bne.n	8009b88 <__sinit+0x50>
 8009b42:	4b12      	ldr	r3, [pc, #72]	; (8009b8c <__sinit+0x54>)
 8009b44:	21bb      	movs	r1, #187	; 0xbb
 8009b46:	63c3      	str	r3, [r0, #60]	; 0x3c
 8009b48:	2301      	movs	r3, #1
 8009b4a:	6383      	str	r3, [r0, #56]	; 0x38
 8009b4c:	23b8      	movs	r3, #184	; 0xb8
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	50c2      	str	r2, [r0, r3]
 8009b52:	23b9      	movs	r3, #185	; 0xb9
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	2203      	movs	r2, #3
 8009b58:	50c2      	str	r2, [r0, r3]
 8009b5a:	0089      	lsls	r1, r1, #2
 8009b5c:	23ba      	movs	r3, #186	; 0xba
 8009b5e:	1842      	adds	r2, r0, r1
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	50c2      	str	r2, [r0, r3]
 8009b64:	2104      	movs	r1, #4
 8009b66:	6840      	ldr	r0, [r0, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	1c23      	adds	r3, r4, #0
 8009b6c:	f7ff ffc0 	bl	8009af0 <std>
 8009b70:	68a0      	ldr	r0, [r4, #8]
 8009b72:	2109      	movs	r1, #9
 8009b74:	2201      	movs	r2, #1
 8009b76:	1c23      	adds	r3, r4, #0
 8009b78:	f7ff ffba 	bl	8009af0 <std>
 8009b7c:	68e0      	ldr	r0, [r4, #12]
 8009b7e:	2112      	movs	r1, #18
 8009b80:	2202      	movs	r2, #2
 8009b82:	1c23      	adds	r3, r4, #0
 8009b84:	f7ff ffb4 	bl	8009af0 <std>
 8009b88:	bd10      	pop	{r4, pc}
 8009b8a:	46c0      	nop			; (mov r8, r8)
 8009b8c:	08009ae1 	.word	0x08009ae1

08009b90 <_malloc_trim_r>:
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	1c0e      	adds	r6, r1, #0
 8009b94:	1c05      	adds	r5, r0, #0
 8009b96:	f7fd f954 	bl	8006e42 <__malloc_lock>
 8009b9a:	4c1f      	ldr	r4, [pc, #124]	; (8009c18 <_malloc_trim_r+0x88>)
 8009b9c:	4a1f      	ldr	r2, [pc, #124]	; (8009c1c <_malloc_trim_r+0x8c>)
 8009b9e:	68a3      	ldr	r3, [r4, #8]
 8009ba0:	685f      	ldr	r7, [r3, #4]
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	439f      	bics	r7, r3
 8009ba6:	18bb      	adds	r3, r7, r2
 8009ba8:	1b9e      	subs	r6, r3, r6
 8009baa:	0b36      	lsrs	r6, r6, #12
 8009bac:	3e01      	subs	r6, #1
 8009bae:	4b1c      	ldr	r3, [pc, #112]	; (8009c20 <_malloc_trim_r+0x90>)
 8009bb0:	0336      	lsls	r6, r6, #12
 8009bb2:	429e      	cmp	r6, r3
 8009bb4:	dd1d      	ble.n	8009bf2 <_malloc_trim_r+0x62>
 8009bb6:	1c28      	adds	r0, r5, #0
 8009bb8:	2100      	movs	r1, #0
 8009bba:	f7fd fad5 	bl	8007168 <_sbrk_r>
 8009bbe:	68a3      	ldr	r3, [r4, #8]
 8009bc0:	18fb      	adds	r3, r7, r3
 8009bc2:	4298      	cmp	r0, r3
 8009bc4:	d115      	bne.n	8009bf2 <_malloc_trim_r+0x62>
 8009bc6:	4271      	negs	r1, r6
 8009bc8:	1c28      	adds	r0, r5, #0
 8009bca:	f7fd facd 	bl	8007168 <_sbrk_r>
 8009bce:	3001      	adds	r0, #1
 8009bd0:	d114      	bne.n	8009bfc <_malloc_trim_r+0x6c>
 8009bd2:	1c28      	adds	r0, r5, #0
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	f7fd fac7 	bl	8007168 <_sbrk_r>
 8009bda:	68a3      	ldr	r3, [r4, #8]
 8009bdc:	1ac2      	subs	r2, r0, r3
 8009bde:	2a0f      	cmp	r2, #15
 8009be0:	dd07      	ble.n	8009bf2 <_malloc_trim_r+0x62>
 8009be2:	4910      	ldr	r1, [pc, #64]	; (8009c24 <_malloc_trim_r+0x94>)
 8009be4:	6809      	ldr	r1, [r1, #0]
 8009be6:	1a40      	subs	r0, r0, r1
 8009be8:	490f      	ldr	r1, [pc, #60]	; (8009c28 <_malloc_trim_r+0x98>)
 8009bea:	6008      	str	r0, [r1, #0]
 8009bec:	2101      	movs	r1, #1
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	605a      	str	r2, [r3, #4]
 8009bf2:	1c28      	adds	r0, r5, #0
 8009bf4:	f7fd f926 	bl	8006e44 <__malloc_unlock>
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	e00c      	b.n	8009c16 <_malloc_trim_r+0x86>
 8009bfc:	68a3      	ldr	r3, [r4, #8]
 8009bfe:	1bbf      	subs	r7, r7, r6
 8009c00:	2201      	movs	r2, #1
 8009c02:	4317      	orrs	r7, r2
 8009c04:	605f      	str	r7, [r3, #4]
 8009c06:	4b08      	ldr	r3, [pc, #32]	; (8009c28 <_malloc_trim_r+0x98>)
 8009c08:	1c28      	adds	r0, r5, #0
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	1b96      	subs	r6, r2, r6
 8009c0e:	601e      	str	r6, [r3, #0]
 8009c10:	f7fd f918 	bl	8006e44 <__malloc_unlock>
 8009c14:	2001      	movs	r0, #1
 8009c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c18:	20000648 	.word	0x20000648
 8009c1c:	00000fef 	.word	0x00000fef
 8009c20:	00000fff 	.word	0x00000fff
 8009c24:	20000a54 	.word	0x20000a54
 8009c28:	20001544 	.word	0x20001544

08009c2c <_free_r>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	1c05      	adds	r5, r0, #0
 8009c30:	1c0c      	adds	r4, r1, #0
 8009c32:	2900      	cmp	r1, #0
 8009c34:	d100      	bne.n	8009c38 <_free_r+0xc>
 8009c36:	e0a1      	b.n	8009d7c <_free_r+0x150>
 8009c38:	3c08      	subs	r4, #8
 8009c3a:	f7fd f902 	bl	8006e42 <__malloc_lock>
 8009c3e:	6863      	ldr	r3, [r4, #4]
 8009c40:	2001      	movs	r0, #1
 8009c42:	469c      	mov	ip, r3
 8009c44:	4383      	bics	r3, r0
 8009c46:	18e2      	adds	r2, r4, r3
 8009c48:	6856      	ldr	r6, [r2, #4]
 8009c4a:	2103      	movs	r1, #3
 8009c4c:	438e      	bics	r6, r1
 8009c4e:	494c      	ldr	r1, [pc, #304]	; (8009d80 <_free_r+0x154>)
 8009c50:	4667      	mov	r7, ip
 8009c52:	4038      	ands	r0, r7
 8009c54:	688f      	ldr	r7, [r1, #8]
 8009c56:	42ba      	cmp	r2, r7
 8009c58:	d117      	bne.n	8009c8a <_free_r+0x5e>
 8009c5a:	18f3      	adds	r3, r6, r3
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d106      	bne.n	8009c6e <_free_r+0x42>
 8009c60:	6822      	ldr	r2, [r4, #0]
 8009c62:	1aa4      	subs	r4, r4, r2
 8009c64:	68a0      	ldr	r0, [r4, #8]
 8009c66:	189b      	adds	r3, r3, r2
 8009c68:	68e2      	ldr	r2, [r4, #12]
 8009c6a:	60c2      	str	r2, [r0, #12]
 8009c6c:	6090      	str	r0, [r2, #8]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	431a      	orrs	r2, r3
 8009c72:	6062      	str	r2, [r4, #4]
 8009c74:	4a43      	ldr	r2, [pc, #268]	; (8009d84 <_free_r+0x158>)
 8009c76:	608c      	str	r4, [r1, #8]
 8009c78:	6812      	ldr	r2, [r2, #0]
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d37b      	bcc.n	8009d76 <_free_r+0x14a>
 8009c7e:	4b42      	ldr	r3, [pc, #264]	; (8009d88 <_free_r+0x15c>)
 8009c80:	1c28      	adds	r0, r5, #0
 8009c82:	6819      	ldr	r1, [r3, #0]
 8009c84:	f7ff ff84 	bl	8009b90 <_malloc_trim_r>
 8009c88:	e075      	b.n	8009d76 <_free_r+0x14a>
 8009c8a:	6056      	str	r6, [r2, #4]
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d10c      	bne.n	8009caa <_free_r+0x7e>
 8009c90:	6820      	ldr	r0, [r4, #0]
 8009c92:	1c0f      	adds	r7, r1, #0
 8009c94:	1a24      	subs	r4, r4, r0
 8009c96:	181b      	adds	r3, r3, r0
 8009c98:	68a0      	ldr	r0, [r4, #8]
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	42b8      	cmp	r0, r7
 8009c9e:	d101      	bne.n	8009ca4 <_free_r+0x78>
 8009ca0:	2001      	movs	r0, #1
 8009ca2:	e003      	b.n	8009cac <_free_r+0x80>
 8009ca4:	68e7      	ldr	r7, [r4, #12]
 8009ca6:	60c7      	str	r7, [r0, #12]
 8009ca8:	60b8      	str	r0, [r7, #8]
 8009caa:	2000      	movs	r0, #0
 8009cac:	1997      	adds	r7, r2, r6
 8009cae:	687f      	ldr	r7, [r7, #4]
 8009cb0:	07ff      	lsls	r7, r7, #31
 8009cb2:	d410      	bmi.n	8009cd6 <_free_r+0xaa>
 8009cb4:	199b      	adds	r3, r3, r6
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d109      	bne.n	8009cce <_free_r+0xa2>
 8009cba:	6896      	ldr	r6, [r2, #8]
 8009cbc:	4f33      	ldr	r7, [pc, #204]	; (8009d8c <_free_r+0x160>)
 8009cbe:	42be      	cmp	r6, r7
 8009cc0:	d105      	bne.n	8009cce <_free_r+0xa2>
 8009cc2:	60f4      	str	r4, [r6, #12]
 8009cc4:	60b4      	str	r4, [r6, #8]
 8009cc6:	60e6      	str	r6, [r4, #12]
 8009cc8:	60a6      	str	r6, [r4, #8]
 8009cca:	2001      	movs	r0, #1
 8009ccc:	e003      	b.n	8009cd6 <_free_r+0xaa>
 8009cce:	68d6      	ldr	r6, [r2, #12]
 8009cd0:	6892      	ldr	r2, [r2, #8]
 8009cd2:	60d6      	str	r6, [r2, #12]
 8009cd4:	60b2      	str	r2, [r6, #8]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	1c1e      	adds	r6, r3, #0
 8009cda:	4316      	orrs	r6, r2
 8009cdc:	6066      	str	r6, [r4, #4]
 8009cde:	50e3      	str	r3, [r4, r3]
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d148      	bne.n	8009d76 <_free_r+0x14a>
 8009ce4:	482a      	ldr	r0, [pc, #168]	; (8009d90 <_free_r+0x164>)
 8009ce6:	4283      	cmp	r3, r0
 8009ce8:	d80d      	bhi.n	8009d06 <_free_r+0xda>
 8009cea:	08db      	lsrs	r3, r3, #3
 8009cec:	1098      	asrs	r0, r3, #2
 8009cee:	4082      	lsls	r2, r0
 8009cf0:	6848      	ldr	r0, [r1, #4]
 8009cf2:	00db      	lsls	r3, r3, #3
 8009cf4:	4302      	orrs	r2, r0
 8009cf6:	604a      	str	r2, [r1, #4]
 8009cf8:	18c9      	adds	r1, r1, r3
 8009cfa:	688b      	ldr	r3, [r1, #8]
 8009cfc:	60e1      	str	r1, [r4, #12]
 8009cfe:	60a3      	str	r3, [r4, #8]
 8009d00:	60dc      	str	r4, [r3, #12]
 8009d02:	608c      	str	r4, [r1, #8]
 8009d04:	e037      	b.n	8009d76 <_free_r+0x14a>
 8009d06:	0a58      	lsrs	r0, r3, #9
 8009d08:	2804      	cmp	r0, #4
 8009d0a:	d802      	bhi.n	8009d12 <_free_r+0xe6>
 8009d0c:	0998      	lsrs	r0, r3, #6
 8009d0e:	3038      	adds	r0, #56	; 0x38
 8009d10:	e016      	b.n	8009d40 <_free_r+0x114>
 8009d12:	2814      	cmp	r0, #20
 8009d14:	d801      	bhi.n	8009d1a <_free_r+0xee>
 8009d16:	305b      	adds	r0, #91	; 0x5b
 8009d18:	e012      	b.n	8009d40 <_free_r+0x114>
 8009d1a:	2854      	cmp	r0, #84	; 0x54
 8009d1c:	d802      	bhi.n	8009d24 <_free_r+0xf8>
 8009d1e:	0b18      	lsrs	r0, r3, #12
 8009d20:	306e      	adds	r0, #110	; 0x6e
 8009d22:	e00d      	b.n	8009d40 <_free_r+0x114>
 8009d24:	22aa      	movs	r2, #170	; 0xaa
 8009d26:	0052      	lsls	r2, r2, #1
 8009d28:	4290      	cmp	r0, r2
 8009d2a:	d802      	bhi.n	8009d32 <_free_r+0x106>
 8009d2c:	0bd8      	lsrs	r0, r3, #15
 8009d2e:	3077      	adds	r0, #119	; 0x77
 8009d30:	e006      	b.n	8009d40 <_free_r+0x114>
 8009d32:	4a18      	ldr	r2, [pc, #96]	; (8009d94 <_free_r+0x168>)
 8009d34:	4290      	cmp	r0, r2
 8009d36:	d901      	bls.n	8009d3c <_free_r+0x110>
 8009d38:	207e      	movs	r0, #126	; 0x7e
 8009d3a:	e001      	b.n	8009d40 <_free_r+0x114>
 8009d3c:	0c98      	lsrs	r0, r3, #18
 8009d3e:	307c      	adds	r0, #124	; 0x7c
 8009d40:	00c6      	lsls	r6, r0, #3
 8009d42:	198e      	adds	r6, r1, r6
 8009d44:	68b2      	ldr	r2, [r6, #8]
 8009d46:	42b2      	cmp	r2, r6
 8009d48:	d10b      	bne.n	8009d62 <_free_r+0x136>
 8009d4a:	1080      	asrs	r0, r0, #2
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	4083      	lsls	r3, r0
 8009d50:	1c18      	adds	r0, r3, #0
 8009d52:	684b      	ldr	r3, [r1, #4]
 8009d54:	4318      	orrs	r0, r3
 8009d56:	6048      	str	r0, [r1, #4]
 8009d58:	1c13      	adds	r3, r2, #0
 8009d5a:	e008      	b.n	8009d6e <_free_r+0x142>
 8009d5c:	6892      	ldr	r2, [r2, #8]
 8009d5e:	42b2      	cmp	r2, r6
 8009d60:	d004      	beq.n	8009d6c <_free_r+0x140>
 8009d62:	6851      	ldr	r1, [r2, #4]
 8009d64:	2003      	movs	r0, #3
 8009d66:	4381      	bics	r1, r0
 8009d68:	428b      	cmp	r3, r1
 8009d6a:	d3f7      	bcc.n	8009d5c <_free_r+0x130>
 8009d6c:	68d3      	ldr	r3, [r2, #12]
 8009d6e:	60e3      	str	r3, [r4, #12]
 8009d70:	60a2      	str	r2, [r4, #8]
 8009d72:	60d4      	str	r4, [r2, #12]
 8009d74:	609c      	str	r4, [r3, #8]
 8009d76:	1c28      	adds	r0, r5, #0
 8009d78:	f7fd f864 	bl	8006e44 <__malloc_unlock>
 8009d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d7e:	46c0      	nop			; (mov r8, r8)
 8009d80:	20000648 	.word	0x20000648
 8009d84:	20000a50 	.word	0x20000a50
 8009d88:	20001540 	.word	0x20001540
 8009d8c:	20000650 	.word	0x20000650
 8009d90:	000001ff 	.word	0x000001ff
 8009d94:	00000554 	.word	0x00000554

08009d98 <__sfvwrite_r>:
 8009d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d9a:	6893      	ldr	r3, [r2, #8]
 8009d9c:	b087      	sub	sp, #28
 8009d9e:	9002      	str	r0, [sp, #8]
 8009da0:	1c0d      	adds	r5, r1, #0
 8009da2:	1c16      	adds	r6, r2, #0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d100      	bne.n	8009daa <__sfvwrite_r+0x12>
 8009da8:	e158      	b.n	800a05c <__sfvwrite_r+0x2c4>
 8009daa:	898b      	ldrh	r3, [r1, #12]
 8009dac:	0718      	lsls	r0, r3, #28
 8009dae:	d502      	bpl.n	8009db6 <__sfvwrite_r+0x1e>
 8009db0:	690b      	ldr	r3, [r1, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10d      	bne.n	8009dd2 <__sfvwrite_r+0x3a>
 8009db6:	9802      	ldr	r0, [sp, #8]
 8009db8:	1c29      	adds	r1, r5, #0
 8009dba:	f7fe ff23 	bl	8008c04 <__swsetup_r>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d007      	beq.n	8009dd2 <__sfvwrite_r+0x3a>
 8009dc2:	89aa      	ldrh	r2, [r5, #12]
 8009dc4:	2340      	movs	r3, #64	; 0x40
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	9902      	ldr	r1, [sp, #8]
 8009dca:	81ab      	strh	r3, [r5, #12]
 8009dcc:	2309      	movs	r3, #9
 8009dce:	600b      	str	r3, [r1, #0]
 8009dd0:	e141      	b.n	800a056 <__sfvwrite_r+0x2be>
 8009dd2:	6832      	ldr	r2, [r6, #0]
 8009dd4:	89ab      	ldrh	r3, [r5, #12]
 8009dd6:	9203      	str	r2, [sp, #12]
 8009dd8:	0798      	lsls	r0, r3, #30
 8009dda:	d525      	bpl.n	8009e28 <__sfvwrite_r+0x90>
 8009ddc:	2100      	movs	r1, #0
 8009dde:	9100      	str	r1, [sp, #0]
 8009de0:	2700      	movs	r7, #0
 8009de2:	e006      	b.n	8009df2 <__sfvwrite_r+0x5a>
 8009de4:	9a03      	ldr	r2, [sp, #12]
 8009de6:	9b03      	ldr	r3, [sp, #12]
 8009de8:	6812      	ldr	r2, [r2, #0]
 8009dea:	685f      	ldr	r7, [r3, #4]
 8009dec:	3308      	adds	r3, #8
 8009dee:	9200      	str	r2, [sp, #0]
 8009df0:	9303      	str	r3, [sp, #12]
 8009df2:	2f00      	cmp	r7, #0
 8009df4:	d0f6      	beq.n	8009de4 <__sfvwrite_r+0x4c>
 8009df6:	2280      	movs	r2, #128	; 0x80
 8009df8:	0052      	lsls	r2, r2, #1
 8009dfa:	1c3b      	adds	r3, r7, #0
 8009dfc:	4297      	cmp	r7, r2
 8009dfe:	d900      	bls.n	8009e02 <__sfvwrite_r+0x6a>
 8009e00:	1c13      	adds	r3, r2, #0
 8009e02:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8009e04:	9802      	ldr	r0, [sp, #8]
 8009e06:	69e9      	ldr	r1, [r5, #28]
 8009e08:	9a00      	ldr	r2, [sp, #0]
 8009e0a:	47a0      	blx	r4
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	dc00      	bgt.n	8009e12 <__sfvwrite_r+0x7a>
 8009e10:	e11d      	b.n	800a04e <__sfvwrite_r+0x2b6>
 8009e12:	68b3      	ldr	r3, [r6, #8]
 8009e14:	1a1b      	subs	r3, r3, r0
 8009e16:	60b3      	str	r3, [r6, #8]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d100      	bne.n	8009e1e <__sfvwrite_r+0x86>
 8009e1c:	e11e      	b.n	800a05c <__sfvwrite_r+0x2c4>
 8009e1e:	9900      	ldr	r1, [sp, #0]
 8009e20:	1a3f      	subs	r7, r7, r0
 8009e22:	1809      	adds	r1, r1, r0
 8009e24:	9100      	str	r1, [sp, #0]
 8009e26:	e7e4      	b.n	8009df2 <__sfvwrite_r+0x5a>
 8009e28:	07da      	lsls	r2, r3, #31
 8009e2a:	d505      	bpl.n	8009e38 <__sfvwrite_r+0xa0>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	2700      	movs	r7, #0
 8009e30:	9301      	str	r3, [sp, #4]
 8009e32:	9305      	str	r3, [sp, #20]
 8009e34:	9700      	str	r7, [sp, #0]
 8009e36:	e0a5      	b.n	8009f84 <__sfvwrite_r+0x1ec>
 8009e38:	2000      	movs	r0, #0
 8009e3a:	9000      	str	r0, [sp, #0]
 8009e3c:	2700      	movs	r7, #0
 8009e3e:	e006      	b.n	8009e4e <__sfvwrite_r+0xb6>
 8009e40:	9903      	ldr	r1, [sp, #12]
 8009e42:	9a03      	ldr	r2, [sp, #12]
 8009e44:	6809      	ldr	r1, [r1, #0]
 8009e46:	6857      	ldr	r7, [r2, #4]
 8009e48:	3208      	adds	r2, #8
 8009e4a:	9100      	str	r1, [sp, #0]
 8009e4c:	9203      	str	r2, [sp, #12]
 8009e4e:	2f00      	cmp	r7, #0
 8009e50:	d0f6      	beq.n	8009e40 <__sfvwrite_r+0xa8>
 8009e52:	89ab      	ldrh	r3, [r5, #12]
 8009e54:	68ac      	ldr	r4, [r5, #8]
 8009e56:	0598      	lsls	r0, r3, #22
 8009e58:	d557      	bpl.n	8009f0a <__sfvwrite_r+0x172>
 8009e5a:	42a7      	cmp	r7, r4
 8009e5c:	d347      	bcc.n	8009eee <__sfvwrite_r+0x156>
 8009e5e:	2290      	movs	r2, #144	; 0x90
 8009e60:	00d2      	lsls	r2, r2, #3
 8009e62:	4213      	tst	r3, r2
 8009e64:	d041      	beq.n	8009eea <__sfvwrite_r+0x152>
 8009e66:	6929      	ldr	r1, [r5, #16]
 8009e68:	682a      	ldr	r2, [r5, #0]
 8009e6a:	1a52      	subs	r2, r2, r1
 8009e6c:	9204      	str	r2, [sp, #16]
 8009e6e:	696a      	ldr	r2, [r5, #20]
 8009e70:	0050      	lsls	r0, r2, #1
 8009e72:	1882      	adds	r2, r0, r2
 8009e74:	0fd0      	lsrs	r0, r2, #31
 8009e76:	1882      	adds	r2, r0, r2
 8009e78:	1052      	asrs	r2, r2, #1
 8009e7a:	9201      	str	r2, [sp, #4]
 8009e7c:	9a04      	ldr	r2, [sp, #16]
 8009e7e:	9801      	ldr	r0, [sp, #4]
 8009e80:	3201      	adds	r2, #1
 8009e82:	19d2      	adds	r2, r2, r7
 8009e84:	4290      	cmp	r0, r2
 8009e86:	d200      	bcs.n	8009e8a <__sfvwrite_r+0xf2>
 8009e88:	9201      	str	r2, [sp, #4]
 8009e8a:	055a      	lsls	r2, r3, #21
 8009e8c:	d515      	bpl.n	8009eba <__sfvwrite_r+0x122>
 8009e8e:	9802      	ldr	r0, [sp, #8]
 8009e90:	9901      	ldr	r1, [sp, #4]
 8009e92:	f7fc fd7d 	bl	8006990 <_malloc_r>
 8009e96:	1c04      	adds	r4, r0, #0
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d103      	bne.n	8009ea4 <__sfvwrite_r+0x10c>
 8009e9c:	9802      	ldr	r0, [sp, #8]
 8009e9e:	230c      	movs	r3, #12
 8009ea0:	6003      	str	r3, [r0, #0]
 8009ea2:	e0d4      	b.n	800a04e <__sfvwrite_r+0x2b6>
 8009ea4:	9a04      	ldr	r2, [sp, #16]
 8009ea6:	6929      	ldr	r1, [r5, #16]
 8009ea8:	f7fc ff9d 	bl	8006de6 <memcpy>
 8009eac:	89aa      	ldrh	r2, [r5, #12]
 8009eae:	4b6d      	ldr	r3, [pc, #436]	; (800a064 <__sfvwrite_r+0x2cc>)
 8009eb0:	401a      	ands	r2, r3
 8009eb2:	2380      	movs	r3, #128	; 0x80
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	81ab      	strh	r3, [r5, #12]
 8009eb8:	e00e      	b.n	8009ed8 <__sfvwrite_r+0x140>
 8009eba:	9802      	ldr	r0, [sp, #8]
 8009ebc:	9a01      	ldr	r2, [sp, #4]
 8009ebe:	f7fc ffdf 	bl	8006e80 <_realloc_r>
 8009ec2:	1c04      	adds	r4, r0, #0
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d107      	bne.n	8009ed8 <__sfvwrite_r+0x140>
 8009ec8:	6929      	ldr	r1, [r5, #16]
 8009eca:	9802      	ldr	r0, [sp, #8]
 8009ecc:	f7ff feae 	bl	8009c2c <_free_r>
 8009ed0:	9902      	ldr	r1, [sp, #8]
 8009ed2:	230c      	movs	r3, #12
 8009ed4:	600b      	str	r3, [r1, #0]
 8009ed6:	e0ba      	b.n	800a04e <__sfvwrite_r+0x2b6>
 8009ed8:	9a04      	ldr	r2, [sp, #16]
 8009eda:	9b01      	ldr	r3, [sp, #4]
 8009edc:	612c      	str	r4, [r5, #16]
 8009ede:	616b      	str	r3, [r5, #20]
 8009ee0:	18a4      	adds	r4, r4, r2
 8009ee2:	1a9b      	subs	r3, r3, r2
 8009ee4:	602c      	str	r4, [r5, #0]
 8009ee6:	60ab      	str	r3, [r5, #8]
 8009ee8:	1c3c      	adds	r4, r7, #0
 8009eea:	42a7      	cmp	r7, r4
 8009eec:	d200      	bcs.n	8009ef0 <__sfvwrite_r+0x158>
 8009eee:	1c3c      	adds	r4, r7, #0
 8009ef0:	1c22      	adds	r2, r4, #0
 8009ef2:	6828      	ldr	r0, [r5, #0]
 8009ef4:	9900      	ldr	r1, [sp, #0]
 8009ef6:	f7fc ff81 	bl	8006dfc <memmove>
 8009efa:	68ab      	ldr	r3, [r5, #8]
 8009efc:	1b1b      	subs	r3, r3, r4
 8009efe:	60ab      	str	r3, [r5, #8]
 8009f00:	682b      	ldr	r3, [r5, #0]
 8009f02:	191c      	adds	r4, r3, r4
 8009f04:	602c      	str	r4, [r5, #0]
 8009f06:	1c3c      	adds	r4, r7, #0
 8009f08:	e02a      	b.n	8009f60 <__sfvwrite_r+0x1c8>
 8009f0a:	6828      	ldr	r0, [r5, #0]
 8009f0c:	42a7      	cmp	r7, r4
 8009f0e:	d910      	bls.n	8009f32 <__sfvwrite_r+0x19a>
 8009f10:	692b      	ldr	r3, [r5, #16]
 8009f12:	4298      	cmp	r0, r3
 8009f14:	d90d      	bls.n	8009f32 <__sfvwrite_r+0x19a>
 8009f16:	9900      	ldr	r1, [sp, #0]
 8009f18:	1c22      	adds	r2, r4, #0
 8009f1a:	f7fc ff6f 	bl	8006dfc <memmove>
 8009f1e:	682b      	ldr	r3, [r5, #0]
 8009f20:	9802      	ldr	r0, [sp, #8]
 8009f22:	191b      	adds	r3, r3, r4
 8009f24:	602b      	str	r3, [r5, #0]
 8009f26:	1c29      	adds	r1, r5, #0
 8009f28:	f7ff fd52 	bl	80099d0 <_fflush_r>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d017      	beq.n	8009f60 <__sfvwrite_r+0x1c8>
 8009f30:	e08d      	b.n	800a04e <__sfvwrite_r+0x2b6>
 8009f32:	696b      	ldr	r3, [r5, #20]
 8009f34:	429f      	cmp	r7, r3
 8009f36:	d308      	bcc.n	8009f4a <__sfvwrite_r+0x1b2>
 8009f38:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8009f3a:	9802      	ldr	r0, [sp, #8]
 8009f3c:	69e9      	ldr	r1, [r5, #28]
 8009f3e:	9a00      	ldr	r2, [sp, #0]
 8009f40:	47a0      	blx	r4
 8009f42:	1c04      	adds	r4, r0, #0
 8009f44:	2800      	cmp	r0, #0
 8009f46:	dc0b      	bgt.n	8009f60 <__sfvwrite_r+0x1c8>
 8009f48:	e081      	b.n	800a04e <__sfvwrite_r+0x2b6>
 8009f4a:	9900      	ldr	r1, [sp, #0]
 8009f4c:	1c3a      	adds	r2, r7, #0
 8009f4e:	f7fc ff55 	bl	8006dfc <memmove>
 8009f52:	68ab      	ldr	r3, [r5, #8]
 8009f54:	1c3c      	adds	r4, r7, #0
 8009f56:	1bdb      	subs	r3, r3, r7
 8009f58:	60ab      	str	r3, [r5, #8]
 8009f5a:	682b      	ldr	r3, [r5, #0]
 8009f5c:	19db      	adds	r3, r3, r7
 8009f5e:	602b      	str	r3, [r5, #0]
 8009f60:	68b3      	ldr	r3, [r6, #8]
 8009f62:	1b1b      	subs	r3, r3, r4
 8009f64:	60b3      	str	r3, [r6, #8]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d078      	beq.n	800a05c <__sfvwrite_r+0x2c4>
 8009f6a:	9900      	ldr	r1, [sp, #0]
 8009f6c:	1b3f      	subs	r7, r7, r4
 8009f6e:	1909      	adds	r1, r1, r4
 8009f70:	9100      	str	r1, [sp, #0]
 8009f72:	e76c      	b.n	8009e4e <__sfvwrite_r+0xb6>
 8009f74:	9a03      	ldr	r2, [sp, #12]
 8009f76:	2000      	movs	r0, #0
 8009f78:	6853      	ldr	r3, [r2, #4]
 8009f7a:	6817      	ldr	r7, [r2, #0]
 8009f7c:	3208      	adds	r2, #8
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	9203      	str	r2, [sp, #12]
 8009f82:	9005      	str	r0, [sp, #20]
 8009f84:	9900      	ldr	r1, [sp, #0]
 8009f86:	2900      	cmp	r1, #0
 8009f88:	d0f4      	beq.n	8009f74 <__sfvwrite_r+0x1dc>
 8009f8a:	9a05      	ldr	r2, [sp, #20]
 8009f8c:	2a00      	cmp	r2, #0
 8009f8e:	d111      	bne.n	8009fb4 <__sfvwrite_r+0x21c>
 8009f90:	1c38      	adds	r0, r7, #0
 8009f92:	210a      	movs	r1, #10
 8009f94:	9a00      	ldr	r2, [sp, #0]
 8009f96:	f7fc ff0b 	bl	8006db0 <memchr>
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	d005      	beq.n	8009faa <__sfvwrite_r+0x212>
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	1bc0      	subs	r0, r0, r7
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	9001      	str	r0, [sp, #4]
 8009fa6:	9305      	str	r3, [sp, #20]
 8009fa8:	e004      	b.n	8009fb4 <__sfvwrite_r+0x21c>
 8009faa:	9800      	ldr	r0, [sp, #0]
 8009fac:	2101      	movs	r1, #1
 8009fae:	3001      	adds	r0, #1
 8009fb0:	9001      	str	r0, [sp, #4]
 8009fb2:	9105      	str	r1, [sp, #20]
 8009fb4:	9a01      	ldr	r2, [sp, #4]
 8009fb6:	9b00      	ldr	r3, [sp, #0]
 8009fb8:	9204      	str	r2, [sp, #16]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d900      	bls.n	8009fc0 <__sfvwrite_r+0x228>
 8009fbe:	9304      	str	r3, [sp, #16]
 8009fc0:	696b      	ldr	r3, [r5, #20]
 8009fc2:	68ac      	ldr	r4, [r5, #8]
 8009fc4:	9904      	ldr	r1, [sp, #16]
 8009fc6:	191c      	adds	r4, r3, r4
 8009fc8:	6828      	ldr	r0, [r5, #0]
 8009fca:	42a1      	cmp	r1, r4
 8009fcc:	dd10      	ble.n	8009ff0 <__sfvwrite_r+0x258>
 8009fce:	692a      	ldr	r2, [r5, #16]
 8009fd0:	4290      	cmp	r0, r2
 8009fd2:	d90d      	bls.n	8009ff0 <__sfvwrite_r+0x258>
 8009fd4:	1c39      	adds	r1, r7, #0
 8009fd6:	1c22      	adds	r2, r4, #0
 8009fd8:	f7fc ff10 	bl	8006dfc <memmove>
 8009fdc:	682b      	ldr	r3, [r5, #0]
 8009fde:	9802      	ldr	r0, [sp, #8]
 8009fe0:	191b      	adds	r3, r3, r4
 8009fe2:	602b      	str	r3, [r5, #0]
 8009fe4:	1c29      	adds	r1, r5, #0
 8009fe6:	f7ff fcf3 	bl	80099d0 <_fflush_r>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d018      	beq.n	800a020 <__sfvwrite_r+0x288>
 8009fee:	e02e      	b.n	800a04e <__sfvwrite_r+0x2b6>
 8009ff0:	9a04      	ldr	r2, [sp, #16]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	db08      	blt.n	800a008 <__sfvwrite_r+0x270>
 8009ff6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8009ff8:	9802      	ldr	r0, [sp, #8]
 8009ffa:	69e9      	ldr	r1, [r5, #28]
 8009ffc:	1c3a      	adds	r2, r7, #0
 8009ffe:	47a0      	blx	r4
 800a000:	1c04      	adds	r4, r0, #0
 800a002:	2800      	cmp	r0, #0
 800a004:	dc0c      	bgt.n	800a020 <__sfvwrite_r+0x288>
 800a006:	e022      	b.n	800a04e <__sfvwrite_r+0x2b6>
 800a008:	1c39      	adds	r1, r7, #0
 800a00a:	9a04      	ldr	r2, [sp, #16]
 800a00c:	f7fc fef6 	bl	8006dfc <memmove>
 800a010:	9804      	ldr	r0, [sp, #16]
 800a012:	68ab      	ldr	r3, [r5, #8]
 800a014:	1c04      	adds	r4, r0, #0
 800a016:	1a1b      	subs	r3, r3, r0
 800a018:	60ab      	str	r3, [r5, #8]
 800a01a:	682b      	ldr	r3, [r5, #0]
 800a01c:	181b      	adds	r3, r3, r0
 800a01e:	602b      	str	r3, [r5, #0]
 800a020:	9901      	ldr	r1, [sp, #4]
 800a022:	1b09      	subs	r1, r1, r4
 800a024:	9101      	str	r1, [sp, #4]
 800a026:	2900      	cmp	r1, #0
 800a028:	d107      	bne.n	800a03a <__sfvwrite_r+0x2a2>
 800a02a:	9802      	ldr	r0, [sp, #8]
 800a02c:	1c29      	adds	r1, r5, #0
 800a02e:	f7ff fccf 	bl	80099d0 <_fflush_r>
 800a032:	2800      	cmp	r0, #0
 800a034:	d10b      	bne.n	800a04e <__sfvwrite_r+0x2b6>
 800a036:	2200      	movs	r2, #0
 800a038:	9205      	str	r2, [sp, #20]
 800a03a:	68b3      	ldr	r3, [r6, #8]
 800a03c:	1b1b      	subs	r3, r3, r4
 800a03e:	60b3      	str	r3, [r6, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00b      	beq.n	800a05c <__sfvwrite_r+0x2c4>
 800a044:	9b00      	ldr	r3, [sp, #0]
 800a046:	193f      	adds	r7, r7, r4
 800a048:	1b1b      	subs	r3, r3, r4
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	e79a      	b.n	8009f84 <__sfvwrite_r+0x1ec>
 800a04e:	89aa      	ldrh	r2, [r5, #12]
 800a050:	2340      	movs	r3, #64	; 0x40
 800a052:	4313      	orrs	r3, r2
 800a054:	81ab      	strh	r3, [r5, #12]
 800a056:	2001      	movs	r0, #1
 800a058:	4240      	negs	r0, r0
 800a05a:	e000      	b.n	800a05e <__sfvwrite_r+0x2c6>
 800a05c:	2000      	movs	r0, #0
 800a05e:	b007      	add	sp, #28
 800a060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a062:	46c0      	nop			; (mov r8, r8)
 800a064:	fffffb7f 	.word	0xfffffb7f

0800a068 <_fwalk>:
 800a068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a06a:	b083      	sub	sp, #12
 800a06c:	1c04      	adds	r4, r0, #0
 800a06e:	9101      	str	r1, [sp, #4]
 800a070:	f7ff fd34 	bl	8009adc <__sfp_lock_acquire>
 800a074:	22b8      	movs	r2, #184	; 0xb8
 800a076:	0092      	lsls	r2, r2, #2
 800a078:	18a4      	adds	r4, r4, r2
 800a07a:	2600      	movs	r6, #0
 800a07c:	e012      	b.n	800a0a4 <_fwalk+0x3c>
 800a07e:	68a5      	ldr	r5, [r4, #8]
 800a080:	6867      	ldr	r7, [r4, #4]
 800a082:	e00c      	b.n	800a09e <_fwalk+0x36>
 800a084:	220c      	movs	r2, #12
 800a086:	5eab      	ldrsh	r3, [r5, r2]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d007      	beq.n	800a09c <_fwalk+0x34>
 800a08c:	220e      	movs	r2, #14
 800a08e:	5eab      	ldrsh	r3, [r5, r2]
 800a090:	3301      	adds	r3, #1
 800a092:	d003      	beq.n	800a09c <_fwalk+0x34>
 800a094:	1c28      	adds	r0, r5, #0
 800a096:	9b01      	ldr	r3, [sp, #4]
 800a098:	4798      	blx	r3
 800a09a:	4306      	orrs	r6, r0
 800a09c:	3568      	adds	r5, #104	; 0x68
 800a09e:	3f01      	subs	r7, #1
 800a0a0:	d5f0      	bpl.n	800a084 <_fwalk+0x1c>
 800a0a2:	6824      	ldr	r4, [r4, #0]
 800a0a4:	2c00      	cmp	r4, #0
 800a0a6:	d1ea      	bne.n	800a07e <_fwalk+0x16>
 800a0a8:	f7ff fd19 	bl	8009ade <__sfp_lock_release>
 800a0ac:	b003      	add	sp, #12
 800a0ae:	1c30      	adds	r0, r6, #0
 800a0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a0b4 <_localeconv_r>:
 800a0b4:	4800      	ldr	r0, [pc, #0]	; (800a0b8 <_localeconv_r+0x4>)
 800a0b6:	4770      	bx	lr
 800a0b8:	0800c26c 	.word	0x0800c26c

0800a0bc <__smakebuf_r>:
 800a0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0be:	898b      	ldrh	r3, [r1, #12]
 800a0c0:	b091      	sub	sp, #68	; 0x44
 800a0c2:	1c06      	adds	r6, r0, #0
 800a0c4:	1c0c      	adds	r4, r1, #0
 800a0c6:	079a      	lsls	r2, r3, #30
 800a0c8:	d440      	bmi.n	800a14c <__smakebuf_r+0x90>
 800a0ca:	230e      	movs	r3, #14
 800a0cc:	5ec9      	ldrsh	r1, [r1, r3]
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	db05      	blt.n	800a0de <__smakebuf_r+0x22>
 800a0d2:	ad01      	add	r5, sp, #4
 800a0d4:	1c2a      	adds	r2, r5, #0
 800a0d6:	f000 fc3b 	bl	800a950 <_fstat_r>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	da0c      	bge.n	800a0f8 <__smakebuf_r+0x3c>
 800a0de:	89a2      	ldrh	r2, [r4, #12]
 800a0e0:	0613      	lsls	r3, r2, #24
 800a0e2:	d402      	bmi.n	800a0ea <__smakebuf_r+0x2e>
 800a0e4:	2580      	movs	r5, #128	; 0x80
 800a0e6:	006d      	lsls	r5, r5, #1
 800a0e8:	e000      	b.n	800a0ec <__smakebuf_r+0x30>
 800a0ea:	2540      	movs	r5, #64	; 0x40
 800a0ec:	2380      	movs	r3, #128	; 0x80
 800a0ee:	011b      	lsls	r3, r3, #4
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	81a3      	strh	r3, [r4, #12]
 800a0f4:	2700      	movs	r7, #0
 800a0f6:	e01d      	b.n	800a134 <__smakebuf_r+0x78>
 800a0f8:	23f0      	movs	r3, #240	; 0xf0
 800a0fa:	686a      	ldr	r2, [r5, #4]
 800a0fc:	021b      	lsls	r3, r3, #8
 800a0fe:	401a      	ands	r2, r3
 800a100:	4b22      	ldr	r3, [pc, #136]	; (800a18c <__smakebuf_r+0xd0>)
 800a102:	18d7      	adds	r7, r2, r3
 800a104:	427b      	negs	r3, r7
 800a106:	415f      	adcs	r7, r3
 800a108:	2380      	movs	r3, #128	; 0x80
 800a10a:	021b      	lsls	r3, r3, #8
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d10a      	bne.n	800a126 <__smakebuf_r+0x6a>
 800a110:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a112:	4b1f      	ldr	r3, [pc, #124]	; (800a190 <__smakebuf_r+0xd4>)
 800a114:	429a      	cmp	r2, r3
 800a116:	d106      	bne.n	800a126 <__smakebuf_r+0x6a>
 800a118:	89a2      	ldrh	r2, [r4, #12]
 800a11a:	2380      	movs	r3, #128	; 0x80
 800a11c:	00db      	lsls	r3, r3, #3
 800a11e:	431a      	orrs	r2, r3
 800a120:	81a2      	strh	r2, [r4, #12]
 800a122:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a124:	e004      	b.n	800a130 <__smakebuf_r+0x74>
 800a126:	89a2      	ldrh	r2, [r4, #12]
 800a128:	2380      	movs	r3, #128	; 0x80
 800a12a:	011b      	lsls	r3, r3, #4
 800a12c:	4313      	orrs	r3, r2
 800a12e:	81a3      	strh	r3, [r4, #12]
 800a130:	2580      	movs	r5, #128	; 0x80
 800a132:	006d      	lsls	r5, r5, #1
 800a134:	1c30      	adds	r0, r6, #0
 800a136:	1c29      	adds	r1, r5, #0
 800a138:	f7fc fc2a 	bl	8006990 <_malloc_r>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d10c      	bne.n	800a15a <__smakebuf_r+0x9e>
 800a140:	89a3      	ldrh	r3, [r4, #12]
 800a142:	059a      	lsls	r2, r3, #22
 800a144:	d41f      	bmi.n	800a186 <__smakebuf_r+0xca>
 800a146:	2202      	movs	r2, #2
 800a148:	4313      	orrs	r3, r2
 800a14a:	81a3      	strh	r3, [r4, #12]
 800a14c:	1c23      	adds	r3, r4, #0
 800a14e:	3343      	adds	r3, #67	; 0x43
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	6123      	str	r3, [r4, #16]
 800a154:	2301      	movs	r3, #1
 800a156:	6163      	str	r3, [r4, #20]
 800a158:	e015      	b.n	800a186 <__smakebuf_r+0xca>
 800a15a:	4b0e      	ldr	r3, [pc, #56]	; (800a194 <__smakebuf_r+0xd8>)
 800a15c:	6020      	str	r0, [r4, #0]
 800a15e:	63f3      	str	r3, [r6, #60]	; 0x3c
 800a160:	89a2      	ldrh	r2, [r4, #12]
 800a162:	2380      	movs	r3, #128	; 0x80
 800a164:	4313      	orrs	r3, r2
 800a166:	81a3      	strh	r3, [r4, #12]
 800a168:	6120      	str	r0, [r4, #16]
 800a16a:	6165      	str	r5, [r4, #20]
 800a16c:	2f00      	cmp	r7, #0
 800a16e:	d00a      	beq.n	800a186 <__smakebuf_r+0xca>
 800a170:	230e      	movs	r3, #14
 800a172:	5ee1      	ldrsh	r1, [r4, r3]
 800a174:	1c30      	adds	r0, r6, #0
 800a176:	f000 fbfd 	bl	800a974 <_isatty_r>
 800a17a:	2800      	cmp	r0, #0
 800a17c:	d003      	beq.n	800a186 <__smakebuf_r+0xca>
 800a17e:	89a2      	ldrh	r2, [r4, #12]
 800a180:	2301      	movs	r3, #1
 800a182:	4313      	orrs	r3, r2
 800a184:	81a3      	strh	r3, [r4, #12]
 800a186:	b011      	add	sp, #68	; 0x44
 800a188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a18a:	46c0      	nop			; (mov r8, r8)
 800a18c:	ffffe000 	.word	0xffffe000
 800a190:	0800a77d 	.word	0x0800a77d
 800a194:	08009ae1 	.word	0x08009ae1

0800a198 <_Bfree>:
 800a198:	b500      	push	{lr}
 800a19a:	2900      	cmp	r1, #0
 800a19c:	d005      	beq.n	800a1aa <_Bfree+0x12>
 800a19e:	684a      	ldr	r2, [r1, #4]
 800a1a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a1a2:	0092      	lsls	r2, r2, #2
 800a1a4:	58d0      	ldr	r0, [r2, r3]
 800a1a6:	6008      	str	r0, [r1, #0]
 800a1a8:	50d1      	str	r1, [r2, r3]
 800a1aa:	bd00      	pop	{pc}

0800a1ac <__hi0bits>:
 800a1ac:	b500      	push	{lr}
 800a1ae:	4a11      	ldr	r2, [pc, #68]	; (800a1f4 <__hi0bits+0x48>)
 800a1b0:	1c03      	adds	r3, r0, #0
 800a1b2:	4210      	tst	r0, r2
 800a1b4:	d001      	beq.n	800a1ba <__hi0bits+0xe>
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	e001      	b.n	800a1be <__hi0bits+0x12>
 800a1ba:	0403      	lsls	r3, r0, #16
 800a1bc:	2010      	movs	r0, #16
 800a1be:	22ff      	movs	r2, #255	; 0xff
 800a1c0:	0612      	lsls	r2, r2, #24
 800a1c2:	4213      	tst	r3, r2
 800a1c4:	d101      	bne.n	800a1ca <__hi0bits+0x1e>
 800a1c6:	3008      	adds	r0, #8
 800a1c8:	021b      	lsls	r3, r3, #8
 800a1ca:	22f0      	movs	r2, #240	; 0xf0
 800a1cc:	0612      	lsls	r2, r2, #24
 800a1ce:	4213      	tst	r3, r2
 800a1d0:	d101      	bne.n	800a1d6 <__hi0bits+0x2a>
 800a1d2:	3004      	adds	r0, #4
 800a1d4:	011b      	lsls	r3, r3, #4
 800a1d6:	22c0      	movs	r2, #192	; 0xc0
 800a1d8:	0612      	lsls	r2, r2, #24
 800a1da:	4213      	tst	r3, r2
 800a1dc:	d101      	bne.n	800a1e2 <__hi0bits+0x36>
 800a1de:	3002      	adds	r0, #2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	db04      	blt.n	800a1f0 <__hi0bits+0x44>
 800a1e6:	005a      	lsls	r2, r3, #1
 800a1e8:	d401      	bmi.n	800a1ee <__hi0bits+0x42>
 800a1ea:	2020      	movs	r0, #32
 800a1ec:	e000      	b.n	800a1f0 <__hi0bits+0x44>
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	bd00      	pop	{pc}
 800a1f2:	46c0      	nop			; (mov r8, r8)
 800a1f4:	ffff0000 	.word	0xffff0000

0800a1f8 <__lo0bits>:
 800a1f8:	b500      	push	{lr}
 800a1fa:	6803      	ldr	r3, [r0, #0]
 800a1fc:	0759      	lsls	r1, r3, #29
 800a1fe:	d00d      	beq.n	800a21c <__lo0bits+0x24>
 800a200:	07da      	lsls	r2, r3, #31
 800a202:	d501      	bpl.n	800a208 <__lo0bits+0x10>
 800a204:	2200      	movs	r2, #0
 800a206:	e026      	b.n	800a256 <__lo0bits+0x5e>
 800a208:	0799      	lsls	r1, r3, #30
 800a20a:	d503      	bpl.n	800a214 <__lo0bits+0x1c>
 800a20c:	085b      	lsrs	r3, r3, #1
 800a20e:	6003      	str	r3, [r0, #0]
 800a210:	2201      	movs	r2, #1
 800a212:	e020      	b.n	800a256 <__lo0bits+0x5e>
 800a214:	089b      	lsrs	r3, r3, #2
 800a216:	6003      	str	r3, [r0, #0]
 800a218:	2202      	movs	r2, #2
 800a21a:	e01c      	b.n	800a256 <__lo0bits+0x5e>
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	2a00      	cmp	r2, #0
 800a220:	d001      	beq.n	800a226 <__lo0bits+0x2e>
 800a222:	2200      	movs	r2, #0
 800a224:	e001      	b.n	800a22a <__lo0bits+0x32>
 800a226:	0c1b      	lsrs	r3, r3, #16
 800a228:	2210      	movs	r2, #16
 800a22a:	b2d9      	uxtb	r1, r3
 800a22c:	2900      	cmp	r1, #0
 800a22e:	d101      	bne.n	800a234 <__lo0bits+0x3c>
 800a230:	3208      	adds	r2, #8
 800a232:	0a1b      	lsrs	r3, r3, #8
 800a234:	0719      	lsls	r1, r3, #28
 800a236:	d101      	bne.n	800a23c <__lo0bits+0x44>
 800a238:	3204      	adds	r2, #4
 800a23a:	091b      	lsrs	r3, r3, #4
 800a23c:	0799      	lsls	r1, r3, #30
 800a23e:	d101      	bne.n	800a244 <__lo0bits+0x4c>
 800a240:	3202      	adds	r2, #2
 800a242:	089b      	lsrs	r3, r3, #2
 800a244:	07d9      	lsls	r1, r3, #31
 800a246:	d405      	bmi.n	800a254 <__lo0bits+0x5c>
 800a248:	085b      	lsrs	r3, r3, #1
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d101      	bne.n	800a252 <__lo0bits+0x5a>
 800a24e:	2220      	movs	r2, #32
 800a250:	e001      	b.n	800a256 <__lo0bits+0x5e>
 800a252:	3201      	adds	r2, #1
 800a254:	6003      	str	r3, [r0, #0]
 800a256:	1c10      	adds	r0, r2, #0
 800a258:	bd00      	pop	{pc}

0800a25a <__mcmp>:
 800a25a:	b530      	push	{r4, r5, lr}
 800a25c:	1c03      	adds	r3, r0, #0
 800a25e:	690a      	ldr	r2, [r1, #16]
 800a260:	6900      	ldr	r0, [r0, #16]
 800a262:	1a80      	subs	r0, r0, r2
 800a264:	2800      	cmp	r0, #0
 800a266:	d114      	bne.n	800a292 <__mcmp+0x38>
 800a268:	3204      	adds	r2, #4
 800a26a:	0092      	lsls	r2, r2, #2
 800a26c:	1c1d      	adds	r5, r3, #0
 800a26e:	1889      	adds	r1, r1, r2
 800a270:	189b      	adds	r3, r3, r2
 800a272:	3514      	adds	r5, #20
 800a274:	3304      	adds	r3, #4
 800a276:	3104      	adds	r1, #4
 800a278:	3b04      	subs	r3, #4
 800a27a:	3904      	subs	r1, #4
 800a27c:	681c      	ldr	r4, [r3, #0]
 800a27e:	680a      	ldr	r2, [r1, #0]
 800a280:	4294      	cmp	r4, r2
 800a282:	d004      	beq.n	800a28e <__mcmp+0x34>
 800a284:	2001      	movs	r0, #1
 800a286:	4294      	cmp	r4, r2
 800a288:	d203      	bcs.n	800a292 <__mcmp+0x38>
 800a28a:	4240      	negs	r0, r0
 800a28c:	e001      	b.n	800a292 <__mcmp+0x38>
 800a28e:	42ab      	cmp	r3, r5
 800a290:	d8f2      	bhi.n	800a278 <__mcmp+0x1e>
 800a292:	bd30      	pop	{r4, r5, pc}

0800a294 <_Balloc>:
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a298:	1c04      	adds	r4, r0, #0
 800a29a:	1c0d      	adds	r5, r1, #0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d106      	bne.n	800a2ae <_Balloc+0x1a>
 800a2a0:	2104      	movs	r1, #4
 800a2a2:	2210      	movs	r2, #16
 800a2a4:	f000 fac4 	bl	800a830 <_calloc_r>
 800a2a8:	64e0      	str	r0, [r4, #76]	; 0x4c
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d017      	beq.n	800a2de <_Balloc+0x4a>
 800a2ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a2b0:	00aa      	lsls	r2, r5, #2
 800a2b2:	18d3      	adds	r3, r2, r3
 800a2b4:	6818      	ldr	r0, [r3, #0]
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d002      	beq.n	800a2c0 <_Balloc+0x2c>
 800a2ba:	6802      	ldr	r2, [r0, #0]
 800a2bc:	601a      	str	r2, [r3, #0]
 800a2be:	e00b      	b.n	800a2d8 <_Balloc+0x44>
 800a2c0:	2601      	movs	r6, #1
 800a2c2:	40ae      	lsls	r6, r5
 800a2c4:	1d72      	adds	r2, r6, #5
 800a2c6:	0092      	lsls	r2, r2, #2
 800a2c8:	1c20      	adds	r0, r4, #0
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	f000 fab0 	bl	800a830 <_calloc_r>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d004      	beq.n	800a2de <_Balloc+0x4a>
 800a2d4:	6045      	str	r5, [r0, #4]
 800a2d6:	6086      	str	r6, [r0, #8]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	6103      	str	r3, [r0, #16]
 800a2dc:	60c3      	str	r3, [r0, #12]
 800a2de:	bd70      	pop	{r4, r5, r6, pc}

0800a2e0 <__d2b>:
 800a2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	2101      	movs	r1, #1
 800a2e6:	9200      	str	r2, [sp, #0]
 800a2e8:	9301      	str	r3, [sp, #4]
 800a2ea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a2ec:	f7ff ffd2 	bl	800a294 <_Balloc>
 800a2f0:	9a01      	ldr	r2, [sp, #4]
 800a2f2:	4928      	ldr	r1, [pc, #160]	; (800a394 <__d2b+0xb4>)
 800a2f4:	4b28      	ldr	r3, [pc, #160]	; (800a398 <__d2b+0xb8>)
 800a2f6:	4011      	ands	r1, r2
 800a2f8:	401a      	ands	r2, r3
 800a2fa:	0d16      	lsrs	r6, r2, #20
 800a2fc:	1c04      	adds	r4, r0, #0
 800a2fe:	9102      	str	r1, [sp, #8]
 800a300:	2e00      	cmp	r6, #0
 800a302:	d003      	beq.n	800a30c <__d2b+0x2c>
 800a304:	2380      	movs	r3, #128	; 0x80
 800a306:	035b      	lsls	r3, r3, #13
 800a308:	430b      	orrs	r3, r1
 800a30a:	9302      	str	r3, [sp, #8]
 800a30c:	9900      	ldr	r1, [sp, #0]
 800a30e:	9201      	str	r2, [sp, #4]
 800a310:	2900      	cmp	r1, #0
 800a312:	d01a      	beq.n	800a34a <__d2b+0x6a>
 800a314:	a803      	add	r0, sp, #12
 800a316:	9103      	str	r1, [sp, #12]
 800a318:	f7ff ff6e 	bl	800a1f8 <__lo0bits>
 800a31c:	9b03      	ldr	r3, [sp, #12]
 800a31e:	2800      	cmp	r0, #0
 800a320:	d009      	beq.n	800a336 <__d2b+0x56>
 800a322:	9a02      	ldr	r2, [sp, #8]
 800a324:	2120      	movs	r1, #32
 800a326:	1c15      	adds	r5, r2, #0
 800a328:	1a09      	subs	r1, r1, r0
 800a32a:	408d      	lsls	r5, r1
 800a32c:	432b      	orrs	r3, r5
 800a32e:	40c2      	lsrs	r2, r0
 800a330:	6163      	str	r3, [r4, #20]
 800a332:	9202      	str	r2, [sp, #8]
 800a334:	e000      	b.n	800a338 <__d2b+0x58>
 800a336:	6163      	str	r3, [r4, #20]
 800a338:	9b02      	ldr	r3, [sp, #8]
 800a33a:	61a3      	str	r3, [r4, #24]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d101      	bne.n	800a344 <__d2b+0x64>
 800a340:	2501      	movs	r5, #1
 800a342:	e000      	b.n	800a346 <__d2b+0x66>
 800a344:	2502      	movs	r5, #2
 800a346:	6125      	str	r5, [r4, #16]
 800a348:	e008      	b.n	800a35c <__d2b+0x7c>
 800a34a:	a802      	add	r0, sp, #8
 800a34c:	f7ff ff54 	bl	800a1f8 <__lo0bits>
 800a350:	9b02      	ldr	r3, [sp, #8]
 800a352:	3020      	adds	r0, #32
 800a354:	6163      	str	r3, [r4, #20]
 800a356:	2301      	movs	r3, #1
 800a358:	6123      	str	r3, [r4, #16]
 800a35a:	2501      	movs	r5, #1
 800a35c:	2e00      	cmp	r6, #0
 800a35e:	d008      	beq.n	800a372 <__d2b+0x92>
 800a360:	490e      	ldr	r1, [pc, #56]	; (800a39c <__d2b+0xbc>)
 800a362:	2335      	movs	r3, #53	; 0x35
 800a364:	1876      	adds	r6, r6, r1
 800a366:	1836      	adds	r6, r6, r0
 800a368:	1a18      	subs	r0, r3, r0
 800a36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a36c:	603e      	str	r6, [r7, #0]
 800a36e:	6018      	str	r0, [r3, #0]
 800a370:	e00c      	b.n	800a38c <__d2b+0xac>
 800a372:	490b      	ldr	r1, [pc, #44]	; (800a3a0 <__d2b+0xc0>)
 800a374:	1ceb      	adds	r3, r5, #3
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	1840      	adds	r0, r0, r1
 800a37a:	191b      	adds	r3, r3, r4
 800a37c:	6038      	str	r0, [r7, #0]
 800a37e:	6858      	ldr	r0, [r3, #4]
 800a380:	f7ff ff14 	bl	800a1ac <__hi0bits>
 800a384:	016d      	lsls	r5, r5, #5
 800a386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a388:	1a2d      	subs	r5, r5, r0
 800a38a:	601d      	str	r5, [r3, #0]
 800a38c:	b005      	add	sp, #20
 800a38e:	1c20      	adds	r0, r4, #0
 800a390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a392:	46c0      	nop			; (mov r8, r8)
 800a394:	000fffff 	.word	0x000fffff
 800a398:	7fffffff 	.word	0x7fffffff
 800a39c:	fffffbcd 	.word	0xfffffbcd
 800a3a0:	fffffbce 	.word	0xfffffbce

0800a3a4 <__mdiff>:
 800a3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3a6:	b089      	sub	sp, #36	; 0x24
 800a3a8:	1c07      	adds	r7, r0, #0
 800a3aa:	1c0c      	adds	r4, r1, #0
 800a3ac:	1c08      	adds	r0, r1, #0
 800a3ae:	1c11      	adds	r1, r2, #0
 800a3b0:	1c15      	adds	r5, r2, #0
 800a3b2:	f7ff ff52 	bl	800a25a <__mcmp>
 800a3b6:	1c06      	adds	r6, r0, #0
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d107      	bne.n	800a3cc <__mdiff+0x28>
 800a3bc:	1c38      	adds	r0, r7, #0
 800a3be:	2100      	movs	r1, #0
 800a3c0:	f7ff ff68 	bl	800a294 <_Balloc>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	6103      	str	r3, [r0, #16]
 800a3c8:	6146      	str	r6, [r0, #20]
 800a3ca:	e058      	b.n	800a47e <__mdiff+0xda>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	da04      	bge.n	800a3da <__mdiff+0x36>
 800a3d0:	1c23      	adds	r3, r4, #0
 800a3d2:	2601      	movs	r6, #1
 800a3d4:	1c2c      	adds	r4, r5, #0
 800a3d6:	1c1d      	adds	r5, r3, #0
 800a3d8:	e000      	b.n	800a3dc <__mdiff+0x38>
 800a3da:	2600      	movs	r6, #0
 800a3dc:	6861      	ldr	r1, [r4, #4]
 800a3de:	1c38      	adds	r0, r7, #0
 800a3e0:	f7ff ff58 	bl	800a294 <_Balloc>
 800a3e4:	6921      	ldr	r1, [r4, #16]
 800a3e6:	1c22      	adds	r2, r4, #0
 800a3e8:	1d0b      	adds	r3, r1, #4
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	18e4      	adds	r4, r4, r3
 800a3ee:	692b      	ldr	r3, [r5, #16]
 800a3f0:	60c6      	str	r6, [r0, #12]
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	1c2e      	adds	r6, r5, #0
 800a3f8:	18ed      	adds	r5, r5, r3
 800a3fa:	1c03      	adds	r3, r0, #0
 800a3fc:	3214      	adds	r2, #20
 800a3fe:	3404      	adds	r4, #4
 800a400:	3504      	adds	r5, #4
 800a402:	3314      	adds	r3, #20
 800a404:	9406      	str	r4, [sp, #24]
 800a406:	468c      	mov	ip, r1
 800a408:	3614      	adds	r6, #20
 800a40a:	1c11      	adds	r1, r2, #0
 800a40c:	9505      	str	r5, [sp, #20]
 800a40e:	2400      	movs	r4, #0
 800a410:	1c1a      	adds	r2, r3, #0
 800a412:	ce20      	ldmia	r6!, {r5}
 800a414:	c908      	ldmia	r1!, {r3}
 800a416:	9504      	str	r5, [sp, #16]
 800a418:	9f04      	ldr	r7, [sp, #16]
 800a41a:	4d1a      	ldr	r5, [pc, #104]	; (800a484 <__mdiff+0xe0>)
 800a41c:	9301      	str	r3, [sp, #4]
 800a41e:	402f      	ands	r7, r5
 800a420:	402b      	ands	r3, r5
 800a422:	1bdb      	subs	r3, r3, r7
 800a424:	191f      	adds	r7, r3, r4
 800a426:	9c01      	ldr	r4, [sp, #4]
 800a428:	9b04      	ldr	r3, [sp, #16]
 800a42a:	0c24      	lsrs	r4, r4, #16
 800a42c:	9407      	str	r4, [sp, #28]
 800a42e:	0c1c      	lsrs	r4, r3, #16
 800a430:	9b07      	ldr	r3, [sp, #28]
 800a432:	403d      	ands	r5, r7
 800a434:	1b1c      	subs	r4, r3, r4
 800a436:	143b      	asrs	r3, r7, #16
 800a438:	18e3      	adds	r3, r4, r3
 800a43a:	141c      	asrs	r4, r3, #16
 800a43c:	041b      	lsls	r3, r3, #16
 800a43e:	432b      	orrs	r3, r5
 800a440:	9d05      	ldr	r5, [sp, #20]
 800a442:	c208      	stmia	r2!, {r3}
 800a444:	42ae      	cmp	r6, r5
 800a446:	d3e4      	bcc.n	800a412 <__mdiff+0x6e>
 800a448:	1c13      	adds	r3, r2, #0
 800a44a:	1c0a      	adds	r2, r1, #0
 800a44c:	4661      	mov	r1, ip
 800a44e:	e00c      	b.n	800a46a <__mdiff+0xc6>
 800a450:	ca80      	ldmia	r2!, {r7}
 800a452:	4d0c      	ldr	r5, [pc, #48]	; (800a484 <__mdiff+0xe0>)
 800a454:	1c3e      	adds	r6, r7, #0
 800a456:	402e      	ands	r6, r5
 800a458:	19a6      	adds	r6, r4, r6
 800a45a:	1434      	asrs	r4, r6, #16
 800a45c:	0c3f      	lsrs	r7, r7, #16
 800a45e:	19e7      	adds	r7, r4, r7
 800a460:	143c      	asrs	r4, r7, #16
 800a462:	4035      	ands	r5, r6
 800a464:	043f      	lsls	r7, r7, #16
 800a466:	433d      	orrs	r5, r7
 800a468:	c320      	stmia	r3!, {r5}
 800a46a:	9f06      	ldr	r7, [sp, #24]
 800a46c:	42ba      	cmp	r2, r7
 800a46e:	d3ef      	bcc.n	800a450 <__mdiff+0xac>
 800a470:	e000      	b.n	800a474 <__mdiff+0xd0>
 800a472:	3901      	subs	r1, #1
 800a474:	3b04      	subs	r3, #4
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	2a00      	cmp	r2, #0
 800a47a:	d0fa      	beq.n	800a472 <__mdiff+0xce>
 800a47c:	6101      	str	r1, [r0, #16]
 800a47e:	b009      	add	sp, #36	; 0x24
 800a480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a482:	46c0      	nop			; (mov r8, r8)
 800a484:	0000ffff 	.word	0x0000ffff

0800a488 <__lshift>:
 800a488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a48a:	1c0c      	adds	r4, r1, #0
 800a48c:	6925      	ldr	r5, [r4, #16]
 800a48e:	b087      	sub	sp, #28
 800a490:	1157      	asrs	r7, r2, #5
 800a492:	3501      	adds	r5, #1
 800a494:	9005      	str	r0, [sp, #20]
 800a496:	9204      	str	r2, [sp, #16]
 800a498:	6849      	ldr	r1, [r1, #4]
 800a49a:	19ed      	adds	r5, r5, r7
 800a49c:	68a3      	ldr	r3, [r4, #8]
 800a49e:	e001      	b.n	800a4a4 <__lshift+0x1c>
 800a4a0:	3101      	adds	r1, #1
 800a4a2:	005b      	lsls	r3, r3, #1
 800a4a4:	429d      	cmp	r5, r3
 800a4a6:	dcfb      	bgt.n	800a4a0 <__lshift+0x18>
 800a4a8:	9805      	ldr	r0, [sp, #20]
 800a4aa:	f7ff fef3 	bl	800a294 <_Balloc>
 800a4ae:	1c03      	adds	r3, r0, #0
 800a4b0:	1c06      	adds	r6, r0, #0
 800a4b2:	3314      	adds	r3, #20
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	e002      	b.n	800a4be <__lshift+0x36>
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	c302      	stmia	r3!, {r1}
 800a4bc:	3201      	adds	r2, #1
 800a4be:	42ba      	cmp	r2, r7
 800a4c0:	dbfa      	blt.n	800a4b8 <__lshift+0x30>
 800a4c2:	6927      	ldr	r7, [r4, #16]
 800a4c4:	9904      	ldr	r1, [sp, #16]
 800a4c6:	3704      	adds	r7, #4
 800a4c8:	00bf      	lsls	r7, r7, #2
 800a4ca:	1c22      	adds	r2, r4, #0
 800a4cc:	19e7      	adds	r7, r4, r7
 800a4ce:	201f      	movs	r0, #31
 800a4d0:	3214      	adds	r2, #20
 800a4d2:	3704      	adds	r7, #4
 800a4d4:	4008      	ands	r0, r1
 800a4d6:	d015      	beq.n	800a504 <__lshift+0x7c>
 800a4d8:	2120      	movs	r1, #32
 800a4da:	1a09      	subs	r1, r1, r0
 800a4dc:	9104      	str	r1, [sp, #16]
 800a4de:	4684      	mov	ip, r0
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	9701      	str	r7, [sp, #4]
 800a4e4:	6817      	ldr	r7, [r2, #0]
 800a4e6:	4660      	mov	r0, ip
 800a4e8:	4087      	lsls	r7, r0
 800a4ea:	4339      	orrs	r1, r7
 800a4ec:	c302      	stmia	r3!, {r1}
 800a4ee:	ca02      	ldmia	r2!, {r1}
 800a4f0:	9f04      	ldr	r7, [sp, #16]
 800a4f2:	9801      	ldr	r0, [sp, #4]
 800a4f4:	40f9      	lsrs	r1, r7
 800a4f6:	4282      	cmp	r2, r0
 800a4f8:	d3f4      	bcc.n	800a4e4 <__lshift+0x5c>
 800a4fa:	6019      	str	r1, [r3, #0]
 800a4fc:	2900      	cmp	r1, #0
 800a4fe:	d005      	beq.n	800a50c <__lshift+0x84>
 800a500:	3501      	adds	r5, #1
 800a502:	e003      	b.n	800a50c <__lshift+0x84>
 800a504:	ca02      	ldmia	r2!, {r1}
 800a506:	c302      	stmia	r3!, {r1}
 800a508:	42ba      	cmp	r2, r7
 800a50a:	d3fb      	bcc.n	800a504 <__lshift+0x7c>
 800a50c:	3d01      	subs	r5, #1
 800a50e:	6135      	str	r5, [r6, #16]
 800a510:	9805      	ldr	r0, [sp, #20]
 800a512:	1c21      	adds	r1, r4, #0
 800a514:	f7ff fe40 	bl	800a198 <_Bfree>
 800a518:	b007      	add	sp, #28
 800a51a:	1c30      	adds	r0, r6, #0
 800a51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a520 <__multiply>:
 800a520:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a522:	1c15      	adds	r5, r2, #0
 800a524:	692b      	ldr	r3, [r5, #16]
 800a526:	690a      	ldr	r2, [r1, #16]
 800a528:	b08b      	sub	sp, #44	; 0x2c
 800a52a:	1c0c      	adds	r4, r1, #0
 800a52c:	429a      	cmp	r2, r3
 800a52e:	da01      	bge.n	800a534 <__multiply+0x14>
 800a530:	1c2c      	adds	r4, r5, #0
 800a532:	1c0d      	adds	r5, r1, #0
 800a534:	6926      	ldr	r6, [r4, #16]
 800a536:	692f      	ldr	r7, [r5, #16]
 800a538:	68a3      	ldr	r3, [r4, #8]
 800a53a:	19ba      	adds	r2, r7, r6
 800a53c:	6861      	ldr	r1, [r4, #4]
 800a53e:	9202      	str	r2, [sp, #8]
 800a540:	429a      	cmp	r2, r3
 800a542:	dd00      	ble.n	800a546 <__multiply+0x26>
 800a544:	3101      	adds	r1, #1
 800a546:	f7ff fea5 	bl	800a294 <_Balloc>
 800a54a:	9a02      	ldr	r2, [sp, #8]
 800a54c:	1c03      	adds	r3, r0, #0
 800a54e:	3204      	adds	r2, #4
 800a550:	0092      	lsls	r2, r2, #2
 800a552:	1882      	adds	r2, r0, r2
 800a554:	3204      	adds	r2, #4
 800a556:	3314      	adds	r3, #20
 800a558:	9207      	str	r2, [sp, #28]
 800a55a:	1c1a      	adds	r2, r3, #0
 800a55c:	e001      	b.n	800a562 <__multiply+0x42>
 800a55e:	2100      	movs	r1, #0
 800a560:	c202      	stmia	r2!, {r1}
 800a562:	9907      	ldr	r1, [sp, #28]
 800a564:	428a      	cmp	r2, r1
 800a566:	d3fa      	bcc.n	800a55e <__multiply+0x3e>
 800a568:	3604      	adds	r6, #4
 800a56a:	3704      	adds	r7, #4
 800a56c:	00b6      	lsls	r6, r6, #2
 800a56e:	00bf      	lsls	r7, r7, #2
 800a570:	1c22      	adds	r2, r4, #0
 800a572:	19a4      	adds	r4, r4, r6
 800a574:	1c2e      	adds	r6, r5, #0
 800a576:	19ed      	adds	r5, r5, r7
 800a578:	3214      	adds	r2, #20
 800a57a:	3404      	adds	r4, #4
 800a57c:	3614      	adds	r6, #20
 800a57e:	3504      	adds	r5, #4
 800a580:	9205      	str	r2, [sp, #20]
 800a582:	9406      	str	r4, [sp, #24]
 800a584:	9603      	str	r6, [sp, #12]
 800a586:	9508      	str	r5, [sp, #32]
 800a588:	4684      	mov	ip, r0
 800a58a:	e047      	b.n	800a61c <__multiply+0xfc>
 800a58c:	9f03      	ldr	r7, [sp, #12]
 800a58e:	883d      	ldrh	r5, [r7, #0]
 800a590:	2d00      	cmp	r5, #0
 800a592:	d01f      	beq.n	800a5d4 <__multiply+0xb4>
 800a594:	9c05      	ldr	r4, [sp, #20]
 800a596:	1c1a      	adds	r2, r3, #0
 800a598:	2100      	movs	r1, #0
 800a59a:	cc01      	ldmia	r4!, {r0}
 800a59c:	6816      	ldr	r6, [r2, #0]
 800a59e:	9001      	str	r0, [sp, #4]
 800a5a0:	9f01      	ldr	r7, [sp, #4]
 800a5a2:	4829      	ldr	r0, [pc, #164]	; (800a648 <__multiply+0x128>)
 800a5a4:	4007      	ands	r7, r0
 800a5a6:	436f      	muls	r7, r5
 800a5a8:	4006      	ands	r6, r0
 800a5aa:	19bf      	adds	r7, r7, r6
 800a5ac:	187f      	adds	r7, r7, r1
 800a5ae:	9901      	ldr	r1, [sp, #4]
 800a5b0:	0c0e      	lsrs	r6, r1, #16
 800a5b2:	436e      	muls	r6, r5
 800a5b4:	9604      	str	r6, [sp, #16]
 800a5b6:	6816      	ldr	r6, [r2, #0]
 800a5b8:	0c31      	lsrs	r1, r6, #16
 800a5ba:	9e04      	ldr	r6, [sp, #16]
 800a5bc:	1871      	adds	r1, r6, r1
 800a5be:	0c3e      	lsrs	r6, r7, #16
 800a5c0:	198e      	adds	r6, r1, r6
 800a5c2:	4007      	ands	r7, r0
 800a5c4:	0c31      	lsrs	r1, r6, #16
 800a5c6:	0436      	lsls	r6, r6, #16
 800a5c8:	433e      	orrs	r6, r7
 800a5ca:	9f06      	ldr	r7, [sp, #24]
 800a5cc:	c240      	stmia	r2!, {r6}
 800a5ce:	42bc      	cmp	r4, r7
 800a5d0:	d3e3      	bcc.n	800a59a <__multiply+0x7a>
 800a5d2:	6011      	str	r1, [r2, #0]
 800a5d4:	9803      	ldr	r0, [sp, #12]
 800a5d6:	8844      	ldrh	r4, [r0, #2]
 800a5d8:	2c00      	cmp	r4, #0
 800a5da:	d01b      	beq.n	800a614 <__multiply+0xf4>
 800a5dc:	6819      	ldr	r1, [r3, #0]
 800a5de:	9805      	ldr	r0, [sp, #20]
 800a5e0:	1c1a      	adds	r2, r3, #0
 800a5e2:	2500      	movs	r5, #0
 800a5e4:	8807      	ldrh	r7, [r0, #0]
 800a5e6:	8856      	ldrh	r6, [r2, #2]
 800a5e8:	4367      	muls	r7, r4
 800a5ea:	19bf      	adds	r7, r7, r6
 800a5ec:	4e16      	ldr	r6, [pc, #88]	; (800a648 <__multiply+0x128>)
 800a5ee:	197d      	adds	r5, r7, r5
 800a5f0:	9704      	str	r7, [sp, #16]
 800a5f2:	4031      	ands	r1, r6
 800a5f4:	042f      	lsls	r7, r5, #16
 800a5f6:	4339      	orrs	r1, r7
 800a5f8:	c202      	stmia	r2!, {r1}
 800a5fa:	c880      	ldmia	r0!, {r7}
 800a5fc:	6811      	ldr	r1, [r2, #0]
 800a5fe:	0c3f      	lsrs	r7, r7, #16
 800a600:	4367      	muls	r7, r4
 800a602:	4031      	ands	r1, r6
 800a604:	1879      	adds	r1, r7, r1
 800a606:	0c2d      	lsrs	r5, r5, #16
 800a608:	9f06      	ldr	r7, [sp, #24]
 800a60a:	1949      	adds	r1, r1, r5
 800a60c:	0c0d      	lsrs	r5, r1, #16
 800a60e:	42b8      	cmp	r0, r7
 800a610:	d3e8      	bcc.n	800a5e4 <__multiply+0xc4>
 800a612:	6011      	str	r1, [r2, #0]
 800a614:	9803      	ldr	r0, [sp, #12]
 800a616:	3304      	adds	r3, #4
 800a618:	3004      	adds	r0, #4
 800a61a:	9003      	str	r0, [sp, #12]
 800a61c:	9903      	ldr	r1, [sp, #12]
 800a61e:	9a08      	ldr	r2, [sp, #32]
 800a620:	4291      	cmp	r1, r2
 800a622:	d3b3      	bcc.n	800a58c <__multiply+0x6c>
 800a624:	4660      	mov	r0, ip
 800a626:	9b07      	ldr	r3, [sp, #28]
 800a628:	e002      	b.n	800a630 <__multiply+0x110>
 800a62a:	9e02      	ldr	r6, [sp, #8]
 800a62c:	3e01      	subs	r6, #1
 800a62e:	9602      	str	r6, [sp, #8]
 800a630:	9f02      	ldr	r7, [sp, #8]
 800a632:	2f00      	cmp	r7, #0
 800a634:	dd03      	ble.n	800a63e <__multiply+0x11e>
 800a636:	3b04      	subs	r3, #4
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	2a00      	cmp	r2, #0
 800a63c:	d0f5      	beq.n	800a62a <__multiply+0x10a>
 800a63e:	9902      	ldr	r1, [sp, #8]
 800a640:	b00b      	add	sp, #44	; 0x2c
 800a642:	6101      	str	r1, [r0, #16]
 800a644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a646:	46c0      	nop			; (mov r8, r8)
 800a648:	0000ffff 	.word	0x0000ffff

0800a64c <__i2b>:
 800a64c:	b510      	push	{r4, lr}
 800a64e:	1c0c      	adds	r4, r1, #0
 800a650:	2101      	movs	r1, #1
 800a652:	f7ff fe1f 	bl	800a294 <_Balloc>
 800a656:	2301      	movs	r3, #1
 800a658:	6144      	str	r4, [r0, #20]
 800a65a:	6103      	str	r3, [r0, #16]
 800a65c:	bd10      	pop	{r4, pc}
	...

0800a660 <__multadd>:
 800a660:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a662:	b085      	sub	sp, #20
 800a664:	1c0c      	adds	r4, r1, #0
 800a666:	1c1d      	adds	r5, r3, #0
 800a668:	690e      	ldr	r6, [r1, #16]
 800a66a:	9003      	str	r0, [sp, #12]
 800a66c:	3114      	adds	r1, #20
 800a66e:	2300      	movs	r3, #0
 800a670:	4694      	mov	ip, r2
 800a672:	481b      	ldr	r0, [pc, #108]	; (800a6e0 <__multadd+0x80>)
 800a674:	680f      	ldr	r7, [r1, #0]
 800a676:	4662      	mov	r2, ip
 800a678:	4007      	ands	r7, r0
 800a67a:	4357      	muls	r7, r2
 800a67c:	19ef      	adds	r7, r5, r7
 800a67e:	0c3d      	lsrs	r5, r7, #16
 800a680:	9501      	str	r5, [sp, #4]
 800a682:	680d      	ldr	r5, [r1, #0]
 800a684:	4038      	ands	r0, r7
 800a686:	0c2a      	lsrs	r2, r5, #16
 800a688:	4665      	mov	r5, ip
 800a68a:	436a      	muls	r2, r5
 800a68c:	9d01      	ldr	r5, [sp, #4]
 800a68e:	3301      	adds	r3, #1
 800a690:	18aa      	adds	r2, r5, r2
 800a692:	0c15      	lsrs	r5, r2, #16
 800a694:	0412      	lsls	r2, r2, #16
 800a696:	1812      	adds	r2, r2, r0
 800a698:	c104      	stmia	r1!, {r2}
 800a69a:	42b3      	cmp	r3, r6
 800a69c:	dbe9      	blt.n	800a672 <__multadd+0x12>
 800a69e:	2d00      	cmp	r5, #0
 800a6a0:	d01b      	beq.n	800a6da <__multadd+0x7a>
 800a6a2:	68a3      	ldr	r3, [r4, #8]
 800a6a4:	429e      	cmp	r6, r3
 800a6a6:	db12      	blt.n	800a6ce <__multadd+0x6e>
 800a6a8:	6861      	ldr	r1, [r4, #4]
 800a6aa:	9803      	ldr	r0, [sp, #12]
 800a6ac:	3101      	adds	r1, #1
 800a6ae:	f7ff fdf1 	bl	800a294 <_Balloc>
 800a6b2:	6922      	ldr	r2, [r4, #16]
 800a6b4:	1c21      	adds	r1, r4, #0
 800a6b6:	3202      	adds	r2, #2
 800a6b8:	1c07      	adds	r7, r0, #0
 800a6ba:	310c      	adds	r1, #12
 800a6bc:	0092      	lsls	r2, r2, #2
 800a6be:	300c      	adds	r0, #12
 800a6c0:	f7fc fb91 	bl	8006de6 <memcpy>
 800a6c4:	1c21      	adds	r1, r4, #0
 800a6c6:	9803      	ldr	r0, [sp, #12]
 800a6c8:	f7ff fd66 	bl	800a198 <_Bfree>
 800a6cc:	1c3c      	adds	r4, r7, #0
 800a6ce:	1d33      	adds	r3, r6, #4
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	191b      	adds	r3, r3, r4
 800a6d4:	3601      	adds	r6, #1
 800a6d6:	605d      	str	r5, [r3, #4]
 800a6d8:	6126      	str	r6, [r4, #16]
 800a6da:	b005      	add	sp, #20
 800a6dc:	1c20      	adds	r0, r4, #0
 800a6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6e0:	0000ffff 	.word	0x0000ffff

0800a6e4 <__pow5mult>:
 800a6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6e6:	1c17      	adds	r7, r2, #0
 800a6e8:	2203      	movs	r2, #3
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	1c05      	adds	r5, r0, #0
 800a6ee:	1c0e      	adds	r6, r1, #0
 800a6f0:	403a      	ands	r2, r7
 800a6f2:	d007      	beq.n	800a704 <__pow5mult+0x20>
 800a6f4:	4b1c      	ldr	r3, [pc, #112]	; (800a768 <__pow5mult+0x84>)
 800a6f6:	3a01      	subs	r2, #1
 800a6f8:	0092      	lsls	r2, r2, #2
 800a6fa:	58d2      	ldr	r2, [r2, r3]
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f7ff ffaf 	bl	800a660 <__multadd>
 800a702:	1c06      	adds	r6, r0, #0
 800a704:	10bf      	asrs	r7, r7, #2
 800a706:	2f00      	cmp	r7, #0
 800a708:	d02a      	beq.n	800a760 <__pow5mult+0x7c>
 800a70a:	6cac      	ldr	r4, [r5, #72]	; 0x48
 800a70c:	2c00      	cmp	r4, #0
 800a70e:	d10a      	bne.n	800a726 <__pow5mult+0x42>
 800a710:	1c28      	adds	r0, r5, #0
 800a712:	4916      	ldr	r1, [pc, #88]	; (800a76c <__pow5mult+0x88>)
 800a714:	f7ff ff9a 	bl	800a64c <__i2b>
 800a718:	2300      	movs	r3, #0
 800a71a:	64a8      	str	r0, [r5, #72]	; 0x48
 800a71c:	1c04      	adds	r4, r0, #0
 800a71e:	6003      	str	r3, [r0, #0]
 800a720:	e001      	b.n	800a726 <__pow5mult+0x42>
 800a722:	9801      	ldr	r0, [sp, #4]
 800a724:	1c04      	adds	r4, r0, #0
 800a726:	07fb      	lsls	r3, r7, #31
 800a728:	d50a      	bpl.n	800a740 <__pow5mult+0x5c>
 800a72a:	1c31      	adds	r1, r6, #0
 800a72c:	1c22      	adds	r2, r4, #0
 800a72e:	1c28      	adds	r0, r5, #0
 800a730:	f7ff fef6 	bl	800a520 <__multiply>
 800a734:	1c31      	adds	r1, r6, #0
 800a736:	9001      	str	r0, [sp, #4]
 800a738:	1c28      	adds	r0, r5, #0
 800a73a:	f7ff fd2d 	bl	800a198 <_Bfree>
 800a73e:	9e01      	ldr	r6, [sp, #4]
 800a740:	107f      	asrs	r7, r7, #1
 800a742:	2f00      	cmp	r7, #0
 800a744:	d00c      	beq.n	800a760 <__pow5mult+0x7c>
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	9301      	str	r3, [sp, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1e9      	bne.n	800a722 <__pow5mult+0x3e>
 800a74e:	1c28      	adds	r0, r5, #0
 800a750:	1c21      	adds	r1, r4, #0
 800a752:	1c22      	adds	r2, r4, #0
 800a754:	f7ff fee4 	bl	800a520 <__multiply>
 800a758:	9b01      	ldr	r3, [sp, #4]
 800a75a:	6020      	str	r0, [r4, #0]
 800a75c:	6003      	str	r3, [r0, #0]
 800a75e:	e7e1      	b.n	800a724 <__pow5mult+0x40>
 800a760:	b003      	add	sp, #12
 800a762:	1c30      	adds	r0, r6, #0
 800a764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a766:	46c0      	nop			; (mov r8, r8)
 800a768:	0800c3a0 	.word	0x0800c3a0
 800a76c:	00000271 	.word	0x00000271

0800a770 <__sclose>:
 800a770:	b508      	push	{r3, lr}
 800a772:	230e      	movs	r3, #14
 800a774:	5ec9      	ldrsh	r1, [r1, r3]
 800a776:	f000 f887 	bl	800a888 <_close_r>
 800a77a:	bd08      	pop	{r3, pc}

0800a77c <__sseek>:
 800a77c:	b538      	push	{r3, r4, r5, lr}
 800a77e:	1c0c      	adds	r4, r1, #0
 800a780:	250e      	movs	r5, #14
 800a782:	5f49      	ldrsh	r1, [r1, r5]
 800a784:	f000 f908 	bl	800a998 <_lseek_r>
 800a788:	89a2      	ldrh	r2, [r4, #12]
 800a78a:	1c43      	adds	r3, r0, #1
 800a78c:	d103      	bne.n	800a796 <__sseek+0x1a>
 800a78e:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <__sseek+0x28>)
 800a790:	401a      	ands	r2, r3
 800a792:	81a2      	strh	r2, [r4, #12]
 800a794:	e004      	b.n	800a7a0 <__sseek+0x24>
 800a796:	2380      	movs	r3, #128	; 0x80
 800a798:	015b      	lsls	r3, r3, #5
 800a79a:	4313      	orrs	r3, r2
 800a79c:	81a3      	strh	r3, [r4, #12]
 800a79e:	6520      	str	r0, [r4, #80]	; 0x50
 800a7a0:	bd38      	pop	{r3, r4, r5, pc}
 800a7a2:	46c0      	nop			; (mov r8, r8)
 800a7a4:	ffffefff 	.word	0xffffefff

0800a7a8 <__swrite>:
 800a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7aa:	1c1f      	adds	r7, r3, #0
 800a7ac:	898b      	ldrh	r3, [r1, #12]
 800a7ae:	1c05      	adds	r5, r0, #0
 800a7b0:	1c0c      	adds	r4, r1, #0
 800a7b2:	1c16      	adds	r6, r2, #0
 800a7b4:	05da      	lsls	r2, r3, #23
 800a7b6:	d505      	bpl.n	800a7c4 <__swrite+0x1c>
 800a7b8:	230e      	movs	r3, #14
 800a7ba:	5ec9      	ldrsh	r1, [r1, r3]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	2302      	movs	r3, #2
 800a7c0:	f000 f8ea 	bl	800a998 <_lseek_r>
 800a7c4:	89a2      	ldrh	r2, [r4, #12]
 800a7c6:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <__swrite+0x34>)
 800a7c8:	1c28      	adds	r0, r5, #0
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	81a3      	strh	r3, [r4, #12]
 800a7ce:	220e      	movs	r2, #14
 800a7d0:	5ea1      	ldrsh	r1, [r4, r2]
 800a7d2:	1c3b      	adds	r3, r7, #0
 800a7d4:	1c32      	adds	r2, r6, #0
 800a7d6:	f000 f817 	bl	800a808 <_write_r>
 800a7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7dc:	ffffefff 	.word	0xffffefff

0800a7e0 <__sread>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	1c0c      	adds	r4, r1, #0
 800a7e4:	250e      	movs	r5, #14
 800a7e6:	5f49      	ldrsh	r1, [r1, r5]
 800a7e8:	f000 f8ea 	bl	800a9c0 <_read_r>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	db03      	blt.n	800a7f8 <__sread+0x18>
 800a7f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a7f2:	181b      	adds	r3, r3, r0
 800a7f4:	6523      	str	r3, [r4, #80]	; 0x50
 800a7f6:	e003      	b.n	800a800 <__sread+0x20>
 800a7f8:	89a2      	ldrh	r2, [r4, #12]
 800a7fa:	4b02      	ldr	r3, [pc, #8]	; (800a804 <__sread+0x24>)
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	81a3      	strh	r3, [r4, #12]
 800a800:	bd38      	pop	{r3, r4, r5, pc}
 800a802:	46c0      	nop			; (mov r8, r8)
 800a804:	ffffefff 	.word	0xffffefff

0800a808 <_write_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4c08      	ldr	r4, [pc, #32]	; (800a82c <_write_r+0x24>)
 800a80c:	1c05      	adds	r5, r0, #0
 800a80e:	2000      	movs	r0, #0
 800a810:	6020      	str	r0, [r4, #0]
 800a812:	1c08      	adds	r0, r1, #0
 800a814:	1c11      	adds	r1, r2, #0
 800a816:	1c1a      	adds	r2, r3, #0
 800a818:	f7f7 ff72 	bl	8002700 <_write>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	d103      	bne.n	800a828 <_write_r+0x20>
 800a820:	6823      	ldr	r3, [r4, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d000      	beq.n	800a828 <_write_r+0x20>
 800a826:	602b      	str	r3, [r5, #0]
 800a828:	bd38      	pop	{r3, r4, r5, pc}
 800a82a:	46c0      	nop			; (mov r8, r8)
 800a82c:	200018b4 	.word	0x200018b4

0800a830 <_calloc_r>:
 800a830:	b510      	push	{r4, lr}
 800a832:	4351      	muls	r1, r2
 800a834:	f7fc f8ac 	bl	8006990 <_malloc_r>
 800a838:	1c04      	adds	r4, r0, #0
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d022      	beq.n	800a884 <_calloc_r+0x54>
 800a83e:	1c03      	adds	r3, r0, #0
 800a840:	3b08      	subs	r3, #8
 800a842:	685a      	ldr	r2, [r3, #4]
 800a844:	2303      	movs	r3, #3
 800a846:	439a      	bics	r2, r3
 800a848:	3a04      	subs	r2, #4
 800a84a:	2a24      	cmp	r2, #36	; 0x24
 800a84c:	d817      	bhi.n	800a87e <_calloc_r+0x4e>
 800a84e:	1c03      	adds	r3, r0, #0
 800a850:	2a13      	cmp	r2, #19
 800a852:	d90e      	bls.n	800a872 <_calloc_r+0x42>
 800a854:	2100      	movs	r1, #0
 800a856:	c002      	stmia	r0!, {r1}
 800a858:	1d03      	adds	r3, r0, #4
 800a85a:	6061      	str	r1, [r4, #4]
 800a85c:	2a1b      	cmp	r2, #27
 800a85e:	d908      	bls.n	800a872 <_calloc_r+0x42>
 800a860:	6041      	str	r1, [r0, #4]
 800a862:	1d18      	adds	r0, r3, #4
 800a864:	6059      	str	r1, [r3, #4]
 800a866:	1d03      	adds	r3, r0, #4
 800a868:	2a24      	cmp	r2, #36	; 0x24
 800a86a:	d102      	bne.n	800a872 <_calloc_r+0x42>
 800a86c:	6041      	str	r1, [r0, #4]
 800a86e:	6059      	str	r1, [r3, #4]
 800a870:	3308      	adds	r3, #8
 800a872:	2100      	movs	r1, #0
 800a874:	1c1a      	adds	r2, r3, #0
 800a876:	c202      	stmia	r2!, {r1}
 800a878:	6059      	str	r1, [r3, #4]
 800a87a:	6051      	str	r1, [r2, #4]
 800a87c:	e002      	b.n	800a884 <_calloc_r+0x54>
 800a87e:	2100      	movs	r1, #0
 800a880:	f7fc fad5 	bl	8006e2e <memset>
 800a884:	1c20      	adds	r0, r4, #0
 800a886:	bd10      	pop	{r4, pc}

0800a888 <_close_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4c07      	ldr	r4, [pc, #28]	; (800a8a8 <_close_r+0x20>)
 800a88c:	2300      	movs	r3, #0
 800a88e:	1c05      	adds	r5, r0, #0
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	1c08      	adds	r0, r1, #0
 800a894:	f7f7 ff24 	bl	80026e0 <_close>
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	d103      	bne.n	800a8a4 <_close_r+0x1c>
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d000      	beq.n	800a8a4 <_close_r+0x1c>
 800a8a2:	602b      	str	r3, [r5, #0]
 800a8a4:	bd38      	pop	{r3, r4, r5, pc}
 800a8a6:	46c0      	nop			; (mov r8, r8)
 800a8a8:	200018b4 	.word	0x200018b4

0800a8ac <_fclose_r>:
 800a8ac:	b570      	push	{r4, r5, r6, lr}
 800a8ae:	1c05      	adds	r5, r0, #0
 800a8b0:	1c0c      	adds	r4, r1, #0
 800a8b2:	2900      	cmp	r1, #0
 800a8b4:	d00f      	beq.n	800a8d6 <_fclose_r+0x2a>
 800a8b6:	f7ff f911 	bl	8009adc <__sfp_lock_acquire>
 800a8ba:	2d00      	cmp	r5, #0
 800a8bc:	d005      	beq.n	800a8ca <_fclose_r+0x1e>
 800a8be:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d102      	bne.n	800a8ca <_fclose_r+0x1e>
 800a8c4:	1c28      	adds	r0, r5, #0
 800a8c6:	f7ff f937 	bl	8009b38 <__sinit>
 800a8ca:	220c      	movs	r2, #12
 800a8cc:	5ea3      	ldrsh	r3, [r4, r2]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d103      	bne.n	800a8da <_fclose_r+0x2e>
 800a8d2:	f7ff f904 	bl	8009ade <__sfp_lock_release>
 800a8d6:	2600      	movs	r6, #0
 800a8d8:	e02d      	b.n	800a936 <_fclose_r+0x8a>
 800a8da:	1c28      	adds	r0, r5, #0
 800a8dc:	1c21      	adds	r1, r4, #0
 800a8de:	f7ff f877 	bl	80099d0 <_fflush_r>
 800a8e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a8e4:	1c06      	adds	r6, r0, #0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d006      	beq.n	800a8f8 <_fclose_r+0x4c>
 800a8ea:	1c28      	adds	r0, r5, #0
 800a8ec:	69e1      	ldr	r1, [r4, #28]
 800a8ee:	4798      	blx	r3
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	da01      	bge.n	800a8f8 <_fclose_r+0x4c>
 800a8f4:	2601      	movs	r6, #1
 800a8f6:	4276      	negs	r6, r6
 800a8f8:	89a3      	ldrh	r3, [r4, #12]
 800a8fa:	061a      	lsls	r2, r3, #24
 800a8fc:	d503      	bpl.n	800a906 <_fclose_r+0x5a>
 800a8fe:	1c28      	adds	r0, r5, #0
 800a900:	6921      	ldr	r1, [r4, #16]
 800a902:	f7ff f993 	bl	8009c2c <_free_r>
 800a906:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a908:	2900      	cmp	r1, #0
 800a90a:	d008      	beq.n	800a91e <_fclose_r+0x72>
 800a90c:	1c23      	adds	r3, r4, #0
 800a90e:	3340      	adds	r3, #64	; 0x40
 800a910:	4299      	cmp	r1, r3
 800a912:	d002      	beq.n	800a91a <_fclose_r+0x6e>
 800a914:	1c28      	adds	r0, r5, #0
 800a916:	f7ff f989 	bl	8009c2c <_free_r>
 800a91a:	2300      	movs	r3, #0
 800a91c:	6323      	str	r3, [r4, #48]	; 0x30
 800a91e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a920:	2900      	cmp	r1, #0
 800a922:	d004      	beq.n	800a92e <_fclose_r+0x82>
 800a924:	1c28      	adds	r0, r5, #0
 800a926:	f7ff f981 	bl	8009c2c <_free_r>
 800a92a:	2300      	movs	r3, #0
 800a92c:	6463      	str	r3, [r4, #68]	; 0x44
 800a92e:	2300      	movs	r3, #0
 800a930:	81a3      	strh	r3, [r4, #12]
 800a932:	f7ff f8d4 	bl	8009ade <__sfp_lock_release>
 800a936:	1c30      	adds	r0, r6, #0
 800a938:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a93c <fclose>:
 800a93c:	b508      	push	{r3, lr}
 800a93e:	4b03      	ldr	r3, [pc, #12]	; (800a94c <fclose+0x10>)
 800a940:	1c01      	adds	r1, r0, #0
 800a942:	6818      	ldr	r0, [r3, #0]
 800a944:	f7ff ffb2 	bl	800a8ac <_fclose_r>
 800a948:	bd08      	pop	{r3, pc}
 800a94a:	46c0      	nop			; (mov r8, r8)
 800a94c:	20000e88 	.word	0x20000e88

0800a950 <_fstat_r>:
 800a950:	b538      	push	{r3, r4, r5, lr}
 800a952:	4c07      	ldr	r4, [pc, #28]	; (800a970 <_fstat_r+0x20>)
 800a954:	2300      	movs	r3, #0
 800a956:	1c05      	adds	r5, r0, #0
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	1c08      	adds	r0, r1, #0
 800a95c:	1c11      	adds	r1, r2, #0
 800a95e:	f7f7 fec2 	bl	80026e6 <_fstat>
 800a962:	1c43      	adds	r3, r0, #1
 800a964:	d103      	bne.n	800a96e <_fstat_r+0x1e>
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d000      	beq.n	800a96e <_fstat_r+0x1e>
 800a96c:	602b      	str	r3, [r5, #0]
 800a96e:	bd38      	pop	{r3, r4, r5, pc}
 800a970:	200018b4 	.word	0x200018b4

0800a974 <_isatty_r>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	4c07      	ldr	r4, [pc, #28]	; (800a994 <_isatty_r+0x20>)
 800a978:	2300      	movs	r3, #0
 800a97a:	1c05      	adds	r5, r0, #0
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	1c08      	adds	r0, r1, #0
 800a980:	f7f7 feb6 	bl	80026f0 <_isatty>
 800a984:	1c43      	adds	r3, r0, #1
 800a986:	d103      	bne.n	800a990 <_isatty_r+0x1c>
 800a988:	6823      	ldr	r3, [r4, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d000      	beq.n	800a990 <_isatty_r+0x1c>
 800a98e:	602b      	str	r3, [r5, #0]
 800a990:	bd38      	pop	{r3, r4, r5, pc}
 800a992:	46c0      	nop			; (mov r8, r8)
 800a994:	200018b4 	.word	0x200018b4

0800a998 <_lseek_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	4c08      	ldr	r4, [pc, #32]	; (800a9bc <_lseek_r+0x24>)
 800a99c:	1c05      	adds	r5, r0, #0
 800a99e:	2000      	movs	r0, #0
 800a9a0:	6020      	str	r0, [r4, #0]
 800a9a2:	1c08      	adds	r0, r1, #0
 800a9a4:	1c11      	adds	r1, r2, #0
 800a9a6:	1c1a      	adds	r2, r3, #0
 800a9a8:	f7f7 fea4 	bl	80026f4 <_lseek>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	d103      	bne.n	800a9b8 <_lseek_r+0x20>
 800a9b0:	6823      	ldr	r3, [r4, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d000      	beq.n	800a9b8 <_lseek_r+0x20>
 800a9b6:	602b      	str	r3, [r5, #0]
 800a9b8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ba:	46c0      	nop			; (mov r8, r8)
 800a9bc:	200018b4 	.word	0x200018b4

0800a9c0 <_read_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4c08      	ldr	r4, [pc, #32]	; (800a9e4 <_read_r+0x24>)
 800a9c4:	1c05      	adds	r5, r0, #0
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	6020      	str	r0, [r4, #0]
 800a9ca:	1c08      	adds	r0, r1, #0
 800a9cc:	1c11      	adds	r1, r2, #0
 800a9ce:	1c1a      	adds	r2, r3, #0
 800a9d0:	f7f7 fe93 	bl	80026fa <_read>
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	d103      	bne.n	800a9e0 <_read_r+0x20>
 800a9d8:	6823      	ldr	r3, [r4, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d000      	beq.n	800a9e0 <_read_r+0x20>
 800a9de:	602b      	str	r3, [r5, #0]
 800a9e0:	bd38      	pop	{r3, r4, r5, pc}
 800a9e2:	46c0      	nop			; (mov r8, r8)
 800a9e4:	200018b4 	.word	0x200018b4
 800a9e8:	08000ac8 	.word	0x08000ac8
 800a9ec:	08000be0 	.word	0x08000be0
 800a9f0:	08000c14 	.word	0x08000c14
 800a9f4:	08000c1e 	.word	0x08000c1e
 800a9f8:	08000c14 	.word	0x08000c14
 800a9fc:	08000c8a 	.word	0x08000c8a
 800aa00:	08000c14 	.word	0x08000c14
 800aa04:	08000c1e 	.word	0x08000c1e
 800aa08:	08000be0 	.word	0x08000be0
 800aa0c:	08000be0 	.word	0x08000be0
 800aa10:	08000c8a 	.word	0x08000c8a
 800aa14:	08000c1e 	.word	0x08000c1e
 800aa18:	08000c80 	.word	0x08000c80
 800aa1c:	08000c80 	.word	0x08000c80
 800aa20:	08000c80 	.word	0x08000c80
 800aa24:	08000c6c 	.word	0x08000c6c
 800aa28:	080012ac 	.word	0x080012ac
 800aa2c:	080014a2 	.word	0x080014a2
 800aa30:	080014a2 	.word	0x080014a2
 800aa34:	08001498 	.word	0x08001498
 800aa38:	08001426 	.word	0x08001426
 800aa3c:	08001426 	.word	0x08001426
 800aa40:	080014c6 	.word	0x080014c6
 800aa44:	08001498 	.word	0x08001498
 800aa48:	08001426 	.word	0x08001426
 800aa4c:	080014c6 	.word	0x080014c6
 800aa50:	08001426 	.word	0x08001426
 800aa54:	08001498 	.word	0x08001498
 800aa58:	080014be 	.word	0x080014be
 800aa5c:	080014be 	.word	0x080014be
 800aa60:	080014be 	.word	0x080014be
 800aa64:	080014aa 	.word	0x080014aa

0800aa68 <spi_enc28j60>:
 800aa68:	07040004 41140000                       .......A

0800aa70 <adc_init>:
 800aa70:	00000004 00000000 00000008 00000001     ................
 800aa80:	0000000c 00001008 00000010 80000000     ................
 800aa90:	00000014 00000000 00000028 00000000     ........(.......

0800aaa0 <adc_wait_for_calibrate>:
 800aaa0:	00000008 80000000 00000000              ............

0800aaac <general_purpose_io_a>:
 800aaac:	00000000 28150300 00000008 cfffffff     .......(........
 800aabc:	0000000c 24000000 00000020 40000000     .......$ ......@
 800aacc:	00000024 20000222                       $...".. 

0800aad4 <adc_init2>:
	...

0800aadc <reset_and_clock_control>:
 800aadc:	00000014 005e0000 005e0000 00000018     ......^...^.....
 800aaec:	00015a01 00015a01 0000001c 20024103     .Z...Z.......A. 
 800aafc:	20024103                                .A. 

0800ab00 <dri_tables>:
 800ab00:	40021000 00030002 0800aadc e000e100     ...@............
 800ab10:	00060002 0800ac3c 40012400 00010001     ....<....$.@....
 800ab20:	0800ac84 40003800 00020000 0800aa68     .....8.@....h...
 800ab30:	48000000 00050001 0800aaac 48000400     ...H...........H
 800ab40:	00050001 0800abe4 48000800 00020001     ...........H....
 800ab50:	0800ac0c 48000c00 00020001 0800ac1c     .......H........
 800ab60:	48001400 00020001 0800ac2c 40012c00     ...H....,....,.@
 800ab70:	00080000 0800ac8c 40000000 00080000     ...........@....
 800ab80:	0800ac8c 40000400 00080000 0800ac8c     .......@........
 800ab90:	40002000 00080000 0800ac8c 40014000     . .@.........@.@
 800aba0:	00080000 0800ac8c 40013800 00030001     .........8.@....
 800abb0:	0800acac 40004400 00030001 0800acac     .....D.@........
 800abc0:	40012400 00010003 0800aaa0 40012400     .$.@.........$.@
 800abd0:	00060001 0800aa70 40012708 00010001     ....p....'.@....
 800abe0:	0800aad4                                ....

0800abe4 <general_purpose_io_b>:
 800abe4:	00000000 aa000000 00000008 ffffffff     ................
 800abf4:	0000000c 20000000 00000020 00112000     .......  .... ..
 800ac04:	00000024 00002211                       $...."..

0800ac0c <general_purpose_io_c>:
 800ac0c:	00000000 00455000 00000008 03ffffff     .....PE.........

0800ac1c <general_purpose_io_d>:
	...
 800ac24:	00000008 ffffffff                       ........

0800ac2c <general_purpose_io_f>:
	...
 800ac34:	00000008 ffffffff                       ........

0800ac3c <nvic>:
 800ac3c:	00000318 00ff0000 00c00000 00000000     ................
 800ac4c:	04000000 04000000 00000318 ff000000     ................
 800ac5c:	c0000000 00000000 08000000 08000000     ................
 800ac6c:	0000031c 000000ff 000000c0 00000000     ................
 800ac7c:	10000000 10000000                       ........

0800ac84 <adc_start_calibrate>:
 800ac84:	00000008 80000000                       ........

0800ac8c <arduino_pwm_output>:
 800ac8c:	00000000 6c6c0018 6c6c001c 11110020     ......ll..ll ...
 800ac9c:	cc000044 017f0028 00ff002c 00810000     D...(...,.......

0800acac <usart_standby>:
 800acac:	00000000 00000024 00000008 00001000     ....$...........
 800acbc:	0000000c 000001a1                       ........

0800acc4 <_ZL6Serial>:
 800acc4:	40004400 20000e90 48000024 48000000     .D.@... $..H...H
 800acd4:	00ffffff 11000000 afffffff a0000000     ................
	...

0800acf4 <_ZL7Serial1>:
 800acf4:	40013800 20000ed8 48000024 48000000     .8.@... $..H...H
 800ad04:	fffff00f 00000110 ffebffff 00280000     ..............(.
	...

0800ad24 <__thread_net_context>:
 800ad24:	20000500 20000000 31485445 6553203a     ... ... ETH1: Se
 800ad34:	6e69646e 64252067 74796220 000a7365     nding %d bytes..
 800ad44:	32485445 6553203a 6e69646e 64252067     ETH2: Sending %d
 800ad54:	74796220 000a7365 5f54454e 5054554f      bytes..NET_OUTP
 800ad64:	203a5455 646e6553 20676e69 62206425     UT: Sending %d b
 800ad74:	73657479 0000000a                       ytes....

0800ad7c <mac_address>:
	...
 800ad84:	74697845 20676e69 68746977 61747320     Exiting with sta
 800ad94:	20737574 0a2e6425 00000000              tus %d......

0800ada0 <__thread_idle_context>:
 800ada0:	2000054c 20000508                       L.. ... 

0800ada8 <enc28j60_init>:
 800ada8:	00000000 00000001 00000002 001a0003     ................
 800adb8:	00000004 001a0005 00000006 00200007     .............. .
 800adc8:	00000008 00000009 00ff000a 0019000b     ................
 800add8:	0000000c 0000000d 003f0028 00300029     ........(.?.).0.
 800ade8:	00f90030 00f70031 00000034 00000035     0...1...4...5...
 800adf8:	00b10038 000d00c0 000000c1 003200c2     8.............2.
 800ae08:	000000c3 001200c4 001200c6 000c00c7     ................
 800ae18:	00ee00ca 000500cb 00dd009b 0007009f     ................
 800ae28:	080035aa 0800313e 08003142 080038ba     .5..>1..B1...8..
 800ae38:	08003b9c 080038ba 08003b9c 080038ba     .;...8...;...8..
 800ae48:	08003746 0800378a 08003870 08003a24     F7...7..p8..$:..
 800ae58:	08003a66 08003aa0 08003ab2 08003a0c     f:...:...:...:..

0800ae68 <uip_broadcast_addr>:
 800ae68:	ffffffff                                ....

0800ae6c <uip_all_zeroes_addr>:
 800ae6c:	00000000 5f706975 68637069 6d75736b     ....uip_ipchksum
 800ae7c:	7573203a 7830206d 78343025 6975000a     : sum 0x%04x..ui
 800ae8c:	70692070 6e65735f 6f6e5f64 3a6e656c     p ip_send_nolen:
 800ae9c:	6b686320 6d756365 25783020 0a783430      chkecum 0x%04x.
 800aeac:	6e655300 676e6964 63617020 2074656b     .Sending packet 
 800aebc:	68746977 6e656c20 20687467 28206425     with length %d (
 800aecc:	0a296425 00000000                       %d).....

0800aed4 <broadcast_ethaddr>:
 800aed4:	ffffffff 0000ffff 6e657645 69742074     ........Event ti
 800aee4:	0072656d 74736552 6f725020 73736563     mer.Rest Process
 800aef4:	50435400 2050492f 63617473 0000006b     .TCP/IP stack...
 800af04:	08005082 08005298 080050ee 08005018     .P...R...P...P..
 800af14:	080050de 0800518e 080050fa 08005142     .P...Q...P..BQ..
 800af24:	08005298 08005298 0800510a 08004ff4     .R...R...Q...O..
 800af34:	08005298 08005004 08005122 08005058     .R...P.."Q..XP..
 800af44:	08005298 08005298 08005298 0800515a     .R...R...R..ZQ..
 800af54:	08005298 08005298 080051a2 08005298     .R...R...Q...R..
 800af64:	08005298 08005298 080051e4 08005286     .R...R...Q...R..
 800af74:	08005298 08005298 08005298 08005298     .R...R...R...R..
 800af84:	08005298 08005298 08005176 54495257     .R...R..vQ..WRIT
 800af94:	204e4554 42207525 74706f20 61656820     TEN %u B opt hea
 800afa4:	0a726564 54504f00 204e4f49 28207525     der..OPTION %u (
 800afb4:	746c6564 75252061 656c202c 7525206e     delta %u, len %u
 800afc4:	4f000a29 4f495450 7974204e 25206570     )..OPTION type %
 800afd4:	64202c75 61746c65 2c752520 6e656c20     u, delta %u, len
 800afe4:	2c752520 72617020 255b2074 5d732a2e      %u, part [%.*s]
 800aff4:	504f000a 4e4f4954 70797420 75252065     ..OPTION type %u
 800b004:	6564202c 2061746c 202c7525 206e656c     , delta %u, len 
 800b014:	000a7525 50416f43 72657620 6e6f6973     %u..CoAP version
 800b024:	73756d20 65622074 54003120 6e656b6f      must be 1.Token
 800b034:	656c2820 7525206e 305b2029 32302578      (len %u) [0x%02
 800b044:	32302558 32302558 32302558 32302558     X%02X%02X%02X%02
 800b054:	32302558 32302558 32302558 000a5d58     X%02X%02X%02X]..
 800b064:	4954504f 25204e4f 64282075 61746c65     OPTION %u (delta
 800b074:	2c752520 6e656c20 29752520 4300203a      %u, len %u): .C
 800b084:	65746e6f 462d746e 616d726f 255b2074     ontent-Format [%
 800b094:	000a5d75 2d78614d 20656741 756c255b     u]..Max-Age [%lu
 800b0a4:	45000a5d 20676154 5b207525 30257830     ]..ETag %u [0x%0
 800b0b4:	30255832 30255832 30255832 30255832     2X%02X%02X%02X%0
 800b0c4:	30255832 30255832 30255832 0a5d5832     2X%02X%02X%02X].
 800b0d4:	63634100 20747065 5d75255b 6649000a     .Accept [%u]..If
 800b0e4:	74614d2d 25206863 305b2075 32302578     -Match %u [0x%02
 800b0f4:	32302558 32302558 32302558 32302558     X%02X%02X%02X%02
 800b104:	32302558 32302558 32302558 000a5d58     X%02X%02X%02X]..
 800b114:	4e2d6649 2d656e6f 6374614d 55000a68     If-None-Match..U
 800b124:	482d6972 2074736f 2a2e255b 000a5d73     ri-Host [%.*s]..
 800b134:	2d697255 74726f50 75255b20 55000a5d     Uri-Port [%u]..U
 800b144:	502d6972 20687461 2a2e255b 000a5d73     ri-Path [%.*s]..
 800b154:	2d697255 72657551 255b2079 5d732a2e     Uri-Query [%.*s]
 800b164:	6f4c000a 69746163 502d6e6f 20687461     ..Location-Path 
 800b174:	2a2e255b 000a5d73 61636f4c 6e6f6974     [%.*s]..Location
 800b184:	6575512d 5b207972 732a2e25 50000a5d     -Query [%.*s]..P
 800b194:	79786f72 6972552d 544f4e20 504d4920     roxy-Uri NOT IMP
 800b1a4:	454d454c 4445544e 2e255b20 0a5d732a     LEMENTED [%.*s].
 800b1b4:	69685400 73692073 63206120 74736e6f     .This is a const
 800b1c4:	6e696172 73206465 65767265 43282072     rained server (C
 800b1d4:	69746e6f 0029696b 6573624f 20657672     ontiki).Observe 
 800b1e4:	756c255b 2b000a5d 6f6c4200 20326b63     [%lu]..+.Block2 
 800b1f4:	756c255b 28207325 42207525 6b6c622f     [%lu%s (%u B/blk
 800b204:	000a5d29 636f6c42 5b20316b 25756c25     )]..Block1 [%lu%
 800b214:	25282073 2f422075 296b6c62 53000a5d     s (%u B/blk)]..S
 800b224:	20657a69 756c255b 75000a5d 6f6e6b6e     ize [%lu]..unkno
 800b234:	28206e77 0a297525 736e5500 6f707075     wn (%u)..Unsuppo
 800b244:	64657472 69726320 61636974 706f206c     rted critical op
 800b254:	6e6f6974 6f442d00 7020656e 69737261     tion.-Done parsi
 800b264:	2d2d676e 2d2d2d2d 2d000a2d 69726553     ng-------..-Seri
 800b274:	7a696c61 20676e69 2044494d 74207525     alizing MID %u t
 800b284:	7025206f 5400202c 6e656b6f 656c2820     o %p, .Token (le
 800b294:	7525206e 25200029 00583230 7265532d     n %u). %02X.-Ser
 800b2a4:	696c6169 676e697a 74706f20 736e6f69     ializing options
 800b2b4:	20746120 0a2d7025 2d664900 656e6f4e      at %p-..If-None
 800b2c4:	74614d2d 5b206863 0a5d7525 73624f00     -Match [%u]..Obs
 800b2d4:	65767265 75255b20 4d000a5d 412d7861     erve [%u]..Max-A
 800b2e4:	5b206567 0a5d7525 6f6c4200 20326b63     ge [%u]..Block2 
 800b2f4:	6f636e65 3a646564 25783020 000a586c     encoded: 0x%lX..
 800b304:	636f6c42 6520316b 646f636e 203a6465     Block1 encoded: 
 800b314:	6c257830 53000a58 20657a69 5d75255b     0x%lX..Size [%u]
 800b324:	7250000a 2d79786f 20697255 2a2e255b     ..Proxy-Uri [%.*
 800b334:	000a5d73 6e6f442d 65732065 6c616972     s]..-Done serial
 800b344:	6e697a69 74612067 2d702520 0a2d2d2d     izing at %p----.
 800b354:	6f442d00 2520656e 20422075 61656828     .-Done %u B (hea
 800b364:	20726564 206e656c 202c7525 6c796170     der len %u, payl
 800b374:	2064616f 206e656c 2d297525 7544000a     oad len %u)-..Du
 800b384:	5b20706d 30257830 25205832 20583230     mp [0x%02X %02X 
 800b394:	58323025 32302520 25202058 20583230     %02X %02X  %02X 
 800b3a4:	58323025 32302520 30252058 0a5d5832     %02X %02X %02X].
 800b3b4:	72655300 696c6169 2064657a 64616568     .Serialized head
 800b3c4:	65207265 65656378 43207364 5f50414f     er exceeds COAP_
 800b3d4:	5f58414d 44414548 535f5245 00455a49     MAX_HEADER_SIZE.
 800b3e4:	6e65732d 44552074 61642050 72676174     -sent UDP datagr
 800b3f4:	28206d61 2d297525 694c000a 6e657473     am (%u)-..Listen
 800b404:	20676e69 70206e6f 2074726f 000a7525     ing on port %u..

0800b414 <coap_rest_implementation>:
 800b414:	0800b9cc 08006105 08005875 080049df     .....a..uX...I..
 800b424:	08004b0f 08005881 08004941 08004951     .K...X..AI..QI..
 800b434:	08004963 08004971 08004a99 08004aaf     cI..qI...J...J..
 800b444:	08004989 0800499d 08004b8d 080049ab     .I...I...K...I..
 800b454:	080049c3 080049cb 08004b31 08004abf     .I...I..1K...J..
 800b464:	08004ad7 080049f3 08004c3f 08004c1f     .J...I..?L...L..
 800b474:	08006115 08006325 00000000 00000000     .a..%c..........
 800b484:	00000045 00000041 00000044 00000042     E...A...D...B...
 800b494:	00000043 00000080 00000081 00000082     C...............
 800b4a4:	00000083 00000084 00000085 00000086     ................
 800b4b4:	0000008d 0000008f 000000a0 000000a1     ................
 800b4c4:	000000a2 000000a3 000000a4 000000a5     ................
 800b4d4:	00000000 00000001 00000002 00000003     ................
 800b4e4:	00000015 00000016 00000017 00000018     ................
 800b4f4:	00000019 0000001a 00000028 00000029     ........(...)...
 800b504:	0000002a 0000002b 0000002c 0000002d     *...+...,...-...
 800b514:	0000002e 0000002f 00000030 00000031     ..../...0...1...
 800b524:	00000032 00000033 75716552 65747365     2...3...Requeste
 800b534:	25232064 2820756c 2044494d 0a297525     d #%lu (MID %u).
 800b544:	72655300 20726576 20746f6e 70736572     .Server not resp
 800b554:	69646e6f 000a676e 65636552 64657669     onding..Received
 800b564:	6c252320 20732575 20752528 65747962      #%lu%s (%u byte
 800b574:	000a2973 4e4f5257 4c422047 204b434f     s)..WRONG BLOCK 
 800b584:	2f756c25 0a756c25 756f4300 6e20646c     %lu/%lu..Could n
 800b594:	6120746f 636f6c6c 20657461 6e617274     ot allocate tran
 800b5a4:	74636173 206e6f69 66667562 53007265     saction buffer.S
 800b5b4:	74726174 20676e69 50416f43 2033312d     tarting CoAP-13 
 800b5c4:	65636572 72657669 0a2e2e2e 6e616800     receiver.....han
 800b5d4:	5f656c64 6f636e69 676e696d 7461645f     dle_incoming_dat
 800b5e4:	3a292861 63657220 65766965 69752064     a(): received ui
 800b5f4:	61645f70 656c6174 75253d6e 72000a20     p_datalen=%u ..r
 800b604:	69656365 676e6976 50445520 74616420     eceiving UDP dat
 800b614:	61726761 7266206d 203a6d6f 30255b00     agram from: .[%0
 800b624:	30257832 253a7832 25783230 3a783230     2x%02x:%02x%02x:
 800b634:	78323025 78323025 3230253a 32302578     %02x%02x:%02x%02
 800b644:	30253a78 30257832 253a7832 25783230     x:%02x%02x:%02x%
 800b654:	3a783230 78323025 78323025 3230253a     02x:%02x%02x:%02
 800b664:	32302578 3a005d78 200a7525 6e654c20     x%02x].:%u.  Len
 800b674:	3a687467 0a752520 61442020 203a6174     gth: %u.  Data: 
 800b684:	00632500 61502020 64657372 2076203a     .%c.  Parsed: v 
 800b694:	202c7525 75252074 6b74202c 7525206c     %u, t %u, tkl %u
 800b6a4:	2063202c 202c7525 2064696d 000a7525     , c %u, mid %u..
 800b6b4:	52552020 25203a4c 0a732a2e 50202000       URL: %.*s..  P
 800b6c4:	6f6c7961 203a6461 732a2e25 6c42000a     ayload: %.*s..Bl
 800b6d4:	776b636f 3a657369 6f6c6220 72206b63     ockwise: block r
 800b6e4:	65757165 25207473 2820756c 252f7525     equest %lu (%u/%
 800b6f4:	40202975 756c2520 74796220 000a7365     u) @ %lu bytes..
 800b704:	636f6c42 4e20316b 4920544f 454c504d     Block1 NOT IMPLE
 800b714:	544e454d 000a4445 6c426f4e 316b636f     MENTED..NoBlock1
 800b724:	70707553 0074726f 636f6c42 7369776b     Support.Blockwis
 800b734:	75203a65 6177616e 72206572 756f7365     e: unaware resou
 800b744:	20656372 68746977 79617020 64616f6c     rce with payload
 800b754:	6e656c20 20687467 252f7525 68000a75      length %u/%u..h
 800b764:	6c646e61 6e695f65 696d6f63 645f676e     andle_incoming_d
 800b774:	28617461 62203a29 6b636f6c 66666f5f     ata(): block_off
 800b784:	20746573 72203d3e 6f707365 2d65736e     set >= response-
 800b794:	7961703e 64616f6c 6e656c5f 6c42000a     >payload_len..Bl
 800b7a4:	4f6b636f 664f7475 706f6353 6c420065     ockOutOfScope.Bl
 800b7b4:	776b636f 3a657369 6f6c6220 69776b63     ockwise: blockwi
 800b7c4:	72206573 756f7365 2c656372 77656e20     se resource, new
 800b7d4:	66666f20 20746573 0a646c25 6f6c4200      offset %ld..Blo
 800b7e4:	69776b63 203a6573 62206f6e 6b636f6c     ckwise: no block
 800b7f4:	74706f20 206e6f69 20726f66 636f6c62      option for bloc
 800b804:	7369776b 65722065 72756f73 202c6563     kwise resource, 
 800b814:	6e697375 6c622067 206b636f 657a6973     using block size
 800b824:	0a752520 536f4e00 69767265 61436563      %u..NoServiceCa
 800b834:	63626c6c 6f4e006b 65657246 42617254     llbck.NoFreeTraB
 800b844:	65666675 65520072 76696563 50206465     uffer.Received P
 800b854:	0a676e69 63655200 65766965 43412064     ing..Received AC
 800b864:	52000a4b 69656365 20646576 0a545352     K..Received RST.
 800b874:	656c4300 6e697261 72742067 61736e61     .Clearing transa
 800b884:	6f697463 6f66206e 616d2072 6c61756e     ction for manual
 800b894:	73657220 736e6f70 52450065 20524f52      response.ERROR 
 800b8a4:	203a7525 000a7325 746c6946 25207265     %u: %s..Filter %
 800b8b4:	203d2073 732a2e25 7268000a 46006665     s = %.*s..href.F
 800b8c4:	65746c69 72203a72 68207365 61207361     ilter: res has a
 800b8d4:	69727474 73252062 73252820 46000a29     ttrib %s (%s)..F
 800b8e4:	65746c69 72203a72 68207365 6d207361     ilter: res has m
 800b8f4:	68637461 6572000a 2f203a73 28207325     atch..res: /%s (
 800b904:	0a297025 3a736f70 64257320 256f202c     %p).pos: s%d, o%
 800b914:	202c646c 0a642562 00732500 3a736572     ld, b%d..%s.res:
 800b924:	45524220 61204b41 73252074 70252820      BREAK at %s (%p
 800b934:	42000a29 25204655 25203a64 0a732a2e     )..BUF %d: %.*s.
 800b944:	6c657700 6e6b5f6c 5f6e776f 65726f63     .well_known_core
 800b954:	6e61685f 72656c64 203a2928 70667562     _handler(): bufp
 800b964:	3d3c736f 72000a30 203a7365 454e4f44     os<=0..res: DONE
 800b974:	6572000a 4d203a73 2045524f 25207461     ..res: MORE at %
 800b984:	25282073 000a2970 746c6946 203a7265     s (%p)..Filter: 
 800b994:	20736572 20736168 66657270 25207869     res has prefix %
 800b9a4:	43000a73 2050416f 65636552 72657669     s..CoAP Receiver
 800b9b4:	65772e00 6b2d6c6c 6e776f6e 726f632f     ..well-known/cor
 800b9c4:	74630065 0030343d 50416f43 0033312d     e.ct=40.CoAP-13.
 800b9d4:	65646441 75252064 0075252f 4d6f6f54     Added %u/%u.TooM
 800b9e4:	4f796e61 72657362 73726576 00642500     anyObservers.%d.
 800b9f4:	6574227b 7265706d 72757461 223a2265     {"temperature":"
 800ba04:	7d226425 70755300 74726f70 20676e69     %d"}.Supporting 
 800ba14:	746e6f63 2d746e65 65707974 65742073     content-types te
 800ba24:	702f7478 6e69616c 646e6120 70706120     xt/plain and app
 800ba34:	6163696c 6e6f6974 6f736a2f 3025006e     lication/json.%0
 800ba44:	252d7838 2d783830 78383025 63227b00     8x-%08x-%08x.{"c
 800ba54:	692d7570 223a2264 78383025 3830252d     pu-id":"%08x-%08
 800ba64:	30252d78 7d227838 6e656c00 6c654800     x-%08x"}.len.Hel
 800ba74:	57206f6c 646c726f 42412021 46454443     lo World! ABCDEF
 800ba84:	4a494847 4e4d4c4b 5251504f 56555453     GHIJKLMNOPQRSTUV
 800ba94:	5a595857 64636261 68676665 6c6b6a69     WXYZabcdefghijkl
 800baa4:	706f6e6d 74737271 78777675 65680079     mnopqrstuvwxy.he
 800bab4:	006f6c6c 6c746974 48223d65 6f6c6c65     llo.title="Hello
 800bac4:	726f7720 203a646c 6e656c3f 2e2e303d      world: ?len=0..
 800bad4:	74723b22 6554223d 00227478 736e6573     ";rt="Text".sens
 800bae4:	2f73726f 69757063 69740064 3d656c74     ors/cpuid.title=
 800baf4:	55504322 2244492d 3d74723b 55504322     "CPU-ID";rt="CPU
 800bb04:	2244492d 6e657300 73726f73 6d65742f     -ID".sensors/tem
 800bb14:	61726570 65727574 74697400 223d656c     perature.title="
 800bb24:	70696843 746e6920 616e7265 6574206c     Chip internal te
 800bb34:	7265706d 72757461 723b2265 54223d74     mperature";rt="T
 800bb44:	65706d65 75746172 00226572 69627245     emperature".Erbi
 800bb54:	45206d75 706d6178 5320656c 65767265     um Example Serve
 800bb64:	0a0d0072 6c654800 2c6f6c00 6f570020     r....Hel.lo, .Wo
 800bb74:	21646c72 00000000                       rld!....

0800bb7c <_ZL6Serial>:
 800bb7c:	40004400 20000e90 48000024 48000000     .D.@... $..H...H
 800bb8c:	00ffffff 11000000 afffffff a0000000     ................
	...

0800bbac <_ZL20stm32_pinDescription>:
 800bbac:	48000000 48000018 48000028 48000010     ...H...H(..H...H
 800bbbc:	40012c00 40012c3c ff0a0400 48000000     .,.@<,.@.......H
 800bbcc:	48000018 48000028 48000010 40012c00     ...H(..H...H.,.@
 800bbdc:	40012c38 ff090200 48000000 48000018     8,.@.......H...H
 800bbec:	48000028 48000010 40012c00 40012c34     (..H...H.,.@4,.@
 800bbfc:	ff080100 48000800 48000818 48000828     .......H...H(..H
 800bc0c:	48000810 40000400 40000440 ff090200     ...H...@@..@....
 800bc1c:	48000800 48000818 48000828 48000810     ...H...H(..H...H
 800bc2c:	40000400 4000043c ff080100 48000000     ...@<..@.......H
 800bc3c:	48000018 48000028 48000010 40002000     ...H(..H...H. .@
 800bc4c:	40002034 ff070080 48000000 48000018     4 .@.......H...H
 800bc5c:	48000028 48000010 40014000 40014038     (..H...H.@.@8@.@
 800bc6c:	ff030008 48000000 48000018 48000028     .......H...H(..H
 800bc7c:	48000010 40014000 40014034 ff020004     ...H.@.@4@.@....
 800bc8c:	48000400 48000418 48000428 48000410     ...H...H(..H...H
 800bc9c:	40000000 4000003c ff0a0400 48000400     ...@<..@.......H
 800bcac:	48000418 48000428 48000410 40000000     ...H(..H...H...@
 800bcbc:	40000040 ff0b0800 48000000 48000018     @..@.......H...H
 800bccc:	48000028 48000010 40000000 40000034     (..H...H...@4..@
 800bcdc:	ff0f8000 48000400 48000418 48000428     .......H...H(..H
 800bcec:	48000410 40000400 40000438 ff050020     ...H...@8..@ ...
 800bcfc:	48000400 48000418 48000428 48000410     ...H...H(..H...H
 800bd0c:	40000400 40000434 ff040010 48000400     ...@4..@.......H
 800bd1c:	48000418 48000428 48000410 40000000     ...H(..H...H...@
 800bd2c:	40000038 ff030008 48000800 48000818     8..@.......H...H
 800bd3c:	48000828 48000810 40000400 40000434     (..H...H...@4..@
 800bd4c:	ff060040 48000800 48000818 48000828     @......H...H(..H
 800bd5c:	48000810 40000400 40000434 ff070080     ...H...@4..@....
 800bd6c:	48000000 48000018 48000028 48000010     ...H...H(..H...H
 800bd7c:	00000000 00000034 ff0e4000 48000c00     ....4....@.....H
 800bd8c:	48000c18 48000c28 48000c10 40000400     ...H(..H...H...@
 800bd9c:	40000434 ff020004 48000400 48000418     4..@.......H...H
 800bdac:	48000428 48000410 40014400 40014434     (..H...H.D.@4D.@
 800bdbc:	ff060040 48000400 48000418 48000428     @......H...H(..H
 800bdcc:	48000410 40014800 40014834 ff070080     ...H.H.@4H.@....
 800bddc:	48000400 48000418 48000428 48000410     ...H...H(..H...H
 800bdec:	40014800 40014834 ff090200 48000400     .H.@4H.@.......H
 800bdfc:	48000418 48000428 48000410 40014400     ...H(..H...H.D.@
 800be0c:	40014434 ff080100 48000800 48000818     4D.@.......H...H
 800be1c:	48000828 48000810 00000000 00000034     (..H...H....4...
 800be2c:	0a000001 48000800 48000818 48000828     .......H...H(..H
 800be3c:	48000810 00000000 00000034 0b010002     ...H....4.......
 800be4c:	48000800 48000818 48000828 48000810     ...H...H(..H...H
 800be5c:	00000000 00000034 0c020004 48000800     ....4..........H
 800be6c:	48000818 48000828 48000810 00000000     ...H(..H...H....
 800be7c:	00000034 0d030008 48000000 48000018     4..........H...H
 800be8c:	48000028 48000010 40000000 40000034     (..H...H...@4..@
 800be9c:	05050020 48000000 48000018 48000028      ......H...H(..H
 800beac:	48000010 40000400 40000434 06060040     ...H...@4..@@...
 800bebc:	48000000 48000018 48000028 48000010     ...H...H(..H...H
 800becc:	40000000 40000034 00000001 48000000     ...@4..@.......H
 800bedc:	48000018 48000028 48000010 40000000     ...H(..H...H...@
 800beec:	40000038 01010002 48000800 48000818     8..@.......H...H
 800befc:	48000828 48000810 00000000 00000034     (..H...H....4...
 800bf0c:	0e040010 48000800 48000818 48000828     .......H...H(..H
 800bf1c:	48000810 00000000 00000034 0f050020     ...H....4... ...
 800bf2c:	48000400 48000418 48000428 48000410     ...H...H(..H...H
 800bf3c:	40000400 4000043c 08000001 48000400     ...@<..@.......H
 800bf4c:	48000418 48000428 48000410 40000400     ...H(..H...H...@
 800bf5c:	40000440 09010002 48000000 48000018     @..@.......H...H
 800bf6c:	48000028 48000010 40002000 40002034     (..H...H. .@4 .@
 800bf7c:	ff040010 0800767a 08007c94 08007c94     ....zv...|...|..
 800bf8c:	0800768a 08007c94 08007c94 08007c94     .v...|...|...|..
 800bf9c:	08007c94 08007c94 08007c94 0800768e     .|...|...|...v..
 800bfac:	080076a2 08007c94 08007676 080076ae     .v...|..vv...v..
 800bfbc:	08007c94 080076ea 080076ee 080076ee     .|...v...v...v..
 800bfcc:	080076ee 080076ee 080076ee 080076ee     .v...v...v...v..
 800bfdc:	080076ee 080076ee 080076ee 08007c94     .v...v...v...|..
 800bfec:	08007c94 08007c94 08007c94 08007c94     .|...|...|...|..
 800bffc:	08007c94 08007c94 08007c94 08007c94     .|...|...|...|..
 800c00c:	08007c94 08007732 08007778 08007c94     .|..2w..xw...|..
 800c01c:	08007778 08007c94 08007c94 08007c94     xw...|...|...|..
 800c02c:	08007c94 0800770e 08007c94 08007c94     .|...w...|...|..
 800c03c:	08007ab4 08007c94 08007c94 08007c94     .z...|...|...|..
 800c04c:	08007c94 08007c94 08007b4e 08007c94     .|...|..N{...|..
 800c05c:	08007c94 0800766c 08007c94 08007c94     .|..lv...|...|..
 800c06c:	08007c94 08007c94 08007c94 08007c94     .|...|...|...|..
 800c07c:	08007c94 08007c94 08007c94 08007c94     .|...|...|...|..
 800c08c:	0800771c 0800773c 08007778 08007778     .w..<w..xw..xw..
 800c09c:	08007778 08007712 0800773c 08007c94     xw...w..<w...|..
 800c0ac:	08007c94 08007716 08007c94 08007a8a     .|...w...|...z..
 800c0bc:	08007abe 08007ae0 08007716 08007c94     .z...z...w...|..
 800c0cc:	08007b00 08007c94 08007b58 08007c94     .{...|..X{...|..
 800c0dc:	08007c94 08007b7a                       .|..z{..

0800c0e4 <zeroes.3588>:
 800c0e4:	30303030 30303030 30303030 30303030     0000000000000000
 800c0f4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800c104:	464e4900 666e6900 4e414e00 6e616e00     .INF.inf.NAN.nan
 800c114:	32313000 36353433 61393837 65646362     .0123456789abcde
 800c124:	00000066                                f...

0800c128 <blanks.3587>:
 800c128:	20202020 20202020 20202020 20202020                     

0800c138 <blanks.3507>:
 800c138:	20202020 20202020 20202020 20202020                     

0800c148 <zeroes.3508>:
 800c148:	30303030 30303030 30303030 30303030     0000000000000000

0800c158 <_ctype_>:
 800c158:	20202000 20202020 28282020 20282828     .         ((((( 
 800c168:	20202020 20202020 20202020 20202020                     
 800c178:	10108820 10101010 10101010 10101010      ...............
 800c188:	04040410 04040404 10040404 10101010     ................
 800c198:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800c1a8:	01010101 01010101 01010101 10101010     ................
 800c1b8:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800c1c8:	02020202 02020202 02020202 10101010     ................
 800c1d8:	00000020 00000000 00000000 00000000      ...............
	...
 800c25c:	69666e49 7974696e 4e614e00 00004300     Infinity.NaN.C..

0800c26c <lconv>:
 800c26c:	0800c29c 0800bb68 0800bb68 0800bb68     ....h...h...h...
 800c27c:	0800bb68 0800bb68 0800bb68 0800bb68     h...h...h...h...
 800c28c:	0800bb68 0800bb68 ffffffff ffffffff     h...h...........
 800c29c:	5349002e 38382d4f 312d3935 00000000     ..ISO-8859-1....
 800c2ac:	00000000                                ....

0800c2b0 <__mprec_tens>:
 800c2b0:	00000000 3ff00000 00000000 40240000     .......?......$@
 800c2c0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800c2d0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800c2e0:	00000000 412e8480 00000000 416312d0     .......A......cA
 800c2f0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800c300:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800c310:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800c320:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800c330:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800c340:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800c350:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800c360:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800c370:	79d99db4 44ea7843                       ...yCx.D

0800c378 <__mprec_bigtens>:
 800c378:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800c388:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800c398:	7f73bf3c 75154fdd                       <.s..O.u

0800c3a0 <p05.2435>:
 800c3a0:	00000005 00000019 0000007d              ........}...

0800c3ac <_init>:
 800c3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ae:	46c0      	nop			; (mov r8, r8)
 800c3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3b2:	bc08      	pop	{r3}
 800c3b4:	469e      	mov	lr, r3
 800c3b6:	4770      	bx	lr

0800c3b8 <__init_array_start>:
 800c3b8:	080000d9 	.word	0x080000d9
 800c3bc:	080021f9 	.word	0x080021f9
 800c3c0:	08002545 	.word	0x08002545

0800c3c4 <_fini>:
 800c3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c6:	46c0      	nop			; (mov r8, r8)
 800c3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ca:	bc08      	pop	{r3}
 800c3cc:	469e      	mov	lr, r3
 800c3ce:	4770      	bx	lr
